

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon May 29 01:11:42 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 1.42
    65                           ; Generated 13/04/2017 GMT
    66                           ; 
    67                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F2550 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	nvCOMRAM
   100  000035                     __pnvCOMRAM:
   101                           	opt stack 0
   102  000035                     _current_type:
   103                           	opt stack 0
   104  000035                     	ds	1
   105  000036                     _timer1_up_limit_min:
   106                           	opt stack 0
   107  000036                     	ds	1
   108  000037                     _timer1_up_limit_sec:
   109                           	opt stack 0
   110  000037                     	ds	1
   111                           
   112                           	psect	nvBANK0
   113  0000D4                     __pnvBANK0:
   114                           	opt stack 0
   115  0000D4                     _state:
   116                           	opt stack 0
   117  0000D4                     	ds	2
   118  0000                     _PIE1	set	3997
   119  0000                     _T1CON	set	4045
   120  0000                     _T0CON	set	4053
   121  0000                     _INTCON2	set	4081
   122  0000                     _INTCON	set	4082
   123  0000                     _ADCON1	set	4033
   124  0000                     _SSPCON1	set	4038
   125  0000                     _CCP2CON	set	4026
   126  0000                     _INTCONbits	set	4082
   127  0000                     _RA3	set	31747
   128  0000                     _RA2	set	31746
   129  0000                     _RA5	set	31749
   130  0000                     _RB1	set	31753
   131  0000                     _RB4	set	31756
   132  0000                     _RB3	set	31755
   133  0000                     _TRISA3	set	31891
   134  0000                     _TRISA5	set	31893
   135  0000                     _TRISA2	set	31890
   136  0000                     _TRISB1	set	31897
   137  0000                     _TRISB4	set	31900
   138  0000                     _TRISB3	set	31899
   139  0000                     _TMR1IF	set	31984
   140  0000                     _RB0	set	31752
   141  0000                     _TMR0IF	set	32658
   142  0000                     _RB5	set	31757
   143  0000                     _RBIF	set	32656
   144                           
   145                           ; #config settings
   146  0000                     
   147                           	psect	cinit
   148  001F30                     __pcinit:
   149                           	opt stack 0
   150  001F30                     start_initialization:
   151                           	opt stack 0
   152  001F30                     __initialization:
   153                           	opt stack 0
   154                           
   155                           ; Clear objects allocated to BANK0 (56 bytes)
   156  001F30  EE00  F09C         	lfsr	0,__pbssBANK0
   157  001F34  0E38               	movlw	56
   158  001F36                     clear_0:
   159  001F36  6AEE               	clrf	postinc0,c
   160  001F38  06E8               	decf	wreg,f,c
   161  001F3A  E1FD               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to COMRAM (9 bytes)
   164  001F3C  EE00  F02C         	lfsr	0,__pbssCOMRAM
   165  001F40  0E09               	movlw	9
   166  001F42                     clear_1:
   167  001F42  6AEE               	clrf	postinc0,c
   168  001F44  06E8               	decf	wreg,f,c
   169  001F46  E1FD               	bnz	clear_1
   170  001F48                     end_of_initialization:
   171                           	opt stack 0
   172  001F48                     __end_of__initialization:
   173                           	opt stack 0
   174  001F48  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   175  001F4A  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   176  001F4C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   177  001F4E  6EF8               	movwf	tblptru,c
   178  001F50  0100               	movlb	0
   179  001F52  EFDC  F003         	goto	_main	;jump to C main() function
   180                           tblptru	equ	0xFF8
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           
   184                           	psect	bssCOMRAM
   185  00002C                     __pbssCOMRAM:
   186                           	opt stack 0
   187  00002C                     _next:
   188                           	opt stack 0
   189  00002C                     	ds	2
   190  00002E                     _current_program:
   191                           	opt stack 0
   192  00002E                     	ds	1
   193  00002F                     _max_program:
   194                           	opt stack 0
   195  00002F                     	ds	1
   196  000030                     _timer1_speed_cents:
   197                           	opt stack 0
   198  000030                     	ds	1
   199  000031                     _timer1_down_init_sec:
   200                           	opt stack 0
   201  000031                     	ds	1
   202  000032                     _timer1_down_init_min:
   203                           	opt stack 0
   204  000032                     	ds	1
   205  000033                     _timer1_counter_min:
   206                           	opt stack 0
   207  000033                     	ds	1
   208  000034                     _human_code:
   209                           	opt stack 0
   210  000034                     	ds	1
   211                           tblptru	equ	0xFF8
   212                           postinc0	equ	0xFEE
   213                           wreg	equ	0xFE8
   214                           
   215                           	psect	bssBANK0
   216  00009C                     __pbssBANK0:
   217                           	opt stack 0
   218  00009C                     _intervals:
   219                           	opt stack 0
   220  00009C                     	ds	40
   221  0000C4                     _counter:
   222                           	opt stack 0
   223  0000C4                     	ds	1
   224  0000C5                     _timer1_counter:
   225                           	opt stack 0
   226  0000C5                     	ds	1
   227  0000C6                     _buzzer_status:
   228                           	opt stack 0
   229  0000C6                     	ds	1
   230  0000C7                     _masked_digits:
   231                           	opt stack 0
   232  0000C7                     	ds	6
   233  0000CD                     _aux1:
   234                           	opt stack 0
   235  0000CD                     	ds	6
   236  0000D3                     _timer1_counter_10:
   237                           	opt stack 0
   238  0000D3                     	ds	1
   239                           tblptru	equ	0xFF8
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           
   243                           	psect	cstackBANK1
   244  000100                     __pcstackBANK1:
   245                           	opt stack 0
   246  000100                     ?___awdiv:
   247                           	opt stack 0
   248  000100                     ?___awmod:
   249                           	opt stack 0
   250  000100                     send_command@command:
   251                           	opt stack 0
   252  000100                     get_timer1_counter@data:
   253                           	opt stack 0
   254  000100                     get_timer1_counter_down@data:
   255                           	opt stack 0
   256  000100                     ___awdiv@dividend:
   257                           	opt stack 0
   258  000100                     ___awmod@dividend:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x0
   262  000100                     	ds	1
   263  000101                     send_command@i:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x1
   267  000101                     	ds	1
   268  000102                     ___awdiv@divisor:
   269                           	opt stack 0
   270  000102                     ___awmod@divisor:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x2
   274  000102                     	ds	1
   275  000103                     byte_read@address:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x3
   279  000103                     	ds	1
   280  000104                     ??_get_cents_reg:
   281  000104                     byte_read@res:
   282                           	opt stack 0
   283  000104                     get_timer1_counter_interval@data:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x4
   287  000104                     	ds	1
   288  000105                     byte_read@i:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x5
   292  000105                     	ds	1
   293  000106                     get_cents_reg@res:
   294                           	opt stack 0
   295  000106                     get_timer1_counter_interval@state:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0x6
   299  000106                     	ds	1
   300  000107                     get_cents_reg@cents:
   301                           	opt stack 0
   302  000107                     get_timer1_counter_interval@current_program:
   303                           	opt stack 0
   304  000107                     get_time@data:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x7
   308  000107                     	ds	1
   309  000108                     ??_get_timer1_counter_interval:
   310  000108                     get_timer1_counter_speed@data:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x8
   314  000108                     	ds	1
   315  000109                     get_time@format:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x9
   319  000109                     	ds	1
   320  00010A                     ??_get_time:
   321  00010A                     ??_get_timer1_counter_speed:
   322                           
   323                           ; 1 bytes @ 0xA
   324  00010A                     	ds	1
   325  00010B                     get_time@seconds:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0xB
   329  00010B                     	ds	1
   330  00010C                     get_time@aux_hour:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0xC
   334  00010C                     	ds	1
   335  00010D                     get_time@minutes:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0xD
   339  00010D                     	ds	1
   340  00010E                     get_time@aux:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0xE
   344  00010E                     	ds	1
   345  00010F                     get_time@hours:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0xF
   349  00010F                     	ds	1
   350  000110                     ??_main:
   351                           
   352                           ; 1 bytes @ 0x10
   353  000110                     	ds	2
   354  000112                     main@format:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x12
   358  000112                     	ds	1
   359                           tblptru	equ	0xFF8
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           
   363                           	psect	cstackBANK0
   364  000060                     __pcstackBANK0:
   365                           	opt stack 0
   366  000060                     high_isr@code:
   367                           	opt stack 0
   368                           
   369                           ; 47 bytes @ 0x0
   370  000060                     	ds	47
   371  00008F                     high_isr@digits:
   372                           	opt stack 0
   373                           
   374                           ; 6 bytes @ 0x2F
   375  00008F                     	ds	6
   376  000095                     high_isr@aux:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x35
   380  000095                     	ds	1
   381  000096                     high_isr@final_code:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x36
   385  000096                     	ds	2
   386  000098                     high_isr@i:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x38
   390  000098                     	ds	2
   391  00009A                     high_isr@i_166:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x3A
   395  00009A                     	ds	2
   396                           tblptru	equ	0xFF8
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           
   400                           	psect	cstackCOMRAM
   401  000001                     __pcstackCOMRAM:
   402                           	opt stack 0
   403  000001                     ??_put_num:
   404  000001                     ??i2_send_command:
   405  000001                     ?i2___awdiv:
   406                           	opt stack 0
   407  000001                     ?i2___awmod:
   408                           	opt stack 0
   409  000001                     get_num@num:
   410                           	opt stack 0
   411  000001                     get_hour_reg@res:
   412                           	opt stack 0
   413  000001                     i2get_seconds_reg@res:
   414                           	opt stack 0
   415  000001                     ir_get_human_code@code:
   416                           	opt stack 0
   417  000001                     update_point@state:
   418                           	opt stack 0
   419  000001                     update_buzzer@state:
   420                           	opt stack 0
   421  000001                     update_timer1_counter_10@counter:
   422                           	opt stack 0
   423  000001                     i2___awdiv@dividend:
   424                           	opt stack 0
   425  000001                     i2___awmod@dividend:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x0
   429  000001                     	ds	1
   430  000002                     get_hour_reg@hour:
   431                           	opt stack 0
   432  000002                     i2get_seconds_reg@seconds:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x1
   436  000002                     	ds	1
   437  000003                     ??_ir_get_human_code:
   438  000003                     put_num@num:
   439                           	opt stack 0
   440  000003                     update_point@counter:
   441                           	opt stack 0
   442  000003                     update_buzzer@counter:
   443                           	opt stack 0
   444  000003                     i2send_command@command:
   445                           	opt stack 0
   446  000003                     i2___awdiv@divisor:
   447                           	opt stack 0
   448  000003                     i2___awmod@divisor:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x2
   452  000003                     	ds	1
   453  000004                     put_num@mask:
   454                           	opt stack 0
   455  000004                     update_timer1_counter_10@state:
   456                           	opt stack 0
   457  000004                     i2send_command@i:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x3
   461  000004                     	ds	1
   462  000005                     ir_get_human_code@human_read_code:
   463                           	opt stack 0
   464  000005                     _put_num$982:
   465                           	opt stack 0
   466  000005                     i2___awdiv@counter:
   467                           	opt stack 0
   468  000005                     i2___awmod@counter:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x4
   472  000005                     	ds	1
   473  000006                     byte_write@value:
   474                           	opt stack 0
   475  000006                     i2___awdiv@sign:
   476                           	opt stack 0
   477  000006                     i2___awmod@sign:
   478                           	opt stack 0
   479  000006                     put_num@i:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x5
   483  000006                     	ds	1
   484  000007                     byte_write@address:
   485                           	opt stack 0
   486  000007                     i2___awdiv@quotient:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x6
   490  000007                     	ds	1
   491  000008                     set_time@minutes:
   492                           	opt stack 0
   493  000008                     put_nums@nums:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x7
   497  000008                     	ds	1
   498  000009                     set_time@hour:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x8
   502  000009                     	ds	1
   503  00000A                     set_time@seconds:
   504                           	opt stack 0
   505  00000A                     put_nums@i:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x9
   509  00000A                     	ds	1
   510  00000B                     set_time@sec_reg:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0xA
   514  00000B                     	ds	1
   515  00000C                     set_time@min_reg:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0xB
   519  00000C                     	ds	1
   520  00000D                     set_time@hour_reg:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0xC
   524  00000D                     	ds	1
   525  00000E                     ?_get_next_state:
   526                           	opt stack 0
   527  00000E                     get_next_state@state:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0xD
   531  00000E                     	ds	2
   532  000010                     get_next_state@code:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0xF
   536  000010                     	ds	2
   537  000012                     ??_get_next_state:
   538                           
   539                           ; 1 bytes @ 0x11
   540  000012                     	ds	2
   541  000014                     get_next_state@seconds:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x13
   545  000014                     	ds	1
   546  000015                     get_next_state@minutes:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x14
   550  000015                     	ds	1
   551  000016                     get_next_state@hour:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x15
   555  000016                     	ds	1
   556  000017                     ??_high_isr:
   557                           
   558                           ; 1 bytes @ 0x16
   559  000017                     	ds	17
   560  000028                     ??_send_command:
   561  000028                     get_seconds_reg@res:
   562                           	opt stack 0
   563  000028                     ir_is_code_number@human_code:
   564                           	opt stack 0
   565  000028                     ___awdiv@counter:
   566                           	opt stack 0
   567  000028                     ___awmod@counter:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x27
   571  000028                     	ds	1
   572  000029                     get_seconds_reg@seconds:
   573                           	opt stack 0
   574  000029                     ___awdiv@sign:
   575                           	opt stack 0
   576  000029                     ___awmod@sign:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x28
   580  000029                     	ds	1
   581  00002A                     ??_get_timer1_counter:
   582  00002A                     ??_get_timer1_counter_down:
   583  00002A                     ??_byte_read:
   584  00002A                     ___awdiv@quotient:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x29
   588  00002A                     	ds	2
   589                           tblptru	equ	0xFF8
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           
   593 ;;
   594 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   595 ;;
   596 ;; *************** function _main *****************
   597 ;; Defined at:
   598 ;;		line 37 in file "main.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;		None
   601 ;; Auto vars:     Size  Location     Type
   602 ;;  format          1   18[BANK1 ] unsigned char 
   603 ;;  temp            1    0        unsigned char 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   613 ;;      Params:         0       0       0       0       0       0       0       0       0
   614 ;;      Locals:         0       0       1       0       0       0       0       0       0
   615 ;;      Temps:          0       0       2       0       0       0       0       0       0
   616 ;;      Totals:         0       0       3       0       0       0       0       0       0
   617 ;;Total ram usage:        3 bytes
   618 ;; Hardware stack levels required when called:   10
   619 ;; This function calls:
   620 ;;		_ConfigureOscillator
   621 ;;		_InitApp
   622 ;;		_buzzer_disable
   623 ;;		_get_time
   624 ;;		_get_timer1_counter
   625 ;;		_get_timer1_counter_down
   626 ;;		_get_timer1_counter_interval
   627 ;;		_get_timer1_counter_speed
   628 ;;		_ir_is_code_number
   629 ;;		_timer1_disable
   630 ;;		_timer1_enable
   631 ;; This function is called by:
   632 ;;		Startup code after reset
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text0
   637  0007B8                     __ptext0:
   638                           	opt stack 0
   639  0007B8                     _main:
   640                           	opt stack 21
   641                           
   642                           ;main.c: 40: ConfigureOscillator();
   643                           
   644                           ;incstack = 0
   645  0007B8  ECDD  F00F         	call	_ConfigureOscillator	;wreg free
   646                           
   647                           ;main.c: 43: InitApp();
   648  0007BC  EC96  F00D         	call	_InitApp	;wreg free
   649                           
   650                           ;main.c: 48: aux1[0] = 1;
   651  0007C0  0E01               	movlw	1
   652  0007C2  0100               	movlb	0	; () banked
   653  0007C4  6FCD               	movwf	_aux1& (0+255),b
   654                           
   655                           ; BSR set to: 0
   656                           ;main.c: 49: aux1[1] = 2;
   657  0007C6  0E02               	movlw	2
   658  0007C8  0100               	movlb	0	; () banked
   659  0007CA  6FCE               	movwf	(_aux1+1)& (0+255),b
   660                           
   661                           ; BSR set to: 0
   662                           ;main.c: 50: aux1[2] = 3;
   663  0007CC  0E03               	movlw	3
   664  0007CE  0100               	movlb	0	; () banked
   665  0007D0  6FCF               	movwf	(_aux1+2)& (0+255),b
   666                           
   667                           ; BSR set to: 0
   668                           ;main.c: 51: aux1[3] = 4;
   669  0007D2  0E04               	movlw	4
   670  0007D4  0100               	movlb	0	; () banked
   671  0007D6  6FD0               	movwf	(_aux1+3)& (0+255),b
   672                           
   673                           ; BSR set to: 0
   674                           ;main.c: 52: aux1[4] = 5;
   675  0007D8  0E05               	movlw	5
   676  0007DA  0100               	movlb	0	; () banked
   677  0007DC  6FD1               	movwf	(_aux1+4)& (0+255),b
   678                           
   679                           ; BSR set to: 0
   680                           ;main.c: 53: aux1[5] = 6;
   681  0007DE  0E06               	movlw	6
   682  0007E0  0100               	movlb	0	; () banked
   683  0007E2  6FD2               	movwf	(_aux1+5)& (0+255),b
   684                           
   685                           ; BSR set to: 0
   686                           ;main.c: 55: char temp;
   687                           ;main.c: 56: char format = 1;
   688  0007E4  0E01               	movlw	1
   689  0007E6  0101               	movlb	1	; () banked
   690  0007E8  6F12               	movwf	main@format& (0+255),b
   691                           
   692                           ; BSR set to: 1
   693                           ;main.c: 57: buzzer_disable();
   694  0007EA  ECB7  F00F         	call	_buzzer_disable	;wreg free
   695  0007EE                     l5249:
   696                           
   697                           ;main.c: 59: {
   698                           ;main.c: 60: state = next;
   699  0007EE  C02C  F0D4         	movff	_next,_state
   700  0007F2  C02D  F0D5         	movff	_next+1,_state+1
   701                           
   702                           ;main.c: 62: switch(state){
   703  0007F6  D1EF               	goto	l5507
   704  0007F8                     l5251:
   705                           
   706                           ;main.c: 65: if(human_code == 13)
   707  0007F8  0E0D               	movlw	13
   708  0007FA  1834               	xorwf	_human_code,w,c
   709  0007FC  A4D8               	btfss	status,2,c
   710  0007FE  D002               	goto	l5255
   711                           
   712                           ;main.c: 66: format = 1;
   713  000800  0E01               	movlw	1
   714  000802  D005               	goto	L1
   715  000804                     l5255:
   716                           
   717                           ;main.c: 67: else if (human_code == 14)
   718  000804  0E0E               	movlw	14
   719  000806  1834               	xorwf	_human_code,w,c
   720  000808  A4D8               	btfss	status,2,c
   721  00080A  D003               	goto	l5259
   722                           
   723                           ;main.c: 68: format = 0;
   724  00080C  0E00               	movlw	0
   725  00080E                     L1:
   726  00080E  0101               	movlb	1	; () banked
   727  000810  6F12               	movwf	main@format& (0+255),b
   728  000812                     l5259:
   729                           
   730                           ;main.c: 69: get_time(aux1,format);
   731  000812  0ECD               	movlw	low _aux1
   732  000814  0101               	movlb	1	; () banked
   733  000816  6F07               	movwf	get_time@data& (0+255),b
   734  000818  0E00               	movlw	high _aux1
   735  00081A  0101               	movlb	1	; () banked
   736  00081C  6F08               	movwf	(get_time@data+1)& (0+255),b
   737  00081E  C112  F109         	movff	main@format,get_time@format
   738  000822  ECC5  F009         	call	_get_time	;wreg free
   739                           
   740                           ;main.c: 76: break;
   741  000826  D7E3               	goto	l5249
   742  000828                     l5261:
   743                           
   744                           ;main.c: 80: if(ir_is_code_number(human_code) && human_code <=2)
   745  000828  5034               	movf	_human_code,w,c
   746  00082A  EC58  F00E         	call	_ir_is_code_number
   747  00082E  0900               	iorlw	0
   748  000830  B4D8               	btfsc	status,2,c
   749  000832  D7DD               	goto	l5249
   750  000834  0E03               	movlw	3
   751  000836  6034               	cpfslt	_human_code,c
   752  000838  D7DA               	goto	l5249
   753                           
   754                           ;main.c: 81: {
   755                           ;main.c: 82: aux1[3] = human_code;
   756  00083A  C034  F0D0         	movff	_human_code,_aux1+3
   757                           
   758                           ;main.c: 83: next = 2;
   759  00083E  0E00               	movlw	0
   760  000840  6E2D               	movwf	_next+1,c
   761  000842  0E02               	movlw	2
   762  000844  D1C6               	goto	L18
   763  000846                     l5269:
   764                           
   765                           ;main.c: 84: human_code = -1;
   766  000846  6834               	setf	_human_code,c
   767                           
   768                           ;main.c: 85: }
   769                           ;main.c: 86: break;
   770  000848  D7D2               	goto	l5249
   771  00084A                     l5271:
   772                           
   773                           ;main.c: 89: if(ir_is_code_number(human_code) && ((aux1[2]<2 && human_code <=9) || human
      +                          _code <=3))
   774  00084A  5034               	movf	_human_code,w,c
   775  00084C  EC58  F00E         	call	_ir_is_code_number
   776  000850  0900               	iorlw	0
   777  000852  B4D8               	btfsc	status,2,c
   778  000854  D7CC               	goto	l5249
   779  000856  0E02               	movlw	2
   780  000858  0100               	movlb	0	; () banked
   781  00085A  61CF               	cpfslt	(_aux1+2)& (0+255),b
   782  00085C  D003               	goto	l5277
   783                           
   784                           ; BSR set to: 0
   785  00085E  0E09               	movlw	9
   786  000860  6434               	cpfsgt	_human_code,c
   787  000862  D003               	goto	l177
   788  000864                     l5277:
   789                           
   790                           ; BSR set to: 0
   791  000864  0E04               	movlw	4
   792  000866  6034               	cpfslt	_human_code,c
   793  000868  D7C2               	goto	l5249
   794  00086A                     l177:
   795                           
   796                           ; BSR set to: 0
   797                           ;main.c: 90: {
   798                           ;main.c: 91: aux1[2] = human_code;
   799  00086A  C034  F0CF         	movff	_human_code,_aux1+2
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 92: next = 3;
   803  00086E  0E00               	movlw	0
   804  000870  6E2D               	movwf	_next+1,c
   805  000872  0E03               	movlw	3
   806  000874  D1AE               	goto	L18
   807  000876                     l5283:
   808                           
   809                           ;main.c: 98: if(ir_is_code_number(human_code) && human_code <=5)
   810  000876  5034               	movf	_human_code,w,c
   811  000878  EC58  F00E         	call	_ir_is_code_number
   812  00087C  0900               	iorlw	0
   813  00087E  B4D8               	btfsc	status,2,c
   814  000880  D7B6               	goto	l5249
   815  000882  0E06               	movlw	6
   816  000884  6034               	cpfslt	_human_code,c
   817  000886  D7B3               	goto	l5249
   818                           
   819                           ;main.c: 99: {
   820                           ;main.c: 100: aux1[1] = human_code;
   821  000888  C034  F0CE         	movff	_human_code,_aux1+1
   822                           
   823                           ;main.c: 101: next = 4;
   824  00088C  0E00               	movlw	0
   825  00088E  6E2D               	movwf	_next+1,c
   826  000890  0E04               	movlw	4
   827  000892  D19F               	goto	L18
   828  000894                     l5293:
   829                           
   830                           ;main.c: 106: if(ir_is_code_number(human_code) && human_code <=9)
   831  000894  5034               	movf	_human_code,w,c
   832  000896  EC58  F00E         	call	_ir_is_code_number
   833  00089A  0900               	iorlw	0
   834  00089C  B4D8               	btfsc	status,2,c
   835  00089E  D7A7               	goto	l5249
   836  0008A0  0E0A               	movlw	10
   837  0008A2  6034               	cpfslt	_human_code,c
   838  0008A4  D7A4               	goto	l5249
   839                           
   840                           ;main.c: 107: {
   841                           ;main.c: 108: aux1[0] = human_code;
   842  0008A6  C034  F0CD         	movff	_human_code,_aux1
   843                           
   844                           ;main.c: 109: next = 1;
   845  0008AA  0E00               	movlw	0
   846  0008AC  6E2D               	movwf	_next+1,c
   847  0008AE  0E01               	movlw	1
   848  0008B0  D190               	goto	L18
   849  0008B2                     l5303:
   850                           
   851                           ;main.c: 115: timer1_counter_10 = 10;
   852  0008B2  0E0A               	movlw	10
   853  0008B4  0100               	movlb	0	; () banked
   854  0008B6  6FD3               	movwf	_timer1_counter_10& (0+255),b
   855                           
   856                           ; BSR set to: 0
   857                           ;main.c: 116: get_timer1_counter(aux1);
   858  0008B8  0ECD               	movlw	low _aux1
   859  0008BA  0101               	movlb	1	; () banked
   860  0008BC  6F00               	movwf	get_timer1_counter@data& (0+255),b
   861  0008BE  0E00               	movlw	high _aux1
   862  0008C0  0101               	movlb	1	; () banked
   863  0008C2  6F01               	movwf	(get_timer1_counter@data+1)& (0+255),b
   864  0008C4  EC93  F00C         	call	_get_timer1_counter	;wreg free
   865                           
   866                           ;main.c: 118: break;
   867  0008C8  D792               	goto	l5249
   868  0008CA                     l5307:
   869                           
   870                           ;main.c: 120: get_timer1_counter(aux1);
   871  0008CA  0ECD               	movlw	low _aux1
   872  0008CC  0101               	movlb	1	; () banked
   873  0008CE  6F00               	movwf	get_timer1_counter@data& (0+255),b
   874  0008D0  0E00               	movlw	high _aux1
   875  0008D2  0101               	movlb	1	; () banked
   876  0008D4  6F01               	movwf	(get_timer1_counter@data+1)& (0+255),b
   877  0008D6  EC93  F00C         	call	_get_timer1_counter	;wreg free
   878                           
   879                           ;main.c: 121: break;
   880  0008DA  D789               	goto	l5249
   881  0008DC                     l5309:
   882                           
   883                           ;main.c: 123: get_timer1_counter(aux1);
   884  0008DC  0ECD               	movlw	low _aux1
   885  0008DE  0101               	movlb	1	; () banked
   886  0008E0  6F00               	movwf	get_timer1_counter@data& (0+255),b
   887  0008E2  0E00               	movlw	high _aux1
   888  0008E4  0101               	movlb	1	; () banked
   889  0008E6  6F01               	movwf	(get_timer1_counter@data+1)& (0+255),b
   890  0008E8  EC93  F00C         	call	_get_timer1_counter	;wreg free
   891                           
   892                           ;main.c: 124: break;
   893  0008EC  D780               	goto	l5249
   894  0008EE                     l5311:
   895                           
   896                           ;main.c: 126: get_timer1_counter(aux1);
   897  0008EE  0ECD               	movlw	low _aux1
   898  0008F0  0101               	movlb	1	; () banked
   899  0008F2  6F00               	movwf	get_timer1_counter@data& (0+255),b
   900  0008F4  0E00               	movlw	high _aux1
   901  0008F6  0101               	movlb	1	; () banked
   902  0008F8  6F01               	movwf	(get_timer1_counter@data+1)& (0+255),b
   903  0008FA  EC93  F00C         	call	_get_timer1_counter	;wreg free
   904                           
   905                           ;main.c: 127: break;
   906  0008FE  D777               	goto	l5249
   907  000900                     l5313:
   908                           
   909                           ;main.c: 131: if(ir_is_code_number(human_code) && human_code <=5)
   910  000900  5034               	movf	_human_code,w,c
   911  000902  EC58  F00E         	call	_ir_is_code_number
   912  000906  0900               	iorlw	0
   913  000908  B4D8               	btfsc	status,2,c
   914  00090A  D771               	goto	l5249
   915  00090C  0E06               	movlw	6
   916  00090E  6034               	cpfslt	_human_code,c
   917  000910  D76E               	goto	l5249
   918                           
   919                           ;main.c: 132: {
   920                           ;main.c: 133: aux1[3] = human_code;
   921  000912  C034  F0D0         	movff	_human_code,_aux1+3
   922                           
   923                           ;main.c: 134: next = 8;
   924  000916  0E00               	movlw	0
   925  000918  6E2D               	movwf	_next+1,c
   926  00091A  0E08               	movlw	8
   927  00091C  D15A               	goto	L18
   928  00091E                     l5323:
   929                           
   930                           ;main.c: 141: if(ir_is_code_number(human_code) && human_code <=5)
   931  00091E  5034               	movf	_human_code,w,c
   932  000920  EC58  F00E         	call	_ir_is_code_number
   933  000924  0900               	iorlw	0
   934  000926  B4D8               	btfsc	status,2,c
   935  000928  D762               	goto	l5249
   936  00092A  0E06               	movlw	6
   937  00092C  6034               	cpfslt	_human_code,c
   938  00092E  D75F               	goto	l5249
   939                           
   940                           ;main.c: 142: {
   941                           ;main.c: 143: aux1[2] = human_code;
   942  000930  C034  F0CF         	movff	_human_code,_aux1+2
   943                           
   944                           ;main.c: 144: next = 9;
   945  000934  0E00               	movlw	0
   946  000936  6E2D               	movwf	_next+1,c
   947  000938  0E09               	movlw	9
   948  00093A  D14B               	goto	L18
   949  00093C                     l5333:
   950                           
   951                           ;main.c: 151: if(ir_is_code_number(human_code) && human_code <=5)
   952  00093C  5034               	movf	_human_code,w,c
   953  00093E  EC58  F00E         	call	_ir_is_code_number
   954  000942  0900               	iorlw	0
   955  000944  B4D8               	btfsc	status,2,c
   956  000946  D753               	goto	l5249
   957  000948  0E06               	movlw	6
   958  00094A  6034               	cpfslt	_human_code,c
   959  00094C  D750               	goto	l5249
   960                           
   961                           ;main.c: 152: {
   962                           ;main.c: 153: aux1[1] = human_code;
   963  00094E  C034  F0CE         	movff	_human_code,_aux1+1
   964                           
   965                           ;main.c: 154: next = 10;
   966  000952  0E00               	movlw	0
   967  000954  6E2D               	movwf	_next+1,c
   968  000956  0E0A               	movlw	10
   969  000958  D13C               	goto	L18
   970  00095A                     l5343:
   971                           
   972                           ;main.c: 161: if(ir_is_code_number(human_code) && human_code <=5)
   973  00095A  5034               	movf	_human_code,w,c
   974  00095C  EC58  F00E         	call	_ir_is_code_number
   975  000960  0900               	iorlw	0
   976  000962  B4D8               	btfsc	status,2,c
   977  000964  D744               	goto	l5249
   978  000966  0E06               	movlw	6
   979  000968  6034               	cpfslt	_human_code,c
   980  00096A  D741               	goto	l5249
   981                           
   982                           ;main.c: 162: {
   983                           ;main.c: 163: aux1[0] = human_code;
   984  00096C  C034  F0CD         	movff	_human_code,_aux1
   985                           
   986                           ;main.c: 164: next = 7;
   987  000970  0E00               	movlw	0
   988  000972  6E2D               	movwf	_next+1,c
   989  000974  0E07               	movlw	7
   990  000976  D12D               	goto	L18
   991  000978                     l5353:
   992                           
   993                           ;main.c: 169: timer1_counter_10 = 10;
   994  000978  0E0A               	movlw	10
   995  00097A  0100               	movlb	0	; () banked
   996  00097C  6FD3               	movwf	_timer1_counter_10& (0+255),b
   997                           
   998                           ; BSR set to: 0
   999                           ;main.c: 170: get_timer1_counter_down(aux1);
  1000  00097E  0ECD               	movlw	low _aux1
  1001  000980  0101               	movlb	1	; () banked
  1002  000982  6F00               	movwf	get_timer1_counter_down@data& (0+255),b
  1003  000984  0E00               	movlw	high _aux1
  1004  000986  0101               	movlb	1	; () banked
  1005  000988  6F01               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
  1006  00098A  EC4B  F00C         	call	_get_timer1_counter_down	;wreg free
  1007                           
  1008                           ;main.c: 171: break;
  1009  00098E  D72F               	goto	l5249
  1010  000990                     l5357:
  1011                           
  1012                           ;main.c: 173: get_timer1_counter_down(aux1);
  1013  000990  0ECD               	movlw	low _aux1
  1014  000992  0101               	movlb	1	; () banked
  1015  000994  6F00               	movwf	get_timer1_counter_down@data& (0+255),b
  1016  000996  0E00               	movlw	high _aux1
  1017  000998  0101               	movlb	1	; () banked
  1018  00099A  6F01               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
  1019  00099C  EC4B  F00C         	call	_get_timer1_counter_down	;wreg free
  1020                           
  1021                           ;main.c: 174: break;
  1022  0009A0  D726               	goto	l5249
  1023  0009A2                     l5359:
  1024                           
  1025                           ;main.c: 176: get_timer1_counter_down(aux1);
  1026  0009A2  0ECD               	movlw	low _aux1
  1027  0009A4  0101               	movlb	1	; () banked
  1028  0009A6  6F00               	movwf	get_timer1_counter_down@data& (0+255),b
  1029  0009A8  0E00               	movlw	high _aux1
  1030  0009AA  0101               	movlb	1	; () banked
  1031  0009AC  6F01               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
  1032  0009AE  EC4B  F00C         	call	_get_timer1_counter_down	;wreg free
  1033                           
  1034                           ;main.c: 177: break;
  1035  0009B2  D71D               	goto	l5249
  1036  0009B4                     l5361:
  1037                           
  1038                           ;main.c: 179: get_timer1_counter_down(aux1);
  1039  0009B4  0ECD               	movlw	low _aux1
  1040  0009B6  0101               	movlb	1	; () banked
  1041  0009B8  6F00               	movwf	get_timer1_counter_down@data& (0+255),b
  1042  0009BA  0E00               	movlw	high _aux1
  1043  0009BC  0101               	movlb	1	; () banked
  1044  0009BE  6F01               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
  1045  0009C0  EC4B  F00C         	call	_get_timer1_counter_down	;wreg free
  1046                           
  1047                           ;main.c: 180: break;
  1048  0009C4  D714               	goto	l5249
  1049  0009C6                     l5363:
  1050                           
  1051                           ;main.c: 183: if(ir_is_code_number(human_code) && human_code <=5)
  1052  0009C6  5034               	movf	_human_code,w,c
  1053  0009C8  EC58  F00E         	call	_ir_is_code_number
  1054  0009CC  0900               	iorlw	0
  1055  0009CE  B4D8               	btfsc	status,2,c
  1056  0009D0  D70E               	goto	l5249
  1057  0009D2  0E06               	movlw	6
  1058  0009D4  6034               	cpfslt	_human_code,c
  1059  0009D6  D70B               	goto	l5249
  1060                           
  1061                           ;main.c: 184: {
  1062                           ;main.c: 185: aux1[3] = human_code;
  1063  0009D8  C034  F0D0         	movff	_human_code,_aux1+3
  1064                           
  1065                           ;main.c: 186: next = 15;
  1066  0009DC  0E00               	movlw	0
  1067  0009DE  6E2D               	movwf	_next+1,c
  1068  0009E0  0E0F               	movlw	15
  1069  0009E2  D0F7               	goto	L18
  1070  0009E4                     l5373:
  1071                           
  1072                           ;main.c: 192: if(ir_is_code_number(human_code) && human_code <=9)
  1073  0009E4  5034               	movf	_human_code,w,c
  1074  0009E6  EC58  F00E         	call	_ir_is_code_number
  1075  0009EA  0900               	iorlw	0
  1076  0009EC  B4D8               	btfsc	status,2,c
  1077  0009EE  D6FF               	goto	l5249
  1078  0009F0  0E0A               	movlw	10
  1079  0009F2  6034               	cpfslt	_human_code,c
  1080  0009F4  D6FC               	goto	l5249
  1081                           
  1082                           ;main.c: 193: {
  1083                           ;main.c: 194: aux1[2] = human_code;
  1084  0009F6  C034  F0CF         	movff	_human_code,_aux1+2
  1085                           
  1086                           ;main.c: 195: next = 16;
  1087  0009FA  0E00               	movlw	0
  1088  0009FC  6E2D               	movwf	_next+1,c
  1089  0009FE  0E10               	movlw	16
  1090  000A00  D0E8               	goto	L18
  1091  000A02                     l5383:
  1092                           
  1093                           ;main.c: 201: if(ir_is_code_number(human_code) && human_code <=5)
  1094  000A02  5034               	movf	_human_code,w,c
  1095  000A04  EC58  F00E         	call	_ir_is_code_number
  1096  000A08  0900               	iorlw	0
  1097  000A0A  B4D8               	btfsc	status,2,c
  1098  000A0C  D6F0               	goto	l5249
  1099  000A0E  0E06               	movlw	6
  1100  000A10  6034               	cpfslt	_human_code,c
  1101  000A12  D6ED               	goto	l5249
  1102                           
  1103                           ;main.c: 202: {
  1104                           ;main.c: 203: aux1[1] = human_code;
  1105  000A14  C034  F0CE         	movff	_human_code,_aux1+1
  1106                           
  1107                           ;main.c: 204: next = 17;
  1108  000A18  0E00               	movlw	0
  1109  000A1A  6E2D               	movwf	_next+1,c
  1110  000A1C  0E11               	movlw	17
  1111  000A1E  D0D9               	goto	L18
  1112  000A20                     l5393:
  1113                           
  1114                           ;main.c: 210: if(ir_is_code_number(human_code) && human_code <=9)
  1115  000A20  5034               	movf	_human_code,w,c
  1116  000A22  EC58  F00E         	call	_ir_is_code_number
  1117  000A26  0900               	iorlw	0
  1118  000A28  B4D8               	btfsc	status,2,c
  1119  000A2A  D6E1               	goto	l5249
  1120  000A2C  0E0A               	movlw	10
  1121  000A2E  6034               	cpfslt	_human_code,c
  1122  000A30  D6DE               	goto	l5249
  1123                           
  1124                           ;main.c: 211: {
  1125                           ;main.c: 212: aux1[0] = human_code;
  1126  000A32  C034  F0CD         	movff	_human_code,_aux1
  1127                           
  1128                           ;main.c: 213: next = 14;
  1129  000A36  0E00               	movlw	0
  1130  000A38  6E2D               	movwf	_next+1,c
  1131  000A3A  0E0E               	movlw	14
  1132  000A3C  D0CA               	goto	L18
  1133  000A3E                     l5403:
  1134                           
  1135                           ;main.c: 218: timer1_disable();
  1136  000A3E  ECCB  F00F         	call	_timer1_disable	;wreg free
  1137                           
  1138                           ;main.c: 219: timer1_counter_10 = 0;
  1139  000A42  0E00               	movlw	0
  1140  000A44  0100               	movlb	0	; () banked
  1141  000A46  6FD3               	movwf	_timer1_counter_10& (0+255),b
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 220: timer1_counter_min = 0;
  1145  000A48  0E00               	movlw	0
  1146  000A4A  6E33               	movwf	_timer1_counter_min,c
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 221: timer1_counter = 0;
  1150  000A4C  0E00               	movlw	0
  1151  000A4E  0100               	movlb	0	; () banked
  1152  000A50  6FC5               	movwf	_timer1_counter& (0+255),b
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;main.c: 222: get_timer1_counter_speed(aux1);
  1156  000A52  0ECD               	movlw	low _aux1
  1157  000A54  0101               	movlb	1	; () banked
  1158  000A56  6F08               	movwf	get_timer1_counter_speed@data& (0+255),b
  1159  000A58  0E00               	movlw	high _aux1
  1160  000A5A  0101               	movlb	1	; () banked
  1161  000A5C  6F09               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1162  000A5E  EC55  F00B         	call	_get_timer1_counter_speed	;wreg free
  1163                           
  1164                           ;main.c: 223: break;
  1165  000A62  D6C5               	goto	l5249
  1166  000A64                     l5413:
  1167                           
  1168                           ;main.c: 225: timer1_enable();
  1169  000A64  ECC9  F00F         	call	_timer1_enable	;wreg free
  1170                           
  1171                           ;main.c: 226: get_timer1_counter_speed(aux1);
  1172  000A68  0ECD               	movlw	low _aux1
  1173  000A6A  0101               	movlb	1	; () banked
  1174  000A6C  6F08               	movwf	get_timer1_counter_speed@data& (0+255),b
  1175  000A6E  0E00               	movlw	high _aux1
  1176  000A70  0101               	movlb	1	; () banked
  1177  000A72  6F09               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1178  000A74  EC55  F00B         	call	_get_timer1_counter_speed	;wreg free
  1179                           
  1180                           ;main.c: 227: break;
  1181  000A78  D6BA               	goto	l5249
  1182  000A7A                     l5417:
  1183                           
  1184                           ;main.c: 229: timer1_disable();
  1185  000A7A  ECCB  F00F         	call	_timer1_disable	;wreg free
  1186                           
  1187                           ;main.c: 230: get_timer1_counter_speed(aux1);
  1188  000A7E  0ECD               	movlw	low _aux1
  1189  000A80  0101               	movlb	1	; () banked
  1190  000A82  6F08               	movwf	get_timer1_counter_speed@data& (0+255),b
  1191  000A84  0E00               	movlw	high _aux1
  1192  000A86  0101               	movlb	1	; () banked
  1193  000A88  6F09               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1194  000A8A  EC55  F00B         	call	_get_timer1_counter_speed	;wreg free
  1195                           
  1196                           ;main.c: 231: break;
  1197  000A8E  D6AF               	goto	l5249
  1198  000A90                     l5421:
  1199                           
  1200                           ;main.c: 234: timer1_disable();
  1201  000A90  ECCB  F00F         	call	_timer1_disable	;wreg free
  1202                           
  1203                           ;main.c: 235: timer1_counter_10 = 0;
  1204  000A94  0E00               	movlw	0
  1205  000A96  0100               	movlb	0	; () banked
  1206  000A98  6FD3               	movwf	_timer1_counter_10& (0+255),b
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;main.c: 236: timer1_counter_min = 0;
  1210  000A9A  0E00               	movlw	0
  1211  000A9C  6E33               	movwf	_timer1_counter_min,c
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;main.c: 237: timer1_counter = 0;
  1215  000A9E  0E00               	movlw	0
  1216  000AA0  0100               	movlb	0	; () banked
  1217  000AA2  6FC5               	movwf	_timer1_counter& (0+255),b
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 238: current_program = 0;
  1221  000AA4  0E00               	movlw	0
  1222  000AA6  6E2E               	movwf	_current_program,c
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;main.c: 239: current_type = 'f';
  1226  000AA8  0E66               	movlw	102
  1227  000AAA  6E35               	movwf	_current_type,c
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 240: get_timer1_counter_interval(aux1,state,current_program);
  1231  000AAC  0ECD               	movlw	low _aux1
  1232  000AAE  0101               	movlb	1	; () banked
  1233  000AB0  6F04               	movwf	get_timer1_counter_interval@data& (0+255),b
  1234  000AB2  0E00               	movlw	high _aux1
  1235  000AB4  0101               	movlb	1	; () banked
  1236  000AB6  6F05               	movwf	(get_timer1_counter_interval@data+1)& (0+255),b
  1237  000AB8  C0D4  F106         	movff	_state,get_timer1_counter_interval@state
  1238  000ABC  C02E  F107         	movff	_current_program,get_timer1_counter_interval@current_program
  1239  000AC0  ECEC  F007         	call	_get_timer1_counter_interval	;wreg free
  1240                           
  1241                           ;main.c: 241: break;
  1242  000AC4  D694               	goto	l5249
  1243  000AC6                     l5435:
  1244                           
  1245                           ;main.c: 243: timer1_enable();
  1246  000AC6  ECC9  F00F         	call	_timer1_enable	;wreg free
  1247                           
  1248                           ;main.c: 244: get_timer1_counter_interval(aux1,state,current_program);
  1249  000ACA  0ECD               	movlw	low _aux1
  1250  000ACC  0101               	movlb	1	; () banked
  1251  000ACE  6F04               	movwf	get_timer1_counter_interval@data& (0+255),b
  1252  000AD0  0E00               	movlw	high _aux1
  1253  000AD2  0101               	movlb	1	; () banked
  1254  000AD4  6F05               	movwf	(get_timer1_counter_interval@data+1)& (0+255),b
  1255  000AD6  C0D4  F106         	movff	_state,get_timer1_counter_interval@state
  1256  000ADA  C02E  F107         	movff	_current_program,get_timer1_counter_interval@current_program
  1257  000ADE  ECEC  F007         	call	_get_timer1_counter_interval	;wreg free
  1258                           
  1259                           ;main.c: 245: break;
  1260  000AE2  D685               	goto	l5249
  1261  000AE4                     l5439:
  1262                           
  1263                           ;main.c: 247: timer1_enable();
  1264  000AE4  ECC9  F00F         	call	_timer1_enable	;wreg free
  1265                           
  1266                           ;main.c: 248: get_timer1_counter_interval(aux1,state,current_program);
  1267  000AE8  0ECD               	movlw	low _aux1
  1268  000AEA  0101               	movlb	1	; () banked
  1269  000AEC  6F04               	movwf	get_timer1_counter_interval@data& (0+255),b
  1270  000AEE  0E00               	movlw	high _aux1
  1271  000AF0  0101               	movlb	1	; () banked
  1272  000AF2  6F05               	movwf	(get_timer1_counter_interval@data+1)& (0+255),b
  1273  000AF4  C0D4  F106         	movff	_state,get_timer1_counter_interval@state
  1274  000AF8  C02E  F107         	movff	_current_program,get_timer1_counter_interval@current_program
  1275  000AFC  ECEC  F007         	call	_get_timer1_counter_interval	;wreg free
  1276                           
  1277                           ;main.c: 249: break;
  1278  000B00  D676               	goto	l5249
  1279  000B02                     l5443:
  1280                           
  1281                           ;main.c: 251: timer1_disable();
  1282  000B02  ECCB  F00F         	call	_timer1_disable	;wreg free
  1283                           
  1284                           ;main.c: 252: get_timer1_counter_interval(aux1,state,current_program);
  1285  000B06  0ECD               	movlw	low _aux1
  1286  000B08  0101               	movlb	1	; () banked
  1287  000B0A  6F04               	movwf	get_timer1_counter_interval@data& (0+255),b
  1288  000B0C  0E00               	movlw	high _aux1
  1289  000B0E  0101               	movlb	1	; () banked
  1290  000B10  6F05               	movwf	(get_timer1_counter_interval@data+1)& (0+255),b
  1291  000B12  C0D4  F106         	movff	_state,get_timer1_counter_interval@state
  1292  000B16  C02E  F107         	movff	_current_program,get_timer1_counter_interval@current_program
  1293  000B1A  ECEC  F007         	call	_get_timer1_counter_interval	;wreg free
  1294                           
  1295                           ;main.c: 253: break;
  1296  000B1E  D667               	goto	l5249
  1297  000B20                     l5447:
  1298                           
  1299                           ;main.c: 255: if(ir_is_code_number(human_code) && human_code <=5)
  1300  000B20  5034               	movf	_human_code,w,c
  1301  000B22  EC58  F00E         	call	_ir_is_code_number
  1302  000B26  0900               	iorlw	0
  1303  000B28  B4D8               	btfsc	status,2,c
  1304  000B2A  D661               	goto	l5249
  1305  000B2C  0E06               	movlw	6
  1306  000B2E  6034               	cpfslt	_human_code,c
  1307  000B30  D65E               	goto	l5249
  1308                           
  1309                           ;main.c: 256: {
  1310                           ;main.c: 257: aux1[3] = human_code;
  1311  000B32  C034  F0D0         	movff	_human_code,_aux1+3
  1312                           
  1313                           ;main.c: 258: next = 30;
  1314  000B36  0E00               	movlw	0
  1315  000B38  6E2D               	movwf	_next+1,c
  1316  000B3A  0E1E               	movlw	30
  1317  000B3C  D04A               	goto	L18
  1318  000B3E                     l5457:
  1319                           
  1320                           ;main.c: 263: if(ir_is_code_number(human_code) && human_code <=9)
  1321  000B3E  5034               	movf	_human_code,w,c
  1322  000B40  EC58  F00E         	call	_ir_is_code_number
  1323  000B44  0900               	iorlw	0
  1324  000B46  B4D8               	btfsc	status,2,c
  1325  000B48  D652               	goto	l5249
  1326  000B4A  0E0A               	movlw	10
  1327  000B4C  6034               	cpfslt	_human_code,c
  1328  000B4E  D64F               	goto	l5249
  1329                           
  1330                           ;main.c: 264: {
  1331                           ;main.c: 265: aux1[2] = human_code;
  1332  000B50  C034  F0CF         	movff	_human_code,_aux1+2
  1333                           
  1334                           ;main.c: 266: next = 31;
  1335  000B54  0E00               	movlw	0
  1336  000B56  6E2D               	movwf	_next+1,c
  1337  000B58  0E1F               	movlw	31
  1338  000B5A  D03B               	goto	L18
  1339  000B5C                     l5467:
  1340                           
  1341                           ;main.c: 271: if(ir_is_code_number(human_code) && human_code <=5)
  1342  000B5C  5034               	movf	_human_code,w,c
  1343  000B5E  EC58  F00E         	call	_ir_is_code_number
  1344  000B62  0900               	iorlw	0
  1345  000B64  B4D8               	btfsc	status,2,c
  1346  000B66  D643               	goto	l5249
  1347  000B68  0E06               	movlw	6
  1348  000B6A  6034               	cpfslt	_human_code,c
  1349  000B6C  D640               	goto	l5249
  1350                           
  1351                           ;main.c: 272: {
  1352                           ;main.c: 273: aux1[1] = human_code;
  1353  000B6E  C034  F0CE         	movff	_human_code,_aux1+1
  1354                           
  1355                           ;main.c: 274: next = 32;
  1356  000B72  0E00               	movlw	0
  1357  000B74  6E2D               	movwf	_next+1,c
  1358  000B76  0E20               	movlw	32
  1359  000B78  D02C               	goto	L18
  1360  000B7A                     l5477:
  1361                           
  1362                           ;main.c: 279: if(ir_is_code_number(human_code) && human_code <=9)
  1363  000B7A  5034               	movf	_human_code,w,c
  1364  000B7C  EC58  F00E         	call	_ir_is_code_number
  1365  000B80  0900               	iorlw	0
  1366  000B82  B4D8               	btfsc	status,2,c
  1367  000B84  D634               	goto	l5249
  1368  000B86  0E0A               	movlw	10
  1369  000B88  6034               	cpfslt	_human_code,c
  1370  000B8A  D631               	goto	l5249
  1371                           
  1372                           ;main.c: 280: {
  1373                           ;main.c: 281: aux1[0] = human_code;
  1374  000B8C  C034  F0CD         	movff	_human_code,_aux1
  1375                           
  1376                           ;main.c: 282: next = 29;
  1377  000B90  0E00               	movlw	0
  1378  000B92  6E2D               	movwf	_next+1,c
  1379  000B94  0E1D               	movlw	29
  1380  000B96  D01D               	goto	L18
  1381  000B98                     l5487:
  1382                           
  1383                           ;main.c: 287: if(ir_is_code_number(human_code) && human_code <=9)
  1384  000B98  5034               	movf	_human_code,w,c
  1385  000B9A  EC58  F00E         	call	_ir_is_code_number
  1386  000B9E  0900               	iorlw	0
  1387  000BA0  B4D8               	btfsc	status,2,c
  1388  000BA2  D625               	goto	l5249
  1389  000BA4  0E0A               	movlw	10
  1390  000BA6  6034               	cpfslt	_human_code,c
  1391  000BA8  D622               	goto	l5249
  1392                           
  1393                           ;main.c: 288: {
  1394                           ;main.c: 289: aux1[1] = human_code;
  1395  000BAA  C034  F0CE         	movff	_human_code,_aux1+1
  1396                           
  1397                           ;main.c: 290: next = 34;
  1398  000BAE  0E00               	movlw	0
  1399  000BB0  6E2D               	movwf	_next+1,c
  1400  000BB2  0E22               	movlw	34
  1401  000BB4  D00E               	goto	L18
  1402  000BB6                     l5497:
  1403                           
  1404                           ;main.c: 295: if(ir_is_code_number(human_code) && human_code <=9)
  1405  000BB6  5034               	movf	_human_code,w,c
  1406  000BB8  EC58  F00E         	call	_ir_is_code_number
  1407  000BBC  0900               	iorlw	0
  1408  000BBE  B4D8               	btfsc	status,2,c
  1409  000BC0  D616               	goto	l5249
  1410  000BC2  0E0A               	movlw	10
  1411  000BC4  6034               	cpfslt	_human_code,c
  1412  000BC6  D613               	goto	l5249
  1413                           
  1414                           ;main.c: 296: {
  1415                           ;main.c: 297: aux1[0] = human_code;
  1416  000BC8  C034  F0CD         	movff	_human_code,_aux1
  1417                           
  1418                           ;main.c: 298: next = 33;
  1419  000BCC  0E00               	movlw	0
  1420  000BCE  6E2D               	movwf	_next+1,c
  1421  000BD0  0E21               	movlw	33
  1422  000BD2                     L18:
  1423  000BD2  6E2C               	movwf	_next,c
  1424  000BD4  D638               	goto	l5269
  1425  000BD6                     l5507:
  1426  000BD6  C0D4  F110         	movff	_state,??_main
  1427  000BDA  C0D5  F111         	movff	_state+1,??_main+1
  1428                           
  1429                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1430                           ; Switch size 1, requested type "space"
  1431                           ; Number of cases is 1, Range of values is 0 to 0
  1432                           ; switch strategies available:
  1433                           ; Name         Instructions Cycles
  1434                           ; simple_byte            4     3 (average)
  1435                           ;	Chosen strategy is simple_byte
  1436  000BDE  0101               	movlb	1	; () banked
  1437  000BE0  5111               	movf	(??_main+1)& (0+255),w,b
  1438  000BE2  0A00               	xorlw	0	; case 0
  1439  000BE4  A4D8               	btfss	status,2,c
  1440  000BE6  D603               	goto	l5249
  1441                           
  1442                           ; BSR set to: 1
  1443                           ; Switch size 1, requested type "space"
  1444                           ; Number of cases is 34, Range of values is 0 to 34
  1445                           ; switch strategies available:
  1446                           ; Name         Instructions Cycles
  1447                           ; simple_byte          103    52 (average)
  1448                           ;	Chosen strategy is simple_byte
  1449  000BE8  0101               	movlb	1	; () banked
  1450  000BEA  5110               	movf	??_main& (0+255),w,b
  1451  000BEC  0A00               	xorlw	0	; case 0
  1452  000BEE  B4D8               	btfsc	status,2,c
  1453  000BF0  D603               	goto	l5251
  1454  000BF2  0A01               	xorlw	1	; case 1
  1455  000BF4  B4D8               	btfsc	status,2,c
  1456  000BF6  D618               	goto	l5261
  1457  000BF8  0A03               	xorlw	3	; case 2
  1458  000BFA  B4D8               	btfsc	status,2,c
  1459  000BFC  D626               	goto	l5271
  1460  000BFE  0A01               	xorlw	1	; case 3
  1461  000C00  B4D8               	btfsc	status,2,c
  1462  000C02  D639               	goto	l5283
  1463  000C04  0A07               	xorlw	7	; case 4
  1464  000C06  B4D8               	btfsc	status,2,c
  1465  000C08  D645               	goto	l5293
  1466  000C0A  0A01               	xorlw	1	; case 5
  1467  000C0C  B4D8               	btfsc	status,2,c
  1468  000C0E  D651               	goto	l5303
  1469  000C10  0A03               	xorlw	3	; case 6
  1470  000C12  B4D8               	btfsc	status,2,c
  1471  000C14  D6B1               	goto	l5353
  1472  000C16  0A01               	xorlw	1	; case 7
  1473  000C18  B4D8               	btfsc	status,2,c
  1474  000C1A  D672               	goto	l5313
  1475  000C1C  0A0F               	xorlw	15	; case 8
  1476  000C1E  B4D8               	btfsc	status,2,c
  1477  000C20  D67E               	goto	l5323
  1478  000C22  0A01               	xorlw	1	; case 9
  1479  000C24  B4D8               	btfsc	status,2,c
  1480  000C26  D68A               	goto	l5333
  1481  000C28  0A03               	xorlw	3	; case 10
  1482  000C2A  B4D8               	btfsc	status,2,c
  1483  000C2C  D696               	goto	l5343
  1484  000C2E  0A01               	xorlw	1	; case 11
  1485  000C30  B4D8               	btfsc	status,2,c
  1486  000C32  D64B               	goto	l5307
  1487  000C34  0A07               	xorlw	7	; case 12
  1488  000C36  B4D8               	btfsc	status,2,c
  1489  000C38  D651               	goto	l5309
  1490  000C3A  0A01               	xorlw	1	; case 13
  1491  000C3C  B4D8               	btfsc	status,2,c
  1492  000C3E  D657               	goto	l5311
  1493  000C40  0A03               	xorlw	3	; case 14
  1494  000C42  B4D8               	btfsc	status,2,c
  1495  000C44  D6C0               	goto	l5363
  1496  000C46  0A01               	xorlw	1	; case 15
  1497  000C48  B4D8               	btfsc	status,2,c
  1498  000C4A  D6CC               	goto	l5373
  1499  000C4C  0A1F               	xorlw	31	; case 16
  1500  000C4E  B4D8               	btfsc	status,2,c
  1501  000C50  D6D8               	goto	l5383
  1502  000C52  0A01               	xorlw	1	; case 17
  1503  000C54  B4D8               	btfsc	status,2,c
  1504  000C56  D6E4               	goto	l5393
  1505  000C58  0A03               	xorlw	3	; case 18
  1506  000C5A  B4D8               	btfsc	status,2,c
  1507  000C5C  D699               	goto	l5357
  1508  000C5E  0A01               	xorlw	1	; case 19
  1509  000C60  B4D8               	btfsc	status,2,c
  1510  000C62  D69F               	goto	l5359
  1511  000C64  0A07               	xorlw	7	; case 20
  1512  000C66  B4D8               	btfsc	status,2,c
  1513  000C68  D6A5               	goto	l5361
  1514  000C6A  0A01               	xorlw	1	; case 21
  1515  000C6C  B4D8               	btfsc	status,2,c
  1516  000C6E  D6E7               	goto	l5403
  1517  000C70  0A03               	xorlw	3	; case 22
  1518  000C72  B4D8               	btfsc	status,2,c
  1519  000C74  D6F7               	goto	l5413
  1520  000C76  0A01               	xorlw	1	; case 23
  1521  000C78  B4D8               	btfsc	status,2,c
  1522  000C7A  D6FF               	goto	l5417
  1523  000C7C  0A0F               	xorlw	15	; case 24
  1524  000C7E  B4D8               	btfsc	status,2,c
  1525  000C80  D707               	goto	l5421
  1526  000C82  0A02               	xorlw	2	; case 26
  1527  000C84  B4D8               	btfsc	status,2,c
  1528  000C86  D71F               	goto	l5435
  1529  000C88  0A01               	xorlw	1	; case 27
  1530  000C8A  B4D8               	btfsc	status,2,c
  1531  000C8C  D72B               	goto	l5439
  1532  000C8E  0A07               	xorlw	7	; case 28
  1533  000C90  B4D8               	btfsc	status,2,c
  1534  000C92  D737               	goto	l5443
  1535  000C94  0A01               	xorlw	1	; case 29
  1536  000C96  B4D8               	btfsc	status,2,c
  1537  000C98  D743               	goto	l5447
  1538  000C9A  0A03               	xorlw	3	; case 30
  1539  000C9C  B4D8               	btfsc	status,2,c
  1540  000C9E  D74F               	goto	l5457
  1541  000CA0  0A01               	xorlw	1	; case 31
  1542  000CA2  B4D8               	btfsc	status,2,c
  1543  000CA4  D75B               	goto	l5467
  1544  000CA6  0A3F               	xorlw	63	; case 32
  1545  000CA8  B4D8               	btfsc	status,2,c
  1546  000CAA  D767               	goto	l5477
  1547  000CAC  0A01               	xorlw	1	; case 33
  1548  000CAE  B4D8               	btfsc	status,2,c
  1549  000CB0  D773               	goto	l5487
  1550  000CB2  0A03               	xorlw	3	; case 34
  1551  000CB4  B4D8               	btfsc	status,2,c
  1552  000CB6  D77F               	goto	l5497
  1553                           
  1554                           ; BSR set to: 1
  1555                           
  1556                           ; BSR set to: 1
  1557  000CB8  D59A               	goto	l5249
  1558  000CBA                     __end_of_main:
  1559                           	opt stack 0
  1560                           tblptru	equ	0xFF8
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           status	equ	0xFD8
  1564                           
  1565 ;; *************** function _timer1_enable *****************
  1566 ;; Defined at:
  1567 ;;		line 757 in file "user.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;		None
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;		None
  1572 ;; Return value:  Size  Location     Type
  1573 ;;                  1    wreg      void 
  1574 ;; Registers used:
  1575 ;;		status,2, status,0
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1581 ;;      Params:         0       0       0       0       0       0       0       0       0
  1582 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1583 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1584 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1585 ;;Total ram usage:        0 bytes
  1586 ;; Hardware stack levels used:    1
  1587 ;; Hardware stack levels required when called:    6
  1588 ;; This function calls:
  1589 ;;		Nothing
  1590 ;; This function is called by:
  1591 ;;		_main
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           	psect	text1
  1596  001F92                     __ptext1:
  1597                           	opt stack 0
  1598  001F92                     _timer1_enable:
  1599                           	opt stack 24
  1600                           
  1601                           ;user.c: 759: T1CON |= 1 << 0;
  1602                           
  1603                           ; BSR set to: 1
  1604                           ;incstack = 0
  1605  001F92  80CD               	bsf	4045,0,c	;volatile
  1606  001F94  0012               	return		;funcret
  1607  001F96                     __end_of_timer1_enable:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           status	equ	0xFD8
  1613                           
  1614 ;; *************** function _timer1_disable *****************
  1615 ;; Defined at:
  1616 ;;		line 762 in file "user.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		status,2, status,0
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1630 ;;      Params:         0       0       0       0       0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1633 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1634 ;;Total ram usage:        0 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    6
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_main
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text2
  1645  001F96                     __ptext2:
  1646                           	opt stack 0
  1647  001F96                     _timer1_disable:
  1648                           	opt stack 24
  1649                           
  1650                           ;user.c: 764: T1CON &= ~(1 << 0);
  1651                           
  1652                           ;incstack = 0
  1653  001F96  90CD               	bcf	4045,0,c	;volatile
  1654  001F98  0012               	return		;funcret
  1655  001F9A                     __end_of_timer1_disable:
  1656                           	opt stack 0
  1657                           tblptru	equ	0xFF8
  1658                           postinc0	equ	0xFEE
  1659                           wreg	equ	0xFE8
  1660                           status	equ	0xFD8
  1661                           
  1662 ;; *************** function _ir_is_code_number *****************
  1663 ;; Defined at:
  1664 ;;		line 586 in file "user.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;  human_code      1    wreg     unsigned char 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  human_code      1   39[COMRAM] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      unsigned char 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1678 ;;      Params:         0       0       0       0       0       0       0       0       0
  1679 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1681 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1682 ;;Total ram usage:        1 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    6
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text3
  1693  001CB0                     __ptext3:
  1694                           	opt stack 0
  1695  001CB0                     _ir_is_code_number:
  1696                           	opt stack 24
  1697                           
  1698                           ;incstack = 0
  1699                           ;ir_is_code_number@human_code stored from wreg
  1700  001CB0  6E28               	movwf	ir_is_code_number@human_code,c
  1701                           
  1702                           ;user.c: 588: if(human_code == 0 || human_code == 1 || human_code == 2 || human_code == 
      +                          3 || human_code == 4
  1703                           ;user.c: 589: || human_code == 5 || human_code == 6 || human_code == 7 || human_code == 
      +                          8 || human_code == 9)
  1704  001CB2  5028               	movf	ir_is_code_number@human_code,w,c
  1705  001CB4  B4D8               	btfsc	status,2,c
  1706  001CB6  D023               	goto	l5179
  1707  001CB8  0428               	decf	ir_is_code_number@human_code,w,c
  1708  001CBA  B4D8               	btfsc	status,2,c
  1709  001CBC  D020               	goto	l5179
  1710  001CBE  0E02               	movlw	2
  1711  001CC0  1828               	xorwf	ir_is_code_number@human_code,w,c
  1712  001CC2  B4D8               	btfsc	status,2,c
  1713  001CC4  D01C               	goto	l5179
  1714  001CC6  0E03               	movlw	3
  1715  001CC8  1828               	xorwf	ir_is_code_number@human_code,w,c
  1716  001CCA  B4D8               	btfsc	status,2,c
  1717  001CCC  D018               	goto	l5179
  1718  001CCE  0E04               	movlw	4
  1719  001CD0  1828               	xorwf	ir_is_code_number@human_code,w,c
  1720  001CD2  B4D8               	btfsc	status,2,c
  1721  001CD4  D014               	goto	l5179
  1722  001CD6  0E05               	movlw	5
  1723  001CD8  1828               	xorwf	ir_is_code_number@human_code,w,c
  1724  001CDA  B4D8               	btfsc	status,2,c
  1725  001CDC  D010               	goto	l5179
  1726  001CDE  0E06               	movlw	6
  1727  001CE0  1828               	xorwf	ir_is_code_number@human_code,w,c
  1728  001CE2  B4D8               	btfsc	status,2,c
  1729  001CE4  D00C               	goto	l5179
  1730  001CE6  0E07               	movlw	7
  1731  001CE8  1828               	xorwf	ir_is_code_number@human_code,w,c
  1732  001CEA  B4D8               	btfsc	status,2,c
  1733  001CEC  D008               	goto	l5179
  1734  001CEE  0E08               	movlw	8
  1735  001CF0  1828               	xorwf	ir_is_code_number@human_code,w,c
  1736  001CF2  B4D8               	btfsc	status,2,c
  1737  001CF4  D004               	goto	l5179
  1738  001CF6  0E09               	movlw	9
  1739  001CF8  1828               	xorwf	ir_is_code_number@human_code,w,c
  1740  001CFA  A4D8               	btfss	status,2,c
  1741  001CFC  D002               	goto	l5185
  1742  001CFE                     l5179:
  1743                           
  1744                           ;user.c: 590: return 1;
  1745  001CFE  0E01               	movlw	1
  1746  001D00  0012               	return	
  1747  001D02                     l5185:
  1748                           
  1749                           ;user.c: 591: else
  1750                           ;user.c: 592: return 0;
  1751  001D02  0E00               	movlw	0
  1752  001D04  0012               	return	
  1753  001D06                     __end_of_ir_is_code_number:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           postinc0	equ	0xFEE
  1757                           wreg	equ	0xFE8
  1758                           status	equ	0xFD8
  1759                           
  1760 ;; *************** function _get_timer1_counter_speed *****************
  1761 ;; Defined at:
  1762 ;;		line 706 in file "user.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  data            2    8[BANK1 ] PTR unsigned char 
  1765 ;;		 -> aux1(6), 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;		None
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  1    wreg      void 
  1770 ;; Registers used:
  1771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1777 ;;      Params:         0       0       2       0       0       0       0       0       0
  1778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1779 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1780 ;;      Totals:         0       0       3       0       0       0       0       0       0
  1781 ;;Total ram usage:        3 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    8
  1784 ;; This function calls:
  1785 ;;		_get_cents_reg
  1786 ;;		_get_seconds_reg
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text4
  1793  0016AA                     __ptext4:
  1794                           	opt stack 0
  1795  0016AA                     _get_timer1_counter_speed:
  1796                           	opt stack 22
  1797                           
  1798                           ;user.c: 708: data[0] = get_cents_reg(timer1_counter) & 0x0f;
  1799                           
  1800                           ;incstack = 0
  1801  0016AA  0100               	movlb	0	; () banked
  1802  0016AC  51C5               	movf	_timer1_counter& (0+255),w,b
  1803  0016AE  ECD9  F00E         	call	_get_cents_reg
  1804  0016B2  0B0F               	andlw	15
  1805  0016B4  C108  FFD9         	movff	get_timer1_counter_speed@data,fsr2l
  1806  0016B8  C109  FFDA         	movff	get_timer1_counter_speed@data+1,fsr2h
  1807  0016BC  6EDF               	movwf	indf2,c
  1808                           
  1809                           ;user.c: 709: data[1] = (get_cents_reg(timer1_counter) & 0xf0)>>4;
  1810  0016BE  0101               	movlb	1	; () banked
  1811  0016C0  EE20 F001          	lfsr	2,1
  1812  0016C4  5108               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1813  0016C6  26D9               	addwf	fsr2l,f,c
  1814  0016C8  5109               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1815  0016CA  22DA               	addwfc	fsr2h,f,c
  1816  0016CC  0100               	movlb	0	; () banked
  1817  0016CE  51C5               	movf	_timer1_counter& (0+255),w,b
  1818  0016D0  ECD9  F00E         	call	_get_cents_reg
  1819  0016D4  0101               	movlb	1	; () banked
  1820  0016D6  6F0A               	movwf	??_get_timer1_counter_speed& (0+255),b
  1821  0016D8  0101               	movlb	1	; () banked
  1822  0016DA  390A               	swapf	??_get_timer1_counter_speed& (0+255),w,b
  1823  0016DC  0B0F               	andlw	15
  1824  0016DE  0B0F               	andlw	15
  1825  0016E0  6EDF               	movwf	indf2,c
  1826                           
  1827                           ;user.c: 710: data[2] = get_seconds_reg(timer1_counter_10) & 0x0f;
  1828  0016E2  0101               	movlb	1	; () banked
  1829  0016E4  EE20 F002          	lfsr	2,2
  1830  0016E8  5108               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1831  0016EA  26D9               	addwf	fsr2l,f,c
  1832  0016EC  5109               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1833  0016EE  22DA               	addwfc	fsr2h,f,c
  1834  0016F0  0100               	movlb	0	; () banked
  1835  0016F2  51D3               	movf	_timer1_counter_10& (0+255),w,b
  1836  0016F4  EC83  F00E         	call	_get_seconds_reg
  1837  0016F8  0B0F               	andlw	15
  1838  0016FA  6EDF               	movwf	indf2,c
  1839                           
  1840                           ;user.c: 711: data[3] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  1841  0016FC  0101               	movlb	1	; () banked
  1842  0016FE  EE20 F003          	lfsr	2,3
  1843  001702  5108               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1844  001704  26D9               	addwf	fsr2l,f,c
  1845  001706  5109               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1846  001708  22DA               	addwfc	fsr2h,f,c
  1847  00170A  0100               	movlb	0	; () banked
  1848  00170C  51D3               	movf	_timer1_counter_10& (0+255),w,b
  1849  00170E  EC83  F00E         	call	_get_seconds_reg
  1850  001712  0101               	movlb	1	; () banked
  1851  001714  6F0A               	movwf	??_get_timer1_counter_speed& (0+255),b
  1852  001716  0101               	movlb	1	; () banked
  1853  001718  390A               	swapf	??_get_timer1_counter_speed& (0+255),w,b
  1854  00171A  0B0F               	andlw	15
  1855  00171C  0B0F               	andlw	15
  1856  00171E  6EDF               	movwf	indf2,c
  1857                           
  1858                           ;user.c: 712: data[4] = get_seconds_reg(timer1_counter_min) & 0x0f;
  1859  001720  0101               	movlb	1	; () banked
  1860  001722  EE20 F004          	lfsr	2,4
  1861  001726  5108               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1862  001728  26D9               	addwf	fsr2l,f,c
  1863  00172A  5109               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1864  00172C  22DA               	addwfc	fsr2h,f,c
  1865  00172E  5033               	movf	_timer1_counter_min,w,c
  1866  001730  EC83  F00E         	call	_get_seconds_reg
  1867  001734  0B0F               	andlw	15
  1868  001736  6EDF               	movwf	indf2,c
  1869                           
  1870                           ;user.c: 713: data[5] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  1871  001738  0101               	movlb	1	; () banked
  1872  00173A  EE20 F005          	lfsr	2,5
  1873  00173E  5108               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1874  001740  26D9               	addwf	fsr2l,f,c
  1875  001742  5109               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1876  001744  22DA               	addwfc	fsr2h,f,c
  1877  001746  5033               	movf	_timer1_counter_min,w,c
  1878  001748  EC83  F00E         	call	_get_seconds_reg
  1879  00174C  0101               	movlb	1	; () banked
  1880  00174E  6F0A               	movwf	??_get_timer1_counter_speed& (0+255),b
  1881  001750  0101               	movlb	1	; () banked
  1882  001752  390A               	swapf	??_get_timer1_counter_speed& (0+255),w,b
  1883  001754  0B0F               	andlw	15
  1884  001756  0B0F               	andlw	15
  1885  001758  6EDF               	movwf	indf2,c
  1886                           
  1887                           ; BSR set to: 1
  1888  00175A  0012               	return		;funcret
  1889  00175C                     __end_of_get_timer1_counter_speed:
  1890                           	opt stack 0
  1891                           tblptru	equ	0xFF8
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           indf2	equ	0xFDF
  1895                           fsr2h	equ	0xFDA
  1896                           fsr2l	equ	0xFD9
  1897                           status	equ	0xFD8
  1898                           
  1899 ;; *************** function _get_cents_reg *****************
  1900 ;; Defined at:
  1901 ;;		line 329 in file "user.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;  cents           1    wreg     unsigned char 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  cents           1    7[BANK1 ] unsigned char 
  1906 ;;  res             1    6[BANK1 ] unsigned char 
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      unsigned char 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2, status,0, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0
  1917 ;;      Locals:         0       0       2       0       0       0       0       0       0
  1918 ;;      Temps:          0       0       2       0       0       0       0       0       0
  1919 ;;      Totals:         0       0       4       0       0       0       0       0       0
  1920 ;;Total ram usage:        4 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    7
  1923 ;; This function calls:
  1924 ;;		___awdiv
  1925 ;;		___awmod
  1926 ;; This function is called by:
  1927 ;;		_get_timer1_counter_speed
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text5
  1932  001DB2                     __ptext5:
  1933                           	opt stack 0
  1934  001DB2                     _get_cents_reg:
  1935                           	opt stack 22
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;incstack = 0
  1939                           ;get_cents_reg@cents stored from wreg
  1940  001DB2  0101               	movlb	1	; () banked
  1941  001DB4  6F07               	movwf	get_cents_reg@cents& (0+255),b
  1942                           
  1943                           ;user.c: 331: char res = 0;
  1944  001DB6  0E00               	movlw	0
  1945  001DB8  0101               	movlb	1	; () banked
  1946  001DBA  6F06               	movwf	get_cents_reg@res& (0+255),b
  1947                           
  1948                           ; BSR set to: 1
  1949                           ;user.c: 332: res = (cents/10)<<4 | (cents % 10);
  1950  001DBC  C107  F100         	movff	get_cents_reg@cents,___awmod@dividend
  1951  001DC0  0101               	movlb	1	; () banked
  1952  001DC2  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  1953  001DC4  0E00               	movlw	0
  1954  001DC6  0101               	movlb	1	; () banked
  1955  001DC8  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  1956  001DCA  0E0A               	movlw	10
  1957  001DCC  6F02               	movwf	___awmod@divisor& (0+255),b
  1958  001DCE  EC01  F00C         	call	___awmod	;wreg free
  1959  001DD2  C100  F104         	movff	?___awmod,??_get_cents_reg
  1960  001DD6  C101  F105         	movff	?___awmod+1,??_get_cents_reg+1
  1961  001DDA  C107  F100         	movff	get_cents_reg@cents,___awdiv@dividend
  1962  001DDE  0101               	movlb	1	; () banked
  1963  001DE0  6B01               	clrf	(___awdiv@dividend+1)& (0+255),b
  1964  001DE2  0E00               	movlw	0
  1965  001DE4  0101               	movlb	1	; () banked
  1966  001DE6  6F03               	movwf	(___awdiv@divisor+1)& (0+255),b
  1967  001DE8  0E0A               	movlw	10
  1968  001DEA  6F02               	movwf	___awdiv@divisor& (0+255),b
  1969  001DEC  ECAE  F00B         	call	___awdiv	;wreg free
  1970  001DF0  0101               	movlb	1	; () banked
  1971  001DF2  3900               	swapf	?___awdiv& (0+255),w,b
  1972  001DF4  0BF0               	andlw	240
  1973  001DF6  0101               	movlb	1	; () banked
  1974  001DF8  1104               	iorwf	??_get_cents_reg& (0+255),w,b
  1975  001DFA  0101               	movlb	1	; () banked
  1976  001DFC  6F06               	movwf	get_cents_reg@res& (0+255),b
  1977                           
  1978                           ; BSR set to: 1
  1979                           ;user.c: 333: return res;
  1980  001DFE  0101               	movlb	1	; () banked
  1981  001E00  5106               	movf	get_cents_reg@res& (0+255),w,b
  1982  001E02  0012               	return	
  1983  001E04                     __end_of_get_cents_reg:
  1984                           	opt stack 0
  1985                           tblptru	equ	0xFF8
  1986                           postinc0	equ	0xFEE
  1987                           wreg	equ	0xFE8
  1988                           indf2	equ	0xFDF
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _get_timer1_counter_interval *****************
  1994 ;; Defined at:
  1995 ;;		line 716 in file "user.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  data            2    4[BANK1 ] PTR unsigned char 
  1998 ;;		 -> aux1(6), 
  1999 ;;  state           1    6[BANK1 ] unsigned char 
  2000 ;;  current_prog    1    7[BANK1 ] unsigned char 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;		None
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2012 ;;      Params:         0       0       4       0       0       0       0       0       0
  2013 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2014 ;;      Temps:          0       0       2       0       0       0       0       0       0
  2015 ;;      Totals:         0       0       6       0       0       0       0       0       0
  2016 ;;Total ram usage:        6 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    7
  2019 ;; This function calls:
  2020 ;;		___awdiv
  2021 ;;		___awmod
  2022 ;;		_get_seconds_reg
  2023 ;; This function is called by:
  2024 ;;		_main
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text6
  2029  000FD8                     __ptext6:
  2030                           	opt stack 0
  2031  000FD8                     _get_timer1_counter_interval:
  2032                           	opt stack 23
  2033                           
  2034                           ;user.c: 718: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  2035                           
  2036                           ; BSR set to: 1
  2037                           ;incstack = 0
  2038  000FD8  0100               	movlb	0	; () banked
  2039  000FDA  51D3               	movf	_timer1_counter_10& (0+255),w,b
  2040  000FDC  EC83  F00E         	call	_get_seconds_reg
  2041  000FE0  0B0F               	andlw	15
  2042  000FE2  C104  FFD9         	movff	get_timer1_counter_interval@data,fsr2l
  2043  000FE6  C105  FFDA         	movff	get_timer1_counter_interval@data+1,fsr2h
  2044  000FEA  6EDF               	movwf	indf2,c
  2045                           
  2046                           ;user.c: 719: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  2047  000FEC  0101               	movlb	1	; () banked
  2048  000FEE  EE20 F001          	lfsr	2,1
  2049  000FF2  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2050  000FF4  26D9               	addwf	fsr2l,f,c
  2051  000FF6  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2052  000FF8  22DA               	addwfc	fsr2h,f,c
  2053  000FFA  0100               	movlb	0	; () banked
  2054  000FFC  51D3               	movf	_timer1_counter_10& (0+255),w,b
  2055  000FFE  EC83  F00E         	call	_get_seconds_reg
  2056  001002  0101               	movlb	1	; () banked
  2057  001004  6F08               	movwf	??_get_timer1_counter_interval& (0+255),b
  2058  001006  0101               	movlb	1	; () banked
  2059  001008  3908               	swapf	??_get_timer1_counter_interval& (0+255),w,b
  2060  00100A  0B0F               	andlw	15
  2061  00100C  0B0F               	andlw	15
  2062  00100E  6EDF               	movwf	indf2,c
  2063                           
  2064                           ;user.c: 720: data[2] = get_seconds_reg(timer1_counter_min) & 0x0f;
  2065  001010  0101               	movlb	1	; () banked
  2066  001012  EE20 F002          	lfsr	2,2
  2067  001016  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2068  001018  26D9               	addwf	fsr2l,f,c
  2069  00101A  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2070  00101C  22DA               	addwfc	fsr2h,f,c
  2071  00101E  5033               	movf	_timer1_counter_min,w,c
  2072  001020  EC83  F00E         	call	_get_seconds_reg
  2073  001024  0B0F               	andlw	15
  2074  001026  6EDF               	movwf	indf2,c
  2075                           
  2076                           ;user.c: 721: data[3] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  2077  001028  0101               	movlb	1	; () banked
  2078  00102A  EE20 F003          	lfsr	2,3
  2079  00102E  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2080  001030  26D9               	addwf	fsr2l,f,c
  2081  001032  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2082  001034  22DA               	addwfc	fsr2h,f,c
  2083  001036  5033               	movf	_timer1_counter_min,w,c
  2084  001038  EC83  F00E         	call	_get_seconds_reg
  2085  00103C  0101               	movlb	1	; () banked
  2086  00103E  6F08               	movwf	??_get_timer1_counter_interval& (0+255),b
  2087  001040  0101               	movlb	1	; () banked
  2088  001042  3908               	swapf	??_get_timer1_counter_interval& (0+255),w,b
  2089  001044  0B0F               	andlw	15
  2090  001046  0B0F               	andlw	15
  2091  001048  6EDF               	movwf	indf2,c
  2092                           
  2093                           ; BSR set to: 1
  2094                           ;user.c: 724: if(state == 33 || state == 34)
  2095  00104A  0E21               	movlw	33
  2096  00104C  0101               	movlb	1	; () banked
  2097  00104E  1906               	xorwf	get_timer1_counter_interval@state& (0+255),w,b
  2098  001050  B4D8               	btfsc	status,2,c
  2099  001052  D005               	goto	l5213
  2100                           
  2101                           ; BSR set to: 1
  2102  001054  0E22               	movlw	34
  2103  001056  0101               	movlb	1	; () banked
  2104  001058  1906               	xorwf	get_timer1_counter_interval@state& (0+255),w,b
  2105  00105A  A4D8               	btfss	status,2,c
  2106  00105C  D013               	goto	l5215
  2107  00105E                     l5213:
  2108                           
  2109                           ; BSR set to: 1
  2110                           ;user.c: 725: {
  2111                           ;user.c: 726: data[4] = 'V';
  2112  00105E  0101               	movlb	1	; () banked
  2113  001060  EE20 F004          	lfsr	2,4
  2114  001064  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2115  001066  26D9               	addwf	fsr2l,f,c
  2116  001068  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2117  00106A  22DA               	addwfc	fsr2h,f,c
  2118  00106C  0E56               	movlw	86
  2119  00106E  6EDF               	movwf	indf2,c
  2120                           
  2121                           ;user.c: 727: data[5] = 'P';
  2122  001070  0101               	movlb	1	; () banked
  2123  001072  EE20 F005          	lfsr	2,5
  2124  001076  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2125  001078  26D9               	addwf	fsr2l,f,c
  2126  00107A  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2127  00107C  22DA               	addwfc	fsr2h,f,c
  2128  00107E  0E50               	movlw	80
  2129  001080  6EDF               	movwf	indf2,c
  2130                           
  2131                           ;user.c: 728: }
  2132  001082  0012               	return	
  2133  001084                     l5215:
  2134                           
  2135                           ; BSR set to: 1
  2136                           ;user.c: 729: else if(current_type == 'f')
  2137  001084  0E66               	movlw	102
  2138  001086  1835               	xorwf	_current_type,w,c
  2139  001088  A4D8               	btfss	status,2,c
  2140  00108A  D053               	goto	l5223
  2141                           
  2142                           ; BSR set to: 1
  2143                           ;user.c: 730: {
  2144                           ;user.c: 731: if(current_program + 1 < 10)
  2145  00108C  0101               	movlb	1	; () banked
  2146  00108E  5107               	movf	get_timer1_counter_interval@current_program& (0+255),w,b
  2147  001090  0101               	movlb	1	; () banked
  2148  001092  6F08               	movwf	??_get_timer1_counter_interval& (0+255),b
  2149  001094  6B09               	clrf	(??_get_timer1_counter_interval+1)& (0+255),b
  2150  001096  0E01               	movlw	1
  2151  001098  0101               	movlb	1	; () banked
  2152  00109A  2708               	addwf	??_get_timer1_counter_interval& (0+255),f,b
  2153  00109C  0E00               	movlw	0
  2154  00109E  2309               	addwfc	(??_get_timer1_counter_interval+1)& (0+255),f,b
  2155  0010A0  0101               	movlb	1	; () banked
  2156  0010A2  BF09               	btfsc	(??_get_timer1_counter_interval+1)& (0+255),7,b
  2157  0010A4  D008               	goto	l5219
  2158  0010A6  0101               	movlb	1	; () banked
  2159  0010A8  5109               	movf	(??_get_timer1_counter_interval+1)& (0+255),w,b
  2160  0010AA  E10E               	bnz	l5221
  2161  0010AC  0E0A               	movlw	10
  2162  0010AE  0101               	movlb	1	; () banked
  2163  0010B0  5D08               	subwf	??_get_timer1_counter_interval& (0+255),w,b
  2164  0010B2  B0D8               	btfsc	status,0,c
  2165  0010B4  D009               	goto	l5221
  2166  0010B6                     l5219:
  2167                           
  2168                           ; BSR set to: 1
  2169                           ;user.c: 732: {
  2170                           ;user.c: 733: data[5] = 'F';
  2171  0010B6  0101               	movlb	1	; () banked
  2172  0010B8  EE20 F005          	lfsr	2,5
  2173  0010BC  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2174  0010BE  26D9               	addwf	fsr2l,f,c
  2175  0010C0  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2176  0010C2  22DA               	addwfc	fsr2h,f,c
  2177  0010C4  0E46               	movlw	70
  2178  0010C6  D019               	goto	L19
  2179  0010C8                     l5221:
  2180                           
  2181                           ; BSR set to: 1
  2182                           ;user.c: 735: else
  2183                           ;user.c: 736: {
  2184                           ;user.c: 737: data[5] = (current_program +1)/10;
  2185  0010C8  0101               	movlb	1	; () banked
  2186  0010CA  EE20 F005          	lfsr	2,5
  2187  0010CE  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2188  0010D0  26D9               	addwf	fsr2l,f,c
  2189  0010D2  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2190  0010D4  22DA               	addwfc	fsr2h,f,c
  2191  0010D6  0E01               	movlw	1
  2192  0010D8  0101               	movlb	1	; () banked
  2193  0010DA  2507               	addwf	get_timer1_counter_interval@current_program& (0+255),w,b
  2194  0010DC  0101               	movlb	1	; () banked
  2195  0010DE  6F00               	movwf	___awdiv@dividend& (0+255),b
  2196  0010E0  0101               	movlb	1	; () banked
  2197  0010E2  6B01               	clrf	(___awdiv@dividend+1)& (0+255),b
  2198  0010E4  0E00               	movlw	0
  2199  0010E6  2301               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  2200  0010E8  0E00               	movlw	0
  2201  0010EA  0101               	movlb	1	; () banked
  2202  0010EC  6F03               	movwf	(___awdiv@divisor+1)& (0+255),b
  2203  0010EE  0E0A               	movlw	10
  2204  0010F0  6F02               	movwf	___awdiv@divisor& (0+255),b
  2205  0010F2  ECAE  F00B         	call	___awdiv	;wreg free
  2206  0010F6  0101               	movlb	1	; () banked
  2207  0010F8  5100               	movf	?___awdiv& (0+255),w,b
  2208  0010FA                     L19:
  2209  0010FA  6EDF               	movwf	indf2,c
  2210                           
  2211                           ; BSR set to: 1
  2212                           ;user.c: 738: }
  2213                           ;user.c: 739: data[4] = (current_program +1) % 10;
  2214  0010FC  0101               	movlb	1	; () banked
  2215  0010FE  EE20 F004          	lfsr	2,4
  2216  001102  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2217  001104  26D9               	addwf	fsr2l,f,c
  2218  001106  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2219  001108  22DA               	addwfc	fsr2h,f,c
  2220  00110A  0E01               	movlw	1
  2221  00110C  0101               	movlb	1	; () banked
  2222  00110E  2507               	addwf	get_timer1_counter_interval@current_program& (0+255),w,b
  2223  001110  0101               	movlb	1	; () banked
  2224  001112  6F00               	movwf	___awmod@dividend& (0+255),b
  2225  001114  0101               	movlb	1	; () banked
  2226  001116  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  2227  001118  0E00               	movlw	0
  2228  00111A  2301               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  2229  00111C  0E00               	movlw	0
  2230  00111E  0101               	movlb	1	; () banked
  2231  001120  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  2232  001122  0E0A               	movlw	10
  2233  001124  6F02               	movwf	___awmod@divisor& (0+255),b
  2234  001126  EC01  F00C         	call	___awmod	;wreg free
  2235  00112A  0101               	movlb	1	; () banked
  2236  00112C  5100               	movf	?___awmod& (0+255),w,b
  2237  00112E  6EDF               	movwf	indf2,c
  2238                           
  2239                           ;user.c: 740: }
  2240  001130  0012               	return	
  2241  001132                     l5223:
  2242                           
  2243                           ; BSR set to: 1
  2244                           ;user.c: 741: else
  2245                           ;user.c: 742: {
  2246                           ;user.c: 743: if(current_program + 1 < 10)
  2247  001132  0101               	movlb	1	; () banked
  2248  001134  5107               	movf	get_timer1_counter_interval@current_program& (0+255),w,b
  2249  001136  0101               	movlb	1	; () banked
  2250  001138  6F08               	movwf	??_get_timer1_counter_interval& (0+255),b
  2251  00113A  6B09               	clrf	(??_get_timer1_counter_interval+1)& (0+255),b
  2252  00113C  0E01               	movlw	1
  2253  00113E  0101               	movlb	1	; () banked
  2254  001140  2708               	addwf	??_get_timer1_counter_interval& (0+255),f,b
  2255  001142  0E00               	movlw	0
  2256  001144  2309               	addwfc	(??_get_timer1_counter_interval+1)& (0+255),f,b
  2257  001146  0101               	movlb	1	; () banked
  2258  001148  BF09               	btfsc	(??_get_timer1_counter_interval+1)& (0+255),7,b
  2259  00114A  D008               	goto	l5225
  2260  00114C  0101               	movlb	1	; () banked
  2261  00114E  5109               	movf	(??_get_timer1_counter_interval+1)& (0+255),w,b
  2262  001150  E10E               	bnz	l5227
  2263  001152  0E0A               	movlw	10
  2264  001154  0101               	movlb	1	; () banked
  2265  001156  5D08               	subwf	??_get_timer1_counter_interval& (0+255),w,b
  2266  001158  B0D8               	btfsc	status,0,c
  2267  00115A  D009               	goto	l5227
  2268  00115C                     l5225:
  2269                           
  2270                           ; BSR set to: 1
  2271                           ;user.c: 744: {
  2272                           ;user.c: 745: data[5] = 'C';
  2273  00115C  0101               	movlb	1	; () banked
  2274  00115E  EE20 F005          	lfsr	2,5
  2275  001162  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2276  001164  26D9               	addwf	fsr2l,f,c
  2277  001166  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2278  001168  22DA               	addwfc	fsr2h,f,c
  2279  00116A  0E43               	movlw	67
  2280  00116C  D019               	goto	L20
  2281  00116E                     l5227:
  2282                           
  2283                           ; BSR set to: 1
  2284                           ;user.c: 747: else
  2285                           ;user.c: 748: {
  2286                           ;user.c: 749: data[5] = (current_program +1)/10;
  2287  00116E  0101               	movlb	1	; () banked
  2288  001170  EE20 F005          	lfsr	2,5
  2289  001174  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2290  001176  26D9               	addwf	fsr2l,f,c
  2291  001178  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2292  00117A  22DA               	addwfc	fsr2h,f,c
  2293  00117C  0E01               	movlw	1
  2294  00117E  0101               	movlb	1	; () banked
  2295  001180  2507               	addwf	get_timer1_counter_interval@current_program& (0+255),w,b
  2296  001182  0101               	movlb	1	; () banked
  2297  001184  6F00               	movwf	___awdiv@dividend& (0+255),b
  2298  001186  0101               	movlb	1	; () banked
  2299  001188  6B01               	clrf	(___awdiv@dividend+1)& (0+255),b
  2300  00118A  0E00               	movlw	0
  2301  00118C  2301               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  2302  00118E  0E00               	movlw	0
  2303  001190  0101               	movlb	1	; () banked
  2304  001192  6F03               	movwf	(___awdiv@divisor+1)& (0+255),b
  2305  001194  0E0A               	movlw	10
  2306  001196  6F02               	movwf	___awdiv@divisor& (0+255),b
  2307  001198  ECAE  F00B         	call	___awdiv	;wreg free
  2308  00119C  0101               	movlb	1	; () banked
  2309  00119E  5100               	movf	?___awdiv& (0+255),w,b
  2310  0011A0                     L20:
  2311  0011A0  6EDF               	movwf	indf2,c
  2312                           
  2313                           ; BSR set to: 1
  2314                           ;user.c: 750: }
  2315                           ;user.c: 751: data[4] = (current_program +1) % 10;
  2316  0011A2  0101               	movlb	1	; () banked
  2317  0011A4  EE20 F004          	lfsr	2,4
  2318  0011A8  5104               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2319  0011AA  26D9               	addwf	fsr2l,f,c
  2320  0011AC  5105               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2321  0011AE  22DA               	addwfc	fsr2h,f,c
  2322  0011B0  0E01               	movlw	1
  2323  0011B2  0101               	movlb	1	; () banked
  2324  0011B4  2507               	addwf	get_timer1_counter_interval@current_program& (0+255),w,b
  2325  0011B6  0101               	movlb	1	; () banked
  2326  0011B8  6F00               	movwf	___awmod@dividend& (0+255),b
  2327  0011BA  0101               	movlb	1	; () banked
  2328  0011BC  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  2329  0011BE  0E00               	movlw	0
  2330  0011C0  2301               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  2331  0011C2  0E00               	movlw	0
  2332  0011C4  0101               	movlb	1	; () banked
  2333  0011C6  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  2334  0011C8  0E0A               	movlw	10
  2335  0011CA  6F02               	movwf	___awmod@divisor& (0+255),b
  2336  0011CC  EC01  F00C         	call	___awmod	;wreg free
  2337  0011D0  0101               	movlb	1	; () banked
  2338  0011D2  5100               	movf	?___awmod& (0+255),w,b
  2339  0011D4  6EDF               	movwf	indf2,c
  2340                           
  2341                           ; BSR set to: 1
  2342  0011D6  0012               	return	
  2343  0011D8                     __end_of_get_timer1_counter_interval:
  2344                           	opt stack 0
  2345                           tblptru	equ	0xFF8
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           indf2	equ	0xFDF
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function ___awmod *****************
  2354 ;; Defined at:
  2355 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awmod.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  dividend        2    0[BANK1 ] int 
  2358 ;;  divisor         2    2[BANK1 ] int 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  sign            1   40[COMRAM] unsigned char 
  2361 ;;  counter         1   39[COMRAM] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  2    0[BANK1 ] int 
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2371 ;;      Params:         0       0       4       0       0       0       0       0       0
  2372 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2374 ;;      Totals:         2       0       4       0       0       0       0       0       0
  2375 ;;Total ram usage:        6 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    6
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_get_cents_reg
  2382 ;;		_get_timer1_counter_interval
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text7
  2387  001802                     __ptext7:
  2388                           	opt stack 0
  2389  001802                     ___awmod:
  2390                           	opt stack 22
  2391                           
  2392                           ; BSR set to: 1
  2393                           ;incstack = 0
  2394  001802  0E00               	movlw	0
  2395  001804  6E29               	movwf	___awmod@sign,c
  2396  001806  0101               	movlb	1	; () banked
  2397  001808  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
  2398  00180A  D007               	goto	l4979
  2399                           
  2400                           ; BSR set to: 1
  2401  00180C  0101               	movlb	1	; () banked
  2402  00180E  6D00               	negf	___awmod@dividend& (0+255),b
  2403  001810  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  2404  001812  B0D8               	btfsc	status,0,c
  2405  001814  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  2406                           
  2407                           ; BSR set to: 1
  2408  001816  0E01               	movlw	1
  2409  001818  6E29               	movwf	___awmod@sign,c
  2410  00181A                     l4979:
  2411                           
  2412                           ; BSR set to: 1
  2413  00181A  0101               	movlb	1	; () banked
  2414  00181C  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2415  00181E  D005               	goto	l4983
  2416                           
  2417                           ; BSR set to: 1
  2418  001820  0101               	movlb	1	; () banked
  2419  001822  6D02               	negf	___awmod@divisor& (0+255),b
  2420  001824  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
  2421  001826  B0D8               	btfsc	status,0,c
  2422  001828  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
  2423  00182A                     l4983:
  2424                           
  2425                           ; BSR set to: 1
  2426  00182A  0101               	movlb	1	; () banked
  2427  00182C  5102               	movf	___awmod@divisor& (0+255),w,b
  2428  00182E  0101               	movlb	1	; () banked
  2429  001830  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  2430  001832  B4D8               	btfsc	status,2,c
  2431  001834  D023               	goto	l4999
  2432                           
  2433                           ; BSR set to: 1
  2434  001836  0E01               	movlw	1
  2435  001838  6E28               	movwf	___awmod@counter,c
  2436  00183A  D005               	goto	l4989
  2437  00183C                     l4987:
  2438                           
  2439                           ; BSR set to: 1
  2440  00183C  0101               	movlb	1	; () banked
  2441  00183E  90D8               	bcf	status,0,c
  2442  001840  3702               	rlcf	___awmod@divisor& (0+255),f,b
  2443  001842  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  2444  001844  2A28               	incf	___awmod@counter,f,c
  2445  001846                     l4989:
  2446                           
  2447                           ; BSR set to: 1
  2448  001846  0101               	movlb	1	; () banked
  2449  001848  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2450  00184A  D7F8               	goto	l4987
  2451  00184C                     l4991:
  2452                           
  2453                           ; BSR set to: 1
  2454  00184C  0101               	movlb	1	; () banked
  2455  00184E  5102               	movf	___awmod@divisor& (0+255),w,b
  2456  001850  0101               	movlb	1	; () banked
  2457  001852  5D00               	subwf	___awmod@dividend& (0+255),w,b
  2458  001854  0101               	movlb	1	; () banked
  2459  001856  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  2460  001858  0101               	movlb	1	; () banked
  2461  00185A  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  2462  00185C  A0D8               	btfss	status,0,c
  2463  00185E  D008               	goto	l4995
  2464                           
  2465                           ; BSR set to: 1
  2466  001860  0101               	movlb	1	; () banked
  2467  001862  5102               	movf	___awmod@divisor& (0+255),w,b
  2468  001864  0101               	movlb	1	; () banked
  2469  001866  5F00               	subwf	___awmod@dividend& (0+255),f,b
  2470  001868  0101               	movlb	1	; () banked
  2471  00186A  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  2472  00186C  0101               	movlb	1	; () banked
  2473  00186E  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  2474  001870                     l4995:
  2475                           
  2476                           ; BSR set to: 1
  2477  001870  0101               	movlb	1	; () banked
  2478  001872  90D8               	bcf	status,0,c
  2479  001874  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  2480  001876  3302               	rrcf	___awmod@divisor& (0+255),f,b
  2481                           
  2482                           ; BSR set to: 1
  2483  001878  2E28               	decfsz	___awmod@counter,f,c
  2484  00187A  D7E8               	goto	l4991
  2485  00187C                     l4999:
  2486                           
  2487                           ; BSR set to: 1
  2488  00187C  5029               	movf	___awmod@sign,w,c
  2489  00187E  B4D8               	btfsc	status,2,c
  2490  001880  D005               	goto	l5003
  2491                           
  2492                           ; BSR set to: 1
  2493  001882  0101               	movlb	1	; () banked
  2494  001884  6D00               	negf	___awmod@dividend& (0+255),b
  2495  001886  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  2496  001888  B0D8               	btfsc	status,0,c
  2497  00188A  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  2498  00188C                     l5003:
  2499                           
  2500                           ; BSR set to: 1
  2501  00188C  C100  F100         	movff	___awmod@dividend,?___awmod
  2502  001890  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
  2503  001894  0012               	return	
  2504  001896                     __end_of___awmod:
  2505                           	opt stack 0
  2506                           tblptru	equ	0xFF8
  2507                           postinc0	equ	0xFEE
  2508                           wreg	equ	0xFE8
  2509                           indf2	equ	0xFDF
  2510                           fsr2h	equ	0xFDA
  2511                           fsr2l	equ	0xFD9
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function ___awdiv *****************
  2515 ;; Defined at:
  2516 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awdiv.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  dividend        2    0[BANK1 ] int 
  2519 ;;  divisor         2    2[BANK1 ] int 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  quotient        2   41[COMRAM] int 
  2522 ;;  sign            1   40[COMRAM] unsigned char 
  2523 ;;  counter         1   39[COMRAM] unsigned char 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  2    0[BANK1 ] int 
  2526 ;; Registers used:
  2527 ;;		wreg, status,2, status,0
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2533 ;;      Params:         0       0       4       0       0       0       0       0       0
  2534 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2536 ;;      Totals:         4       0       4       0       0       0       0       0       0
  2537 ;;Total ram usage:        8 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    6
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_get_cents_reg
  2544 ;;		_get_timer1_counter_interval
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text8
  2549  00175C                     __ptext8:
  2550                           	opt stack 0
  2551  00175C                     ___awdiv:
  2552                           	opt stack 22
  2553                           
  2554                           ; BSR set to: 1
  2555                           ;incstack = 0
  2556  00175C  0E00               	movlw	0
  2557  00175E  6E29               	movwf	___awdiv@sign,c
  2558  001760  0101               	movlb	1	; () banked
  2559  001762  AF03               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2560  001764  D007               	goto	l4935
  2561                           
  2562                           ; BSR set to: 1
  2563  001766  0101               	movlb	1	; () banked
  2564  001768  6D02               	negf	___awdiv@divisor& (0+255),b
  2565  00176A  1F03               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2566  00176C  B0D8               	btfsc	status,0,c
  2567  00176E  2B03               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2568                           
  2569                           ; BSR set to: 1
  2570  001770  0E01               	movlw	1
  2571  001772  6E29               	movwf	___awdiv@sign,c
  2572  001774                     l4935:
  2573                           
  2574                           ; BSR set to: 1
  2575  001774  0101               	movlb	1	; () banked
  2576  001776  AF01               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2577  001778  D007               	goto	l4941
  2578                           
  2579                           ; BSR set to: 1
  2580  00177A  0101               	movlb	1	; () banked
  2581  00177C  6D00               	negf	___awdiv@dividend& (0+255),b
  2582  00177E  1F01               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2583  001780  B0D8               	btfsc	status,0,c
  2584  001782  2B01               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2585                           
  2586                           ; BSR set to: 1
  2587  001784  0E01               	movlw	1
  2588  001786  1A29               	xorwf	___awdiv@sign,f,c
  2589  001788                     l4941:
  2590                           
  2591                           ; BSR set to: 1
  2592  001788  0E00               	movlw	0
  2593  00178A  6E2B               	movwf	___awdiv@quotient+1,c
  2594  00178C  0E00               	movlw	0
  2595  00178E  6E2A               	movwf	___awdiv@quotient,c
  2596                           
  2597                           ; BSR set to: 1
  2598  001790  0101               	movlb	1	; () banked
  2599  001792  5102               	movf	___awdiv@divisor& (0+255),w,b
  2600  001794  0101               	movlb	1	; () banked
  2601  001796  1103               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2602  001798  B4D8               	btfsc	status,2,c
  2603  00179A  D027               	goto	l4963
  2604                           
  2605                           ; BSR set to: 1
  2606  00179C  0E01               	movlw	1
  2607  00179E  6E28               	movwf	___awdiv@counter,c
  2608  0017A0  D005               	goto	l4949
  2609  0017A2                     l4947:
  2610                           
  2611                           ; BSR set to: 1
  2612  0017A2  0101               	movlb	1	; () banked
  2613  0017A4  90D8               	bcf	status,0,c
  2614  0017A6  3702               	rlcf	___awdiv@divisor& (0+255),f,b
  2615  0017A8  3703               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2616  0017AA  2A28               	incf	___awdiv@counter,f,c
  2617  0017AC                     l4949:
  2618                           
  2619                           ; BSR set to: 1
  2620  0017AC  0101               	movlb	1	; () banked
  2621  0017AE  AF03               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2622  0017B0  D7F8               	goto	l4947
  2623  0017B2                     l4951:
  2624                           
  2625                           ; BSR set to: 1
  2626  0017B2  90D8               	bcf	status,0,c
  2627  0017B4  362A               	rlcf	___awdiv@quotient,f,c
  2628  0017B6  362B               	rlcf	___awdiv@quotient+1,f,c
  2629                           
  2630                           ; BSR set to: 1
  2631  0017B8  0101               	movlb	1	; () banked
  2632  0017BA  5102               	movf	___awdiv@divisor& (0+255),w,b
  2633  0017BC  0101               	movlb	1	; () banked
  2634  0017BE  5D00               	subwf	___awdiv@dividend& (0+255),w,b
  2635  0017C0  0101               	movlb	1	; () banked
  2636  0017C2  5103               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2637  0017C4  0101               	movlb	1	; () banked
  2638  0017C6  5901               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2639  0017C8  A0D8               	btfss	status,0,c
  2640  0017CA  D009               	goto	l4959
  2641                           
  2642                           ; BSR set to: 1
  2643  0017CC  0101               	movlb	1	; () banked
  2644  0017CE  5102               	movf	___awdiv@divisor& (0+255),w,b
  2645  0017D0  0101               	movlb	1	; () banked
  2646  0017D2  5F00               	subwf	___awdiv@dividend& (0+255),f,b
  2647  0017D4  0101               	movlb	1	; () banked
  2648  0017D6  5103               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2649  0017D8  0101               	movlb	1	; () banked
  2650  0017DA  5B01               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2651                           
  2652                           ; BSR set to: 1
  2653  0017DC  802A               	bsf	___awdiv@quotient,0,c
  2654  0017DE                     l4959:
  2655                           
  2656                           ; BSR set to: 1
  2657  0017DE  0101               	movlb	1	; () banked
  2658  0017E0  90D8               	bcf	status,0,c
  2659  0017E2  3303               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2660  0017E4  3302               	rrcf	___awdiv@divisor& (0+255),f,b
  2661                           
  2662                           ; BSR set to: 1
  2663  0017E6  2E28               	decfsz	___awdiv@counter,f,c
  2664  0017E8  D7E4               	goto	l4951
  2665  0017EA                     l4963:
  2666                           
  2667                           ; BSR set to: 1
  2668  0017EA  5029               	movf	___awdiv@sign,w,c
  2669  0017EC  B4D8               	btfsc	status,2,c
  2670  0017EE  D004               	goto	l4967
  2671                           
  2672                           ; BSR set to: 1
  2673  0017F0  6C2A               	negf	___awdiv@quotient,c
  2674  0017F2  1E2B               	comf	___awdiv@quotient+1,f,c
  2675  0017F4  B0D8               	btfsc	status,0,c
  2676  0017F6  2A2B               	incf	___awdiv@quotient+1,f,c
  2677  0017F8                     l4967:
  2678                           
  2679                           ; BSR set to: 1
  2680  0017F8  C02A  F100         	movff	___awdiv@quotient,?___awdiv
  2681  0017FC  C02B  F101         	movff	___awdiv@quotient+1,?___awdiv+1
  2682  001800  0012               	return	
  2683  001802                     __end_of___awdiv:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           postinc0	equ	0xFEE
  2687                           wreg	equ	0xFE8
  2688                           indf2	equ	0xFDF
  2689                           fsr2h	equ	0xFDA
  2690                           fsr2l	equ	0xFD9
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _get_timer1_counter_down *****************
  2694 ;; Defined at:
  2695 ;;		line 696 in file "user.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2698 ;;		 -> aux1(6), 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2710 ;;      Params:         0       0       2       0       0       0       0       0       0
  2711 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2712 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2713 ;;      Totals:         1       0       2       0       0       0       0       0       0
  2714 ;;Total ram usage:        3 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    7
  2717 ;; This function calls:
  2718 ;;		_get_seconds_reg
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text9
  2725  001896                     __ptext9:
  2726                           	opt stack 0
  2727  001896                     _get_timer1_counter_down:
  2728                           	opt stack 23
  2729                           
  2730                           ;user.c: 698: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  2731                           
  2732                           ; BSR set to: 1
  2733                           ;incstack = 0
  2734  001896  0100               	movlb	0	; () banked
  2735  001898  51D3               	movf	_timer1_counter_10& (0+255),w,b
  2736  00189A  EC83  F00E         	call	_get_seconds_reg
  2737  00189E  0B0F               	andlw	15
  2738  0018A0  C100  FFD9         	movff	get_timer1_counter_down@data,fsr2l
  2739  0018A4  C101  FFDA         	movff	get_timer1_counter_down@data+1,fsr2h
  2740  0018A8  6EDF               	movwf	indf2,c
  2741                           
  2742                           ;user.c: 699: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  2743  0018AA  0101               	movlb	1	; () banked
  2744  0018AC  EE20 F001          	lfsr	2,1
  2745  0018B0  5100               	movf	get_timer1_counter_down@data& (0+255),w,b
  2746  0018B2  26D9               	addwf	fsr2l,f,c
  2747  0018B4  5101               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2748  0018B6  22DA               	addwfc	fsr2h,f,c
  2749  0018B8  0100               	movlb	0	; () banked
  2750  0018BA  51D3               	movf	_timer1_counter_10& (0+255),w,b
  2751  0018BC  EC83  F00E         	call	_get_seconds_reg
  2752  0018C0  6E2A               	movwf	??_get_timer1_counter_down& (0+255),c
  2753  0018C2  382A               	swapf	??_get_timer1_counter_down,w,c
  2754  0018C4  0B0F               	andlw	15
  2755  0018C6  0B0F               	andlw	15
  2756  0018C8  6EDF               	movwf	indf2,c
  2757                           
  2758                           ;user.c: 700: data[2] = get_seconds_reg(timer1_counter_min) & 0x0f;
  2759  0018CA  0101               	movlb	1	; () banked
  2760  0018CC  EE20 F002          	lfsr	2,2
  2761  0018D0  5100               	movf	get_timer1_counter_down@data& (0+255),w,b
  2762  0018D2  26D9               	addwf	fsr2l,f,c
  2763  0018D4  5101               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2764  0018D6  22DA               	addwfc	fsr2h,f,c
  2765  0018D8  5033               	movf	_timer1_counter_min,w,c
  2766  0018DA  EC83  F00E         	call	_get_seconds_reg
  2767  0018DE  0B0F               	andlw	15
  2768  0018E0  6EDF               	movwf	indf2,c
  2769                           
  2770                           ;user.c: 701: data[3] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  2771  0018E2  0101               	movlb	1	; () banked
  2772  0018E4  EE20 F003          	lfsr	2,3
  2773  0018E8  5100               	movf	get_timer1_counter_down@data& (0+255),w,b
  2774  0018EA  26D9               	addwf	fsr2l,f,c
  2775  0018EC  5101               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2776  0018EE  22DA               	addwfc	fsr2h,f,c
  2777  0018F0  5033               	movf	_timer1_counter_min,w,c
  2778  0018F2  EC83  F00E         	call	_get_seconds_reg
  2779  0018F6  6E2A               	movwf	??_get_timer1_counter_down& (0+255),c
  2780  0018F8  382A               	swapf	??_get_timer1_counter_down,w,c
  2781  0018FA  0B0F               	andlw	15
  2782  0018FC  0B0F               	andlw	15
  2783  0018FE  6EDF               	movwf	indf2,c
  2784                           
  2785                           ;user.c: 702: data[4] = 'N';
  2786  001900  0101               	movlb	1	; () banked
  2787  001902  EE20 F004          	lfsr	2,4
  2788  001906  5100               	movf	get_timer1_counter_down@data& (0+255),w,b
  2789  001908  26D9               	addwf	fsr2l,f,c
  2790  00190A  5101               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2791  00190C  22DA               	addwfc	fsr2h,f,c
  2792  00190E  0E4E               	movlw	78
  2793  001910  6EDF               	movwf	indf2,c
  2794                           
  2795                           ; BSR set to: 1
  2796                           ;user.c: 703: data[5] = 'D';
  2797  001912  0101               	movlb	1	; () banked
  2798  001914  EE20 F005          	lfsr	2,5
  2799  001918  5100               	movf	get_timer1_counter_down@data& (0+255),w,b
  2800  00191A  26D9               	addwf	fsr2l,f,c
  2801  00191C  5101               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2802  00191E  22DA               	addwfc	fsr2h,f,c
  2803  001920  0E44               	movlw	68
  2804  001922  6EDF               	movwf	indf2,c
  2805                           
  2806                           ; BSR set to: 1
  2807  001924  0012               	return		;funcret
  2808  001926                     __end_of_get_timer1_counter_down:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           postinc0	equ	0xFEE
  2812                           wreg	equ	0xFE8
  2813                           indf2	equ	0xFDF
  2814                           fsr2h	equ	0xFDA
  2815                           fsr2l	equ	0xFD9
  2816                           status	equ	0xFD8
  2817                           
  2818 ;; *************** function _get_timer1_counter *****************
  2819 ;; Defined at:
  2820 ;;		line 685 in file "user.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2823 ;;		 -> aux1(6), 
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;		None
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2835 ;;      Params:         0       0       2       0       0       0       0       0       0
  2836 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2837 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2838 ;;      Totals:         1       0       2       0       0       0       0       0       0
  2839 ;;Total ram usage:        3 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    7
  2842 ;; This function calls:
  2843 ;;		_get_seconds_reg
  2844 ;; This function is called by:
  2845 ;;		_main
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           	psect	text10
  2850  001926                     __ptext10:
  2851                           	opt stack 0
  2852  001926                     _get_timer1_counter:
  2853                           	opt stack 23
  2854                           
  2855                           ;user.c: 687: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  2856                           
  2857                           ; BSR set to: 1
  2858                           ;incstack = 0
  2859  001926  0100               	movlb	0	; () banked
  2860  001928  51D3               	movf	_timer1_counter_10& (0+255),w,b
  2861  00192A  EC83  F00E         	call	_get_seconds_reg
  2862  00192E  0B0F               	andlw	15
  2863  001930  C100  FFD9         	movff	get_timer1_counter@data,fsr2l
  2864  001934  C101  FFDA         	movff	get_timer1_counter@data+1,fsr2h
  2865  001938  6EDF               	movwf	indf2,c
  2866                           
  2867                           ;user.c: 688: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  2868  00193A  0101               	movlb	1	; () banked
  2869  00193C  EE20 F001          	lfsr	2,1
  2870  001940  5100               	movf	get_timer1_counter@data& (0+255),w,b
  2871  001942  26D9               	addwf	fsr2l,f,c
  2872  001944  5101               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2873  001946  22DA               	addwfc	fsr2h,f,c
  2874  001948  0100               	movlb	0	; () banked
  2875  00194A  51D3               	movf	_timer1_counter_10& (0+255),w,b
  2876  00194C  EC83  F00E         	call	_get_seconds_reg
  2877  001950  6E2A               	movwf	??_get_timer1_counter& (0+255),c
  2878  001952  382A               	swapf	??_get_timer1_counter,w,c
  2879  001954  0B0F               	andlw	15
  2880  001956  0B0F               	andlw	15
  2881  001958  6EDF               	movwf	indf2,c
  2882                           
  2883                           ;user.c: 689: data[2] = get_seconds_reg(timer1_counter_min) & 0x0f;
  2884  00195A  0101               	movlb	1	; () banked
  2885  00195C  EE20 F002          	lfsr	2,2
  2886  001960  5100               	movf	get_timer1_counter@data& (0+255),w,b
  2887  001962  26D9               	addwf	fsr2l,f,c
  2888  001964  5101               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2889  001966  22DA               	addwfc	fsr2h,f,c
  2890  001968  5033               	movf	_timer1_counter_min,w,c
  2891  00196A  EC83  F00E         	call	_get_seconds_reg
  2892  00196E  0B0F               	andlw	15
  2893  001970  6EDF               	movwf	indf2,c
  2894                           
  2895                           ;user.c: 690: data[3] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  2896  001972  0101               	movlb	1	; () banked
  2897  001974  EE20 F003          	lfsr	2,3
  2898  001978  5100               	movf	get_timer1_counter@data& (0+255),w,b
  2899  00197A  26D9               	addwf	fsr2l,f,c
  2900  00197C  5101               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2901  00197E  22DA               	addwfc	fsr2h,f,c
  2902  001980  5033               	movf	_timer1_counter_min,w,c
  2903  001982  EC83  F00E         	call	_get_seconds_reg
  2904  001986  6E2A               	movwf	??_get_timer1_counter& (0+255),c
  2905  001988  382A               	swapf	??_get_timer1_counter,w,c
  2906  00198A  0B0F               	andlw	15
  2907  00198C  0B0F               	andlw	15
  2908  00198E  6EDF               	movwf	indf2,c
  2909                           
  2910                           ;user.c: 691: data[4] = 'P';
  2911  001990  0101               	movlb	1	; () banked
  2912  001992  EE20 F004          	lfsr	2,4
  2913  001996  5100               	movf	get_timer1_counter@data& (0+255),w,b
  2914  001998  26D9               	addwf	fsr2l,f,c
  2915  00199A  5101               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2916  00199C  22DA               	addwfc	fsr2h,f,c
  2917  00199E  0E50               	movlw	80
  2918  0019A0  6EDF               	movwf	indf2,c
  2919                           
  2920                           ; BSR set to: 1
  2921                           ;user.c: 692: data[5] = 'U';
  2922  0019A2  0101               	movlb	1	; () banked
  2923  0019A4  EE20 F005          	lfsr	2,5
  2924  0019A8  5100               	movf	get_timer1_counter@data& (0+255),w,b
  2925  0019AA  26D9               	addwf	fsr2l,f,c
  2926  0019AC  5101               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2927  0019AE  22DA               	addwfc	fsr2h,f,c
  2928  0019B0  0E55               	movlw	85
  2929  0019B2  6EDF               	movwf	indf2,c
  2930                           
  2931                           ; BSR set to: 1
  2932  0019B4  0012               	return		;funcret
  2933  0019B6                     __end_of_get_timer1_counter:
  2934                           	opt stack 0
  2935                           tblptru	equ	0xFF8
  2936                           postinc0	equ	0xFEE
  2937                           wreg	equ	0xFE8
  2938                           indf2	equ	0xFDF
  2939                           fsr2h	equ	0xFDA
  2940                           fsr2l	equ	0xFD9
  2941                           status	equ	0xFD8
  2942                           
  2943 ;; *************** function _get_seconds_reg *****************
  2944 ;; Defined at:
  2945 ;;		line 298 in file "user.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  seconds         1    wreg     unsigned char 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  seconds         1   40[COMRAM] unsigned char 
  2950 ;;  res             1   39[COMRAM] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      unsigned char 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, status,0
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2960 ;;      Params:         0       0       0       0       0       0       0       0       0
  2961 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2962 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2963 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2964 ;;Total ram usage:        2 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    6
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_get_timer1_counter
  2971 ;;		_get_timer1_counter_down
  2972 ;;		_get_timer1_counter_speed
  2973 ;;		_get_timer1_counter_interval
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text11
  2978  001D06                     __ptext11:
  2979                           	opt stack 0
  2980  001D06                     _get_seconds_reg:
  2981                           	opt stack 23
  2982                           
  2983                           ; BSR set to: 1
  2984                           ;incstack = 0
  2985                           ;get_seconds_reg@seconds stored from wreg
  2986  001D06  6E29               	movwf	get_seconds_reg@seconds,c
  2987                           
  2988                           ;user.c: 300: char res = 0;
  2989  001D08  0E00               	movlw	0
  2990  001D0A  6E28               	movwf	get_seconds_reg@res,c
  2991                           
  2992                           ;user.c: 301: if(seconds<10)
  2993  001D0C  0E0A               	movlw	10
  2994  001D0E  6029               	cpfslt	get_seconds_reg@seconds,c
  2995  001D10  D003               	goto	l5045
  2996                           
  2997                           ;user.c: 302: {
  2998                           ;user.c: 303: res = seconds;
  2999  001D12  C029  F028         	movff	get_seconds_reg@seconds,get_seconds_reg@res
  3000                           
  3001                           ;user.c: 304: }
  3002  001D16  D020               	goto	l5063
  3003  001D18                     l5045:
  3004                           
  3005                           ;user.c: 305: else if(seconds <20)
  3006  001D18  0E14               	movlw	20
  3007  001D1A  6029               	cpfslt	get_seconds_reg@seconds,c
  3008  001D1C  D004               	goto	l5049
  3009                           
  3010                           ;user.c: 306: {
  3011                           ;user.c: 307: res = 1<<4 | (seconds - 10);
  3012  001D1E  5029               	movf	get_seconds_reg@seconds,w,c
  3013  001D20  0FF6               	addlw	246
  3014  001D22  0910               	iorlw	16
  3015  001D24  D018               	goto	L24
  3016  001D26                     l5049:
  3017                           
  3018                           ;user.c: 309: else if(seconds <30)
  3019  001D26  0E1E               	movlw	30
  3020  001D28  6029               	cpfslt	get_seconds_reg@seconds,c
  3021  001D2A  D004               	goto	l5053
  3022                           
  3023                           ;user.c: 310: {
  3024                           ;user.c: 311: res = 2<<4 | (seconds -20);
  3025  001D2C  5029               	movf	get_seconds_reg@seconds,w,c
  3026  001D2E  0FEC               	addlw	236
  3027  001D30  0920               	iorlw	32
  3028  001D32  D011               	goto	L24
  3029  001D34                     l5053:
  3030                           
  3031                           ;user.c: 313: else if(seconds <40)
  3032  001D34  0E28               	movlw	40
  3033  001D36  6029               	cpfslt	get_seconds_reg@seconds,c
  3034  001D38  D004               	goto	l5057
  3035                           
  3036                           ;user.c: 314: {
  3037                           ;user.c: 315: res = 3<<4 | (seconds - 30);
  3038  001D3A  5029               	movf	get_seconds_reg@seconds,w,c
  3039  001D3C  0FE2               	addlw	226
  3040  001D3E  0930               	iorlw	48
  3041  001D40  D00A               	goto	L24
  3042  001D42                     l5057:
  3043                           
  3044                           ;user.c: 317: else if(seconds <50)
  3045  001D42  0E32               	movlw	50
  3046  001D44  6029               	cpfslt	get_seconds_reg@seconds,c
  3047  001D46  D004               	goto	l5061
  3048                           
  3049                           ;user.c: 318: {
  3050                           ;user.c: 319: res = 4<<4 | (seconds - 40);
  3051  001D48  5029               	movf	get_seconds_reg@seconds,w,c
  3052  001D4A  0FD8               	addlw	216
  3053  001D4C  0940               	iorlw	64
  3054  001D4E  D003               	goto	L24
  3055  001D50                     l5061:
  3056                           
  3057                           ;user.c: 321: else
  3058                           ;user.c: 322: {
  3059                           ;user.c: 323: res = 5<<4 | (seconds -50);
  3060  001D50  5029               	movf	get_seconds_reg@seconds,w,c
  3061  001D52  0FCE               	addlw	206
  3062  001D54  0950               	iorlw	80
  3063  001D56                     L24:
  3064  001D56  6E28               	movwf	get_seconds_reg@res,c
  3065  001D58                     l5063:
  3066                           
  3067                           ;user.c: 324: }
  3068                           ;user.c: 326: return res;
  3069  001D58  5028               	movf	get_seconds_reg@res,w,c
  3070  001D5A  0012               	return	
  3071  001D5C                     __end_of_get_seconds_reg:
  3072                           	opt stack 0
  3073                           tblptru	equ	0xFF8
  3074                           postinc0	equ	0xFEE
  3075                           wreg	equ	0xFE8
  3076                           indf2	equ	0xFDF
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _get_time *****************
  3082 ;; Defined at:
  3083 ;;		line 254 in file "user.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  data            2    7[BANK1 ] PTR unsigned char 
  3086 ;;		 -> aux1(6), 
  3087 ;;  format          1    9[BANK1 ] unsigned char 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  aux_hour        1   12[BANK1 ] unsigned char 
  3090 ;;  hours           1   15[BANK1 ] unsigned char 
  3091 ;;  aux             1   14[BANK1 ] unsigned char 
  3092 ;;  minutes         1   13[BANK1 ] unsigned char 
  3093 ;;  seconds         1   11[BANK1 ] unsigned char 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3103 ;;      Params:         0       0       3       0       0       0       0       0       0
  3104 ;;      Locals:         0       0       5       0       0       0       0       0       0
  3105 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3106 ;;      Totals:         0       0       9       0       0       0       0       0       0
  3107 ;;Total ram usage:        9 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    9
  3110 ;; This function calls:
  3111 ;;		_byte_read
  3112 ;; This function is called by:
  3113 ;;		_main
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text12
  3118  00138A                     __ptext12:
  3119                           	opt stack 0
  3120  00138A                     _get_time:
  3121                           	opt stack 21
  3122                           
  3123                           ;user.c: 256: char aux = 0x81;
  3124                           
  3125                           ;incstack = 0
  3126  00138A  0E81               	movlw	129
  3127  00138C  0101               	movlb	1	; () banked
  3128  00138E  6F0E               	movwf	get_time@aux& (0+255),b
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;user.c: 257: char seconds = byte_read(aux);
  3132  001390  0101               	movlb	1	; () banked
  3133  001392  510E               	movf	get_time@aux& (0+255),w,b
  3134  001394  EC1D  F00D         	call	_byte_read
  3135  001398  0101               	movlb	1	; () banked
  3136  00139A  6F0B               	movwf	get_time@seconds& (0+255),b
  3137                           
  3138                           ; BSR set to: 1
  3139                           ;user.c: 258: aux = 0x83;
  3140  00139C  0E83               	movlw	131
  3141  00139E  0101               	movlb	1	; () banked
  3142  0013A0  6F0E               	movwf	get_time@aux& (0+255),b
  3143                           
  3144                           ;user.c: 259: char minutes = byte_read(aux);
  3145  0013A2  0101               	movlb	1	; () banked
  3146  0013A4  510E               	movf	get_time@aux& (0+255),w,b
  3147  0013A6  EC1D  F00D         	call	_byte_read
  3148  0013AA  0101               	movlb	1	; () banked
  3149  0013AC  6F0D               	movwf	get_time@minutes& (0+255),b
  3150                           
  3151                           ; BSR set to: 1
  3152                           ;user.c: 260: aux = 0x85;
  3153  0013AE  0E85               	movlw	133
  3154  0013B0  0101               	movlb	1	; () banked
  3155  0013B2  6F0E               	movwf	get_time@aux& (0+255),b
  3156                           
  3157                           ; BSR set to: 1
  3158                           ;user.c: 261: char hours = byte_read(aux);
  3159  0013B4  0101               	movlb	1	; () banked
  3160  0013B6  510E               	movf	get_time@aux& (0+255),w,b
  3161  0013B8  EC1D  F00D         	call	_byte_read
  3162  0013BC  0101               	movlb	1	; () banked
  3163  0013BE  6F0F               	movwf	get_time@hours& (0+255),b
  3164                           
  3165                           ; BSR set to: 1
  3166                           ;user.c: 264: data[0] = minutes & 0x0f;
  3167  0013C0  0101               	movlb	1	; () banked
  3168  0013C2  510D               	movf	get_time@minutes& (0+255),w,b
  3169  0013C4  0B0F               	andlw	15
  3170  0013C6  C107  FFD9         	movff	get_time@data,fsr2l
  3171  0013CA  C108  FFDA         	movff	get_time@data+1,fsr2h
  3172  0013CE  6EDF               	movwf	indf2,c
  3173                           
  3174                           ; BSR set to: 1
  3175                           ;user.c: 265: data[1] = (minutes & 0xf0)>>4;
  3176  0013D0  0101               	movlb	1	; () banked
  3177  0013D2  EE20 F001          	lfsr	2,1
  3178  0013D6  5107               	movf	get_time@data& (0+255),w,b
  3179  0013D8  26D9               	addwf	fsr2l,f,c
  3180  0013DA  5108               	movf	(get_time@data+1)& (0+255),w,b
  3181  0013DC  22DA               	addwfc	fsr2h,f,c
  3182  0013DE  0101               	movlb	1	; () banked
  3183  0013E0  390D               	swapf	get_time@minutes& (0+255),w,b
  3184  0013E2  0B0F               	andlw	15
  3185  0013E4  0B0F               	andlw	15
  3186  0013E6  6EDF               	movwf	indf2,c
  3187                           
  3188                           ; BSR set to: 1
  3189                           ;user.c: 267: if(format == 1)
  3190  0013E8  0101               	movlb	1	; () banked
  3191  0013EA  0509               	decf	get_time@format& (0+255),w,b
  3192  0013EC  A4D8               	btfss	status,2,c
  3193  0013EE  D00A               	goto	l5149
  3194                           
  3195                           ; BSR set to: 1
  3196                           ;user.c: 268: {
  3197                           ;user.c: 270: data[4] = 1;
  3198  0013F0  0101               	movlb	1	; () banked
  3199  0013F2  EE20 F004          	lfsr	2,4
  3200  0013F6  5107               	movf	get_time@data& (0+255),w,b
  3201  0013F8  26D9               	addwf	fsr2l,f,c
  3202  0013FA  5108               	movf	(get_time@data+1)& (0+255),w,b
  3203  0013FC  22DA               	addwfc	fsr2h,f,c
  3204  0013FE  0E01               	movlw	1
  3205  001400  6EDF               	movwf	indf2,c
  3206  001402  D01C               	goto	l5155
  3207  001404                     l5149:
  3208                           
  3209                           ; BSR set to: 1
  3210                           ;user.c: 275: else
  3211                           ;user.c: 276: {
  3212                           ;user.c: 277: data[4] = 2;
  3213  001404  0101               	movlb	1	; () banked
  3214  001406  EE20 F004          	lfsr	2,4
  3215  00140A  5107               	movf	get_time@data& (0+255),w,b
  3216  00140C  26D9               	addwf	fsr2l,f,c
  3217  00140E  5108               	movf	(get_time@data+1)& (0+255),w,b
  3218  001410  22DA               	addwfc	fsr2h,f,c
  3219  001412  0E02               	movlw	2
  3220  001414  6EDF               	movwf	indf2,c
  3221                           
  3222                           ; BSR set to: 1
  3223                           ;user.c: 278: char aux_hour = (hours>>4 & 0x0f)*10 + (hours & 0x0f);
  3224  001416  C10F  F10A         	movff	get_time@hours,??_get_time
  3225  00141A  0E0F               	movlw	15
  3226  00141C  0101               	movlb	1	; () banked
  3227  00141E  170A               	andwf	??_get_time& (0+255),f,b
  3228  001420  0101               	movlb	1	; () banked
  3229  001422  390F               	swapf	get_time@hours& (0+255),w,b
  3230  001424  0B0F               	andlw	15
  3231  001426  0B0F               	andlw	15
  3232  001428  0D0A               	mullw	10
  3233  00142A  50F3               	movf	prodl,w,c
  3234  00142C  0101               	movlb	1	; () banked
  3235  00142E  250A               	addwf	??_get_time& (0+255),w,b
  3236  001430  0101               	movlb	1	; () banked
  3237  001432  6F0C               	movwf	get_time@aux_hour& (0+255),b
  3238                           
  3239                           ; BSR set to: 1
  3240                           ;user.c: 279: if(aux_hour<=12)
  3241  001434  0E0D               	movlw	13
  3242  001436  0101               	movlb	1	; () banked
  3243  001438  610C               	cpfslt	get_time@aux_hour& (0+255),b
  3244  00143A  D017               	goto	l5157
  3245  00143C                     l5155:
  3246                           
  3247                           ; BSR set to: 1
  3248                           ;user.c: 280: {
  3249                           ;user.c: 281: data[2] = hours & 0x0f;
  3250  00143C  0101               	movlb	1	; () banked
  3251  00143E  EE20 F002          	lfsr	2,2
  3252  001442  5107               	movf	get_time@data& (0+255),w,b
  3253  001444  26D9               	addwf	fsr2l,f,c
  3254  001446  5108               	movf	(get_time@data+1)& (0+255),w,b
  3255  001448  22DA               	addwfc	fsr2h,f,c
  3256  00144A  0101               	movlb	1	; () banked
  3257  00144C  510F               	movf	get_time@hours& (0+255),w,b
  3258  00144E  0B0F               	andlw	15
  3259  001450  6EDF               	movwf	indf2,c
  3260                           
  3261                           ;user.c: 282: data[3] = (hours & 0xf0)>>4;
  3262  001452  0101               	movlb	1	; () banked
  3263  001454  EE20 F003          	lfsr	2,3
  3264  001458  5107               	movf	get_time@data& (0+255),w,b
  3265  00145A  26D9               	addwf	fsr2l,f,c
  3266  00145C  5108               	movf	(get_time@data+1)& (0+255),w,b
  3267  00145E  22DA               	addwfc	fsr2h,f,c
  3268  001460  0101               	movlb	1	; () banked
  3269  001462  390F               	swapf	get_time@hours& (0+255),w,b
  3270  001464  0B0F               	andlw	15
  3271  001466  0B0F               	andlw	15
  3272  001468  D01E               	goto	L25
  3273  00146A                     l5157:
  3274                           
  3275                           ; BSR set to: 1
  3276                           ;user.c: 284: else
  3277                           ;user.c: 285: {
  3278                           ;user.c: 286: data[2] = (hours & 0x0f) - 2;
  3279  00146A  0101               	movlb	1	; () banked
  3280  00146C  EE20 F002          	lfsr	2,2
  3281  001470  5107               	movf	get_time@data& (0+255),w,b
  3282  001472  26D9               	addwf	fsr2l,f,c
  3283  001474  5108               	movf	(get_time@data+1)& (0+255),w,b
  3284  001476  22DA               	addwfc	fsr2h,f,c
  3285  001478  0101               	movlb	1	; () banked
  3286  00147A  510F               	movf	get_time@hours& (0+255),w,b
  3287  00147C  0B0F               	andlw	15
  3288  00147E  0FFE               	addlw	254
  3289  001480  6EDF               	movwf	indf2,c
  3290                           
  3291                           ;user.c: 287: data[3] = (hours>>4 & 0x0f)-1;
  3292  001482  0101               	movlb	1	; () banked
  3293  001484  EE20 F003          	lfsr	2,3
  3294  001488  5107               	movf	get_time@data& (0+255),w,b
  3295  00148A  26D9               	addwf	fsr2l,f,c
  3296  00148C  5108               	movf	(get_time@data+1)& (0+255),w,b
  3297  00148E  22DA               	addwfc	fsr2h,f,c
  3298  001490  C10F  F10A         	movff	get_time@hours,??_get_time
  3299  001494  0101               	movlb	1	; () banked
  3300  001496  3B0A               	swapf	??_get_time& (0+255),f,b
  3301  001498  0E0F               	movlw	15
  3302  00149A  170A               	andwf	??_get_time& (0+255),f,b
  3303  00149C  0E0F               	movlw	15
  3304  00149E  0101               	movlb	1	; () banked
  3305  0014A0  170A               	andwf	??_get_time& (0+255),f,b
  3306  0014A2  0101               	movlb	1	; () banked
  3307  0014A4  050A               	decf	??_get_time& (0+255),w,b
  3308  0014A6                     L25:
  3309  0014A6  6EDF               	movwf	indf2,c
  3310                           
  3311                           ; BSR set to: 1
  3312                           ;user.c: 288: }
  3313                           ;user.c: 290: }
  3314                           ;user.c: 293: data[5] = 'H';
  3315                           
  3316                           ; BSR set to: 1
  3317  0014A8  0101               	movlb	1	; () banked
  3318  0014AA  EE20 F005          	lfsr	2,5
  3319  0014AE  5107               	movf	get_time@data& (0+255),w,b
  3320  0014B0  26D9               	addwf	fsr2l,f,c
  3321  0014B2  5108               	movf	(get_time@data+1)& (0+255),w,b
  3322  0014B4  22DA               	addwfc	fsr2h,f,c
  3323  0014B6  0E48               	movlw	72
  3324  0014B8  6EDF               	movwf	indf2,c
  3325                           
  3326                           ; BSR set to: 1
  3327  0014BA  0012               	return		;funcret
  3328  0014BC                     __end_of_get_time:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           prodl	equ	0xFF3
  3332                           postinc0	equ	0xFEE
  3333                           wreg	equ	0xFE8
  3334                           indf2	equ	0xFDF
  3335                           fsr2h	equ	0xFDA
  3336                           fsr2l	equ	0xFD9
  3337                           status	equ	0xFD8
  3338                           
  3339 ;; *************** function _byte_read *****************
  3340 ;; Defined at:
  3341 ;;		line 198 in file "user.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  address         1    wreg     unsigned char 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  address         1    3[BANK1 ] unsigned char 
  3346 ;;  i               2    5[BANK1 ] int 
  3347 ;;  res             1    4[BANK1 ] unsigned char 
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  1    wreg      unsigned char 
  3350 ;; Registers used:
  3351 ;;		wreg, status,2, status,0, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3357 ;;      Params:         0       0       0       0       0       0       0       0       0
  3358 ;;      Locals:         0       0       4       0       0       0       0       0       0
  3359 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3360 ;;      Totals:         2       0       4       0       0       0       0       0       0
  3361 ;;Total ram usage:        6 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    8
  3364 ;; This function calls:
  3365 ;;		_ce_disable
  3366 ;;		_ce_enable
  3367 ;;		_io_as_input
  3368 ;;		_send_command
  3369 ;; This function is called by:
  3370 ;;		_get_time
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text13
  3375  001A3A                     __ptext13:
  3376                           	opt stack 0
  3377  001A3A                     _byte_read:
  3378                           	opt stack 21
  3379                           
  3380                           ; BSR set to: 1
  3381                           ;incstack = 0
  3382                           ;byte_read@address stored from wreg
  3383  001A3A  0101               	movlb	1	; () banked
  3384  001A3C  6F03               	movwf	byte_read@address& (0+255),b
  3385                           
  3386                           ;user.c: 200: char res = 0;
  3387  001A3E  0E00               	movlw	0
  3388  001A40  0101               	movlb	1	; () banked
  3389  001A42  6F04               	movwf	byte_read@res& (0+255),b
  3390                           
  3391                           ; BSR set to: 1
  3392                           ;user.c: 203: ce_enable();
  3393  001A44  ECD1  F00F         	call	_ce_enable	;wreg free
  3394                           
  3395                           ;user.c: 205: send_command(address);
  3396  001A48  0101               	movlb	1	; () banked
  3397  001A4A  5103               	movf	byte_read@address& (0+255),w,b
  3398  001A4C  ECCC  F00D         	call	_send_command
  3399                           
  3400                           ;user.c: 206: io_as_input();
  3401  001A50  ECCF  F00F         	call	_io_as_input	;wreg free
  3402                           
  3403                           ;user.c: 207: int i;
  3404                           ;user.c: 208: for(i=0;i<8;i++)
  3405  001A54  0E00               	movlw	0
  3406  001A56  0101               	movlb	1	; () banked
  3407  001A58  6F06               	movwf	(byte_read@i+1)& (0+255),b
  3408  001A5A  0E00               	movlw	0
  3409  001A5C  6F05               	movwf	byte_read@i& (0+255),b
  3410  001A5E                     l5017:
  3411                           
  3412                           ; BSR set to: 1
  3413  001A5E  0101               	movlb	1	; () banked
  3414  001A60  BF06               	btfsc	(byte_read@i+1)& (0+255),7,b
  3415  001A62  D008               	goto	l394
  3416  001A64  0101               	movlb	1	; () banked
  3417  001A66  5106               	movf	(byte_read@i+1)& (0+255),w,b
  3418  001A68  E124               	bnz	l5033
  3419  001A6A  0E08               	movlw	8
  3420  001A6C  0101               	movlb	1	; () banked
  3421  001A6E  5D05               	subwf	byte_read@i& (0+255),w,b
  3422  001A70  B0D8               	btfsc	status,0,c
  3423  001A72  D01F               	goto	l5033
  3424  001A74                     l394:
  3425                           
  3426                           ; BSR set to: 1
  3427                           ;user.c: 209: {
  3428                           ;user.c: 210: RA2 = 0;
  3429  001A74  9480               	bcf	3968,2,c	;volatile
  3430                           
  3431                           ; BSR set to: 1
  3432                           ;user.c: 211: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  3433  001A76  0E06               	movlw	6
  3434  001A78                     u6547:
  3435  001A78  2EE8               	decfsz	wreg,f,c
  3436  001A7A  D7FE               	bra	u6547
  3437  001A7C  D000               	nop2	
  3438                           
  3439                           ;user.c: 212: res |= RA3<<i;
  3440  001A7E  C105  F02A         	movff	byte_read@i,??_byte_read
  3441  001A82  A680               	btfss	3968,3,c	;volatile
  3442  001A84  D003               	goto	u5870
  3443  001A86  6A2B               	clrf	(??_byte_read+1)& (0+255),c
  3444  001A88  2A2B               	incf	(??_byte_read+1)& (0+255),f,c
  3445  001A8A  D001               	goto	u5888
  3446  001A8C                     u5870:
  3447  001A8C  6A2B               	clrf	(??_byte_read+1)& (0+255),c
  3448  001A8E                     u5888:
  3449  001A8E  2A2A               	incf	??_byte_read,f,c
  3450  001A90  D002               	goto	u5894
  3451  001A92                     u5895:
  3452  001A92  90D8               	bcf	status,0,c
  3453  001A94  362B               	rlcf	??_byte_read+1,f,c
  3454  001A96                     u5894:
  3455  001A96  2E2A               	decfsz	??_byte_read,f,c
  3456  001A98  D7FC               	goto	u5895
  3457  001A9A  502B               	movf	??_byte_read+1,w,c
  3458  001A9C  0101               	movlb	1	; () banked
  3459  001A9E  1304               	iorwf	byte_read@res& (0+255),f,b
  3460                           
  3461                           ; BSR set to: 1
  3462                           ;user.c: 213: RA2 = 1;
  3463  001AA0  8480               	bsf	3968,2,c	;volatile
  3464                           
  3465                           ; BSR set to: 1
  3466                           ;user.c: 214: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  3467  001AA2  0E10               	movlw	16
  3468  001AA4                     u6557:
  3469  001AA4  2EE8               	decfsz	wreg,f,c
  3470  001AA6  D7FE               	bra	u6557
  3471  001AA8  D000               	nop2	
  3472  001AAA  0101               	movlb	1	; () banked
  3473  001AAC  4B05               	infsnz	byte_read@i& (0+255),f,b
  3474  001AAE  2B06               	incf	(byte_read@i+1)& (0+255),f,b
  3475  001AB0  D7D6               	goto	l5017
  3476  001AB2                     l5033:
  3477                           
  3478                           ; BSR set to: 1
  3479                           ;user.c: 216: }
  3480                           ;user.c: 218: ce_disable();
  3481  001AB2  ECC3  F00F         	call	_ce_disable	;wreg free
  3482                           
  3483                           ;user.c: 221: return res;
  3484  001AB6  0101               	movlb	1	; () banked
  3485  001AB8  5104               	movf	byte_read@res& (0+255),w,b
  3486  001ABA  0012               	return	
  3487  001ABC                     __end_of_byte_read:
  3488                           	opt stack 0
  3489                           tblptru	equ	0xFF8
  3490                           prodl	equ	0xFF3
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           indf2	equ	0xFDF
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function _send_command *****************
  3499 ;; Defined at:
  3500 ;;		line 358 in file "user.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  command         1    wreg     unsigned char 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  command         1    0[BANK1 ] unsigned char 
  3505 ;;  i               2    1[BANK1 ] int 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  1    wreg      void 
  3508 ;; Registers used:
  3509 ;;		wreg, status,2, status,0, cstack
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3515 ;;      Params:         0       0       0       0       0       0       0       0       0
  3516 ;;      Locals:         0       0       3       0       0       0       0       0       0
  3517 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3518 ;;      Totals:         2       0       3       0       0       0       0       0       0
  3519 ;;Total ram usage:        5 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    7
  3522 ;; This function calls:
  3523 ;;		_io_as_output
  3524 ;; This function is called by:
  3525 ;;		_byte_read
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text14
  3530  001B98                     __ptext14:
  3531                           	opt stack 0
  3532  001B98                     _send_command:
  3533                           	opt stack 21
  3534                           
  3535                           ; BSR set to: 1
  3536                           ;incstack = 0
  3537                           ;send_command@command stored from wreg
  3538  001B98  0101               	movlb	1	; () banked
  3539  001B9A  6F00               	movwf	send_command@command& (0+255),b
  3540                           
  3541                           ;user.c: 360: int i;
  3542                           ;user.c: 361: io_as_output();
  3543  001B9C  ECCD  F00F         	call	_io_as_output	;wreg free
  3544                           
  3545                           ;user.c: 362: for(i=0; i<8; i++)
  3546  001BA0  0E00               	movlw	0
  3547  001BA2  0101               	movlb	1	; () banked
  3548  001BA4  6F02               	movwf	(send_command@i+1)& (0+255),b
  3549  001BA6  0E00               	movlw	0
  3550  001BA8  6F01               	movwf	send_command@i& (0+255),b
  3551  001BAA                     l4907:
  3552                           
  3553                           ; BSR set to: 1
  3554  001BAA  0101               	movlb	1	; () banked
  3555  001BAC  BF02               	btfsc	(send_command@i+1)& (0+255),7,b
  3556  001BAE  D008               	goto	l4911
  3557  001BB0  0101               	movlb	1	; () banked
  3558  001BB2  5102               	movf	(send_command@i+1)& (0+255),w,b
  3559  001BB4  E123               	bnz	l437
  3560  001BB6  0E08               	movlw	8
  3561  001BB8  0101               	movlb	1	; () banked
  3562  001BBA  5D01               	subwf	send_command@i& (0+255),w,b
  3563  001BBC  B0D8               	btfsc	status,0,c
  3564  001BBE  0012               	return	
  3565  001BC0                     l4911:
  3566                           
  3567                           ; BSR set to: 1
  3568                           ;user.c: 363: {
  3569                           ;user.c: 364: RA3 = command>>i & 0x01;
  3570  001BC0  C101  F028         	movff	send_command@i,??_send_command
  3571  001BC4  C100  F029         	movff	send_command@command,??_send_command+1
  3572  001BC8  2A28               	incf	??_send_command,f,c
  3573  001BCA  D002               	goto	u5704
  3574  001BCC                     u5705:
  3575  001BCC  90D8               	bcf	status,0,c
  3576  001BCE  3229               	rrcf	??_send_command+1,f,c
  3577  001BD0                     u5704:
  3578  001BD0  2E28               	decfsz	??_send_command,f,c
  3579  001BD2  D7FC               	goto	u5705
  3580  001BD4  3029               	rrcf	??_send_command+1,w,c
  3581  001BD6  A0D8               	btfss	status,0,c
  3582  001BD8  D002               	goto	u5710
  3583  001BDA  8680               	bsf	3968,3,c	;volatile
  3584  001BDC  D001               	goto	l4913
  3585  001BDE                     u5710:
  3586  001BDE  9680               	bcf	3968,3,c	;volatile
  3587  001BE0                     l4913:
  3588                           
  3589                           ;user.c: 365: RA2 = 1;
  3590  001BE0  8480               	bsf	3968,2,c	;volatile
  3591                           
  3592                           ;user.c: 366: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  3593  001BE2  0E10               	movlw	16
  3594  001BE4                     u6567:
  3595  001BE4  2EE8               	decfsz	wreg,f,c
  3596  001BE6  D7FE               	bra	u6567
  3597  001BE8  D000               	nop2	
  3598                           
  3599                           ;user.c: 367: RA2 = 0;
  3600  001BEA  9480               	bcf	3968,2,c	;volatile
  3601                           
  3602                           ;user.c: 368: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  3603  001BEC  0E06               	movlw	6
  3604  001BEE                     u6577:
  3605  001BEE  2EE8               	decfsz	wreg,f,c
  3606  001BF0  D7FE               	bra	u6577
  3607  001BF2  D000               	nop2	
  3608  001BF4  0101               	movlb	1	; () banked
  3609  001BF6  4B01               	infsnz	send_command@i& (0+255),f,b
  3610  001BF8  2B02               	incf	(send_command@i+1)& (0+255),f,b
  3611  001BFA  D7D7               	goto	l4907
  3612  001BFC                     l437:
  3613                           
  3614                           ; BSR set to: 1
  3615  001BFC  0012               	return		;funcret
  3616  001BFE                     __end_of_send_command:
  3617                           	opt stack 0
  3618                           tblptru	equ	0xFF8
  3619                           prodl	equ	0xFF3
  3620                           postinc0	equ	0xFEE
  3621                           wreg	equ	0xFE8
  3622                           indf2	equ	0xFDF
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function _io_as_output *****************
  3628 ;; Defined at:
  3629 ;;		line 380 in file "user.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;		None
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;		None
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      void 
  3636 ;; Registers used:
  3637 ;;		None
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3643 ;;      Params:         0       0       0       0       0       0       0       0       0
  3644 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3646 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3647 ;;Total ram usage:        0 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    6
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		_send_command
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text15
  3658  001F9A                     __ptext15:
  3659                           	opt stack 0
  3660  001F9A                     _io_as_output:
  3661                           	opt stack 21
  3662                           
  3663                           ;user.c: 382: TRISA3 = 0;
  3664                           
  3665                           ; BSR set to: 1
  3666                           ;incstack = 0
  3667  001F9A  9692               	bcf	3986,3,c	;volatile
  3668  001F9C  0012               	return		;funcret
  3669  001F9E                     __end_of_io_as_output:
  3670                           	opt stack 0
  3671                           tblptru	equ	0xFF8
  3672                           prodl	equ	0xFF3
  3673                           postinc0	equ	0xFEE
  3674                           wreg	equ	0xFE8
  3675                           indf2	equ	0xFDF
  3676                           fsr2h	equ	0xFDA
  3677                           fsr2l	equ	0xFD9
  3678                           status	equ	0xFD8
  3679                           
  3680 ;; *************** function _io_as_input *****************
  3681 ;; Defined at:
  3682 ;;		line 374 in file "user.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;		None
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		None
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3696 ;;      Params:         0       0       0       0       0       0       0       0       0
  3697 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3699 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3700 ;;Total ram usage:        0 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    6
  3703 ;; This function calls:
  3704 ;;		Nothing
  3705 ;; This function is called by:
  3706 ;;		_byte_read
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text16
  3711  001F9E                     __ptext16:
  3712                           	opt stack 0
  3713  001F9E                     _io_as_input:
  3714                           	opt stack 22
  3715                           
  3716                           ;user.c: 376: TRISA3 = 1;
  3717                           
  3718                           ;incstack = 0
  3719  001F9E  8692               	bsf	3986,3,c	;volatile
  3720  001FA0  0012               	return		;funcret
  3721  001FA2                     __end_of_io_as_input:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           prodl	equ	0xFF3
  3725                           postinc0	equ	0xFEE
  3726                           wreg	equ	0xFE8
  3727                           indf2	equ	0xFDF
  3728                           fsr2h	equ	0xFDA
  3729                           fsr2l	equ	0xFD9
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function _ce_enable *****************
  3733 ;; Defined at:
  3734 ;;		line 184 in file "user.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;		None
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;		None
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      void 
  3741 ;; Registers used:
  3742 ;;		None
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3748 ;;      Params:         0       0       0       0       0       0       0       0       0
  3749 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3751 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3752 ;;Total ram usage:        0 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    6
  3755 ;; This function calls:
  3756 ;;		Nothing
  3757 ;; This function is called by:
  3758 ;;		_byte_read
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           	psect	text17
  3763  001FA2                     __ptext17:
  3764                           	opt stack 0
  3765  001FA2                     _ce_enable:
  3766                           	opt stack 22
  3767                           
  3768                           ;user.c: 187: RA5 = 1;
  3769                           
  3770                           ;incstack = 0
  3771  001FA2  8A80               	bsf	3968,5,c	;volatile
  3772  001FA4  0012               	return		;funcret
  3773  001FA6                     __end_of_ce_enable:
  3774                           	opt stack 0
  3775                           tblptru	equ	0xFF8
  3776                           prodl	equ	0xFF3
  3777                           postinc0	equ	0xFEE
  3778                           wreg	equ	0xFE8
  3779                           indf2	equ	0xFDF
  3780                           fsr2h	equ	0xFDA
  3781                           fsr2l	equ	0xFD9
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _ce_disable *****************
  3785 ;; Defined at:
  3786 ;;		line 191 in file "user.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;		None
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;		None
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		None
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3800 ;;      Params:         0       0       0       0       0       0       0       0       0
  3801 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3803 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3804 ;;Total ram usage:        0 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; Hardware stack levels required when called:    6
  3807 ;; This function calls:
  3808 ;;		Nothing
  3809 ;; This function is called by:
  3810 ;;		_byte_read
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           	psect	text18
  3815  001F86                     __ptext18:
  3816                           	opt stack 0
  3817  001F86                     _ce_disable:
  3818                           	opt stack 22
  3819                           
  3820                           ;user.c: 193: RA5 = 0;
  3821                           
  3822                           ;incstack = 0
  3823  001F86  9A80               	bcf	3968,5,c	;volatile
  3824                           
  3825                           ;user.c: 194: RA2 = 0;
  3826  001F88  9480               	bcf	3968,2,c	;volatile
  3827  001F8A  0012               	return		;funcret
  3828  001F8C                     __end_of_ce_disable:
  3829                           	opt stack 0
  3830                           tblptru	equ	0xFF8
  3831                           prodl	equ	0xFF3
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           indf2	equ	0xFDF
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _buzzer_disable *****************
  3840 ;; Defined at:
  3841 ;;		line 170 in file "user.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, status,2
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3858 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3859 ;;Total ram usage:        0 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    6
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_main
  3866 ;;		_buzzer_toggle
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           	psect	text19
  3871  001F6E                     __ptext19:
  3872                           	opt stack 0
  3873  001F6E                     _buzzer_disable:
  3874                           	opt stack 24
  3875                           
  3876                           ;user.c: 172: buzzer_status= 0;
  3877                           
  3878                           ;incstack = 0
  3879  001F6E  0E00               	movlw	0
  3880  001F70  0100               	movlb	0	; () banked
  3881  001F72  6FC6               	movwf	_buzzer_status& (0+255),b
  3882                           
  3883                           ; BSR set to: 0
  3884  001F74  0012               	return		;funcret
  3885  001F76                     __end_of_buzzer_disable:
  3886                           	opt stack 0
  3887                           tblptru	equ	0xFF8
  3888                           prodl	equ	0xFF3
  3889                           postinc0	equ	0xFEE
  3890                           wreg	equ	0xFE8
  3891                           indf2	equ	0xFDF
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _InitApp *****************
  3897 ;; Defined at:
  3898 ;;		line 28 in file "user.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3915 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3916 ;;Total ram usage:        0 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    6
  3919 ;; This function calls:
  3920 ;;		Nothing
  3921 ;; This function is called by:
  3922 ;;		_main
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text20
  3927  001B2C                     __ptext20:
  3928                           	opt stack 0
  3929  001B2C                     _InitApp:
  3930                           	opt stack 24
  3931                           
  3932                           ;user.c: 32: TRISB3 = 0;
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;incstack = 0
  3936  001B2C  9693               	bcf	3987,3,c	;volatile
  3937                           
  3938                           ;user.c: 33: TRISB4 = 0;
  3939  001B2E  9893               	bcf	3987,4,c	;volatile
  3940                           
  3941                           ;user.c: 35: CCP2CON = 0x00;
  3942  001B30  0E00               	movlw	0
  3943  001B32  6EBA               	movwf	4026,c	;volatile
  3944                           
  3945                           ;user.c: 36: SSPCON1 = 0X00;
  3946  001B34  0E00               	movlw	0
  3947  001B36  6EC6               	movwf	4038,c	;volatile
  3948                           
  3949                           ;user.c: 37: ADCON1 = 0X0F;
  3950  001B38  0E0F               	movlw	15
  3951  001B3A  6EC1               	movwf	4033,c	;volatile
  3952                           
  3953                           ;user.c: 38: INTCON = 0b10001000;
  3954  001B3C  0E88               	movlw	136
  3955  001B3E  6EF2               	movwf	intcon,c	;volatile
  3956                           
  3957                           ;user.c: 39: INTCON = 0b0;
  3958  001B40  0E00               	movlw	0
  3959  001B42  6EF2               	movwf	intcon,c	;volatile
  3960                           
  3961                           ;user.c: 40: INTCON |= 1<<7;
  3962  001B44  8EF2               	bsf	intcon,7,c	;volatile
  3963                           
  3964                           ;user.c: 41: INTCON |= 1<<6;
  3965  001B46  8CF2               	bsf	intcon,6,c	;volatile
  3966                           
  3967                           ;user.c: 42: INTCON |= 1<<3;
  3968  001B48  86F2               	bsf	intcon,3,c	;volatile
  3969                           
  3970                           ;user.c: 43: INTCON |= 1<<5;
  3971  001B4A  8AF2               	bsf	intcon,5,c	;volatile
  3972                           
  3973                           ;user.c: 44: INTCON2 = 0b10000101;
  3974  001B4C  0E85               	movlw	133
  3975  001B4E  6EF1               	movwf	intcon2,c	;volatile
  3976                           
  3977                           ;user.c: 45: INTCON2 |= 1<2;
  3978  001B50  80F1               	bsf	intcon2,0,c	;volatile
  3979                           
  3980                           ;user.c: 47: T0CON = 0b10000010;
  3981  001B52  0E82               	movlw	130
  3982  001B54  6ED5               	movwf	4053,c	;volatile
  3983                           
  3984                           ;user.c: 50: T1CON = 0x00;
  3985  001B56  0E00               	movlw	0
  3986  001B58  6ECD               	movwf	4045,c	;volatile
  3987                           
  3988                           ;user.c: 51: T1CON |= 1<<7;
  3989  001B5A  8ECD               	bsf	4045,7,c	;volatile
  3990                           
  3991                           ;user.c: 52: T1CON |= 0<<5;
  3992  001B5C  50CD               	movf	4045,w,c	;volatile
  3993                           
  3994                           ;user.c: 53: T1CON |= 0<<4;
  3995  001B5E  50CD               	movf	4045,w,c	;volatile
  3996                           
  3997                           ;user.c: 54: T1CON |= 0<<3;
  3998  001B60  50CD               	movf	4045,w,c	;volatile
  3999                           
  4000                           ;user.c: 55: T1CON |= 0 << 1;
  4001  001B62  50CD               	movf	4045,w,c	;volatile
  4002                           
  4003                           ;user.c: 56: T1CON |= 0 << 0;
  4004  001B64  50CD               	movf	4045,w,c	;volatile
  4005                           
  4006                           ;user.c: 58: PIE1 = 0x00;
  4007  001B66  0E00               	movlw	0
  4008  001B68  6E9D               	movwf	3997,c	;volatile
  4009                           
  4010                           ;user.c: 59: PIE1 |= 1 << 0;
  4011  001B6A  809D               	bsf	3997,0,c	;volatile
  4012                           
  4013                           ;user.c: 61: TRISB1 = 0;
  4014  001B6C  9293               	bcf	3987,1,c	;volatile
  4015                           
  4016                           ;user.c: 62: TRISA2 = 0;
  4017  001B6E  9492               	bcf	3986,2,c	;volatile
  4018                           
  4019                           ;user.c: 63: TRISA5 = 0;
  4020  001B70  9A92               	bcf	3986,5,c	;volatile
  4021                           
  4022                           ;user.c: 64: TRISA3 = 0;
  4023  001B72  9692               	bcf	3986,3,c	;volatile
  4024                           
  4025                           ;user.c: 68: state = 0;
  4026  001B74  0E00               	movlw	0
  4027  001B76  0100               	movlb	0	; () banked
  4028  001B78  6FD5               	movwf	(_state+1)& (0+255),b
  4029  001B7A  0E00               	movlw	0
  4030  001B7C  6FD4               	movwf	_state& (0+255),b
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;user.c: 69: next = 0;
  4034  001B7E  0E00               	movlw	0
  4035  001B80  6E2D               	movwf	_next+1,c
  4036  001B82  0E00               	movlw	0
  4037  001B84  6E2C               	movwf	_next,c
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;user.c: 73: timer1_up_limit_sec = 59;
  4041  001B86  0E3B               	movlw	59
  4042  001B88  6E37               	movwf	_timer1_up_limit_sec,c
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;user.c: 74: timer1_up_limit_min = 59;
  4046  001B8A  0E3B               	movlw	59
  4047  001B8C  6E36               	movwf	_timer1_up_limit_min,c
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;user.c: 78: current_type = 'f';
  4051  001B8E  0E66               	movlw	102
  4052  001B90  6E35               	movwf	_current_type,c
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;user.c: 79: current_program = 0;
  4056  001B92  0E00               	movlw	0
  4057  001B94  6E2E               	movwf	_current_program,c
  4058                           
  4059                           ; BSR set to: 0
  4060  001B96  0012               	return		;funcret
  4061  001B98                     __end_of_InitApp:
  4062                           	opt stack 0
  4063                           tblptru	equ	0xFF8
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           intcon2	equ	0xFF1
  4067                           postinc0	equ	0xFEE
  4068                           wreg	equ	0xFE8
  4069                           indf2	equ	0xFDF
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _ConfigureOscillator *****************
  4075 ;; Defined at:
  4076 ;;		line 24 in file "system.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		None
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4090 ;;      Params:         0       0       0       0       0       0       0       0       0
  4091 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4093 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    6
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_main
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text21
  4105  001FBA                     __ptext21:
  4106                           	opt stack 0
  4107  001FBA                     _ConfigureOscillator:
  4108                           	opt stack 24
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;incstack = 0
  4112  001FBA  0012               	return		;funcret
  4113  001FBC                     __end_of_ConfigureOscillator:
  4114                           	opt stack 0
  4115                           tblptru	equ	0xFF8
  4116                           prodl	equ	0xFF3
  4117                           intcon	equ	0xFF2
  4118                           intcon2	equ	0xFF1
  4119                           postinc0	equ	0xFEE
  4120                           wreg	equ	0xFE8
  4121                           indf2	equ	0xFDF
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function _high_isr *****************
  4127 ;; Defined at:
  4128 ;;		line 32 in file "interrupts.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  digits          6   47[BANK0 ] unsigned char [6]
  4133 ;;  i               2   58[BANK0 ] int 
  4134 ;;  code           47    0[BANK0 ] unsigned char [47]
  4135 ;;  i               2   56[BANK0 ] int 
  4136 ;;  final_code      2   54[BANK0 ] int 
  4137 ;;  aux             1   53[BANK0 ] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4147 ;;      Params:         0       0       0       0       0       0       0       0       0
  4148 ;;      Locals:         0      60       0       0       0       0       0       0       0
  4149 ;;      Temps:         17       0       0       0       0       0       0       0       0
  4150 ;;      Totals:        17      60       0       0       0       0       0       0       0
  4151 ;;Total ram usage:       77 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    5
  4154 ;; This function calls:
  4155 ;;		_get_next_state
  4156 ;;		_ir_get_human_code
  4157 ;;		_point_disable
  4158 ;;		_point_enable
  4159 ;;		_put_nums
  4160 ;;		_update_buzzer
  4161 ;;		_update_point
  4162 ;;		_update_timer1_counter_10
  4163 ;; This function is called by:
  4164 ;;		Interrupt level 2
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	intcode
  4169  000008                     __pintcode:
  4170                           	opt stack 0
  4171  000008                     _high_isr:
  4172                           	opt stack 21
  4173                           
  4174                           ;incstack = 0
  4175  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4176  00000A  ED5D  F006         	call	int_func,f	;refresh shadow registers
  4177                           tblptru	equ	0xFF8
  4178                           prodl	equ	0xFF3
  4179                           intcon	equ	0xFF2
  4180                           intcon2	equ	0xFF1
  4181                           postinc0	equ	0xFEE
  4182                           wreg	equ	0xFE8
  4183                           indf2	equ	0xFDF
  4184                           fsr2h	equ	0xFDA
  4185                           fsr2l	equ	0xFD9
  4186                           status	equ	0xFD8
  4187                           
  4188                           	psect	intcode_body
  4189  000CBA                     __pintcode_body:
  4190                           	opt stack 21
  4191  000CBA                     int_func:
  4192                           	opt stack 21
  4193  000CBA  0006               	pop		; remove dummy address from shadow register refresh
  4194  000CBC  CFFA F01A          	movff	pclath,??_high_isr+3
  4195  000CC0  CFFB F01B          	movff	pclatu,??_high_isr+4
  4196  000CC4  CFE9 F01C          	movff	fsr0l,??_high_isr+5
  4197  000CC8  CFEA F01D          	movff	fsr0h,??_high_isr+6
  4198  000CCC  CFE1 F01E          	movff	fsr1l,??_high_isr+7
  4199  000CD0  CFE2 F01F          	movff	fsr1h,??_high_isr+8
  4200  000CD4  CFD9 F020          	movff	fsr2l,??_high_isr+9
  4201  000CD8  CFDA F021          	movff	fsr2h,??_high_isr+10
  4202  000CDC  CFF3 F022          	movff	prodl,??_high_isr+11
  4203  000CE0  CFF4 F023          	movff	prodh,??_high_isr+12
  4204  000CE4  CFF6 F024          	movff	tblptrl,??_high_isr+13
  4205  000CE8  CFF7 F025          	movff	tblptrh,??_high_isr+14
  4206  000CEC  CFF8 F026          	movff	tblptru,??_high_isr+15
  4207  000CF0  CFF5 F027          	movff	tablat,??_high_isr+16
  4208                           
  4209                           ;interrupts.c: 68: if (RBIF == 1)
  4210  000CF4  A0F2               	btfss	intcon,0,c	;volatile
  4211  000CF6  D089               	goto	i2l73
  4212                           
  4213                           ;interrupts.c: 69: {
  4214                           ;interrupts.c: 71: INTCONbits.GIE = 0;
  4215  000CF8  9EF2               	bcf	intcon,7,c	;volatile
  4216                           
  4217                           ;interrupts.c: 72: char aux = 0;
  4218  000CFA  0E00               	movlw	0
  4219  000CFC  0100               	movlb	0	; () banked
  4220  000CFE  6F95               	movwf	high_isr@aux& (0+255),b
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;interrupts.c: 74: int i;
  4224                           ;interrupts.c: 75: char code[47];
  4225                           ;interrupts.c: 77: _delay((unsigned long)((40.63)*(20000000L/4000.0)));
  4226  000D00  0E02               	movlw	2
  4227  000D02  6E18               	movwf	(??_high_isr+1)& (0+255),c
  4228  000D04  0E08               	movlw	8
  4229  000D06  6E17               	movwf	??_high_isr& (0+255),c
  4230  000D08  0ED2               	movlw	210
  4231  000D0A                     i2u658_47:
  4232  000D0A  2EE8               	decfsz	wreg,f,c
  4233  000D0C  D7FE               	bra	i2u658_47
  4234  000D0E  2E17               	decfsz	??_high_isr& (0+255),f,c
  4235  000D10  D7FC               	bra	i2u658_47
  4236  000D12  2E18               	decfsz	(??_high_isr+1)& (0+255),f,c
  4237  000D14  D7FA               	bra	i2u658_47
  4238                           
  4239                           ;interrupts.c: 78: for(i = 0; i < 47 ; i ++)
  4240  000D16  0E00               	movlw	0
  4241  000D18  0100               	movlb	0	; () banked
  4242  000D1A  6F99               	movwf	(high_isr@i+1)& (0+255),b
  4243  000D1C  0E00               	movlw	0
  4244  000D1E  6F98               	movwf	high_isr@i& (0+255),b
  4245  000D20                     i2l4273:
  4246                           
  4247                           ; BSR set to: 0
  4248  000D20  0100               	movlb	0	; () banked
  4249  000D22  BF99               	btfsc	(high_isr@i+1)& (0+255),7,b
  4250  000D24  D008               	goto	i2l4277
  4251  000D26  0100               	movlb	0	; () banked
  4252  000D28  5199               	movf	(high_isr@i+1)& (0+255),w,b
  4253  000D2A  E11D               	bnz	i2l4285
  4254  000D2C  0E2F               	movlw	47
  4255  000D2E  0100               	movlb	0	; () banked
  4256  000D30  5D98               	subwf	high_isr@i& (0+255),w,b
  4257  000D32  B0D8               	btfsc	status,0,c
  4258  000D34  D018               	goto	i2l4285
  4259  000D36                     i2l4277:
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;interrupts.c: 79: {
  4263                           ;interrupts.c: 80: code[i] = RB5;
  4264  000D36  0E60               	movlw	low high_isr@code
  4265  000D38  0100               	movlb	0	; () banked
  4266  000D3A  2598               	addwf	high_isr@i& (0+255),w,b
  4267  000D3C  6ED9               	movwf	fsr2l,c
  4268  000D3E  0E00               	movlw	high high_isr@code
  4269  000D40  0100               	movlb	0	; () banked
  4270  000D42  2199               	addwfc	(high_isr@i+1)& (0+255),w,b
  4271  000D44  6EDA               	movwf	fsr2h,c
  4272  000D46  0E00               	movlw	0
  4273  000D48  BA81               	btfsc	3969,5,c	;volatile
  4274  000D4A  0E01               	movlw	1
  4275  000D4C  6EDF               	movwf	indf2,c
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;interrupts.c: 81: _delay((unsigned long)((580)*(20000000L/4000000.0)));
  4279  000D4E  0E04               	movlw	4
  4280  000D50  6E17               	movwf	??_high_isr& (0+255),c
  4281  000D52  0EC3               	movlw	195
  4282  000D54                     i2u659_47:
  4283  000D54  2EE8               	decfsz	wreg,f,c
  4284  000D56  D7FE               	bra	i2u659_47
  4285  000D58  2E17               	decfsz	??_high_isr& (0+255),f,c
  4286  000D5A  D7FC               	bra	i2u659_47
  4287  000D5C  F000               	nop	
  4288  000D5E  0100               	movlb	0	; () banked
  4289  000D60  4B98               	infsnz	high_isr@i& (0+255),f,b
  4290  000D62  2B99               	incf	(high_isr@i+1)& (0+255),f,b
  4291  000D64  D7DD               	goto	i2l4273
  4292  000D66                     i2l4285:
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;interrupts.c: 82: }
  4296                           ;interrupts.c: 83: int final_code = 0;
  4297  000D66  0E00               	movlw	0
  4298  000D68  0100               	movlb	0	; () banked
  4299  000D6A  6F97               	movwf	(high_isr@final_code+1)& (0+255),b
  4300  000D6C  0E00               	movlw	0
  4301  000D6E  6F96               	movwf	high_isr@final_code& (0+255),b
  4302                           
  4303                           ;interrupts.c: 84: for(i = 0; i<16;i++)
  4304  000D70  0E00               	movlw	0
  4305  000D72  0100               	movlb	0	; () banked
  4306  000D74  6F99               	movwf	(high_isr@i+1)& (0+255),b
  4307  000D76  0E00               	movlw	0
  4308  000D78  6F98               	movwf	high_isr@i& (0+255),b
  4309  000D7A                     i2l4287:
  4310                           
  4311                           ; BSR set to: 0
  4312  000D7A  0100               	movlb	0	; () banked
  4313  000D7C  BF99               	btfsc	(high_isr@i+1)& (0+255),7,b
  4314  000D7E  D008               	goto	i2l4291
  4315  000D80  0100               	movlb	0	; () banked
  4316  000D82  5199               	movf	(high_isr@i+1)& (0+255),w,b
  4317  000D84  E123               	bnz	i2l4297
  4318  000D86  0E10               	movlw	16
  4319  000D88  0100               	movlb	0	; () banked
  4320  000D8A  5D98               	subwf	high_isr@i& (0+255),w,b
  4321  000D8C  B0D8               	btfsc	status,0,c
  4322  000D8E  D01E               	goto	i2l4297
  4323  000D90                     i2l4291:
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;interrupts.c: 85: {
  4327                           ;interrupts.c: 86: final_code |= code[i]<<i;
  4328  000D90  C098  F017         	movff	high_isr@i,??_high_isr
  4329  000D94  0E60               	movlw	low high_isr@code
  4330  000D96  0100               	movlb	0	; () banked
  4331  000D98  2598               	addwf	high_isr@i& (0+255),w,b
  4332  000D9A  6ED9               	movwf	fsr2l,c
  4333  000D9C  0E00               	movlw	high high_isr@code
  4334  000D9E  0100               	movlb	0	; () banked
  4335  000DA0  2199               	addwfc	(high_isr@i+1)& (0+255),w,b
  4336  000DA2  6EDA               	movwf	fsr2h,c
  4337  000DA4  50DF               	movf	indf2,w,c
  4338  000DA6  6E18               	movwf	(??_high_isr+1)& (0+255),c
  4339  000DA8  6A19               	clrf	(??_high_isr+2)& (0+255),c
  4340  000DAA  2A17               	incf	??_high_isr,f,c
  4341  000DAC  D003               	goto	i2u510_44
  4342  000DAE                     i2u510_45:
  4343  000DAE  90D8               	bcf	status,0,c
  4344  000DB0  3618               	rlcf	??_high_isr+1,f,c
  4345  000DB2  3619               	rlcf	??_high_isr+2,f,c
  4346  000DB4                     i2u510_44:
  4347  000DB4  2E17               	decfsz	??_high_isr,f,c
  4348  000DB6  D7FB               	goto	i2u510_45
  4349  000DB8  5018               	movf	??_high_isr+1,w,c
  4350  000DBA  0100               	movlb	0	; () banked
  4351  000DBC  1396               	iorwf	high_isr@final_code& (0+255),f,b
  4352  000DBE  5019               	movf	??_high_isr+2,w,c
  4353  000DC0  0100               	movlb	0	; () banked
  4354  000DC2  1397               	iorwf	(high_isr@final_code+1)& (0+255),f,b
  4355                           
  4356                           ; BSR set to: 0
  4357  000DC4  0100               	movlb	0	; () banked
  4358  000DC6  4B98               	infsnz	high_isr@i& (0+255),f,b
  4359  000DC8  2B99               	incf	(high_isr@i+1)& (0+255),f,b
  4360  000DCA  D7D7               	goto	i2l4287
  4361  000DCC                     i2l4297:
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;interrupts.c: 87: }
  4365                           ;interrupts.c: 92: if(final_code !=0xffff)
  4366  000DCC  0100               	movlb	0	; () banked
  4367  000DCE  2996               	incf	high_isr@final_code& (0+255),w,b
  4368  000DD0  E104               	bnz	i2u512_40
  4369  000DD2  0100               	movlb	0	; () banked
  4370  000DD4  2997               	incf	(high_isr@final_code+1)& (0+255),w,b
  4371  000DD6  B4D8               	btfsc	status,2,c
  4372  000DD8  D015               	goto	i2l4303
  4373  000DDA                     i2u512_40:
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;interrupts.c: 93: {
  4377                           ;interrupts.c: 94: human_code = ir_get_human_code(final_code);
  4378  000DDA  C096  F001         	movff	high_isr@final_code,ir_get_human_code@code
  4379  000DDE  C097  F002         	movff	high_isr@final_code+1,ir_get_human_code@code+1
  4380  000DE2  EC5E  F00A         	call	_ir_get_human_code	;wreg free
  4381  000DE6  6E34               	movwf	_human_code,c
  4382                           
  4383                           ;interrupts.c: 95: next = get_next_state(state,final_code);
  4384  000DE8  C0D4  F00E         	movff	_state,get_next_state@state
  4385  000DEC  C0D5  F00F         	movff	_state+1,get_next_state@state+1
  4386  000DF0  C096  F010         	movff	high_isr@final_code,get_next_state@code
  4387  000DF4  C097  F011         	movff	high_isr@final_code+1,get_next_state@code+1
  4388  000DF8  EC09  F000         	call	_get_next_state	;wreg free
  4389  000DFC  C00E  F02C         	movff	?_get_next_state,_next
  4390  000E00  C00F  F02D         	movff	?_get_next_state+1,_next+1
  4391  000E04                     i2l4303:
  4392                           
  4393                           ;interrupts.c: 96: }
  4394                           ;interrupts.c: 98: RBIF = 0;
  4395  000E04  90F2               	bcf	intcon,0,c	;volatile
  4396                           
  4397                           ;interrupts.c: 99: INTCONbits.GIE = 1;
  4398  000E06  8EF2               	bsf	intcon,7,c	;volatile
  4399                           
  4400                           ;interrupts.c: 100: }
  4401  000E08  D0C9               	goto	i2l104
  4402  000E0A                     i2l73:
  4403                           
  4404                           ;interrupts.c: 101: else if (TMR0IF == 1)
  4405  000E0A  A4F2               	btfss	intcon,2,c	;volatile
  4406  000E0C  D0A4               	goto	i2l80
  4407                           
  4408                           ;interrupts.c: 102: {
  4409                           ;interrupts.c: 104: int i;
  4410                           ;interrupts.c: 105: for(i=0; i<6;i++)
  4411  000E0E  0E00               	movlw	0
  4412  000E10  0100               	movlb	0	; () banked
  4413  000E12  6F9B               	movwf	(high_isr@i_166+1)& (0+255),b
  4414  000E14  0E00               	movlw	0
  4415  000E16  6F9A               	movwf	high_isr@i_166& (0+255),b
  4416  000E18                     i2l4309:
  4417                           
  4418                           ; BSR set to: 0
  4419  000E18  0100               	movlb	0	; () banked
  4420  000E1A  BF9B               	btfsc	(high_isr@i_166+1)& (0+255),7,b
  4421  000E1C  D008               	goto	i2l4313
  4422  000E1E  0100               	movlb	0	; () banked
  4423  000E20  519B               	movf	(high_isr@i_166+1)& (0+255),w,b
  4424  000E22  E11B               	bnz	i2l4319
  4425  000E24  0E06               	movlw	6
  4426  000E26  0100               	movlb	0	; () banked
  4427  000E28  5D9A               	subwf	high_isr@i_166& (0+255),w,b
  4428  000E2A  B0D8               	btfsc	status,0,c
  4429  000E2C  D016               	goto	i2l4319
  4430  000E2E                     i2l4313:
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;interrupts.c: 106: {
  4434                           ;interrupts.c: 107: masked_digits[i] = aux1[i];
  4435  000E2E  0ECD               	movlw	low _aux1
  4436  000E30  0100               	movlb	0	; () banked
  4437  000E32  259A               	addwf	high_isr@i_166& (0+255),w,b
  4438  000E34  6ED9               	movwf	fsr2l,c
  4439  000E36  0E00               	movlw	high _aux1
  4440  000E38  0100               	movlb	0	; () banked
  4441  000E3A  219B               	addwfc	(high_isr@i_166+1)& (0+255),w,b
  4442  000E3C  6EDA               	movwf	fsr2h,c
  4443  000E3E  0EC7               	movlw	low _masked_digits
  4444  000E40  0100               	movlb	0	; () banked
  4445  000E42  259A               	addwf	high_isr@i_166& (0+255),w,b
  4446  000E44  6EE1               	movwf	fsr1l,c
  4447  000E46  0E00               	movlw	high _masked_digits
  4448  000E48  0100               	movlb	0	; () banked
  4449  000E4A  219B               	addwfc	(high_isr@i_166+1)& (0+255),w,b
  4450  000E4C  6EE2               	movwf	fsr1h,c
  4451  000E4E  CFDF FFE7          	movff	indf2,indf1
  4452                           
  4453                           ; BSR set to: 0
  4454  000E52  0100               	movlb	0	; () banked
  4455  000E54  4B9A               	infsnz	high_isr@i_166& (0+255),f,b
  4456  000E56  2B9B               	incf	(high_isr@i_166+1)& (0+255),f,b
  4457  000E58  D7DF               	goto	i2l4309
  4458  000E5A                     i2l4319:
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;interrupts.c: 108: }
  4462                           ;interrupts.c: 111: if(counter < 10 - 1)
  4463  000E5A  0E09               	movlw	9
  4464  000E5C  0100               	movlb	0	; () banked
  4465  000E5E  61C4               	cpfslt	_counter& (0+255),b
  4466  000E60  D003               	goto	i2l4323
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;interrupts.c: 112: {
  4470                           ;interrupts.c: 113: counter = counter + 1;
  4471  000E62  0100               	movlb	0	; () banked
  4472  000E64  29C4               	incf	_counter& (0+255),w,b
  4473  000E66  D001               	goto	L26
  4474  000E68                     i2l4323:
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;interrupts.c: 115: else
  4478                           ;interrupts.c: 116: {
  4479                           ;interrupts.c: 117: counter = 0;
  4480  000E68  0E00               	movlw	0
  4481  000E6A                     L26:
  4482  000E6A  0100               	movlb	0	; () banked
  4483  000E6C  6FC4               	movwf	_counter& (0+255),b
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;interrupts.c: 118: }
  4487                           ;interrupts.c: 120: char digits[6];
  4488                           ;interrupts.c: 121: int i;
  4489                           ;interrupts.c: 123: for (i=0; i<6;i++)
  4490  000E6E  0E00               	movlw	0
  4491  000E70  0100               	movlb	0	; () banked
  4492  000E72  6F9B               	movwf	(high_isr@i_166+1)& (0+255),b
  4493  000E74  0E00               	movlw	0
  4494  000E76  6F9A               	movwf	high_isr@i_166& (0+255),b
  4495  000E78                     i2l4325:
  4496                           
  4497                           ; BSR set to: 0
  4498  000E78  0100               	movlb	0	; () banked
  4499  000E7A  BF9B               	btfsc	(high_isr@i_166+1)& (0+255),7,b
  4500  000E7C  D008               	goto	i2l85
  4501  000E7E  0100               	movlb	0	; () banked
  4502  000E80  519B               	movf	(high_isr@i_166+1)& (0+255),w,b
  4503  000E82  E10B               	bnz	i2l4333
  4504  000E84  0E06               	movlw	6
  4505  000E86  0100               	movlb	0	; () banked
  4506  000E88  5D9A               	subwf	high_isr@i_166& (0+255),w,b
  4507  000E8A  B0D8               	btfsc	status,0,c
  4508  000E8C  D006               	goto	i2l4333
  4509  000E8E                     i2l85:
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;interrupts.c: 124: digits[6] = i;
  4513  000E8E  C09A  F095         	movff	high_isr@i_166,high_isr@digits+6
  4514                           
  4515                           ; BSR set to: 0
  4516  000E92  0100               	movlb	0	; () banked
  4517  000E94  4B9A               	infsnz	high_isr@i_166& (0+255),f,b
  4518  000E96  2B9B               	incf	(high_isr@i_166+1)& (0+255),f,b
  4519  000E98  D7EF               	goto	i2l4325
  4520  000E9A                     i2l4333:
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;interrupts.c: 127: update_point(state,counter);
  4524  000E9A  C0D4  F001         	movff	_state,update_point@state
  4525  000E9E  C0D5  F002         	movff	_state+1,update_point@state+1
  4526  000EA2  C0C4  F003         	movff	_counter,update_point@counter
  4527  000EA6  EC02  F00F         	call	_update_point	;wreg free
  4528                           
  4529                           ;interrupts.c: 128: update_buzzer(state,counter);
  4530  000EAA  C0D4  F001         	movff	_state,update_buzzer@state
  4531  000EAE  C0D5  F002         	movff	_state+1,update_buzzer@state+1
  4532  000EB2  C0C4  F003         	movff	_counter,update_buzzer@counter
  4533  000EB6  EC26  F00F         	call	_update_buzzer	;wreg free
  4534                           
  4535                           ;interrupts.c: 130: if(counter == 0 )
  4536  000EBA  0100               	movlb	0	; () banked
  4537  000EBC  51C4               	movf	_counter& (0+255),w,b
  4538  000EBE  A4D8               	btfss	status,2,c
  4539  000EC0  D003               	goto	i2l4339
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;interrupts.c: 131: {
  4543                           ;interrupts.c: 132: point_enable();
  4544  000EC2  ECD3  F00F         	call	_point_enable	;wreg free
  4545                           
  4546                           ;interrupts.c: 133: }
  4547  000EC6  D00C               	goto	i2l4345
  4548  000EC8                     i2l4339:
  4549                           
  4550                           ;interrupts.c: 134: else if(counter == 5 && state == 0)
  4551  000EC8  0E05               	movlw	5
  4552  000ECA  0100               	movlb	0	; () banked
  4553  000ECC  19C4               	xorwf	_counter& (0+255),w,b
  4554  000ECE  A4D8               	btfss	status,2,c
  4555  000ED0  D007               	goto	i2l4345
  4556                           
  4557                           ; BSR set to: 0
  4558  000ED2  0100               	movlb	0	; () banked
  4559  000ED4  51D4               	movf	_state& (0+255),w,b
  4560  000ED6  0100               	movlb	0	; () banked
  4561  000ED8  11D5               	iorwf	(_state+1)& (0+255),w,b
  4562  000EDA  B4D8               	btfsc	status,2,c
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;interrupts.c: 135: {
  4566                           ;interrupts.c: 136: point_disable();
  4567  000EDC  ECD5  F00F         	call	_point_disable	;wreg free
  4568  000EE0                     i2l4345:
  4569                           
  4570                           ;interrupts.c: 137: }
  4571                           ;interrupts.c: 140: if(buzzer_status)
  4572  000EE0  0100               	movlb	0	; () banked
  4573  000EE2  51C6               	movf	_buzzer_status& (0+255),w,b
  4574  000EE4  B4D8               	btfsc	status,2,c
  4575  000EE6  D005               	goto	i2l4351
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;interrupts.c: 141: {
  4579                           ;interrupts.c: 142: if(RB0 == 1)
  4580  000EE8  A081               	btfss	3969,0,c	;volatile
  4581  000EEA  D002               	goto	i2l91
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;interrupts.c: 143: RB0 = 0;
  4585  000EEC  9081               	bcf	3969,0,c	;volatile
  4586  000EEE  D001               	goto	i2l4351
  4587  000EF0                     i2l91:
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;interrupts.c: 144: else
  4591                           ;interrupts.c: 145: RB0 = 1;
  4592  000EF0  8081               	bsf	3969,0,c	;volatile
  4593  000EF2                     i2l4351:
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;interrupts.c: 146: }
  4597                           ;interrupts.c: 147: if(counter >= 5)
  4598  000EF2  0E04               	movlw	4
  4599  000EF4  0100               	movlb	0	; () banked
  4600  000EF6  65C4               	cpfsgt	_counter& (0+255),b
  4601  000EF8  D026               	goto	i2l4367
  4602  000EFA  D010               	goto	i2l4365
  4603  000EFC                     i2l4355:
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;interrupts.c: 152: masked_digits[3] = 'V';
  4607  000EFC  0E56               	movlw	86
  4608  000EFE  0100               	movlb	0	; () banked
  4609  000F00  6FCA               	movwf	(_masked_digits+3)& (0+255),b
  4610                           
  4611                           ;interrupts.c: 153: break;
  4612  000F02  D021               	goto	i2l4367
  4613  000F04                     i2l4357:
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;interrupts.c: 155: masked_digits[2] = 'V';
  4617  000F04  0E56               	movlw	86
  4618  000F06  0100               	movlb	0	; () banked
  4619  000F08  6FC9               	movwf	(_masked_digits+2)& (0+255),b
  4620                           
  4621                           ;interrupts.c: 156: break;
  4622  000F0A  D01D               	goto	i2l4367
  4623  000F0C                     i2l4359:
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;interrupts.c: 158: masked_digits[1] = 'V';
  4627  000F0C  0E56               	movlw	86
  4628  000F0E  0100               	movlb	0	; () banked
  4629  000F10  6FC8               	movwf	(_masked_digits+1)& (0+255),b
  4630                           
  4631                           ;interrupts.c: 159: break;
  4632  000F12  D019               	goto	i2l4367
  4633  000F14                     i2l4361:
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;interrupts.c: 161: masked_digits[0] = 'V';
  4637  000F14  0E56               	movlw	86
  4638  000F16  0100               	movlb	0	; () banked
  4639  000F18  6FC7               	movwf	_masked_digits& (0+255),b
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;interrupts.c: 163: }
  4643                           
  4644                           ;interrupts.c: 162: break;
  4645  000F1A  D015               	goto	i2l4367
  4646  000F1C                     i2l4365:
  4647                           
  4648                           ; BSR set to: 0
  4649  000F1C  C0D4  F017         	movff	_state,??_high_isr
  4650  000F20  C0D5  F018         	movff	_state+1,??_high_isr+1
  4651                           
  4652                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4653                           ; Switch size 1, requested type "space"
  4654                           ; Number of cases is 1, Range of values is 0 to 0
  4655                           ; switch strategies available:
  4656                           ; Name         Instructions Cycles
  4657                           ; simple_byte            4     3 (average)
  4658                           ;	Chosen strategy is simple_byte
  4659  000F24  5018               	movf	??_high_isr+1,w,c
  4660  000F26  0A00               	xorlw	0	; case 0
  4661  000F28  A4D8               	btfss	status,2,c
  4662  000F2A  D00D               	goto	i2l4367
  4663                           
  4664                           ; BSR set to: 0
  4665                           ; Switch size 1, requested type "space"
  4666                           ; Number of cases is 4, Range of values is 1 to 4
  4667                           ; switch strategies available:
  4668                           ; Name         Instructions Cycles
  4669                           ; simple_byte           13     7 (average)
  4670                           ;	Chosen strategy is simple_byte
  4671  000F2C  5017               	movf	??_high_isr,w,c
  4672  000F2E  0A01               	xorlw	1	; case 1
  4673  000F30  B4D8               	btfsc	status,2,c
  4674  000F32  D7E4               	goto	i2l4355
  4675  000F34  0A03               	xorlw	3	; case 2
  4676  000F36  B4D8               	btfsc	status,2,c
  4677  000F38  D7E5               	goto	i2l4357
  4678  000F3A  0A01               	xorlw	1	; case 3
  4679  000F3C  B4D8               	btfsc	status,2,c
  4680  000F3E  D7E6               	goto	i2l4359
  4681  000F40  0A07               	xorlw	7	; case 4
  4682  000F42  B4D8               	btfsc	status,2,c
  4683  000F44  D7E7               	goto	i2l4361
  4684  000F46                     i2l4367:
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;interrupts.c: 164: }
  4688                           ;interrupts.c: 167: put_nums(masked_digits);
  4689  000F46  0EC7               	movlw	low _masked_digits
  4690  000F48  6E08               	movwf	put_nums@nums,c
  4691  000F4A  0E00               	movlw	high _masked_digits
  4692  000F4C  6E09               	movwf	put_nums@nums+1,c
  4693  000F4E  EC67  F00F         	call	_put_nums	;wreg free
  4694                           
  4695                           ;interrupts.c: 168: TMR0IF = 0;
  4696  000F52  94F2               	bcf	intcon,2,c	;volatile
  4697                           
  4698                           ;interrupts.c: 169: }
  4699  000F54  D023               	goto	i2l104
  4700  000F56                     i2l80:
  4701                           
  4702                           ;interrupts.c: 171: else if (TMR1IF == 1)
  4703  000F56  A09E               	btfss	3998,0,c	;volatile
  4704  000F58  D021               	goto	i2l104
  4705                           
  4706                           ;interrupts.c: 172: {
  4707                           ;interrupts.c: 174: if(timer1_counter <99)
  4708  000F5A  0E63               	movlw	99
  4709  000F5C  0100               	movlb	0	; () banked
  4710  000F5E  61C5               	cpfslt	_timer1_counter& (0+255),b
  4711  000F60  D003               	goto	i2l4375
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;interrupts.c: 175: {
  4715                           ;interrupts.c: 176: timer1_counter += 1;
  4716  000F62  0100               	movlb	0	; () banked
  4717  000F64  2BC5               	incf	_timer1_counter& (0+255),f,b
  4718                           
  4719                           ;interrupts.c: 179: }
  4720  000F66  D019               	goto	i2l4381
  4721  000F68                     i2l4375:
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;interrupts.c: 181: else
  4725                           ;interrupts.c: 182: {
  4726                           ;interrupts.c: 183: timer1_counter = 0;
  4727  000F68  0E00               	movlw	0
  4728  000F6A  0100               	movlb	0	; () banked
  4729  000F6C  6FC5               	movwf	_timer1_counter& (0+255),b
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;interrupts.c: 184: update_timer1_counter_10(state,&timer1_counter_10);
  4733  000F6E  0ED3               	movlw	low _timer1_counter_10
  4734  000F70  6E01               	movwf	update_timer1_counter_10@counter,c
  4735  000F72  0E00               	movlw	high _timer1_counter_10
  4736  000F74  6E02               	movwf	update_timer1_counter_10@counter+1,c
  4737  000F76  0100               	movlb	0	; () banked
  4738  000F78  51D4               	movf	_state& (0+255),w,b
  4739  000F7A  ECEC  F008         	call	_update_timer1_counter_10
  4740                           
  4741                           ;interrupts.c: 187: next = get_next_state(state,0);
  4742  000F7E  C0D4  F00E         	movff	_state,get_next_state@state
  4743  000F82  C0D5  F00F         	movff	_state+1,get_next_state@state+1
  4744  000F86  0E00               	movlw	0
  4745  000F88  6E11               	movwf	get_next_state@code+1,c
  4746  000F8A  0E00               	movlw	0
  4747  000F8C  6E10               	movwf	get_next_state@code,c
  4748  000F8E  EC09  F000         	call	_get_next_state	;wreg free
  4749  000F92  C00E  F02C         	movff	?_get_next_state,_next
  4750  000F96  C00F  F02D         	movff	?_get_next_state+1,_next+1
  4751  000F9A                     i2l4381:
  4752                           
  4753                           ;interrupts.c: 188: }
  4754                           ;interrupts.c: 190: TMR1IF = 0;
  4755  000F9A  909E               	bcf	3998,0,c	;volatile
  4756  000F9C                     i2l104:
  4757  000F9C  C027  FFF5         	movff	??_high_isr+16,tablat
  4758  000FA0  C026  FFF8         	movff	??_high_isr+15,tblptru
  4759  000FA4  C025  FFF7         	movff	??_high_isr+14,tblptrh
  4760  000FA8  C024  FFF6         	movff	??_high_isr+13,tblptrl
  4761  000FAC  C023  FFF4         	movff	??_high_isr+12,prodh
  4762  000FB0  C022  FFF3         	movff	??_high_isr+11,prodl
  4763  000FB4  C021  FFDA         	movff	??_high_isr+10,fsr2h
  4764  000FB8  C020  FFD9         	movff	??_high_isr+9,fsr2l
  4765  000FBC  C01F  FFE2         	movff	??_high_isr+8,fsr1h
  4766  000FC0  C01E  FFE1         	movff	??_high_isr+7,fsr1l
  4767  000FC4  C01D  FFEA         	movff	??_high_isr+6,fsr0h
  4768  000FC8  C01C  FFE9         	movff	??_high_isr+5,fsr0l
  4769  000FCC  C01B  FFFB         	movff	??_high_isr+4,pclatu
  4770  000FD0  C01A  FFFA         	movff	??_high_isr+3,pclath
  4771  000FD4  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4772  000FD6  0011               	retfie		f
  4773  000FD8                     __end_of_high_isr:
  4774                           	opt stack 0
  4775                           pclatu	equ	0xFFB
  4776                           pclath	equ	0xFFA
  4777                           tblptru	equ	0xFF8
  4778                           tblptrh	equ	0xFF7
  4779                           tblptrl	equ	0xFF6
  4780                           tablat	equ	0xFF5
  4781                           prodh	equ	0xFF4
  4782                           prodl	equ	0xFF3
  4783                           intcon	equ	0xFF2
  4784                           intcon2	equ	0xFF1
  4785                           postinc0	equ	0xFEE
  4786                           fsr0h	equ	0xFEA
  4787                           fsr0l	equ	0xFE9
  4788                           wreg	equ	0xFE8
  4789                           indf1	equ	0xFE7
  4790                           fsr1h	equ	0xFE2
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           fsr2h	equ	0xFDA
  4794                           fsr2l	equ	0xFD9
  4795                           status	equ	0xFD8
  4796                           
  4797 ;; *************** function _update_timer1_counter_10 *****************
  4798 ;; Defined at:
  4799 ;;		line 767 in file "user.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;  state           1    wreg     unsigned char 
  4802 ;;  counter         2    0[COMRAM] PTR unsigned char 
  4803 ;;		 -> timer1_counter_10(1), 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  state           1    3[COMRAM] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4815 ;;      Params:         2       0       0       0       0       0       0       0       0
  4816 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4817 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4818 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4819 ;;Total ram usage:        4 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; This function calls:
  4822 ;;		Nothing
  4823 ;; This function is called by:
  4824 ;;		_high_isr
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           	psect	text23
  4829  0011D8                     __ptext23:
  4830                           	opt stack 0
  4831  0011D8                     _update_timer1_counter_10:
  4832                           	opt stack 25
  4833                           
  4834                           ;incstack = 0
  4835                           ;update_timer1_counter_10@state stored from wreg
  4836  0011D8  6E04               	movwf	update_timer1_counter_10@state,c
  4837                           
  4838                           ;user.c: 769: if(state == 5)
  4839  0011DA  0E05               	movlw	5
  4840  0011DC  1804               	xorwf	update_timer1_counter_10@state,w,c
  4841  0011DE  A4D8               	btfss	status,2,c
  4842  0011E0  D007               	goto	i2l4025
  4843                           
  4844                           ;user.c: 770: *counter = 10;
  4845  0011E2  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4846  0011E6  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4847  0011EA  0E0A               	movlw	10
  4848  0011EC  6EDF               	movwf	indf2,c
  4849  0011EE  0012               	return	
  4850  0011F0                     i2l4025:
  4851                           
  4852                           ;user.c: 771: else if(state == 11)
  4853  0011F0  0E0B               	movlw	11
  4854  0011F2  1804               	xorwf	update_timer1_counter_10@state,w,c
  4855  0011F4  A4D8               	btfss	status,2,c
  4856  0011F6  D01A               	goto	i2l4035
  4857                           
  4858                           ;user.c: 772: {
  4859                           ;user.c: 773: if(*counter>0)
  4860  0011F8  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4861  0011FC  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4862  001200  50DF               	movf	indf2,w,c
  4863  001202  B4D8               	btfsc	status,2,c
  4864  001204  0012               	return	
  4865                           
  4866                           ;user.c: 774: {
  4867                           ;user.c: 775: if (*counter>3)
  4868  001206  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4869  00120A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4870  00120E  0E03               	movlw	3
  4871  001210  64DF               	cpfsgt	indf2,c
  4872  001212  D006               	goto	i2l4033
  4873                           
  4874                           ;user.c: 776: {
  4875                           ;user.c: 777: *counter-=1;
  4876  001214  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4877  001218  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4878  00121C  06DF               	decf	indf2,f,c
  4879                           
  4880                           ;user.c: 778: }
  4881  00121E  0012               	return	
  4882  001220                     i2l4033:
  4883                           
  4884                           ;user.c: 779: else
  4885                           ;user.c: 780: {
  4886                           ;user.c: 781: *counter-=1;
  4887  001220  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4888  001224  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4889  001228  06DF               	decf	indf2,f,c
  4890                           
  4891                           ;user.c: 783: }
  4892                           ;user.c: 784: }
  4893                           ;user.c: 787: }
  4894  00122A  0012               	return	
  4895  00122C                     i2l4035:
  4896                           
  4897                           ;user.c: 788: else if(state == 12)
  4898  00122C  0E0C               	movlw	12
  4899  00122E  1804               	xorwf	update_timer1_counter_10@state,w,c
  4900  001230  A4D8               	btfss	status,2,c
  4901  001232  D01B               	goto	i2l4049
  4902                           
  4903                           ;user.c: 789: if(*counter<59)
  4904  001234  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4905  001238  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4906  00123C  0E3B               	movlw	59
  4907  00123E  60DF               	cpfslt	indf2,c
  4908  001240  D006               	goto	i2l4041
  4909                           
  4910                           ;user.c: 790: {
  4911                           ;user.c: 791: *counter+=1;
  4912  001242  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4913  001246  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4914  00124A  2ADF               	incf	indf2,f,c
  4915                           
  4916                           ;user.c: 792: }
  4917  00124C  0012               	return	
  4918  00124E                     i2l4041:
  4919                           
  4920                           ;user.c: 793: else
  4921                           ;user.c: 794: {
  4922                           ;user.c: 795: *counter= 0;
  4923  00124E  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4924  001252  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4925  001256  0E00               	movlw	0
  4926  001258  6EDF               	movwf	indf2,c
  4927                           
  4928                           ;user.c: 797: if(timer1_counter_min < 59)
  4929  00125A  0E3B               	movlw	59
  4930  00125C  6033               	cpfslt	_timer1_counter_min,c
  4931  00125E  D002               	goto	i2l4047
  4932                           
  4933                           ;user.c: 798: timer1_counter_min +=1;
  4934  001260  2A33               	incf	_timer1_counter_min,f,c
  4935  001262  0012               	return	
  4936  001264                     i2l4047:
  4937                           
  4938                           ;user.c: 799: else
  4939                           ;user.c: 800: timer1_counter_min = 0;
  4940  001264  0E00               	movlw	0
  4941  001266  6E33               	movwf	_timer1_counter_min,c
  4942                           
  4943                           ;user.c: 801: }
  4944  001268  0012               	return	
  4945  00126A                     i2l4049:
  4946                           
  4947                           ;user.c: 802: else if(state == 6)
  4948  00126A  0E06               	movlw	6
  4949  00126C  1804               	xorwf	update_timer1_counter_10@state,w,c
  4950  00126E  A4D8               	btfss	status,2,c
  4951  001270  D007               	goto	i2l4053
  4952                           
  4953                           ;user.c: 803: *counter = 10;
  4954  001272  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4955  001276  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4956  00127A  0E0A               	movlw	10
  4957  00127C  6EDF               	movwf	indf2,c
  4958  00127E  0012               	return	
  4959  001280                     i2l4053:
  4960                           
  4961                           ;user.c: 804: else if(state == 18)
  4962  001280  0E12               	movlw	18
  4963  001282  1804               	xorwf	update_timer1_counter_10@state,w,c
  4964  001284  A4D8               	btfss	status,2,c
  4965  001286  D01A               	goto	i2l4063
  4966                           
  4967                           ;user.c: 805: {
  4968                           ;user.c: 806: if(*counter >0)
  4969  001288  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4970  00128C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4971  001290  50DF               	movf	indf2,w,c
  4972  001292  B4D8               	btfsc	status,2,c
  4973  001294  0012               	return	
  4974                           
  4975                           ;user.c: 807: {
  4976                           ;user.c: 808: if(*counter>3)
  4977  001296  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4978  00129A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4979  00129E  0E03               	movlw	3
  4980  0012A0  64DF               	cpfsgt	indf2,c
  4981  0012A2  D006               	goto	i2l4061
  4982                           
  4983                           ;user.c: 809: {
  4984                           ;user.c: 810: *counter -=1;
  4985  0012A4  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4986  0012A8  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4987  0012AC  06DF               	decf	indf2,f,c
  4988                           
  4989                           ;user.c: 811: }
  4990  0012AE  0012               	return	
  4991  0012B0                     i2l4061:
  4992                           
  4993                           ;user.c: 812: else
  4994                           ;user.c: 813: {
  4995                           ;user.c: 814: *counter -=1;
  4996  0012B0  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4997  0012B4  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4998  0012B8  06DF               	decf	indf2,f,c
  4999                           
  5000                           ;user.c: 816: }
  5001                           ;user.c: 817: }
  5002                           ;user.c: 818: }
  5003  0012BA  0012               	return	
  5004  0012BC                     i2l4063:
  5005                           
  5006                           ;user.c: 819: else if(state == 19)
  5007  0012BC  0E13               	movlw	19
  5008  0012BE  1804               	xorwf	update_timer1_counter_10@state,w,c
  5009  0012C0  A4D8               	btfss	status,2,c
  5010  0012C2  D018               	goto	i2l4075
  5011                           
  5012                           ;user.c: 820: {
  5013                           ;user.c: 821: if(*counter>0)
  5014  0012C4  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5015  0012C8  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5016  0012CC  50DF               	movf	indf2,w,c
  5017  0012CE  B4D8               	btfsc	status,2,c
  5018  0012D0  D006               	goto	i2l4069
  5019                           
  5020                           ;user.c: 822: {
  5021                           ;user.c: 823: *counter -=1;
  5022  0012D2  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5023  0012D6  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5024  0012DA  06DF               	decf	indf2,f,c
  5025                           
  5026                           ;user.c: 824: }
  5027  0012DC  0012               	return	
  5028  0012DE                     i2l4069:
  5029                           
  5030                           ;user.c: 825: else
  5031                           ;user.c: 826: {
  5032                           ;user.c: 827: if(timer1_counter_min > 0)
  5033  0012DE  5033               	movf	_timer1_counter_min,w,c
  5034  0012E0  B4D8               	btfsc	status,2,c
  5035  0012E2  0012               	return	
  5036                           
  5037                           ;user.c: 828: {
  5038                           ;user.c: 829: timer1_counter_min -=1;
  5039  0012E4  0633               	decf	_timer1_counter_min,f,c
  5040                           
  5041                           ;user.c: 830: *counter = 59;
  5042  0012E6  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5043  0012EA  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5044  0012EE  0E3B               	movlw	59
  5045  0012F0  6EDF               	movwf	indf2,c
  5046                           
  5047                           ;user.c: 831: }
  5048                           ;user.c: 833: }
  5049                           ;user.c: 834: }
  5050  0012F2  0012               	return	
  5051  0012F4                     i2l4075:
  5052                           
  5053                           ;user.c: 835: else if(state == 21)
  5054  0012F4  0E15               	movlw	21
  5055  0012F6  1804               	xorwf	update_timer1_counter_10@state,w,c
  5056  0012F8  A4D8               	btfss	status,2,c
  5057  0012FA  D00B               	goto	i2l4083
  5058                           
  5059                           ;user.c: 836: {
  5060                           ;user.c: 837: *counter = 0;
  5061  0012FC  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5062  001300  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5063  001304  0E00               	movlw	0
  5064  001306  6EDF               	movwf	indf2,c
  5065                           
  5066                           ;user.c: 838: timer1_speed_cents = 0;
  5067  001308  0E00               	movlw	0
  5068  00130A  6E30               	movwf	_timer1_speed_cents,c
  5069                           
  5070                           ;user.c: 839: timer1_counter_min = 0;
  5071  00130C  0E00               	movlw	0
  5072  00130E  6E33               	movwf	_timer1_counter_min,c
  5073                           
  5074                           ;user.c: 840: }
  5075  001310  0012               	return	
  5076  001312                     i2l4083:
  5077                           
  5078                           ;user.c: 841: else if(state == 22)
  5079  001312  0E16               	movlw	22
  5080  001314  1804               	xorwf	update_timer1_counter_10@state,w,c
  5081  001316  A4D8               	btfss	status,2,c
  5082  001318  D018               	goto	i2l4095
  5083                           
  5084                           ;user.c: 842: {
  5085                           ;user.c: 843: if(*counter<59)
  5086  00131A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5087  00131E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5088  001322  0E3B               	movlw	59
  5089  001324  60DF               	cpfslt	indf2,c
  5090  001326  D006               	goto	i2l4089
  5091                           
  5092                           ;user.c: 844: {
  5093                           ;user.c: 845: *counter +=1;
  5094  001328  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5095  00132C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5096  001330  2ADF               	incf	indf2,f,c
  5097                           
  5098                           ;user.c: 846: }
  5099  001332  0012               	return	
  5100  001334                     i2l4089:
  5101                           
  5102                           ;user.c: 847: else
  5103                           ;user.c: 848: {
  5104                           ;user.c: 849: *counter = 0;
  5105  001334  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5106  001338  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5107  00133C  0E00               	movlw	0
  5108  00133E  6EDF               	movwf	indf2,c
  5109                           
  5110                           ;user.c: 850: if(timer1_counter_min<59)
  5111  001340  0E3B               	movlw	59
  5112  001342  6033               	cpfslt	_timer1_counter_min,c
  5113  001344  0012               	return	
  5114                           
  5115                           ;user.c: 851: {
  5116                           ;user.c: 852: timer1_counter_min +=1;
  5117  001346  2A33               	incf	_timer1_counter_min,f,c
  5118                           
  5119                           ;user.c: 853: }
  5120                           ;user.c: 854: }
  5121                           ;user.c: 855: }
  5122  001348  0012               	return	
  5123  00134A                     i2l4095:
  5124                           
  5125                           ;user.c: 856: else if(state == 26 || state == 27)
  5126  00134A  0E1A               	movlw	26
  5127  00134C  1804               	xorwf	update_timer1_counter_10@state,w,c
  5128  00134E  B4D8               	btfsc	status,2,c
  5129  001350  D004               	goto	i2l4099
  5130  001352  0E1B               	movlw	27
  5131  001354  1804               	xorwf	update_timer1_counter_10@state,w,c
  5132  001356  A4D8               	btfss	status,2,c
  5133  001358  0012               	return	
  5134  00135A                     i2l4099:
  5135                           
  5136                           ;user.c: 857: {
  5137                           ;user.c: 858: if(*counter >0)
  5138  00135A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5139  00135E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5140  001362  50DF               	movf	indf2,w,c
  5141  001364  B4D8               	btfsc	status,2,c
  5142  001366  D006               	goto	i2l4103
  5143                           
  5144                           ;user.c: 859: {
  5145                           ;user.c: 860: *counter -=1;
  5146  001368  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5147  00136C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5148  001370  06DF               	decf	indf2,f,c
  5149                           
  5150                           ;user.c: 861: }
  5151  001372  0012               	return	
  5152  001374                     i2l4103:
  5153                           
  5154                           ;user.c: 862: else
  5155                           ;user.c: 863: {
  5156                           ;user.c: 864: if(timer1_counter_min >0)
  5157  001374  5033               	movf	_timer1_counter_min,w,c
  5158  001376  B4D8               	btfsc	status,2,c
  5159  001378  0012               	return	
  5160                           
  5161                           ;user.c: 865: {
  5162                           ;user.c: 866: timer1_counter_min -=1;
  5163  00137A  0633               	decf	_timer1_counter_min,f,c
  5164                           
  5165                           ;user.c: 867: *counter = 59;
  5166  00137C  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5167  001380  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5168  001384  0E3B               	movlw	59
  5169  001386  6EDF               	movwf	indf2,c
  5170  001388  0012               	return	
  5171  00138A                     __end_of_update_timer1_counter_10:
  5172                           	opt stack 0
  5173                           pclatu	equ	0xFFB
  5174                           pclath	equ	0xFFA
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           intcon	equ	0xFF2
  5182                           intcon2	equ	0xFF1
  5183                           postinc0	equ	0xFEE
  5184                           fsr0h	equ	0xFEA
  5185                           fsr0l	equ	0xFE9
  5186                           wreg	equ	0xFE8
  5187                           indf1	equ	0xFE7
  5188                           fsr1h	equ	0xFE2
  5189                           fsr1l	equ	0xFE1
  5190                           indf2	equ	0xFDF
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _update_point *****************
  5196 ;; Defined at:
  5197 ;;		line 660 in file "user.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  state           2    0[COMRAM] int 
  5200 ;;  counter         1    2[COMRAM] unsigned char 
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;		None
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  1    wreg      void 
  5205 ;; Registers used:
  5206 ;;		wreg, status,2, status,0, cstack
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5212 ;;      Params:         3       0       0       0       0       0       0       0       0
  5213 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5214 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5215 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5216 ;;Total ram usage:        3 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; Hardware stack levels required when called:    1
  5219 ;; This function calls:
  5220 ;;		_point_disable
  5221 ;;		_point_enable
  5222 ;; This function is called by:
  5223 ;;		_high_isr
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           	psect	text24
  5228  001E04                     __ptext24:
  5229                           	opt stack 0
  5230  001E04                     _update_point:
  5231                           	opt stack 24
  5232                           
  5233                           ;user.c: 662: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  5234                           
  5235                           ;incstack = 0
  5236  001E04  5003               	movf	update_point@counter,w,c
  5237  001E06  A4D8               	btfss	status,2,c
  5238  001E08  D011               	goto	i2l3983
  5239  001E0A  5001               	movf	update_point@state,w,c
  5240  001E0C  1002               	iorwf	update_point@state+1,w,c
  5241  001E0E  B4D8               	btfsc	status,2,c
  5242  001E10  D00A               	goto	i2l3981
  5243  001E12  0E05               	movlw	5
  5244  001E14  1801               	xorwf	update_point@state,w,c
  5245  001E16  1002               	iorwf	update_point@state+1,w,c
  5246  001E18  B4D8               	btfsc	status,2,c
  5247  001E1A  D005               	goto	i2l3981
  5248  001E1C  0E0C               	movlw	12
  5249  001E1E  1801               	xorwf	update_point@state,w,c
  5250  001E20  1002               	iorwf	update_point@state+1,w,c
  5251  001E22  A4D8               	btfss	status,2,c
  5252  001E24  D003               	goto	i2l3983
  5253  001E26                     i2l3981:
  5254                           
  5255                           ;user.c: 663: {
  5256                           ;user.c: 664: point_enable();
  5257  001E26  ECD3  F00F         	call	_point_enable	;wreg free
  5258                           
  5259                           ;user.c: 665: }
  5260  001E2A  0012               	return	
  5261  001E2C                     i2l3983:
  5262                           
  5263                           ;user.c: 666: else if(counter == 5 && state == 0 && state != 5)
  5264  001E2C  0E05               	movlw	5
  5265  001E2E  1803               	xorwf	update_point@counter,w,c
  5266  001E30  A4D8               	btfss	status,2,c
  5267  001E32  0012               	return	
  5268  001E34  5001               	movf	update_point@state,w,c
  5269  001E36  1002               	iorwf	update_point@state+1,w,c
  5270  001E38  A4D8               	btfss	status,2,c
  5271  001E3A  0012               	return	
  5272  001E3C  0E05               	movlw	5
  5273  001E3E  1801               	xorwf	update_point@state,w,c
  5274  001E40  1002               	iorwf	update_point@state+1,w,c
  5275  001E42  B4D8               	btfsc	status,2,c
  5276  001E44  0012               	return	
  5277                           
  5278                           ;user.c: 667: {
  5279                           ;user.c: 668: point_disable();
  5280  001E46  ECD5  F00F         	call	_point_disable	;wreg free
  5281  001E4A  0012               	return	
  5282  001E4C                     __end_of_update_point:
  5283                           	opt stack 0
  5284                           pclatu	equ	0xFFB
  5285                           pclath	equ	0xFFA
  5286                           tblptru	equ	0xFF8
  5287                           tblptrh	equ	0xFF7
  5288                           tblptrl	equ	0xFF6
  5289                           tablat	equ	0xFF5
  5290                           prodh	equ	0xFF4
  5291                           prodl	equ	0xFF3
  5292                           intcon	equ	0xFF2
  5293                           intcon2	equ	0xFF1
  5294                           postinc0	equ	0xFEE
  5295                           fsr0h	equ	0xFEA
  5296                           fsr0l	equ	0xFE9
  5297                           wreg	equ	0xFE8
  5298                           indf1	equ	0xFE7
  5299                           fsr1h	equ	0xFE2
  5300                           fsr1l	equ	0xFE1
  5301                           indf2	equ	0xFDF
  5302                           fsr2h	equ	0xFDA
  5303                           fsr2l	equ	0xFD9
  5304                           status	equ	0xFD8
  5305                           
  5306 ;; *************** function _point_enable *****************
  5307 ;; Defined at:
  5308 ;;		line 144 in file "user.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		None
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5322 ;;      Params:         0       0       0       0       0       0       0       0       0
  5323 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5325 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5326 ;;Total ram usage:        0 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_high_isr
  5332 ;;		_update_point
  5333 ;;		_point_toggle
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text25
  5338  001FA6                     __ptext25:
  5339                           	opt stack 0
  5340  001FA6                     _point_enable:
  5341                           	opt stack 24
  5342                           
  5343                           ;user.c: 146: RB1 = 1;
  5344                           
  5345                           ;incstack = 0
  5346  001FA6  8281               	bsf	3969,1,c	;volatile
  5347  001FA8  0012               	return		;funcret
  5348  001FAA                     __end_of_point_enable:
  5349                           	opt stack 0
  5350                           pclatu	equ	0xFFB
  5351                           pclath	equ	0xFFA
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           intcon	equ	0xFF2
  5359                           intcon2	equ	0xFF1
  5360                           postinc0	equ	0xFEE
  5361                           fsr0h	equ	0xFEA
  5362                           fsr0l	equ	0xFE9
  5363                           wreg	equ	0xFE8
  5364                           indf1	equ	0xFE7
  5365                           fsr1h	equ	0xFE2
  5366                           fsr1l	equ	0xFE1
  5367                           indf2	equ	0xFDF
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _point_disable *****************
  5373 ;; Defined at:
  5374 ;;		line 150 in file "user.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;		None
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;		None
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      void 
  5381 ;; Registers used:
  5382 ;;		None
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5388 ;;      Params:         0       0       0       0       0       0       0       0       0
  5389 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5390 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5391 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5392 ;;Total ram usage:        0 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_high_isr
  5398 ;;		_update_point
  5399 ;;		_point_toggle
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text26
  5404  001FAA                     __ptext26:
  5405                           	opt stack 0
  5406  001FAA                     _point_disable:
  5407                           	opt stack 24
  5408                           
  5409                           ;user.c: 152: RB1 = 0;
  5410                           
  5411                           ;incstack = 0
  5412  001FAA  9281               	bcf	3969,1,c	;volatile
  5413  001FAC  0012               	return		;funcret
  5414  001FAE                     __end_of_point_disable:
  5415                           	opt stack 0
  5416                           pclatu	equ	0xFFB
  5417                           pclath	equ	0xFFA
  5418                           tblptru	equ	0xFF8
  5419                           tblptrh	equ	0xFF7
  5420                           tblptrl	equ	0xFF6
  5421                           tablat	equ	0xFF5
  5422                           prodh	equ	0xFF4
  5423                           prodl	equ	0xFF3
  5424                           intcon	equ	0xFF2
  5425                           intcon2	equ	0xFF1
  5426                           postinc0	equ	0xFEE
  5427                           fsr0h	equ	0xFEA
  5428                           fsr0l	equ	0xFE9
  5429                           wreg	equ	0xFE8
  5430                           indf1	equ	0xFE7
  5431                           fsr1h	equ	0xFE2
  5432                           fsr1l	equ	0xFE1
  5433                           indf2	equ	0xFDF
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438 ;; *************** function _update_buzzer *****************
  5439 ;; Defined at:
  5440 ;;		line 673 in file "user.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;  state           2    0[COMRAM] int 
  5443 ;;  counter         1    2[COMRAM] unsigned char 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;		None
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  1    wreg      void 
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0, cstack
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5455 ;;      Params:         3       0       0       0       0       0       0       0       0
  5456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5458 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5459 ;;Total ram usage:        3 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; Hardware stack levels required when called:    1
  5462 ;; This function calls:
  5463 ;;		_buzzer_enable
  5464 ;;		i2_buzzer_disable
  5465 ;; This function is called by:
  5466 ;;		_high_isr
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text27
  5471  001E4C                     __ptext27:
  5472                           	opt stack 0
  5473  001E4C                     _update_buzzer:
  5474                           	opt stack 24
  5475                           
  5476                           ;user.c: 675: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  5477                           
  5478                           ;incstack = 0
  5479  001E4C  5003               	movf	update_buzzer@counter,w,c
  5480  001E4E  A4D8               	btfss	status,2,c
  5481  001E50  D011               	goto	i2l4001
  5482  001E52  5001               	movf	update_buzzer@state,w,c
  5483  001E54  1002               	iorwf	update_buzzer@state+1,w,c
  5484  001E56  B4D8               	btfsc	status,2,c
  5485  001E58  D00A               	goto	i2l3999
  5486  001E5A  0E05               	movlw	5
  5487  001E5C  1801               	xorwf	update_buzzer@state,w,c
  5488  001E5E  1002               	iorwf	update_buzzer@state+1,w,c
  5489  001E60  B4D8               	btfsc	status,2,c
  5490  001E62  D005               	goto	i2l3999
  5491  001E64  0E0C               	movlw	12
  5492  001E66  1801               	xorwf	update_buzzer@state,w,c
  5493  001E68  1002               	iorwf	update_buzzer@state+1,w,c
  5494  001E6A  A4D8               	btfss	status,2,c
  5495  001E6C  D003               	goto	i2l4001
  5496  001E6E                     i2l3999:
  5497                           
  5498                           ;user.c: 676: {
  5499                           ;user.c: 677: buzzer_enable();
  5500  001E6E  ECBF  F00F         	call	_buzzer_enable	;wreg free
  5501                           
  5502                           ;user.c: 678: }
  5503  001E72  0012               	return	
  5504  001E74                     i2l4001:
  5505                           
  5506                           ;user.c: 679: else if(counter == 5 && state == 0 && state != 5)
  5507  001E74  0E05               	movlw	5
  5508  001E76  1803               	xorwf	update_buzzer@counter,w,c
  5509  001E78  A4D8               	btfss	status,2,c
  5510  001E7A  0012               	return	
  5511  001E7C  5001               	movf	update_buzzer@state,w,c
  5512  001E7E  1002               	iorwf	update_buzzer@state+1,w,c
  5513  001E80  A4D8               	btfss	status,2,c
  5514  001E82  0012               	return	
  5515  001E84  0E05               	movlw	5
  5516  001E86  1801               	xorwf	update_buzzer@state,w,c
  5517  001E88  1002               	iorwf	update_buzzer@state+1,w,c
  5518  001E8A  B4D8               	btfsc	status,2,c
  5519  001E8C  0012               	return	
  5520                           
  5521                           ;user.c: 680: {
  5522                           ;user.c: 681: buzzer_disable();
  5523  001E8E  ECBB  F00F         	call	i2_buzzer_disable	;wreg free
  5524  001E92  0012               	return	
  5525  001E94                     __end_of_update_buzzer:
  5526                           	opt stack 0
  5527                           pclatu	equ	0xFFB
  5528                           pclath	equ	0xFFA
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodh	equ	0xFF4
  5534                           prodl	equ	0xFF3
  5535                           intcon	equ	0xFF2
  5536                           intcon2	equ	0xFF1
  5537                           postinc0	equ	0xFEE
  5538                           fsr0h	equ	0xFEA
  5539                           fsr0l	equ	0xFE9
  5540                           wreg	equ	0xFE8
  5541                           indf1	equ	0xFE7
  5542                           fsr1h	equ	0xFE2
  5543                           fsr1l	equ	0xFE1
  5544                           indf2	equ	0xFDF
  5545                           fsr2h	equ	0xFDA
  5546                           fsr2l	equ	0xFD9
  5547                           status	equ	0xFD8
  5548                           
  5549 ;; *************** function i2_buzzer_disable *****************
  5550 ;; Defined at:
  5551 ;;		line 170 in file "user.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;		None
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, status,2
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5565 ;;      Params:         0       0       0       0       0       0       0       0       0
  5566 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5568 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5569 ;;Total ram usage:        0 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_update_buzzer
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text28
  5579  001F76                     __ptext28:
  5580                           	opt stack 0
  5581  001F76                     i2_buzzer_disable:
  5582                           	opt stack 24
  5583                           
  5584                           ;user.c: 172: buzzer_status= 0;
  5585                           
  5586                           ;incstack = 0
  5587  001F76  0E00               	movlw	0
  5588  001F78  0100               	movlb	0	; () banked
  5589  001F7A  6FC6               	movwf	_buzzer_status& (0+255),b
  5590                           
  5591                           ; BSR set to: 0
  5592  001F7C  0012               	return		;funcret
  5593  001F7E                     __end_ofi2_buzzer_disable:
  5594                           	opt stack 0
  5595                           pclatu	equ	0xFFB
  5596                           pclath	equ	0xFFA
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           prodh	equ	0xFF4
  5602                           prodl	equ	0xFF3
  5603                           intcon	equ	0xFF2
  5604                           intcon2	equ	0xFF1
  5605                           postinc0	equ	0xFEE
  5606                           fsr0h	equ	0xFEA
  5607                           fsr0l	equ	0xFE9
  5608                           wreg	equ	0xFE8
  5609                           indf1	equ	0xFE7
  5610                           fsr1h	equ	0xFE2
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _buzzer_enable *****************
  5618 ;; Defined at:
  5619 ;;		line 165 in file "user.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5633 ;;      Params:         0       0       0       0       0       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5636 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5637 ;;Total ram usage:        0 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; This function calls:
  5640 ;;		Nothing
  5641 ;; This function is called by:
  5642 ;;		_update_buzzer
  5643 ;;		_buzzer_toggle
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text29
  5648  001F7E                     __ptext29:
  5649                           	opt stack 0
  5650  001F7E                     _buzzer_enable:
  5651                           	opt stack 24
  5652                           
  5653                           ;user.c: 167: buzzer_status= 1;
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;incstack = 0
  5657  001F7E  0E01               	movlw	1
  5658  001F80  0100               	movlb	0	; () banked
  5659  001F82  6FC6               	movwf	_buzzer_status& (0+255),b
  5660                           
  5661                           ; BSR set to: 0
  5662  001F84  0012               	return		;funcret
  5663  001F86                     __end_of_buzzer_enable:
  5664                           	opt stack 0
  5665                           pclatu	equ	0xFFB
  5666                           pclath	equ	0xFFA
  5667                           tblptru	equ	0xFF8
  5668                           tblptrh	equ	0xFF7
  5669                           tblptrl	equ	0xFF6
  5670                           tablat	equ	0xFF5
  5671                           prodh	equ	0xFF4
  5672                           prodl	equ	0xFF3
  5673                           intcon	equ	0xFF2
  5674                           intcon2	equ	0xFF1
  5675                           postinc0	equ	0xFEE
  5676                           fsr0h	equ	0xFEA
  5677                           fsr0l	equ	0xFE9
  5678                           wreg	equ	0xFE8
  5679                           indf1	equ	0xFE7
  5680                           fsr1h	equ	0xFE2
  5681                           fsr1l	equ	0xFE1
  5682                           indf2	equ	0xFDF
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _put_nums *****************
  5688 ;; Defined at:
  5689 ;;		line 97 in file "user.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  nums            2    7[COMRAM] PTR unsigned char 
  5692 ;;		 -> masked_digits(6), 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;  i               2    9[COMRAM] int 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      void 
  5697 ;; Registers used:
  5698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5704 ;;      Params:         2       0       0       0       0       0       0       0       0
  5705 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5707 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5708 ;;Total ram usage:        4 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    1
  5711 ;; This function calls:
  5712 ;;		_get_num
  5713 ;;		_put_num
  5714 ;; This function is called by:
  5715 ;;		_high_isr
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           	psect	text30
  5720  001ECE                     __ptext30:
  5721                           	opt stack 0
  5722  001ECE                     _put_nums:
  5723                           	opt stack 24
  5724                           
  5725                           ;user.c: 99: int i;
  5726                           ;user.c: 100: for(i=0;i<6;i++)
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;incstack = 0
  5730  001ECE  0E00               	movlw	0
  5731  001ED0  6E0B               	movwf	put_nums@i+1,c
  5732  001ED2  0E00               	movlw	0
  5733  001ED4  6E0A               	movwf	put_nums@i,c
  5734  001ED6                     i2l4011:
  5735  001ED6  BE0B               	btfsc	put_nums@i+1,7,c
  5736  001ED8  D006               	goto	i2l4015
  5737  001EDA  500B               	movf	put_nums@i+1,w,c
  5738  001EDC  E112               	bnz	i2l336
  5739  001EDE  0E06               	movlw	6
  5740  001EE0  5C0A               	subwf	put_nums@i,w,c
  5741  001EE2  B0D8               	btfsc	status,0,c
  5742  001EE4  0012               	return	
  5743  001EE6                     i2l4015:
  5744                           
  5745                           ;user.c: 101: {
  5746                           ;user.c: 102: put_num(get_num(nums[i]));
  5747  001EE6  500A               	movf	put_nums@i,w,c
  5748  001EE8  2408               	addwf	put_nums@nums,w,c
  5749  001EEA  6ED9               	movwf	fsr2l,c
  5750  001EEC  500B               	movf	put_nums@i+1,w,c
  5751  001EEE  2009               	addwfc	put_nums@nums+1,w,c
  5752  001EF0  6EDA               	movwf	fsr2h,c
  5753  001EF2  50DF               	movf	indf2,w,c
  5754  001EF4  ECF5  F00A         	call	_get_num
  5755  001EF8  EC2C  F00E         	call	_put_num
  5756  001EFC  4A0A               	infsnz	put_nums@i,f,c
  5757  001EFE  2A0B               	incf	put_nums@i+1,f,c
  5758  001F00  D7EA               	goto	i2l4011
  5759  001F02                     i2l336:
  5760  001F02  0012               	return		;funcret
  5761  001F04                     __end_of_put_nums:
  5762                           	opt stack 0
  5763                           pclatu	equ	0xFFB
  5764                           pclath	equ	0xFFA
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           intcon	equ	0xFF2
  5772                           intcon2	equ	0xFF1
  5773                           postinc0	equ	0xFEE
  5774                           fsr0h	equ	0xFEA
  5775                           fsr0l	equ	0xFE9
  5776                           wreg	equ	0xFE8
  5777                           indf1	equ	0xFE7
  5778                           fsr1h	equ	0xFE2
  5779                           fsr1l	equ	0xFE1
  5780                           indf2	equ	0xFDF
  5781                           fsr2h	equ	0xFDA
  5782                           fsr2l	equ	0xFD9
  5783                           status	equ	0xFD8
  5784                           
  5785 ;; *************** function _put_num *****************
  5786 ;; Defined at:
  5787 ;;		line 84 in file "user.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;  num             1    wreg     unsigned char 
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;  num             1    2[COMRAM] unsigned char 
  5792 ;;  i               2    5[COMRAM] int 
  5793 ;;  mask            1    3[COMRAM] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5803 ;;      Params:         0       0       0       0       0       0       0       0       0
  5804 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5805 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5806 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5807 ;;Total ram usage:        7 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_put_nums
  5813 ;;		_put_nums_individual
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           	psect	text31
  5818  001C58                     __ptext31:
  5819                           	opt stack 0
  5820  001C58                     _put_num:
  5821                           	opt stack 24
  5822                           
  5823                           ;incstack = 0
  5824                           ;put_num@num stored from wreg
  5825  001C58  6E03               	movwf	put_num@num,c
  5826                           
  5827                           ;user.c: 86: char mask = 0x01;
  5828  001C5A  0E01               	movlw	1
  5829  001C5C  6E04               	movwf	put_num@mask,c
  5830                           
  5831                           ;user.c: 87: int i;
  5832                           ;user.c: 88: for(i= 0; i<8; i++)
  5833  001C5E  0E00               	movlw	0
  5834  001C60  6E07               	movwf	put_num@i+1,c
  5835  001C62  0E00               	movlw	0
  5836  001C64  6E06               	movwf	put_num@i,c
  5837  001C66                     i2l3291:
  5838  001C66  BE07               	btfsc	put_num@i+1,7,c
  5839  001C68  D006               	goto	i2l3295
  5840  001C6A  5007               	movf	put_num@i+1,w,c
  5841  001C6C  E120               	bnz	i2l331
  5842  001C6E  0E08               	movlw	8
  5843  001C70  5C06               	subwf	put_num@i,w,c
  5844  001C72  B0D8               	btfsc	status,0,c
  5845  001C74  0012               	return	
  5846  001C76                     i2l3295:
  5847                           
  5848                           ;user.c: 89: {
  5849                           ;user.c: 90: RB3 = num>>i & mask;
  5850  001C76  0E00               	movlw	0
  5851  001C78  6E05               	movwf	_put_num$982,c
  5852  001C7A  C006  F001         	movff	put_num@i,??_put_num
  5853  001C7E  C003  F002         	movff	put_num@num,??_put_num+1
  5854  001C82  2A01               	incf	??_put_num,f,c
  5855  001C84  D002               	goto	i2u315_44
  5856  001C86                     i2u315_45:
  5857  001C86  90D8               	bcf	status,0,c
  5858  001C88  3202               	rrcf	??_put_num+1,f,c
  5859  001C8A                     i2u315_44:
  5860  001C8A  2E01               	decfsz	??_put_num,f,c
  5861  001C8C  D7FC               	goto	i2u315_45
  5862  001C8E  3002               	rrcf	??_put_num+1,w,c
  5863  001C90  B0D8               	btfsc	status,0,c
  5864  001C92  A004               	btfss	put_num@mask,0,c
  5865  001C94  D002               	goto	i2l3303
  5866  001C96  0E01               	movlw	1
  5867  001C98  6E05               	movwf	_put_num$982,c
  5868  001C9A                     i2l3303:
  5869  001C9A  B005               	btfsc	_put_num$982,0,c
  5870  001C9C  D002               	bra	i2u318_45
  5871  001C9E  9681               	bcf	3969,3,c	;volatile
  5872  001CA0  D001               	bra	i2u318_46
  5873  001CA2                     i2u318_45:
  5874  001CA2  8681               	bsf	3969,3,c	;volatile
  5875  001CA4                     i2u318_46:
  5876                           
  5877                           ;user.c: 91: RB4 = 0;
  5878  001CA4  9881               	bcf	3969,4,c	;volatile
  5879                           
  5880                           ;user.c: 92: RB4 = 1;
  5881  001CA6  8881               	bsf	3969,4,c	;volatile
  5882  001CA8  4A06               	infsnz	put_num@i,f,c
  5883  001CAA  2A07               	incf	put_num@i+1,f,c
  5884  001CAC  D7DC               	goto	i2l3291
  5885  001CAE                     i2l331:
  5886  001CAE  0012               	return		;funcret
  5887  001CB0                     __end_of_put_num:
  5888                           	opt stack 0
  5889                           pclatu	equ	0xFFB
  5890                           pclath	equ	0xFFA
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           intcon2	equ	0xFF1
  5899                           postinc0	equ	0xFEE
  5900                           fsr0h	equ	0xFEA
  5901                           fsr0l	equ	0xFE9
  5902                           wreg	equ	0xFE8
  5903                           indf1	equ	0xFE7
  5904                           fsr1h	equ	0xFE2
  5905                           fsr1l	equ	0xFE1
  5906                           indf2	equ	0xFDF
  5907                           fsr2h	equ	0xFDA
  5908                           fsr2l	equ	0xFD9
  5909                           status	equ	0xFD8
  5910                           
  5911 ;; *************** function _get_num *****************
  5912 ;; Defined at:
  5913 ;;		line 117 in file "user.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  num             1    wreg     unsigned char 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;  num             1    0[COMRAM] unsigned char 
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  1    wreg      unsigned char 
  5920 ;; Registers used:
  5921 ;;		wreg, status,2, status,0
  5922 ;; Tracked objects:
  5923 ;;		On entry : 0/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5927 ;;      Params:         0       0       0       0       0       0       0       0       0
  5928 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5929 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5930 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5931 ;;Total ram usage:        1 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; This function calls:
  5934 ;;		Nothing
  5935 ;; This function is called by:
  5936 ;;		_put_nums
  5937 ;;		_put_nums_individual
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           	psect	text32
  5942  0015EA                     __ptext32:
  5943                           	opt stack 0
  5944  0015EA                     _get_num:
  5945                           	opt stack 24
  5946                           
  5947                           ;incstack = 0
  5948                           ;get_num@num stored from wreg
  5949  0015EA  6E01               	movwf	get_num@num,c
  5950                           
  5951                           ;user.c: 119: switch(num)
  5952  0015EC  D026               	goto	i2l3393
  5953  0015EE                     i2l3315:
  5954  0015EE  0E30               	movlw	48
  5955  0015F0  0012               	return	
  5956  0015F2                     i2l3319:
  5957  0015F2  0E6D               	movlw	109
  5958  0015F4  0012               	return	
  5959  0015F6                     i2l3323:
  5960  0015F6  0E79               	movlw	121
  5961  0015F8  0012               	return	
  5962  0015FA                     i2l3327:
  5963  0015FA  0E33               	movlw	51
  5964  0015FC  0012               	return	
  5965  0015FE                     i2l3331:
  5966  0015FE  0E5B               	movlw	91
  5967  001600  0012               	return	
  5968  001602                     i2l3335:
  5969  001602  0E5F               	movlw	95
  5970  001604  0012               	return	
  5971  001606                     i2l3339:
  5972  001606  0E70               	movlw	112
  5973  001608  0012               	return	
  5974  00160A                     i2l3343:
  5975  00160A  0E7F               	movlw	127
  5976  00160C  0012               	return	
  5977  00160E                     i2l3347:
  5978  00160E  0E73               	movlw	115
  5979  001610  0012               	return	
  5980  001612                     i2l3351:
  5981  001612  0E7E               	movlw	126
  5982  001614  0012               	return	
  5983  001616                     i2l3355:
  5984  001616  0E3E               	movlw	62
  5985  001618  0012               	return	
  5986  00161A                     i2l3359:
  5987  00161A  0E67               	movlw	103
  5988  00161C  0012               	return	
  5989  00161E                     i2l3363:
  5990  00161E  0E37               	movlw	55
  5991  001620  0012               	return	
  5992  001622                     i2l3367:
  5993  001622  0E3D               	movlw	61
  5994  001624  0012               	return	
  5995  001626                     i2l3371:
  5996  001626  0E15               	movlw	21
  5997  001628  0012               	return	
  5998  00162A                     i2l3375:
  5999  00162A  0E00               	movlw	0
  6000  00162C  0012               	return	
  6001  00162E                     i2l3379:
  6002  00162E  0E47               	movlw	71
  6003  001630  0012               	return	
  6004  001632                     i2l3383:
  6005  001632  0E4E               	movlw	78
  6006  001634  0012               	return	
  6007  001636                     i2l3387:
  6008  001636  0E7F               	movlw	127
  6009                           
  6010                           ;user.c: 140: }
  6011  001638  0012               	return	
  6012  00163A                     i2l3393:
  6013  00163A  5001               	movf	get_num@num,w,c
  6014                           
  6015                           ; Switch size 1, requested type "space"
  6016                           ; Number of cases is 18, Range of values is 0 to 86
  6017                           ; switch strategies available:
  6018                           ; Name         Instructions Cycles
  6019                           ; simple_byte           55    28 (average)
  6020                           ;	Chosen strategy is simple_byte
  6021  00163C  0A00               	xorlw	0	; case 0
  6022  00163E  B4D8               	btfsc	status,2,c
  6023  001640  D7E8               	goto	i2l3351
  6024  001642  0A01               	xorlw	1	; case 1
  6025  001644  B4D8               	btfsc	status,2,c
  6026  001646  D7D3               	goto	i2l3315
  6027  001648  0A03               	xorlw	3	; case 2
  6028  00164A  B4D8               	btfsc	status,2,c
  6029  00164C  D7D2               	goto	i2l3319
  6030  00164E  0A01               	xorlw	1	; case 3
  6031  001650  B4D8               	btfsc	status,2,c
  6032  001652  D7D1               	goto	i2l3323
  6033  001654  0A07               	xorlw	7	; case 4
  6034  001656  B4D8               	btfsc	status,2,c
  6035  001658  D7D0               	goto	i2l3327
  6036  00165A  0A01               	xorlw	1	; case 5
  6037  00165C  B4D8               	btfsc	status,2,c
  6038  00165E  D7CF               	goto	i2l3331
  6039  001660  0A03               	xorlw	3	; case 6
  6040  001662  B4D8               	btfsc	status,2,c
  6041  001664  D7CE               	goto	i2l3335
  6042  001666  0A01               	xorlw	1	; case 7
  6043  001668  B4D8               	btfsc	status,2,c
  6044  00166A  D7CD               	goto	i2l3339
  6045  00166C  0A0F               	xorlw	15	; case 8
  6046  00166E  B4D8               	btfsc	status,2,c
  6047  001670  D7CC               	goto	i2l3343
  6048  001672  0A01               	xorlw	1	; case 9
  6049  001674  B4D8               	btfsc	status,2,c
  6050  001676  D7CB               	goto	i2l3347
  6051  001678  0A4A               	xorlw	74	; case 67
  6052  00167A  B4D8               	btfsc	status,2,c
  6053  00167C  D7DA               	goto	i2l3383
  6054  00167E  0A07               	xorlw	7	; case 68
  6055  001680  B4D8               	btfsc	status,2,c
  6056  001682  D7CF               	goto	i2l3367
  6057  001684  0A02               	xorlw	2	; case 70
  6058  001686  B4D8               	btfsc	status,2,c
  6059  001688  D7D2               	goto	i2l3379
  6060  00168A  0A0E               	xorlw	14	; case 72
  6061  00168C  B4D8               	btfsc	status,2,c
  6062  00168E  D7C7               	goto	i2l3363
  6063  001690  0A06               	xorlw	6	; case 78
  6064  001692  B4D8               	btfsc	status,2,c
  6065  001694  D7C8               	goto	i2l3371
  6066  001696  0A1E               	xorlw	30	; case 80
  6067  001698  B4D8               	btfsc	status,2,c
  6068  00169A  D7BF               	goto	i2l3359
  6069  00169C  0A05               	xorlw	5	; case 85
  6070  00169E  B4D8               	btfsc	status,2,c
  6071  0016A0  D7BA               	goto	i2l3355
  6072  0016A2  0A03               	xorlw	3	; case 86
  6073  0016A4  B4D8               	btfsc	status,2,c
  6074  0016A6  D7C1               	goto	i2l3375
  6075  0016A8  D7C6               	goto	i2l3387
  6076  0016AA                     __end_of_get_num:
  6077                           	opt stack 0
  6078                           pclatu	equ	0xFFB
  6079                           pclath	equ	0xFFA
  6080                           tblptru	equ	0xFF8
  6081                           tblptrh	equ	0xFF7
  6082                           tblptrl	equ	0xFF6
  6083                           tablat	equ	0xFF5
  6084                           prodh	equ	0xFF4
  6085                           prodl	equ	0xFF3
  6086                           intcon	equ	0xFF2
  6087                           intcon2	equ	0xFF1
  6088                           postinc0	equ	0xFEE
  6089                           fsr0h	equ	0xFEA
  6090                           fsr0l	equ	0xFE9
  6091                           wreg	equ	0xFE8
  6092                           indf1	equ	0xFE7
  6093                           fsr1h	equ	0xFE2
  6094                           fsr1l	equ	0xFE1
  6095                           indf2	equ	0xFDF
  6096                           fsr2h	equ	0xFDA
  6097                           fsr2l	equ	0xFD9
  6098                           status	equ	0xFD8
  6099                           
  6100 ;; *************** function _ir_get_human_code *****************
  6101 ;; Defined at:
  6102 ;;		line 596 in file "user.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  code            2    0[COMRAM] int 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  human_read_c    1    4[COMRAM] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      unsigned char 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6116 ;;      Params:         2       0       0       0       0       0       0       0       0
  6117 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6118 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6119 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6120 ;;Total ram usage:        5 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; This function calls:
  6123 ;;		Nothing
  6124 ;; This function is called by:
  6125 ;;		_high_isr
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text33
  6130  0014BC                     __ptext33:
  6131                           	opt stack 0
  6132  0014BC                     _ir_get_human_code:
  6133                           	opt stack 25
  6134                           
  6135                           ;user.c: 598: char human_read_code;
  6136                           ;user.c: 599: switch(code)
  6137                           
  6138                           ;incstack = 0
  6139  0014BC  D035               	goto	i2l3593
  6140  0014BE                     i2l3553:
  6141                           
  6142                           ;user.c: 602: human_read_code = 10;
  6143  0014BE  0E0A               	movlw	10
  6144  0014C0  6E05               	movwf	ir_get_human_code@human_read_code,c
  6145                           
  6146                           ;user.c: 603: break;
  6147  0014C2  0012               	return	
  6148  0014C4                     i2l3555:
  6149                           
  6150                           ;user.c: 605: human_read_code = 11;
  6151  0014C4  0E0B               	movlw	11
  6152  0014C6  6E05               	movwf	ir_get_human_code@human_read_code,c
  6153                           
  6154                           ;user.c: 606: break;
  6155  0014C8  0012               	return	
  6156  0014CA                     i2l3557:
  6157                           
  6158                           ;user.c: 608: human_read_code = 12;
  6159  0014CA  0E0C               	movlw	12
  6160  0014CC  6E05               	movwf	ir_get_human_code@human_read_code,c
  6161                           
  6162                           ;user.c: 609: break;
  6163  0014CE  0012               	return	
  6164  0014D0                     i2l3559:
  6165                           
  6166                           ;user.c: 611: human_read_code = 13;
  6167  0014D0  0E0D               	movlw	13
  6168  0014D2  6E05               	movwf	ir_get_human_code@human_read_code,c
  6169                           
  6170                           ;user.c: 612: break;
  6171  0014D4  0012               	return	
  6172  0014D6                     i2l3561:
  6173                           
  6174                           ;user.c: 614: human_read_code = 14;
  6175  0014D6  0E0E               	movlw	14
  6176  0014D8  6E05               	movwf	ir_get_human_code@human_read_code,c
  6177                           
  6178                           ;user.c: 615: break;
  6179  0014DA  0012               	return	
  6180  0014DC                     i2l3563:
  6181                           
  6182                           ;user.c: 617: human_read_code = 1;
  6183  0014DC  0E01               	movlw	1
  6184  0014DE  6E05               	movwf	ir_get_human_code@human_read_code,c
  6185                           
  6186                           ;user.c: 618: break;
  6187  0014E0  0012               	return	
  6188  0014E2                     i2l3565:
  6189                           
  6190                           ;user.c: 620: human_read_code = 2;
  6191  0014E2  0E02               	movlw	2
  6192  0014E4  6E05               	movwf	ir_get_human_code@human_read_code,c
  6193                           
  6194                           ;user.c: 621: break;
  6195  0014E6  0012               	return	
  6196  0014E8                     i2l3567:
  6197                           
  6198                           ;user.c: 623: human_read_code = 3;
  6199  0014E8  0E03               	movlw	3
  6200  0014EA  6E05               	movwf	ir_get_human_code@human_read_code,c
  6201                           
  6202                           ;user.c: 624: break;
  6203  0014EC  0012               	return	
  6204  0014EE                     i2l3569:
  6205                           
  6206                           ;user.c: 626: human_read_code = 4;
  6207  0014EE  0E04               	movlw	4
  6208  0014F0  6E05               	movwf	ir_get_human_code@human_read_code,c
  6209                           
  6210                           ;user.c: 627: break;
  6211  0014F2  0012               	return	
  6212  0014F4                     i2l3571:
  6213                           
  6214                           ;user.c: 629: human_read_code = 5;
  6215  0014F4  0E05               	movlw	5
  6216  0014F6  6E05               	movwf	ir_get_human_code@human_read_code,c
  6217                           
  6218                           ;user.c: 630: break;
  6219  0014F8  0012               	return	
  6220  0014FA                     i2l3573:
  6221                           
  6222                           ;user.c: 632: human_read_code = 6;
  6223  0014FA  0E06               	movlw	6
  6224  0014FC  6E05               	movwf	ir_get_human_code@human_read_code,c
  6225                           
  6226                           ;user.c: 633: break;
  6227  0014FE  0012               	return	
  6228  001500                     i2l3575:
  6229                           
  6230                           ;user.c: 635: human_read_code = 7;
  6231  001500  0E07               	movlw	7
  6232  001502  6E05               	movwf	ir_get_human_code@human_read_code,c
  6233                           
  6234                           ;user.c: 636: break;
  6235  001504  0012               	return	
  6236  001506                     i2l3577:
  6237                           
  6238                           ;user.c: 638: human_read_code = 8;
  6239  001506  0E08               	movlw	8
  6240  001508  6E05               	movwf	ir_get_human_code@human_read_code,c
  6241                           
  6242                           ;user.c: 639: break;
  6243  00150A  0012               	return	
  6244  00150C                     i2l3579:
  6245                           
  6246                           ;user.c: 641: human_read_code = 9;
  6247  00150C  0E09               	movlw	9
  6248  00150E  6E05               	movwf	ir_get_human_code@human_read_code,c
  6249                           
  6250                           ;user.c: 642: break;
  6251  001510  0012               	return	
  6252  001512                     i2l3581:
  6253                           
  6254                           ;user.c: 644: human_read_code = 0;
  6255  001512  0E00               	movlw	0
  6256  001514  6E05               	movwf	ir_get_human_code@human_read_code,c
  6257                           
  6258                           ;user.c: 645: break;
  6259  001516  0012               	return	
  6260  001518                     i2l3583:
  6261                           
  6262                           ;user.c: 647: human_read_code = 15;
  6263  001518  0E0F               	movlw	15
  6264  00151A  6E05               	movwf	ir_get_human_code@human_read_code,c
  6265                           
  6266                           ;user.c: 648: break;
  6267  00151C  0012               	return	
  6268  00151E                     i2l3585:
  6269                           
  6270                           ;user.c: 650: human_read_code = 16;
  6271  00151E  0E10               	movlw	16
  6272  001520  6E05               	movwf	ir_get_human_code@human_read_code,c
  6273                           
  6274                           ;user.c: 651: break;
  6275  001522  0012               	return	
  6276  001524                     i2l3587:
  6277                           
  6278                           ;user.c: 653: return -1;
  6279  001524  0EFF               	movlw	255
  6280                           
  6281                           ;user.c: 654: }
  6282  001526  0012               	return	
  6283  001528                     i2l3593:
  6284  001528  C001  F003         	movff	ir_get_human_code@code,??_ir_get_human_code
  6285  00152C  C002  F004         	movff	ir_get_human_code@code+1,??_ir_get_human_code+1
  6286                           
  6287                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 8 sub-sw
      +                          itches
  6288                           ; Switch size 1, requested type "space"
  6289                           ; Number of cases is 8, Range of values is 170 to 238
  6290                           ; switch strategies available:
  6291                           ; Name         Instructions Cycles
  6292                           ; simple_byte           25    13 (average)
  6293                           ;	Chosen strategy is simple_byte
  6294  001530  5004               	movf	??_ir_get_human_code+1,w,c
  6295  001532  0AAA               	xorlw	170	; case 170
  6296  001534  B4D8               	btfsc	status,2,c
  6297  001536  D016               	goto	i2l5733
  6298  001538  0A01               	xorlw	1	; case 171
  6299  00153A  B4D8               	btfsc	status,2,c
  6300  00153C  D01E               	goto	i2l5735
  6301  00153E  0A05               	xorlw	5	; case 174
  6302  001540  B4D8               	btfsc	status,2,c
  6303  001542  D023               	goto	i2l5737
  6304  001544  0A14               	xorlw	20	; case 186
  6305  001546  B4D8               	btfsc	status,2,c
  6306  001548  D028               	goto	i2l5739
  6307  00154A  0A01               	xorlw	1	; case 187
  6308  00154C  B4D8               	btfsc	status,2,c
  6309  00154E  D02A               	goto	i2l5741
  6310  001550  0A51               	xorlw	81	; case 234
  6311  001552  B4D8               	btfsc	status,2,c
  6312  001554  D032               	goto	i2l5743
  6313  001556  0A01               	xorlw	1	; case 235
  6314  001558  B4D8               	btfsc	status,2,c
  6315  00155A  D034               	goto	i2l5745
  6316  00155C  0A05               	xorlw	5	; case 238
  6317  00155E  B4D8               	btfsc	status,2,c
  6318  001560  D039               	goto	i2l5747
  6319  001562  D7E0               	goto	i2l3587
  6320  001564                     i2l5733:
  6321                           
  6322                           ; Switch size 1, requested type "space"
  6323                           ; Number of cases is 3, Range of values is 186 to 238
  6324                           ; switch strategies available:
  6325                           ; Name         Instructions Cycles
  6326                           ; simple_byte           10     6 (average)
  6327                           ;	Chosen strategy is simple_byte
  6328  001564  5003               	movf	??_ir_get_human_code,w,c
  6329  001566  0ABA               	xorlw	186	; case 186
  6330  001568  B4D8               	btfsc	status,2,c
  6331  00156A  D7D6               	goto	i2l3583
  6332  00156C  0A50               	xorlw	80	; case 234
  6333  00156E  B4D8               	btfsc	status,2,c
  6334  001570  D7AF               	goto	i2l3559
  6335  001572  0A04               	xorlw	4	; case 238
  6336  001574  B4D8               	btfsc	status,2,c
  6337  001576  D7AF               	goto	i2l3561
  6338  001578  D7D5               	goto	i2l3587
  6339  00157A                     i2l5735:
  6340                           
  6341                           ; Switch size 1, requested type "space"
  6342                           ; Number of cases is 2, Range of values is 170 to 186
  6343                           ; switch strategies available:
  6344                           ; Name         Instructions Cycles
  6345                           ; simple_byte            7     4 (average)
  6346                           ;	Chosen strategy is simple_byte
  6347  00157A  5003               	movf	??_ir_get_human_code,w,c
  6348  00157C  0AAA               	xorlw	170	; case 170
  6349  00157E  B4D8               	btfsc	status,2,c
  6350  001580  D7BF               	goto	i2l3575
  6351  001582  0A10               	xorlw	16	; case 186
  6352  001584  B4D8               	btfsc	status,2,c
  6353  001586  D79B               	goto	i2l3553
  6354  001588  D7CD               	goto	i2l3587
  6355  00158A                     i2l5737:
  6356                           
  6357                           ; Switch size 1, requested type "space"
  6358                           ; Number of cases is 2, Range of values is 186 to 234
  6359                           ; switch strategies available:
  6360                           ; Name         Instructions Cycles
  6361                           ; simple_byte            7     4 (average)
  6362                           ;	Chosen strategy is simple_byte
  6363  00158A  5003               	movf	??_ir_get_human_code,w,c
  6364  00158C  0ABA               	xorlw	186	; case 186
  6365  00158E  B4D8               	btfsc	status,2,c
  6366  001590  D7C6               	goto	i2l3585
  6367  001592  0A50               	xorlw	80	; case 234
  6368  001594  B4D8               	btfsc	status,2,c
  6369  001596  D7AB               	goto	i2l3569
  6370  001598  D7C5               	goto	i2l3587
  6371  00159A                     i2l5739:
  6372                           
  6373                           ; Switch size 1, requested type "space"
  6374                           ; Number of cases is 1, Range of values is 186 to 186
  6375                           ; switch strategies available:
  6376                           ; Name         Instructions Cycles
  6377                           ; simple_byte            4     3 (average)
  6378                           ;	Chosen strategy is simple_byte
  6379  00159A  5003               	movf	??_ir_get_human_code,w,c
  6380  00159C  0ABA               	xorlw	186	; case 186
  6381  00159E  B4D8               	btfsc	status,2,c
  6382  0015A0  D7B8               	goto	i2l3581
  6383  0015A2  D7C0               	goto	i2l3587
  6384  0015A4                     i2l5741:
  6385                           
  6386                           ; Switch size 1, requested type "space"
  6387                           ; Number of cases is 3, Range of values is 170 to 186
  6388                           ; switch strategies available:
  6389                           ; Name         Instructions Cycles
  6390                           ; simple_byte           10     6 (average)
  6391                           ;	Chosen strategy is simple_byte
  6392  0015A4  5003               	movf	??_ir_get_human_code,w,c
  6393  0015A6  0AAA               	xorlw	170	; case 170
  6394  0015A8  B4D8               	btfsc	status,2,c
  6395  0015AA  D7A4               	goto	i2l3571
  6396  0015AC  0A04               	xorlw	4	; case 174
  6397  0015AE  B4D8               	btfsc	status,2,c
  6398  0015B0  D79B               	goto	i2l3567
  6399  0015B2  0A14               	xorlw	20	; case 186
  6400  0015B4  B4D8               	btfsc	status,2,c
  6401  0015B6  D7A1               	goto	i2l3573
  6402  0015B8  D7B5               	goto	i2l3587
  6403  0015BA                     i2l5743:
  6404                           
  6405                           ; Switch size 1, requested type "space"
  6406                           ; Number of cases is 1, Range of values is 170 to 170
  6407                           ; switch strategies available:
  6408                           ; Name         Instructions Cycles
  6409                           ; simple_byte            4     3 (average)
  6410                           ;	Chosen strategy is simple_byte
  6411  0015BA  5003               	movf	??_ir_get_human_code,w,c
  6412  0015BC  0AAA               	xorlw	170	; case 170
  6413  0015BE  B4D8               	btfsc	status,2,c
  6414  0015C0  D781               	goto	i2l3555
  6415  0015C2  D7B0               	goto	i2l3587
  6416  0015C4                     i2l5745:
  6417                           
  6418                           ; Switch size 1, requested type "space"
  6419                           ; Number of cases is 2, Range of values is 174 to 186
  6420                           ; switch strategies available:
  6421                           ; Name         Instructions Cycles
  6422                           ; simple_byte            7     4 (average)
  6423                           ;	Chosen strategy is simple_byte
  6424  0015C4  5003               	movf	??_ir_get_human_code,w,c
  6425  0015C6  0AAE               	xorlw	174	; case 174
  6426  0015C8  B4D8               	btfsc	status,2,c
  6427  0015CA  D77F               	goto	i2l3557
  6428  0015CC  0A14               	xorlw	20	; case 186
  6429  0015CE  B4D8               	btfsc	status,2,c
  6430  0015D0  D785               	goto	i2l3563
  6431  0015D2  D7A8               	goto	i2l3587
  6432  0015D4                     i2l5747:
  6433                           
  6434                           ; Switch size 1, requested type "space"
  6435                           ; Number of cases is 3, Range of values is 174 to 234
  6436                           ; switch strategies available:
  6437                           ; Name         Instructions Cycles
  6438                           ; simple_byte           10     6 (average)
  6439                           ;	Chosen strategy is simple_byte
  6440  0015D4  5003               	movf	??_ir_get_human_code,w,c
  6441  0015D6  0AAE               	xorlw	174	; case 174
  6442  0015D8  B4D8               	btfsc	status,2,c
  6443  0015DA  D783               	goto	i2l3565
  6444  0015DC  0A14               	xorlw	20	; case 186
  6445  0015DE  B4D8               	btfsc	status,2,c
  6446  0015E0  D795               	goto	i2l3579
  6447  0015E2  0A50               	xorlw	80	; case 234
  6448  0015E4  B4D8               	btfsc	status,2,c
  6449  0015E6  D78F               	goto	i2l3577
  6450  0015E8  D79D               	goto	i2l3587
  6451  0015EA                     __end_of_ir_get_human_code:
  6452                           	opt stack 0
  6453                           pclatu	equ	0xFFB
  6454                           pclath	equ	0xFFA
  6455                           tblptru	equ	0xFF8
  6456                           tblptrh	equ	0xFF7
  6457                           tblptrl	equ	0xFF6
  6458                           tablat	equ	0xFF5
  6459                           prodh	equ	0xFF4
  6460                           prodl	equ	0xFF3
  6461                           intcon	equ	0xFF2
  6462                           intcon2	equ	0xFF1
  6463                           postinc0	equ	0xFEE
  6464                           fsr0h	equ	0xFEA
  6465                           fsr0l	equ	0xFE9
  6466                           wreg	equ	0xFE8
  6467                           indf1	equ	0xFE7
  6468                           fsr1h	equ	0xFE2
  6469                           fsr1l	equ	0xFE1
  6470                           indf2	equ	0xFDF
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function _get_next_state *****************
  6476 ;; Defined at:
  6477 ;;		line 387 in file "user.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  state           2   13[COMRAM] int 
  6480 ;;  code            2   15[COMRAM] int 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  hour            1   21[COMRAM] unsigned char 
  6483 ;;  minutes         1   20[COMRAM] unsigned char 
  6484 ;;  seconds         1   19[COMRAM] unsigned char 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  2   13[COMRAM] int 
  6487 ;; Registers used:
  6488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6494 ;;      Params:         4       0       0       0       0       0       0       0       0
  6495 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6496 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6497 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6498 ;;Total ram usage:        9 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    4
  6501 ;; This function calls:
  6502 ;;		_set_time
  6503 ;;		i2___awdiv
  6504 ;;		i2___awmod
  6505 ;;		i2_timer1_enable
  6506 ;; This function is called by:
  6507 ;;		_high_isr
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text34
  6512  000012                     __ptext34:
  6513                           	opt stack 0
  6514  000012                     _get_next_state:
  6515                           	opt stack 21
  6516                           
  6517                           ;user.c: 389: if(state == 0 && code == 0xAABA)
  6518                           
  6519                           ;incstack = 0
  6520  000012  500E               	movf	get_next_state@state,w,c
  6521  000014  100F               	iorwf	get_next_state@state+1,w,c
  6522  000016  A4D8               	btfss	status,2,c
  6523  000018  D00B               	goto	i2l3633
  6524  00001A  0EBA               	movlw	186
  6525  00001C  1810               	xorwf	get_next_state@code,w,c
  6526  00001E  E108               	bnz	i2l3633
  6527  000020  0EAA               	movlw	170
  6528  000022  1811               	xorwf	get_next_state@code+1,w,c
  6529  000024  A4D8               	btfss	status,2,c
  6530  000026  D004               	goto	i2l3633
  6531  000028                     i2l3631:
  6532                           
  6533                           ;user.c: 390: next = 1;
  6534  000028  0E00               	movlw	0
  6535  00002A  6E2D               	movwf	_next+1,c
  6536  00002C  0E01               	movlw	1
  6537  00002E  D2AB               	goto	L47
  6538  000030                     i2l3633:
  6539                           
  6540                           ;user.c: 391: else if((state == 0 || state == 6 || state == 21 || state == 24) && code =
      +                          = 0xABBa)
  6541  000030  500E               	movf	get_next_state@state,w,c
  6542  000032  100F               	iorwf	get_next_state@state+1,w,c
  6543  000034  B4D8               	btfsc	status,2,c
  6544  000036  D00F               	goto	i2l3641
  6545  000038  0E06               	movlw	6
  6546  00003A  180E               	xorwf	get_next_state@state,w,c
  6547  00003C  100F               	iorwf	get_next_state@state+1,w,c
  6548  00003E  B4D8               	btfsc	status,2,c
  6549  000040  D00A               	goto	i2l3641
  6550  000042  0E15               	movlw	21
  6551  000044  180E               	xorwf	get_next_state@state,w,c
  6552  000046  100F               	iorwf	get_next_state@state+1,w,c
  6553  000048  B4D8               	btfsc	status,2,c
  6554  00004A  D005               	goto	i2l3641
  6555  00004C  0E18               	movlw	24
  6556  00004E  180E               	xorwf	get_next_state@state,w,c
  6557  000050  100F               	iorwf	get_next_state@state+1,w,c
  6558  000052  A4D8               	btfss	status,2,c
  6559  000054  D00B               	goto	i2l3645
  6560  000056                     i2l3641:
  6561  000056  0EBA               	movlw	186
  6562  000058  1810               	xorwf	get_next_state@code,w,c
  6563  00005A  E108               	bnz	i2l3645
  6564  00005C  0EAB               	movlw	171
  6565  00005E  1811               	xorwf	get_next_state@code+1,w,c
  6566  000060  A4D8               	btfss	status,2,c
  6567  000062  D004               	goto	i2l3645
  6568  000064                     i2l3643:
  6569                           
  6570                           ;user.c: 392: next = 5;
  6571  000064  0E00               	movlw	0
  6572  000066  6E2D               	movwf	_next+1,c
  6573  000068  0E05               	movlw	5
  6574  00006A  D28D               	goto	L47
  6575  00006C                     i2l3645:
  6576                           
  6577                           ;user.c: 393: else if((state == 0 || state == 5 || state == 21 || state == 24) && code =
      +                          = 0xEBAE)
  6578  00006C  500E               	movf	get_next_state@state,w,c
  6579  00006E  100F               	iorwf	get_next_state@state+1,w,c
  6580  000070  B4D8               	btfsc	status,2,c
  6581  000072  D00F               	goto	i2l3653
  6582  000074  0E05               	movlw	5
  6583  000076  180E               	xorwf	get_next_state@state,w,c
  6584  000078  100F               	iorwf	get_next_state@state+1,w,c
  6585  00007A  B4D8               	btfsc	status,2,c
  6586  00007C  D00A               	goto	i2l3653
  6587  00007E  0E15               	movlw	21
  6588  000080  180E               	xorwf	get_next_state@state,w,c
  6589  000082  100F               	iorwf	get_next_state@state+1,w,c
  6590  000084  B4D8               	btfsc	status,2,c
  6591  000086  D005               	goto	i2l3653
  6592  000088  0E18               	movlw	24
  6593  00008A  180E               	xorwf	get_next_state@state,w,c
  6594  00008C  100F               	iorwf	get_next_state@state+1,w,c
  6595  00008E  A4D8               	btfss	status,2,c
  6596  000090  D00B               	goto	i2l3657
  6597  000092                     i2l3653:
  6598  000092  0EAE               	movlw	174
  6599  000094  1810               	xorwf	get_next_state@code,w,c
  6600  000096  E108               	bnz	i2l3657
  6601  000098  0EEB               	movlw	235
  6602  00009A  1811               	xorwf	get_next_state@code+1,w,c
  6603  00009C  A4D8               	btfss	status,2,c
  6604  00009E  D004               	goto	i2l3657
  6605  0000A0                     i2l3655:
  6606                           
  6607                           ;user.c: 394: next = 6;
  6608  0000A0  0E00               	movlw	0
  6609  0000A2  6E2D               	movwf	_next+1,c
  6610  0000A4  0E06               	movlw	6
  6611  0000A6  D26F               	goto	L47
  6612  0000A8                     i2l3657:
  6613                           
  6614                           ;user.c: 395: else if((state == 0 || state == 5 || state == 6 || state == 21) && code ==
      +                           0xAAEE)
  6615  0000A8  500E               	movf	get_next_state@state,w,c
  6616  0000AA  100F               	iorwf	get_next_state@state+1,w,c
  6617  0000AC  B4D8               	btfsc	status,2,c
  6618  0000AE  D00F               	goto	i2l3665
  6619  0000B0  0E05               	movlw	5
  6620  0000B2  180E               	xorwf	get_next_state@state,w,c
  6621  0000B4  100F               	iorwf	get_next_state@state+1,w,c
  6622  0000B6  B4D8               	btfsc	status,2,c
  6623  0000B8  D00A               	goto	i2l3665
  6624  0000BA  0E06               	movlw	6
  6625  0000BC  180E               	xorwf	get_next_state@state,w,c
  6626  0000BE  100F               	iorwf	get_next_state@state+1,w,c
  6627  0000C0  B4D8               	btfsc	status,2,c
  6628  0000C2  D005               	goto	i2l3665
  6629  0000C4  0E15               	movlw	21
  6630  0000C6  180E               	xorwf	get_next_state@state,w,c
  6631  0000C8  100F               	iorwf	get_next_state@state+1,w,c
  6632  0000CA  A4D8               	btfss	status,2,c
  6633  0000CC  D00B               	goto	i2l3669
  6634  0000CE                     i2l3665:
  6635  0000CE  0EEE               	movlw	238
  6636  0000D0  1810               	xorwf	get_next_state@code,w,c
  6637  0000D2  E108               	bnz	i2l3669
  6638  0000D4  0EAA               	movlw	170
  6639  0000D6  1811               	xorwf	get_next_state@code+1,w,c
  6640  0000D8  A4D8               	btfss	status,2,c
  6641  0000DA  D004               	goto	i2l3669
  6642                           
  6643                           ;user.c: 396: next = 24;
  6644  0000DC  0E00               	movlw	0
  6645  0000DE  6E2D               	movwf	_next+1,c
  6646  0000E0  0E18               	movlw	24
  6647  0000E2  D251               	goto	L47
  6648  0000E4                     i2l3669:
  6649                           
  6650                           ;user.c: 397: else if(state == 1 && code == 0xAAEE)
  6651  0000E4  040E               	decf	get_next_state@state,w,c
  6652  0000E6  100F               	iorwf	get_next_state@state+1,w,c
  6653  0000E8  A4D8               	btfss	status,2,c
  6654  0000EA  D00B               	goto	i2l3675
  6655  0000EC  0EEE               	movlw	238
  6656  0000EE  1810               	xorwf	get_next_state@code,w,c
  6657  0000F0  E108               	bnz	i2l3675
  6658  0000F2  0EAA               	movlw	170
  6659  0000F4  1811               	xorwf	get_next_state@code+1,w,c
  6660  0000F6  A4D8               	btfss	status,2,c
  6661  0000F8  D004               	goto	i2l3675
  6662                           
  6663                           ;user.c: 398: next = 2;
  6664  0000FA  0E00               	movlw	0
  6665  0000FC  6E2D               	movwf	_next+1,c
  6666  0000FE  0E02               	movlw	2
  6667  000100  D242               	goto	L47
  6668  000102                     i2l3675:
  6669                           
  6670                           ;user.c: 399: else if(state == 2 && code == 0xAAEE)
  6671  000102  0E02               	movlw	2
  6672  000104  180E               	xorwf	get_next_state@state,w,c
  6673  000106  100F               	iorwf	get_next_state@state+1,w,c
  6674  000108  A4D8               	btfss	status,2,c
  6675  00010A  D00B               	goto	i2l3681
  6676  00010C  0EEE               	movlw	238
  6677  00010E  1810               	xorwf	get_next_state@code,w,c
  6678  000110  E108               	bnz	i2l3681
  6679  000112  0EAA               	movlw	170
  6680  000114  1811               	xorwf	get_next_state@code+1,w,c
  6681  000116  A4D8               	btfss	status,2,c
  6682  000118  D004               	goto	i2l3681
  6683                           
  6684                           ;user.c: 400: next = 3;
  6685  00011A  0E00               	movlw	0
  6686  00011C  6E2D               	movwf	_next+1,c
  6687  00011E  0E03               	movlw	3
  6688  000120  D232               	goto	L47
  6689  000122                     i2l3681:
  6690                           
  6691                           ;user.c: 401: else if(state == 3 && code == 0xAAEE)
  6692  000122  0E03               	movlw	3
  6693  000124  180E               	xorwf	get_next_state@state,w,c
  6694  000126  100F               	iorwf	get_next_state@state+1,w,c
  6695  000128  A4D8               	btfss	status,2,c
  6696  00012A  D00B               	goto	i2l3687
  6697  00012C  0EEE               	movlw	238
  6698  00012E  1810               	xorwf	get_next_state@code,w,c
  6699  000130  E108               	bnz	i2l3687
  6700  000132  0EAA               	movlw	170
  6701  000134  1811               	xorwf	get_next_state@code+1,w,c
  6702  000136  A4D8               	btfss	status,2,c
  6703  000138  D004               	goto	i2l3687
  6704                           
  6705                           ;user.c: 402: next = 4;
  6706  00013A  0E00               	movlw	0
  6707  00013C  6E2D               	movwf	_next+1,c
  6708  00013E  0E04               	movlw	4
  6709  000140  D222               	goto	L47
  6710  000142                     i2l3687:
  6711                           
  6712                           ;user.c: 403: else if(state == 4 && code == 0xAAEE)
  6713  000142  0E04               	movlw	4
  6714  000144  180E               	xorwf	get_next_state@state,w,c
  6715  000146  100F               	iorwf	get_next_state@state+1,w,c
  6716  000148  A4D8               	btfss	status,2,c
  6717  00014A  D007               	goto	i2l3693
  6718  00014C  0EEE               	movlw	238
  6719  00014E  1810               	xorwf	get_next_state@code,w,c
  6720  000150  E104               	bnz	i2l3693
  6721  000152  0EAA               	movlw	170
  6722  000154  1811               	xorwf	get_next_state@code+1,w,c
  6723  000156  B4D8               	btfsc	status,2,c
  6724  000158  D767               	goto	i2l3631
  6725  00015A                     i2l3693:
  6726                           
  6727                           ;user.c: 405: else if((state == 5 || state == 6 || state == 21 || state == 24) && code =
      +                          = 0xBABA)
  6728  00015A  0E05               	movlw	5
  6729  00015C  180E               	xorwf	get_next_state@state,w,c
  6730  00015E  100F               	iorwf	get_next_state@state+1,w,c
  6731  000160  B4D8               	btfsc	status,2,c
  6732  000162  D00F               	goto	i2l3701
  6733  000164  0E06               	movlw	6
  6734  000166  180E               	xorwf	get_next_state@state,w,c
  6735  000168  100F               	iorwf	get_next_state@state+1,w,c
  6736  00016A  B4D8               	btfsc	status,2,c
  6737  00016C  D00A               	goto	i2l3701
  6738  00016E  0E15               	movlw	21
  6739  000170  180E               	xorwf	get_next_state@state,w,c
  6740  000172  100F               	iorwf	get_next_state@state+1,w,c
  6741  000174  B4D8               	btfsc	status,2,c
  6742  000176  D005               	goto	i2l3701
  6743  000178  0E18               	movlw	24
  6744  00017A  180E               	xorwf	get_next_state@state,w,c
  6745  00017C  100F               	iorwf	get_next_state@state+1,w,c
  6746  00017E  A4D8               	btfss	status,2,c
  6747  000180  D00B               	goto	i2l3705
  6748  000182                     i2l3701:
  6749  000182  0EBA               	movlw	186
  6750  000184  1810               	xorwf	get_next_state@code,w,c
  6751  000186  E108               	bnz	i2l3705
  6752  000188  0EBA               	movlw	186
  6753  00018A  1811               	xorwf	get_next_state@code+1,w,c
  6754  00018C  A4D8               	btfss	status,2,c
  6755  00018E  D004               	goto	i2l3705
  6756                           
  6757                           ;user.c: 406: next = 0;
  6758  000190  0E00               	movlw	0
  6759  000192  6E2D               	movwf	_next+1,c
  6760  000194  0E00               	movlw	0
  6761  000196  D1F7               	goto	L47
  6762  000198                     i2l3705:
  6763                           
  6764                           ;user.c: 407: else if((state == 1 || state == 2 || state == 3 || state == 4) && code == 
      +                          0xAEBA)
  6765  000198  040E               	decf	get_next_state@state,w,c
  6766  00019A  100F               	iorwf	get_next_state@state+1,w,c
  6767  00019C  B4D8               	btfsc	status,2,c
  6768  00019E  D00F               	goto	i2l3713
  6769  0001A0  0E02               	movlw	2
  6770  0001A2  180E               	xorwf	get_next_state@state,w,c
  6771  0001A4  100F               	iorwf	get_next_state@state+1,w,c
  6772  0001A6  B4D8               	btfsc	status,2,c
  6773  0001A8  D00A               	goto	i2l3713
  6774  0001AA  0E03               	movlw	3
  6775  0001AC  180E               	xorwf	get_next_state@state,w,c
  6776  0001AE  100F               	iorwf	get_next_state@state+1,w,c
  6777  0001B0  B4D8               	btfsc	status,2,c
  6778  0001B2  D005               	goto	i2l3713
  6779  0001B4  0E04               	movlw	4
  6780  0001B6  180E               	xorwf	get_next_state@state,w,c
  6781  0001B8  100F               	iorwf	get_next_state@state+1,w,c
  6782  0001BA  A4D8               	btfss	status,2,c
  6783  0001BC  D023               	goto	i2l3723
  6784  0001BE                     i2l3713:
  6785  0001BE  0EBA               	movlw	186
  6786  0001C0  1810               	xorwf	get_next_state@code,w,c
  6787  0001C2  E120               	bnz	i2l3723
  6788  0001C4  0EAE               	movlw	174
  6789  0001C6  1811               	xorwf	get_next_state@code+1,w,c
  6790  0001C8  A4D8               	btfss	status,2,c
  6791  0001CA  D01C               	goto	i2l3723
  6792                           
  6793                           ;user.c: 408: {
  6794                           ;user.c: 409: next = 0;
  6795  0001CC  0E00               	movlw	0
  6796  0001CE  6E2D               	movwf	_next+1,c
  6797  0001D0  0E00               	movlw	0
  6798  0001D2  6E2C               	movwf	_next,c
  6799                           
  6800                           ;user.c: 410: char seconds = 0;
  6801  0001D4  0E00               	movlw	0
  6802  0001D6  6E14               	movwf	get_next_state@seconds,c
  6803                           
  6804                           ;user.c: 411: char minutes = aux1[0] + aux1[1]*10;
  6805  0001D8  0100               	movlb	0	; () banked
  6806  0001DA  51CE               	movf	(_aux1+1)& (0+255),w,b
  6807  0001DC  0D0A               	mullw	10
  6808  0001DE  50F3               	movf	prodl,w,c
  6809  0001E0  0100               	movlb	0	; () banked
  6810  0001E2  25CD               	addwf	_aux1& (0+255),w,b
  6811  0001E4  6E15               	movwf	get_next_state@minutes,c
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;user.c: 412: char hour = aux1[2] + aux1[3]*10;
  6815  0001E6  0100               	movlb	0	; () banked
  6816  0001E8  51D0               	movf	(_aux1+3)& (0+255),w,b
  6817  0001EA  0D0A               	mullw	10
  6818  0001EC  50F3               	movf	prodl,w,c
  6819  0001EE  0100               	movlb	0	; () banked
  6820  0001F0  25CF               	addwf	(_aux1+2)& (0+255),w,b
  6821  0001F2  6E16               	movwf	get_next_state@hour,c
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;user.c: 413: set_time(seconds,minutes,hour);
  6825  0001F4  C015  F008         	movff	get_next_state@minutes,set_time@minutes
  6826  0001F8  C016  F009         	movff	get_next_state@hour,set_time@hour
  6827  0001FC  5014               	movf	get_next_state@seconds,w,c
  6828  0001FE  EC4A  F00F         	call	_set_time
  6829                           
  6830                           ;user.c: 414: }
  6831  000202  D2D5               	goto	i2l447
  6832  000204                     i2l3723:
  6833                           
  6834                           ;user.c: 415: else if(state == 5 && code == 0xEAAA)
  6835  000204  0E05               	movlw	5
  6836  000206  180E               	xorwf	get_next_state@state,w,c
  6837  000208  100F               	iorwf	get_next_state@state+1,w,c
  6838  00020A  A4D8               	btfss	status,2,c
  6839  00020C  D00E               	goto	i2l3731
  6840  00020E  0EAA               	movlw	170
  6841  000210  1810               	xorwf	get_next_state@code,w,c
  6842  000212  E10B               	bnz	i2l3731
  6843  000214  0EEA               	movlw	234
  6844  000216  1811               	xorwf	get_next_state@code+1,w,c
  6845  000218  A4D8               	btfss	status,2,c
  6846  00021A  D007               	goto	i2l3731
  6847                           
  6848                           ;user.c: 416: {
  6849                           ;user.c: 417: next = 11;
  6850  00021C  0E00               	movlw	0
  6851  00021E  6E2D               	movwf	_next+1,c
  6852  000220  0E0B               	movlw	11
  6853  000222  6E2C               	movwf	_next,c
  6854                           
  6855                           ;user.c: 419: timer1_enable();
  6856  000224  ECD7  F00F         	call	i2_timer1_enable	;wreg free
  6857                           
  6858                           ;user.c: 420: }
  6859  000228  D2C2               	goto	i2l447
  6860  00022A                     i2l3731:
  6861                           
  6862                           ;user.c: 421: else if(state == 11 && timer1_counter_10 == 0)
  6863  00022A  0E0B               	movlw	11
  6864  00022C  180E               	xorwf	get_next_state@state,w,c
  6865  00022E  100F               	iorwf	get_next_state@state+1,w,c
  6866  000230  A4D8               	btfss	status,2,c
  6867  000232  D008               	goto	i2l3737
  6868  000234  0100               	movlb	0	; () banked
  6869  000236  51D3               	movf	_timer1_counter_10& (0+255),w,b
  6870  000238  A4D8               	btfss	status,2,c
  6871  00023A  D004               	goto	i2l3737
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;user.c: 422: next = 12;
  6875  00023C  0E00               	movlw	0
  6876  00023E  6E2D               	movwf	_next+1,c
  6877  000240  0E0C               	movlw	12
  6878  000242  D1A1               	goto	L47
  6879  000244                     i2l3737:
  6880                           
  6881                           ;user.c: 423: else if(state == 12 && timer1_counter_min == timer1_up_limit_min && timer1
      +                          _counter_10 == timer1_up_limit_sec)
  6882  000244  0E0C               	movlw	12
  6883  000246  180E               	xorwf	get_next_state@state,w,c
  6884  000248  100F               	iorwf	get_next_state@state+1,w,c
  6885  00024A  A4D8               	btfss	status,2,c
  6886  00024C  D00D               	goto	i2l3745
  6887  00024E  5036               	movf	_timer1_up_limit_min,w,c
  6888  000250  1833               	xorwf	_timer1_counter_min,w,c
  6889  000252  A4D8               	btfss	status,2,c
  6890  000254  D009               	goto	i2l3745
  6891  000256  5037               	movf	_timer1_up_limit_sec,w,c
  6892  000258  0100               	movlb	0	; () banked
  6893  00025A  19D3               	xorwf	_timer1_counter_10& (0+255),w,b
  6894  00025C  A4D8               	btfss	status,2,c
  6895  00025E  D004               	goto	i2l3745
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;user.c: 424: {
  6899                           ;user.c: 425: next = 13;
  6900  000260  0E00               	movlw	0
  6901  000262  6E2D               	movwf	_next+1,c
  6902  000264  0E0D               	movlw	13
  6903  000266  D18F               	goto	L47
  6904  000268                     i2l3745:
  6905                           
  6906                           ;user.c: 427: else if((state == 13 || state == 12 ) && code == 0xAEBA)
  6907  000268  0E0D               	movlw	13
  6908  00026A  180E               	xorwf	get_next_state@state,w,c
  6909  00026C  100F               	iorwf	get_next_state@state+1,w,c
  6910  00026E  B4D8               	btfsc	status,2,c
  6911  000270  D005               	goto	i2l3749
  6912  000272  0E0C               	movlw	12
  6913  000274  180E               	xorwf	get_next_state@state,w,c
  6914  000276  100F               	iorwf	get_next_state@state+1,w,c
  6915  000278  A4D8               	btfss	status,2,c
  6916  00027A  D007               	goto	i2l3753
  6917  00027C                     i2l3749:
  6918  00027C  0EBA               	movlw	186
  6919  00027E  1810               	xorwf	get_next_state@code,w,c
  6920  000280  E104               	bnz	i2l3753
  6921  000282  0EAE               	movlw	174
  6922  000284  1811               	xorwf	get_next_state@code+1,w,c
  6923  000286  B4D8               	btfsc	status,2,c
  6924  000288  D6ED               	goto	i2l3643
  6925  00028A                     i2l3753:
  6926                           
  6927                           ;user.c: 429: else if(state == 5 && code == 0xAABA)
  6928  00028A  0E05               	movlw	5
  6929  00028C  180E               	xorwf	get_next_state@state,w,c
  6930  00028E  100F               	iorwf	get_next_state@state+1,w,c
  6931  000290  A4D8               	btfss	status,2,c
  6932  000292  D00B               	goto	i2l3759
  6933  000294  0EBA               	movlw	186
  6934  000296  1810               	xorwf	get_next_state@code,w,c
  6935  000298  E108               	bnz	i2l3759
  6936  00029A  0EAA               	movlw	170
  6937  00029C  1811               	xorwf	get_next_state@code+1,w,c
  6938  00029E  A4D8               	btfss	status,2,c
  6939  0002A0  D004               	goto	i2l3759
  6940                           
  6941                           ;user.c: 430: {
  6942                           ;user.c: 431: next = 7;
  6943  0002A2  0E00               	movlw	0
  6944  0002A4  6E2D               	movwf	_next+1,c
  6945  0002A6  0E07               	movlw	7
  6946  0002A8  D16E               	goto	L47
  6947  0002AA                     i2l3759:
  6948                           
  6949                           ;user.c: 433: else if((state == 7 || state == 8 || state == 9 || state == 10) && code ==
      +                           0xAEBA)
  6950  0002AA  0E07               	movlw	7
  6951  0002AC  180E               	xorwf	get_next_state@state,w,c
  6952  0002AE  100F               	iorwf	get_next_state@state+1,w,c
  6953  0002B0  B4D8               	btfsc	status,2,c
  6954  0002B2  D00F               	goto	i2l3767
  6955  0002B4  0E08               	movlw	8
  6956  0002B6  180E               	xorwf	get_next_state@state,w,c
  6957  0002B8  100F               	iorwf	get_next_state@state+1,w,c
  6958  0002BA  B4D8               	btfsc	status,2,c
  6959  0002BC  D00A               	goto	i2l3767
  6960  0002BE  0E09               	movlw	9
  6961  0002C0  180E               	xorwf	get_next_state@state,w,c
  6962  0002C2  100F               	iorwf	get_next_state@state+1,w,c
  6963  0002C4  B4D8               	btfsc	status,2,c
  6964  0002C6  D005               	goto	i2l3767
  6965  0002C8  0E0A               	movlw	10
  6966  0002CA  180E               	xorwf	get_next_state@state,w,c
  6967  0002CC  100F               	iorwf	get_next_state@state+1,w,c
  6968  0002CE  A4D8               	btfss	status,2,c
  6969  0002D0  D01A               	goto	i2l3775
  6970  0002D2                     i2l3767:
  6971  0002D2  0EBA               	movlw	186
  6972  0002D4  1810               	xorwf	get_next_state@code,w,c
  6973  0002D6  E117               	bnz	i2l3775
  6974  0002D8  0EAE               	movlw	174
  6975  0002DA  1811               	xorwf	get_next_state@code+1,w,c
  6976  0002DC  A4D8               	btfss	status,2,c
  6977  0002DE  D013               	goto	i2l3775
  6978                           
  6979                           ;user.c: 434: {
  6980                           ;user.c: 435: next = 5;
  6981  0002E0  0E00               	movlw	0
  6982  0002E2  6E2D               	movwf	_next+1,c
  6983  0002E4  0E05               	movlw	5
  6984  0002E6  6E2C               	movwf	_next,c
  6985                           
  6986                           ;user.c: 437: timer1_up_limit_sec = aux1[1]*10+aux1[0];
  6987  0002E8  0100               	movlb	0	; () banked
  6988  0002EA  51CE               	movf	(_aux1+1)& (0+255),w,b
  6989  0002EC  0D0A               	mullw	10
  6990  0002EE  50F3               	movf	prodl,w,c
  6991  0002F0  0100               	movlb	0	; () banked
  6992  0002F2  25CD               	addwf	_aux1& (0+255),w,b
  6993  0002F4  6E37               	movwf	_timer1_up_limit_sec,c
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;user.c: 438: timer1_up_limit_min = aux1[3]*10 + aux1[2];
  6997  0002F6  0100               	movlb	0	; () banked
  6998  0002F8  51D0               	movf	(_aux1+3)& (0+255),w,b
  6999  0002FA  0D0A               	mullw	10
  7000  0002FC  50F3               	movf	prodl,w,c
  7001  0002FE  0100               	movlb	0	; () banked
  7002  000300  25CF               	addwf	(_aux1+2)& (0+255),w,b
  7003  000302  6E36               	movwf	_timer1_up_limit_min,c
  7004                           
  7005                           ;user.c: 439: }
  7006  000304  D254               	goto	i2l447
  7007  000306                     i2l3775:
  7008                           
  7009                           ;user.c: 440: else if(state == 6 && code == 0xEAAA)
  7010  000306  0E06               	movlw	6
  7011  000308  180E               	xorwf	get_next_state@state,w,c
  7012  00030A  100F               	iorwf	get_next_state@state+1,w,c
  7013  00030C  A4D8               	btfss	status,2,c
  7014  00030E  D00E               	goto	i2l3783
  7015  000310  0EAA               	movlw	170
  7016  000312  1810               	xorwf	get_next_state@code,w,c
  7017  000314  E10B               	bnz	i2l3783
  7018  000316  0EEA               	movlw	234
  7019  000318  1811               	xorwf	get_next_state@code+1,w,c
  7020  00031A  A4D8               	btfss	status,2,c
  7021  00031C  D007               	goto	i2l3783
  7022                           
  7023                           ;user.c: 441: {
  7024                           ;user.c: 442: next = 18;
  7025  00031E  0E00               	movlw	0
  7026  000320  6E2D               	movwf	_next+1,c
  7027  000322  0E12               	movlw	18
  7028  000324  6E2C               	movwf	_next,c
  7029                           
  7030                           ;user.c: 444: timer1_enable();
  7031  000326  ECD7  F00F         	call	i2_timer1_enable	;wreg free
  7032                           
  7033                           ;user.c: 445: }
  7034  00032A  D241               	goto	i2l447
  7035  00032C                     i2l3783:
  7036                           
  7037                           ;user.c: 446: else if(state == 18 && timer1_counter_10 == 0)
  7038  00032C  0E12               	movlw	18
  7039  00032E  180E               	xorwf	get_next_state@state,w,c
  7040  000330  100F               	iorwf	get_next_state@state+1,w,c
  7041  000332  A4D8               	btfss	status,2,c
  7042  000334  D00D               	goto	i2l3793
  7043  000336  0100               	movlb	0	; () banked
  7044  000338  51D3               	movf	_timer1_counter_10& (0+255),w,b
  7045  00033A  A4D8               	btfss	status,2,c
  7046  00033C  D009               	goto	i2l3793
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;user.c: 447: {
  7050                           ;user.c: 448: next = 19;
  7051  00033E  0E00               	movlw	0
  7052  000340  6E2D               	movwf	_next+1,c
  7053  000342  0E13               	movlw	19
  7054  000344  6E2C               	movwf	_next,c
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;user.c: 450: timer1_counter_min = timer1_down_init_min;
  7058  000346  C032  F033         	movff	_timer1_down_init_min,_timer1_counter_min
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;user.c: 451: timer1_counter_10 = timer1_down_init_sec;
  7062  00034A  C031  F0D3         	movff	_timer1_down_init_sec,_timer1_counter_10
  7063                           
  7064                           ;user.c: 452: }
  7065  00034E  D22F               	goto	i2l447
  7066  000350                     i2l3793:
  7067                           
  7068                           ;user.c: 453: else if(state == 19 && timer1_counter_min == 0 && timer1_counter_10 == 0)
  7069  000350  0E13               	movlw	19
  7070  000352  180E               	xorwf	get_next_state@state,w,c
  7071  000354  100F               	iorwf	get_next_state@state+1,w,c
  7072  000356  A4D8               	btfss	status,2,c
  7073  000358  D00B               	goto	i2l3801
  7074  00035A  5033               	movf	_timer1_counter_min,w,c
  7075  00035C  A4D8               	btfss	status,2,c
  7076  00035E  D008               	goto	i2l3801
  7077  000360  0100               	movlb	0	; () banked
  7078  000362  51D3               	movf	_timer1_counter_10& (0+255),w,b
  7079  000364  A4D8               	btfss	status,2,c
  7080  000366  D004               	goto	i2l3801
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;user.c: 454: {
  7084                           ;user.c: 455: next = 20;
  7085  000368  0E00               	movlw	0
  7086  00036A  6E2D               	movwf	_next+1,c
  7087  00036C  0E14               	movlw	20
  7088  00036E  D10B               	goto	L47
  7089  000370                     i2l3801:
  7090                           
  7091                           ;user.c: 457: else if(state == 20 && code == 0xAEBA)
  7092  000370  0E14               	movlw	20
  7093  000372  180E               	xorwf	get_next_state@state,w,c
  7094  000374  100F               	iorwf	get_next_state@state+1,w,c
  7095  000376  A4D8               	btfss	status,2,c
  7096  000378  D007               	goto	i2l3807
  7097  00037A  0EBA               	movlw	186
  7098  00037C  1810               	xorwf	get_next_state@code,w,c
  7099  00037E  E104               	bnz	i2l3807
  7100  000380  0EAE               	movlw	174
  7101  000382  1811               	xorwf	get_next_state@code+1,w,c
  7102  000384  B4D8               	btfsc	status,2,c
  7103  000386  D68C               	goto	i2l3655
  7104  000388                     i2l3807:
  7105                           
  7106                           ;user.c: 461: else if(state == 6 && code == 0xAABA)
  7107  000388  0E06               	movlw	6
  7108  00038A  180E               	xorwf	get_next_state@state,w,c
  7109  00038C  100F               	iorwf	get_next_state@state+1,w,c
  7110  00038E  A4D8               	btfss	status,2,c
  7111  000390  D00B               	goto	i2l3813
  7112  000392  0EBA               	movlw	186
  7113  000394  1810               	xorwf	get_next_state@code,w,c
  7114  000396  E108               	bnz	i2l3813
  7115  000398  0EAA               	movlw	170
  7116  00039A  1811               	xorwf	get_next_state@code+1,w,c
  7117  00039C  A4D8               	btfss	status,2,c
  7118  00039E  D004               	goto	i2l3813
  7119                           
  7120                           ;user.c: 462: {
  7121                           ;user.c: 463: next = 14;
  7122  0003A0  0E00               	movlw	0
  7123  0003A2  6E2D               	movwf	_next+1,c
  7124  0003A4  0E0E               	movlw	14
  7125  0003A6  D0EF               	goto	L47
  7126  0003A8                     i2l3813:
  7127                           
  7128                           ;user.c: 465: else if((state == 14 || state == 15 || state == 16 || state == 17) && code
      +                           == 0xAEBA)
  7129  0003A8  0E0E               	movlw	14
  7130  0003AA  180E               	xorwf	get_next_state@state,w,c
  7131  0003AC  100F               	iorwf	get_next_state@state+1,w,c
  7132  0003AE  B4D8               	btfsc	status,2,c
  7133  0003B0  D00F               	goto	i2l3821
  7134  0003B2  0E0F               	movlw	15
  7135  0003B4  180E               	xorwf	get_next_state@state,w,c
  7136  0003B6  100F               	iorwf	get_next_state@state+1,w,c
  7137  0003B8  B4D8               	btfsc	status,2,c
  7138  0003BA  D00A               	goto	i2l3821
  7139  0003BC  0E10               	movlw	16
  7140  0003BE  180E               	xorwf	get_next_state@state,w,c
  7141  0003C0  100F               	iorwf	get_next_state@state+1,w,c
  7142  0003C2  B4D8               	btfsc	status,2,c
  7143  0003C4  D005               	goto	i2l3821
  7144  0003C6  0E11               	movlw	17
  7145  0003C8  180E               	xorwf	get_next_state@state,w,c
  7146  0003CA  100F               	iorwf	get_next_state@state+1,w,c
  7147  0003CC  A4D8               	btfss	status,2,c
  7148  0003CE  D01A               	goto	i2l3829
  7149  0003D0                     i2l3821:
  7150  0003D0  0EBA               	movlw	186
  7151  0003D2  1810               	xorwf	get_next_state@code,w,c
  7152  0003D4  E117               	bnz	i2l3829
  7153  0003D6  0EAE               	movlw	174
  7154  0003D8  1811               	xorwf	get_next_state@code+1,w,c
  7155  0003DA  A4D8               	btfss	status,2,c
  7156  0003DC  D013               	goto	i2l3829
  7157                           
  7158                           ;user.c: 466: {
  7159                           ;user.c: 467: next = 6;
  7160  0003DE  0E00               	movlw	0
  7161  0003E0  6E2D               	movwf	_next+1,c
  7162  0003E2  0E06               	movlw	6
  7163  0003E4  6E2C               	movwf	_next,c
  7164                           
  7165                           ;user.c: 468: timer1_down_init_min = aux1[3]*10 + aux1[2];
  7166  0003E6  0100               	movlb	0	; () banked
  7167  0003E8  51D0               	movf	(_aux1+3)& (0+255),w,b
  7168  0003EA  0D0A               	mullw	10
  7169  0003EC  50F3               	movf	prodl,w,c
  7170  0003EE  0100               	movlb	0	; () banked
  7171  0003F0  25CF               	addwf	(_aux1+2)& (0+255),w,b
  7172  0003F2  6E32               	movwf	_timer1_down_init_min,c
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;user.c: 469: timer1_down_init_sec = aux1[1]*10 + aux1[0];
  7176  0003F4  0100               	movlb	0	; () banked
  7177  0003F6  51CE               	movf	(_aux1+1)& (0+255),w,b
  7178  0003F8  0D0A               	mullw	10
  7179  0003FA  50F3               	movf	prodl,w,c
  7180  0003FC  0100               	movlb	0	; () banked
  7181  0003FE  25CD               	addwf	_aux1& (0+255),w,b
  7182  000400  6E31               	movwf	_timer1_down_init_sec,c
  7183                           
  7184                           ;user.c: 470: }
  7185  000402  D1D5               	goto	i2l447
  7186  000404                     i2l3829:
  7187                           
  7188                           ;user.c: 471: else if((state == 6 || state == 5 || state == 0) && code == 0xAAEA)
  7189  000404  0E06               	movlw	6
  7190  000406  180E               	xorwf	get_next_state@state,w,c
  7191  000408  100F               	iorwf	get_next_state@state+1,w,c
  7192  00040A  B4D8               	btfsc	status,2,c
  7193  00040C  D009               	goto	i2l3835
  7194  00040E  0E05               	movlw	5
  7195  000410  180E               	xorwf	get_next_state@state,w,c
  7196  000412  100F               	iorwf	get_next_state@state+1,w,c
  7197  000414  B4D8               	btfsc	status,2,c
  7198  000416  D004               	goto	i2l3835
  7199  000418  500E               	movf	get_next_state@state,w,c
  7200  00041A  100F               	iorwf	get_next_state@state+1,w,c
  7201  00041C  A4D8               	btfss	status,2,c
  7202  00041E  D00B               	goto	i2l3839
  7203  000420                     i2l3835:
  7204  000420  0EEA               	movlw	234
  7205  000422  1810               	xorwf	get_next_state@code,w,c
  7206  000424  E108               	bnz	i2l3839
  7207  000426  0EAA               	movlw	170
  7208  000428  1811               	xorwf	get_next_state@code+1,w,c
  7209  00042A  A4D8               	btfss	status,2,c
  7210  00042C  D004               	goto	i2l3839
  7211  00042E                     i2l3837:
  7212                           
  7213                           ;user.c: 472: {
  7214                           ;user.c: 473: next = 21;
  7215  00042E  0E00               	movlw	0
  7216  000430  6E2D               	movwf	_next+1,c
  7217  000432  0E15               	movlw	21
  7218  000434  D0A8               	goto	L47
  7219  000436                     i2l3839:
  7220                           
  7221                           ;user.c: 475: else if(state == 21 && code == 0xEAAA)
  7222  000436  0E15               	movlw	21
  7223  000438  180E               	xorwf	get_next_state@state,w,c
  7224  00043A  100F               	iorwf	get_next_state@state+1,w,c
  7225  00043C  A4D8               	btfss	status,2,c
  7226  00043E  D00B               	goto	i2l3845
  7227  000440  0EAA               	movlw	170
  7228  000442  1810               	xorwf	get_next_state@code,w,c
  7229  000444  E108               	bnz	i2l3845
  7230  000446  0EEA               	movlw	234
  7231  000448  1811               	xorwf	get_next_state@code+1,w,c
  7232  00044A  A4D8               	btfss	status,2,c
  7233  00044C  D004               	goto	i2l3845
  7234  00044E                     i2l3843:
  7235                           
  7236                           ;user.c: 476: {
  7237                           ;user.c: 477: next = 22;
  7238  00044E  0E00               	movlw	0
  7239  000450  6E2D               	movwf	_next+1,c
  7240  000452  0E16               	movlw	22
  7241  000454  D098               	goto	L47
  7242  000456                     i2l3845:
  7243                           
  7244                           ;user.c: 479: else if(state == 22 && code == 0xAABA)
  7245  000456  0E16               	movlw	22
  7246  000458  180E               	xorwf	get_next_state@state,w,c
  7247  00045A  100F               	iorwf	get_next_state@state+1,w,c
  7248  00045C  A4D8               	btfss	status,2,c
  7249  00045E  D00B               	goto	i2l3851
  7250  000460  0EBA               	movlw	186
  7251  000462  1810               	xorwf	get_next_state@code,w,c
  7252  000464  E108               	bnz	i2l3851
  7253  000466  0EAA               	movlw	170
  7254  000468  1811               	xorwf	get_next_state@code+1,w,c
  7255  00046A  A4D8               	btfss	status,2,c
  7256  00046C  D004               	goto	i2l3851
  7257                           
  7258                           ;user.c: 480: {
  7259                           ;user.c: 481: next = 23;
  7260  00046E  0E00               	movlw	0
  7261  000470  6E2D               	movwf	_next+1,c
  7262  000472  0E17               	movlw	23
  7263  000474  D088               	goto	L47
  7264  000476                     i2l3851:
  7265                           
  7266                           ;user.c: 483: else if(state == 23 && code == 0xEAAA)
  7267  000476  0E17               	movlw	23
  7268  000478  180E               	xorwf	get_next_state@state,w,c
  7269  00047A  100F               	iorwf	get_next_state@state+1,w,c
  7270  00047C  A4D8               	btfss	status,2,c
  7271  00047E  D007               	goto	i2l3857
  7272  000480  0EAA               	movlw	170
  7273  000482  1810               	xorwf	get_next_state@code,w,c
  7274  000484  E104               	bnz	i2l3857
  7275  000486  0EEA               	movlw	234
  7276  000488  1811               	xorwf	get_next_state@code+1,w,c
  7277  00048A  B4D8               	btfsc	status,2,c
  7278  00048C  D7E0               	goto	i2l3843
  7279  00048E                     i2l3857:
  7280                           
  7281                           ;user.c: 487: else if((state == 22 || state == 23) && code == 0xAEBA)
  7282  00048E  0E16               	movlw	22
  7283  000490  180E               	xorwf	get_next_state@state,w,c
  7284  000492  100F               	iorwf	get_next_state@state+1,w,c
  7285  000494  B4D8               	btfsc	status,2,c
  7286  000496  D005               	goto	i2l3861
  7287  000498  0E17               	movlw	23
  7288  00049A  180E               	xorwf	get_next_state@state,w,c
  7289  00049C  100F               	iorwf	get_next_state@state+1,w,c
  7290  00049E  A4D8               	btfss	status,2,c
  7291  0004A0  D007               	goto	i2l3865
  7292  0004A2                     i2l3861:
  7293  0004A2  0EBA               	movlw	186
  7294  0004A4  1810               	xorwf	get_next_state@code,w,c
  7295  0004A6  E104               	bnz	i2l3865
  7296  0004A8  0EAE               	movlw	174
  7297  0004AA  1811               	xorwf	get_next_state@code+1,w,c
  7298  0004AC  B4D8               	btfsc	status,2,c
  7299  0004AE  D7BF               	goto	i2l3837
  7300  0004B0                     i2l3865:
  7301                           
  7302                           ;user.c: 491: else if(state == 24 && code == 0xEAAA)
  7303  0004B0  0E18               	movlw	24
  7304  0004B2  180E               	xorwf	get_next_state@state,w,c
  7305  0004B4  100F               	iorwf	get_next_state@state+1,w,c
  7306  0004B6  A4D8               	btfss	status,2,c
  7307  0004B8  D00B               	goto	i2l3871
  7308  0004BA  0EAA               	movlw	170
  7309  0004BC  1810               	xorwf	get_next_state@code,w,c
  7310  0004BE  E108               	bnz	i2l3871
  7311  0004C0  0EEA               	movlw	234
  7312  0004C2  1811               	xorwf	get_next_state@code+1,w,c
  7313  0004C4  A4D8               	btfss	status,2,c
  7314  0004C6  D004               	goto	i2l3871
  7315                           
  7316                           ;user.c: 492: {
  7317                           ;user.c: 493: next = 26;
  7318  0004C8  0E00               	movlw	0
  7319  0004CA  6E2D               	movwf	_next+1,c
  7320  0004CC  0E1A               	movlw	26
  7321  0004CE  D00F               	goto	L48
  7322  0004D0                     i2l3871:
  7323                           
  7324                           ;user.c: 496: else if(state == 24 && code == 0xAABA)
  7325  0004D0  0E18               	movlw	24
  7326  0004D2  180E               	xorwf	get_next_state@state,w,c
  7327  0004D4  100F               	iorwf	get_next_state@state+1,w,c
  7328  0004D6  A4D8               	btfss	status,2,c
  7329  0004D8  D00E               	goto	i2l3877
  7330  0004DA  0EBA               	movlw	186
  7331  0004DC  1810               	xorwf	get_next_state@code,w,c
  7332  0004DE  E10B               	bnz	i2l3877
  7333  0004E0  0EAA               	movlw	170
  7334  0004E2  1811               	xorwf	get_next_state@code+1,w,c
  7335  0004E4  A4D8               	btfss	status,2,c
  7336  0004E6  D007               	goto	i2l3877
  7337                           
  7338                           ;user.c: 497: {
  7339                           ;user.c: 498: next = 29;
  7340  0004E8  0E00               	movlw	0
  7341  0004EA  6E2D               	movwf	_next+1,c
  7342  0004EC  0E1D               	movlw	29
  7343  0004EE                     L48:
  7344  0004EE  6E2C               	movwf	_next,c
  7345                           
  7346                           ;user.c: 499: current_program = 0;
  7347  0004F0  0E00               	movlw	0
  7348  0004F2  6E2E               	movwf	_current_program,c
  7349                           
  7350                           ;user.c: 500: }
  7351  0004F4  D15C               	goto	i2l447
  7352  0004F6                     i2l3877:
  7353                           
  7354                           ;user.c: 501: else if(state == 26 && timer1_counter_min == 0 && timer1_counter_10 == 0)
  7355  0004F6  0E1A               	movlw	26
  7356  0004F8  180E               	xorwf	get_next_state@state,w,c
  7357  0004FA  100F               	iorwf	get_next_state@state+1,w,c
  7358  0004FC  A4D8               	btfss	status,2,c
  7359  0004FE  D01C               	goto	i2l3889
  7360  000500  5033               	movf	_timer1_counter_min,w,c
  7361  000502  A4D8               	btfss	status,2,c
  7362  000504  D019               	goto	i2l3889
  7363  000506  0100               	movlb	0	; () banked
  7364  000508  51D3               	movf	_timer1_counter_10& (0+255),w,b
  7365  00050A  A4D8               	btfss	status,2,c
  7366  00050C  D015               	goto	i2l3889
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;user.c: 502: {
  7370                           ;user.c: 503: next = 27;
  7371  00050E  0E00               	movlw	0
  7372  000510  6E2D               	movwf	_next+1,c
  7373  000512  0E1B               	movlw	27
  7374  000514  6E2C               	movwf	_next,c
  7375                           
  7376                           ;user.c: 504: current_type = 'c';
  7377  000516  0E63               	movlw	99
  7378  000518  D025               	goto	L49
  7379  00051A                     i2l3885:
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;user.c: 505: timer1_counter_min = intervals[current_program].cold.minutes;
  7383  00051A  502E               	movf	_current_program,w,c
  7384  00051C  0D02               	mullw	2
  7385  00051E  0E01               	movlw	1
  7386  000520  26F3               	addwf	prodl,f,c
  7387  000522  0E00               	movlw	0
  7388  000524  22F4               	addwfc	prodh,f,c
  7389  000526  0E9C               	movlw	low _intervals
  7390  000528  24F3               	addwf	prodl,w,c
  7391  00052A  6ED9               	movwf	fsr2l,c
  7392  00052C  0E00               	movlw	high _intervals
  7393  00052E  20F4               	addwfc	prodh,w,c
  7394  000530  6EDA               	movwf	fsr2h,c
  7395  000532  50DF               	movf	indf2,w,c
  7396  000534  6E33               	movwf	_timer1_counter_min,c
  7397  000536  D018               	goto	i2l3905
  7398  000538                     i2l3889:
  7399                           
  7400                           ;user.c: 508: else if(state == 27 && timer1_counter_min == 0 && timer1_counter_10 == 0)
  7401  000538  0E1B               	movlw	27
  7402  00053A  180E               	xorwf	get_next_state@state,w,c
  7403  00053C  100F               	iorwf	get_next_state@state+1,w,c
  7404  00053E  A4D8               	btfss	status,2,c
  7405  000540  D024               	goto	i2l3909
  7406  000542  5033               	movf	_timer1_counter_min,w,c
  7407  000544  A4D8               	btfss	status,2,c
  7408  000546  D021               	goto	i2l3909
  7409  000548  0100               	movlb	0	; () banked
  7410  00054A  51D3               	movf	_timer1_counter_10& (0+255),w,b
  7411  00054C  A4D8               	btfss	status,2,c
  7412  00054E  D01D               	goto	i2l3909
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;user.c: 509: {
  7416                           ;user.c: 510: if(current_program <= max_program)
  7417  000550  502E               	movf	_current_program,w,c
  7418  000552  5C2F               	subwf	_max_program,w,c
  7419  000554  A0D8               	btfss	status,0,c
  7420  000556  D014               	goto	i2l3907
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;user.c: 511: {
  7424                           ;user.c: 512: next = 26;
  7425  000558  0E00               	movlw	0
  7426  00055A  6E2D               	movwf	_next+1,c
  7427  00055C  0E1A               	movlw	26
  7428  00055E  6E2C               	movwf	_next,c
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;user.c: 513: current_program +=1;
  7432  000560  2A2E               	incf	_current_program,f,c
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;user.c: 514: current_type = 'f';
  7436  000562  0E66               	movlw	102
  7437  000564                     L49:
  7438  000564  6E35               	movwf	_current_type,c
  7439  000566  D7D9               	goto	i2l3885
  7440  000568                     i2l3905:
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;user.c: 517: timer1_counter_10 = intervals[current_program].force.seconds;
  7444  000568  502E               	movf	_current_program,w,c
  7445  00056A  0D02               	mullw	2
  7446  00056C  0E9C               	movlw	low _intervals
  7447  00056E  24F3               	addwf	prodl,w,c
  7448  000570  6ED9               	movwf	fsr2l,c
  7449  000572  0E00               	movlw	high _intervals
  7450  000574  20F4               	addwfc	prodh,w,c
  7451  000576  6EDA               	movwf	fsr2h,c
  7452  000578  50DF               	movf	indf2,w,c
  7453  00057A  0100               	movlb	0	; () banked
  7454  00057C  6FD3               	movwf	_timer1_counter_10& (0+255),b
  7455                           
  7456                           ;user.c: 518: }
  7457  00057E  D117               	goto	i2l447
  7458  000580                     i2l3907:
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;user.c: 519: else
  7462                           ;user.c: 520: {
  7463                           ;user.c: 521: next = 28;
  7464  000580  0E00               	movlw	0
  7465  000582  6E2D               	movwf	_next+1,c
  7466  000584  0E1C               	movlw	28
  7467  000586                     L47:
  7468  000586  6E2C               	movwf	_next,c
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;user.c: 522: }
  7472                           ;user.c: 523: }
  7473  000588  D112               	goto	i2l447
  7474  00058A                     i2l3909:
  7475                           
  7476                           ;user.c: 524: else if((state == 29 || state == 30 || state == 31 || state == 32) && code
      +                           == 0xAEBA)
  7477  00058A  0E1D               	movlw	29
  7478  00058C  180E               	xorwf	get_next_state@state,w,c
  7479  00058E  100F               	iorwf	get_next_state@state+1,w,c
  7480  000590  B4D8               	btfsc	status,2,c
  7481  000592  D00F               	goto	i2l3917
  7482  000594  0E1E               	movlw	30
  7483  000596  180E               	xorwf	get_next_state@state,w,c
  7484  000598  100F               	iorwf	get_next_state@state+1,w,c
  7485  00059A  B4D8               	btfsc	status,2,c
  7486  00059C  D00A               	goto	i2l3917
  7487  00059E  0E1F               	movlw	31
  7488  0005A0  180E               	xorwf	get_next_state@state,w,c
  7489  0005A2  100F               	iorwf	get_next_state@state+1,w,c
  7490  0005A4  B4D8               	btfsc	status,2,c
  7491  0005A6  D005               	goto	i2l3917
  7492  0005A8  0E20               	movlw	32
  7493  0005AA  180E               	xorwf	get_next_state@state,w,c
  7494  0005AC  100F               	iorwf	get_next_state@state+1,w,c
  7495  0005AE  A4D8               	btfss	status,2,c
  7496  0005B0  D010               	goto	i2l3921
  7497  0005B2                     i2l3917:
  7498  0005B2  0EBA               	movlw	186
  7499  0005B4  1810               	xorwf	get_next_state@code,w,c
  7500  0005B6  E10D               	bnz	i2l3921
  7501  0005B8  0EAE               	movlw	174
  7502  0005BA  1811               	xorwf	get_next_state@code+1,w,c
  7503  0005BC  A4D8               	btfss	status,2,c
  7504  0005BE  D009               	goto	i2l3921
  7505                           
  7506                           ;user.c: 525: {
  7507                           ;user.c: 526: next = 33;
  7508  0005C0  0E00               	movlw	0
  7509  0005C2  6E2D               	movwf	_next+1,c
  7510  0005C4  0E21               	movlw	33
  7511  0005C6  6E2C               	movwf	_next,c
  7512                           
  7513                           ;user.c: 527: aux1[4] = 'V';
  7514  0005C8  0E56               	movlw	86
  7515  0005CA  0100               	movlb	0	; () banked
  7516  0005CC  6FD1               	movwf	(_aux1+4)& (0+255),b
  7517                           
  7518                           ;user.c: 528: aux1[5] = 'P';
  7519  0005CE  0E50               	movlw	80
  7520  0005D0  D0CF               	goto	L52
  7521  0005D2                     i2l3921:
  7522                           
  7523                           ;user.c: 532: else if((state == 29 || state == 30 || state == 31 || state == 32) && code
      +                           == 0xAABA)
  7524  0005D2  0E1D               	movlw	29
  7525  0005D4  180E               	xorwf	get_next_state@state,w,c
  7526  0005D6  100F               	iorwf	get_next_state@state+1,w,c
  7527  0005D8  B4D8               	btfsc	status,2,c
  7528  0005DA  D00F               	goto	i2l3929
  7529  0005DC  0E1E               	movlw	30
  7530  0005DE  180E               	xorwf	get_next_state@state,w,c
  7531  0005E0  100F               	iorwf	get_next_state@state+1,w,c
  7532  0005E2  B4D8               	btfsc	status,2,c
  7533  0005E4  D00A               	goto	i2l3929
  7534  0005E6  0E1F               	movlw	31
  7535  0005E8  180E               	xorwf	get_next_state@state,w,c
  7536  0005EA  100F               	iorwf	get_next_state@state+1,w,c
  7537  0005EC  B4D8               	btfsc	status,2,c
  7538  0005EE  D005               	goto	i2l3929
  7539  0005F0  0E20               	movlw	32
  7540  0005F2  180E               	xorwf	get_next_state@state,w,c
  7541  0005F4  100F               	iorwf	get_next_state@state+1,w,c
  7542  0005F6  A4D8               	btfss	status,2,c
  7543  0005F8  D0BE               	goto	i2l3963
  7544  0005FA                     i2l3929:
  7545  0005FA  0EBA               	movlw	186
  7546  0005FC  1810               	xorwf	get_next_state@code,w,c
  7547  0005FE  E103               	bnz	i2u443_41
  7548  000600  0EAA               	movlw	170
  7549  000602  1811               	xorwf	get_next_state@code+1,w,c
  7550  000604  A4D8               	btfss	status,2,c
  7551  000606                     i2u443_41:
  7552  000606  D0B7               	goto	i2l3963
  7553                           
  7554                           ;user.c: 533: {
  7555                           ;user.c: 535: next = 29;
  7556  000608  0E00               	movlw	0
  7557  00060A  6E2D               	movwf	_next+1,c
  7558  00060C  0E1D               	movlw	29
  7559  00060E  6E2C               	movwf	_next,c
  7560                           
  7561                           ;user.c: 536: if(current_type == 'f')
  7562  000610  0E66               	movlw	102
  7563  000612  1835               	xorwf	_current_type,w,c
  7564  000614  A4D8               	btfss	status,2,c
  7565  000616  D054               	goto	i2l3945
  7566                           
  7567                           ;user.c: 537: {
  7568                           ;user.c: 538: intervals[current_program].force.seconds = aux1[1]*10 + aux1[0];
  7569  000618  502E               	movf	_current_program,w,c
  7570  00061A  0D02               	mullw	2
  7571  00061C  0E9C               	movlw	low _intervals
  7572  00061E  24F3               	addwf	prodl,w,c
  7573  000620  6ED9               	movwf	fsr2l,c
  7574  000622  0E00               	movlw	high _intervals
  7575  000624  20F4               	addwfc	prodh,w,c
  7576  000626  6EDA               	movwf	fsr2h,c
  7577  000628  0100               	movlb	0	; () banked
  7578  00062A  51CE               	movf	(_aux1+1)& (0+255),w,b
  7579  00062C  0D0A               	mullw	10
  7580  00062E  50F3               	movf	prodl,w,c
  7581  000630  0100               	movlb	0	; () banked
  7582  000632  25CD               	addwf	_aux1& (0+255),w,b
  7583  000634  6EDF               	movwf	indf2,c
  7584                           
  7585                           ;user.c: 539: intervals[current_program].force.minutes = aux1[3]*10 + aux1[2];
  7586  000636  502E               	movf	_current_program,w,c
  7587  000638  0D02               	mullw	2
  7588  00063A  0E01               	movlw	1
  7589  00063C  26F3               	addwf	prodl,f,c
  7590  00063E  0E00               	movlw	0
  7591  000640  22F4               	addwfc	prodh,f,c
  7592  000642  0E9C               	movlw	low _intervals
  7593  000644  24F3               	addwf	prodl,w,c
  7594  000646  6ED9               	movwf	fsr2l,c
  7595  000648  0E00               	movlw	high _intervals
  7596  00064A  20F4               	addwfc	prodh,w,c
  7597  00064C  6EDA               	movwf	fsr2h,c
  7598  00064E  0100               	movlb	0	; () banked
  7599  000650  51D0               	movf	(_aux1+3)& (0+255),w,b
  7600  000652  0D0A               	mullw	10
  7601  000654  50F3               	movf	prodl,w,c
  7602  000656  0100               	movlb	0	; () banked
  7603  000658  25CF               	addwf	(_aux1+2)& (0+255),w,b
  7604  00065A  6EDF               	movwf	indf2,c
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;user.c: 541: current_type = 'c';
  7608  00065C  0E63               	movlw	99
  7609  00065E  6E35               	movwf	_current_type,c
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;user.c: 542: if(current_program +1 <10)
  7613  000660  502E               	movf	_current_program,w,c
  7614  000662  6E12               	movwf	??_get_next_state& (0+255),c
  7615  000664  6A13               	clrf	(??_get_next_state+1)& (0+255),c
  7616  000666  0E01               	movlw	1
  7617  000668  2612               	addwf	??_get_next_state,f,c
  7618  00066A  0E00               	movlw	0
  7619  00066C  2213               	addwfc	??_get_next_state+1,f,c
  7620  00066E  BE13               	btfsc	??_get_next_state+1,7,c
  7621  000670  D006               	goto	i2l3941
  7622  000672  5013               	movf	??_get_next_state+1,w,c
  7623  000674  E106               	bnz	i2l3943
  7624  000676  0E0A               	movlw	10
  7625  000678  5C12               	subwf	??_get_next_state,w,c
  7626  00067A  B0D8               	btfsc	status,0,c
  7627  00067C  D002               	goto	i2l3943
  7628  00067E                     i2l3941:
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;user.c: 543: aux1[5] = 'C';
  7632  00067E  0E43               	movlw	67
  7633  000680  D00D               	goto	L51
  7634  000682                     i2l3943:
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;user.c: 544: else
  7638                           ;user.c: 545: aux1[5] = (current_program + 1)/10;
  7639  000682  0E01               	movlw	1
  7640  000684  242E               	addwf	_current_program,w,c
  7641  000686  6E01               	movwf	i2___awdiv@dividend,c
  7642  000688  6A02               	clrf	i2___awdiv@dividend+1,c
  7643  00068A  0E00               	movlw	0
  7644  00068C  2202               	addwfc	i2___awdiv@dividend+1,f,c
  7645  00068E  0E00               	movlw	0
  7646  000690  6E04               	movwf	i2___awdiv@divisor+1,c
  7647  000692  0E0A               	movlw	10
  7648  000694  6E03               	movwf	i2___awdiv@divisor,c
  7649  000696  ECDB  F00C         	call	i2___awdiv	;wreg free
  7650  00069A  5001               	movf	?i2___awdiv,w,c
  7651  00069C                     L51:
  7652  00069C  0100               	movlb	0	; () banked
  7653  00069E  6FD2               	movwf	(_aux1+5)& (0+255),b
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;user.c: 547: aux1[4] = (current_program +1) % 10;
  7657  0006A0  0E01               	movlw	1
  7658  0006A2  242E               	addwf	_current_program,w,c
  7659  0006A4  6E01               	movwf	i2___awmod@dividend,c
  7660  0006A6  6A02               	clrf	i2___awmod@dividend+1,c
  7661  0006A8  0E00               	movlw	0
  7662  0006AA  2202               	addwfc	i2___awmod@dividend+1,f,c
  7663  0006AC  0E00               	movlw	0
  7664  0006AE  6E04               	movwf	i2___awmod@divisor+1,c
  7665  0006B0  0E0A               	movlw	10
  7666  0006B2  6E03               	movwf	i2___awmod@divisor,c
  7667  0006B4  EC5E  F00D         	call	i2___awmod	;wreg free
  7668  0006B8  5001               	movf	?i2___awmod,w,c
  7669  0006BA  0100               	movlb	0	; () banked
  7670  0006BC  6FD1               	movwf	(_aux1+4)& (0+255),b
  7671                           
  7672                           ;user.c: 548: }
  7673  0006BE  D077               	goto	i2l447
  7674  0006C0                     i2l3945:
  7675                           
  7676                           ;user.c: 549: else
  7677                           ;user.c: 550: {
  7678                           ;user.c: 552: intervals[current_program].cold.seconds = aux1[1]*10 + aux1[0];
  7679  0006C0  502E               	movf	_current_program,w,c
  7680  0006C2  0D02               	mullw	2
  7681  0006C4  0E9C               	movlw	low _intervals
  7682  0006C6  24F3               	addwf	prodl,w,c
  7683  0006C8  6ED9               	movwf	fsr2l,c
  7684  0006CA  0E00               	movlw	high _intervals
  7685  0006CC  20F4               	addwfc	prodh,w,c
  7686  0006CE  6EDA               	movwf	fsr2h,c
  7687  0006D0  0100               	movlb	0	; () banked
  7688  0006D2  51CE               	movf	(_aux1+1)& (0+255),w,b
  7689  0006D4  0D0A               	mullw	10
  7690  0006D6  50F3               	movf	prodl,w,c
  7691  0006D8  0100               	movlb	0	; () banked
  7692  0006DA  25CD               	addwf	_aux1& (0+255),w,b
  7693  0006DC  6EDF               	movwf	indf2,c
  7694                           
  7695                           ;user.c: 553: intervals[current_program].cold.minutes = aux1[3]*10 + aux1[2];
  7696  0006DE  502E               	movf	_current_program,w,c
  7697  0006E0  0D02               	mullw	2
  7698  0006E2  0E01               	movlw	1
  7699  0006E4  26F3               	addwf	prodl,f,c
  7700  0006E6  0E00               	movlw	0
  7701  0006E8  22F4               	addwfc	prodh,f,c
  7702  0006EA  0E9C               	movlw	low _intervals
  7703  0006EC  24F3               	addwf	prodl,w,c
  7704  0006EE  6ED9               	movwf	fsr2l,c
  7705  0006F0  0E00               	movlw	high _intervals
  7706  0006F2  20F4               	addwfc	prodh,w,c
  7707  0006F4  6EDA               	movwf	fsr2h,c
  7708  0006F6  0100               	movlb	0	; () banked
  7709  0006F8  51D0               	movf	(_aux1+3)& (0+255),w,b
  7710  0006FA  0D0A               	mullw	10
  7711  0006FC  50F3               	movf	prodl,w,c
  7712  0006FE  0100               	movlb	0	; () banked
  7713  000700  25CF               	addwf	(_aux1+2)& (0+255),w,b
  7714  000702  6EDF               	movwf	indf2,c
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;user.c: 556: if(current_program < 20)
  7718  000704  0E14               	movlw	20
  7719  000706  602E               	cpfslt	_current_program,c
  7720  000708  D002               	goto	i2l3951
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;user.c: 557: {
  7724                           ;user.c: 558: current_program +=1;
  7725  00070A  2A2E               	incf	_current_program,f,c
  7726                           
  7727                           ;user.c: 559: }
  7728  00070C  D002               	goto	i2l3953
  7729  00070E                     i2l3951:
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;user.c: 560: else
  7733                           ;user.c: 561: {
  7734                           ;user.c: 562: current_program = 0;
  7735  00070E  0E00               	movlw	0
  7736  000710  6E2E               	movwf	_current_program,c
  7737  000712                     i2l3953:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;user.c: 563: }
  7741                           ;user.c: 564: aux1[4] = (current_program +1) % 10;
  7742  000712  0E01               	movlw	1
  7743  000714  242E               	addwf	_current_program,w,c
  7744  000716  6E01               	movwf	i2___awmod@dividend,c
  7745  000718  6A02               	clrf	i2___awmod@dividend+1,c
  7746  00071A  0E00               	movlw	0
  7747  00071C  2202               	addwfc	i2___awmod@dividend+1,f,c
  7748  00071E  0E00               	movlw	0
  7749  000720  6E04               	movwf	i2___awmod@divisor+1,c
  7750  000722  0E0A               	movlw	10
  7751  000724  6E03               	movwf	i2___awmod@divisor,c
  7752  000726  EC5E  F00D         	call	i2___awmod	;wreg free
  7753  00072A  5001               	movf	?i2___awmod,w,c
  7754  00072C  0100               	movlb	0	; () banked
  7755  00072E  6FD1               	movwf	(_aux1+4)& (0+255),b
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;user.c: 566: current_type = 'f';
  7759  000730  0E66               	movlw	102
  7760  000732  6E35               	movwf	_current_type,c
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;user.c: 567: if(current_program +1 < 10)
  7764  000734  502E               	movf	_current_program,w,c
  7765  000736  6E12               	movwf	??_get_next_state& (0+255),c
  7766  000738  6A13               	clrf	(??_get_next_state+1)& (0+255),c
  7767  00073A  0E01               	movlw	1
  7768  00073C  2612               	addwf	??_get_next_state,f,c
  7769  00073E  0E00               	movlw	0
  7770  000740  2213               	addwfc	??_get_next_state+1,f,c
  7771  000742  BE13               	btfsc	??_get_next_state+1,7,c
  7772  000744  D006               	goto	i2l3959
  7773  000746  5013               	movf	??_get_next_state+1,w,c
  7774  000748  E106               	bnz	i2l3961
  7775  00074A  0E0A               	movlw	10
  7776  00074C  5C12               	subwf	??_get_next_state,w,c
  7777  00074E  B0D8               	btfsc	status,0,c
  7778  000750  D002               	goto	i2l3961
  7779  000752                     i2l3959:
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;user.c: 568: aux1[5] = 'F';
  7783  000752  0E46               	movlw	70
  7784  000754  D00D               	goto	L52
  7785  000756                     i2l3961:
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;user.c: 569: else
  7789                           ;user.c: 570: aux1[5] = (current_program +1)/10;
  7790  000756  0E01               	movlw	1
  7791  000758  242E               	addwf	_current_program,w,c
  7792  00075A  6E01               	movwf	i2___awdiv@dividend,c
  7793  00075C  6A02               	clrf	i2___awdiv@dividend+1,c
  7794  00075E  0E00               	movlw	0
  7795  000760  2202               	addwfc	i2___awdiv@dividend+1,f,c
  7796  000762  0E00               	movlw	0
  7797  000764  6E04               	movwf	i2___awdiv@divisor+1,c
  7798  000766  0E0A               	movlw	10
  7799  000768  6E03               	movwf	i2___awdiv@divisor,c
  7800  00076A  ECDB  F00C         	call	i2___awdiv	;wreg free
  7801  00076E  5001               	movf	?i2___awdiv,w,c
  7802  000770                     L52:
  7803  000770  0100               	movlb	0	; () banked
  7804  000772  6FD2               	movwf	(_aux1+5)& (0+255),b
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;user.c: 573: }
  7808                           ;user.c: 574: }
  7809                           
  7810                           ; BSR set to: 0
  7811  000774  D01C               	goto	i2l447
  7812  000776                     i2l3963:
  7813                           
  7814                           ;user.c: 575: else if((state == 33 || state == 34) && code == 0xAEBA)
  7815  000776  0E21               	movlw	33
  7816  000778  180E               	xorwf	get_next_state@state,w,c
  7817  00077A  100F               	iorwf	get_next_state@state+1,w,c
  7818  00077C  B4D8               	btfsc	status,2,c
  7819  00077E  D005               	goto	i2l3967
  7820  000780  0E22               	movlw	34
  7821  000782  180E               	xorwf	get_next_state@state,w,c
  7822  000784  100F               	iorwf	get_next_state@state+1,w,c
  7823  000786  A4D8               	btfss	status,2,c
  7824  000788  D012               	goto	i2l447
  7825  00078A                     i2l3967:
  7826  00078A  0EBA               	movlw	186
  7827  00078C  1810               	xorwf	get_next_state@code,w,c
  7828  00078E  E10F               	bnz	i2l447
  7829  000790  0EAE               	movlw	174
  7830  000792  1811               	xorwf	get_next_state@code+1,w,c
  7831  000794  A4D8               	btfss	status,2,c
  7832  000796  D00B               	goto	i2l447
  7833                           
  7834                           ;user.c: 576: {
  7835                           ;user.c: 577: next = 24;
  7836  000798  0E00               	movlw	0
  7837  00079A  6E2D               	movwf	_next+1,c
  7838  00079C  0E18               	movlw	24
  7839  00079E  6E2C               	movwf	_next,c
  7840                           
  7841                           ;user.c: 578: max_program = aux1[1]*10+ aux1[0];
  7842  0007A0  0100               	movlb	0	; () banked
  7843  0007A2  51CE               	movf	(_aux1+1)& (0+255),w,b
  7844  0007A4  0D0A               	mullw	10
  7845  0007A6  50F3               	movf	prodl,w,c
  7846  0007A8  0100               	movlb	0	; () banked
  7847  0007AA  25CD               	addwf	_aux1& (0+255),w,b
  7848  0007AC  6E2F               	movwf	_max_program,c
  7849  0007AE                     i2l447:
  7850                           
  7851                           ;user.c: 582: return next;
  7852  0007AE  C02C  F00E         	movff	_next,?_get_next_state
  7853  0007B2  C02D  F00F         	movff	_next+1,?_get_next_state+1
  7854  0007B6  0012               	return		;funcret
  7855  0007B8                     __end_of_get_next_state:
  7856                           	opt stack 0
  7857                           pclatu	equ	0xFFB
  7858                           pclath	equ	0xFFA
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           intcon2	equ	0xFF1
  7867                           postinc0	equ	0xFEE
  7868                           fsr0h	equ	0xFEA
  7869                           fsr0l	equ	0xFE9
  7870                           wreg	equ	0xFE8
  7871                           indf1	equ	0xFE7
  7872                           fsr1h	equ	0xFE2
  7873                           fsr1l	equ	0xFE1
  7874                           indf2	equ	0xFDF
  7875                           fsr2h	equ	0xFDA
  7876                           fsr2l	equ	0xFD9
  7877                           status	equ	0xFD8
  7878                           
  7879 ;; *************** function i2_timer1_enable *****************
  7880 ;; Defined at:
  7881 ;;		line 757 in file "user.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;		None
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;		None
  7886 ;; Return value:  Size  Location     Type
  7887 ;;                  1    wreg      void 
  7888 ;; Registers used:
  7889 ;;		status,2, status,0
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7895 ;;      Params:         0       0       0       0       0       0       0       0       0
  7896 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7897 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7898 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7899 ;;Total ram usage:        0 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; This function calls:
  7902 ;;		Nothing
  7903 ;; This function is called by:
  7904 ;;		_get_next_state
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text35
  7909  001FAE                     __ptext35:
  7910                           	opt stack 0
  7911  001FAE                     i2_timer1_enable:
  7912                           	opt stack 24
  7913                           
  7914                           ;user.c: 759: T1CON |= 1 << 0;
  7915                           
  7916                           ;incstack = 0
  7917  001FAE  80CD               	bsf	4045,0,c	;volatile
  7918  001FB0  0012               	return		;funcret
  7919  001FB2                     __end_ofi2_timer1_enable:
  7920                           	opt stack 0
  7921                           pclatu	equ	0xFFB
  7922                           pclath	equ	0xFFA
  7923                           tblptru	equ	0xFF8
  7924                           tblptrh	equ	0xFF7
  7925                           tblptrl	equ	0xFF6
  7926                           tablat	equ	0xFF5
  7927                           prodh	equ	0xFF4
  7928                           prodl	equ	0xFF3
  7929                           intcon	equ	0xFF2
  7930                           intcon2	equ	0xFF1
  7931                           postinc0	equ	0xFEE
  7932                           fsr0h	equ	0xFEA
  7933                           fsr0l	equ	0xFE9
  7934                           wreg	equ	0xFE8
  7935                           indf1	equ	0xFE7
  7936                           fsr1h	equ	0xFE2
  7937                           fsr1l	equ	0xFE1
  7938                           indf2	equ	0xFDF
  7939                           fsr2h	equ	0xFDA
  7940                           fsr2l	equ	0xFD9
  7941                           status	equ	0xFD8
  7942                           
  7943 ;; *************** function i2___awmod *****************
  7944 ;; Defined at:
  7945 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awmod.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  dividend        2    0[COMRAM] int 
  7948 ;;  divisor         2    2[COMRAM] int 
  7949 ;; Auto vars:     Size  Location     Type
  7950 ;;  __awmod         1    5[COMRAM] unsigned char 
  7951 ;;  __awmod         1    4[COMRAM] unsigned char 
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  2    0[COMRAM] int 
  7954 ;; Registers used:
  7955 ;;		wreg, status,2, status,0
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7961 ;;      Params:         4       0       0       0       0       0       0       0       0
  7962 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7964 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7965 ;;Total ram usage:        6 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; This function calls:
  7968 ;;		Nothing
  7969 ;; This function is called by:
  7970 ;;		_get_next_state
  7971 ;; This function uses a non-reentrant model
  7972 ;;
  7973                           
  7974                           	psect	text36
  7975  001ABC                     __ptext36:
  7976                           	opt stack 0
  7977  001ABC                     i2___awmod:
  7978                           	opt stack 24
  7979                           
  7980                           ;incstack = 0
  7981  001ABC  0E00               	movlw	0
  7982  001ABE  6E06               	movwf	i2___awmod@sign,c
  7983  001AC0  AE02               	btfss	i2___awmod@dividend+1,7,c
  7984  001AC2  D006               	goto	i2l3523
  7985  001AC4  6C01               	negf	i2___awmod@dividend,c
  7986  001AC6  1E02               	comf	i2___awmod@dividend+1,f,c
  7987  001AC8  B0D8               	btfsc	status,0,c
  7988  001ACA  2A02               	incf	i2___awmod@dividend+1,f,c
  7989  001ACC  0E01               	movlw	1
  7990  001ACE  6E06               	movwf	i2___awmod@sign,c
  7991  001AD0                     i2l3523:
  7992  001AD0  AE04               	btfss	i2___awmod@divisor+1,7,c
  7993  001AD2  D004               	goto	i2l3527
  7994  001AD4  6C03               	negf	i2___awmod@divisor,c
  7995  001AD6  1E04               	comf	i2___awmod@divisor+1,f,c
  7996  001AD8  B0D8               	btfsc	status,0,c
  7997  001ADA  2A04               	incf	i2___awmod@divisor+1,f,c
  7998  001ADC                     i2l3527:
  7999  001ADC  5003               	movf	i2___awmod@divisor,w,c
  8000  001ADE  1004               	iorwf	i2___awmod@divisor+1,w,c
  8001  001AE0  B4D8               	btfsc	status,2,c
  8002  001AE2  D018               	goto	i2l3543
  8003  001AE4  0E01               	movlw	1
  8004  001AE6  6E05               	movwf	i2___awmod@counter,c
  8005  001AE8  D004               	goto	i2l3533
  8006  001AEA                     i2l3531:
  8007  001AEA  90D8               	bcf	status,0,c
  8008  001AEC  3603               	rlcf	i2___awmod@divisor,f,c
  8009  001AEE  3604               	rlcf	i2___awmod@divisor+1,f,c
  8010  001AF0  2A05               	incf	i2___awmod@counter,f,c
  8011  001AF2                     i2l3533:
  8012  001AF2  AE04               	btfss	i2___awmod@divisor+1,7,c
  8013  001AF4  D7FA               	goto	i2l3531
  8014  001AF6                     i2l3535:
  8015  001AF6  5003               	movf	i2___awmod@divisor,w,c
  8016  001AF8  5C01               	subwf	i2___awmod@dividend,w,c
  8017  001AFA  5004               	movf	i2___awmod@divisor+1,w,c
  8018  001AFC  5802               	subwfb	i2___awmod@dividend+1,w,c
  8019  001AFE  A0D8               	btfss	status,0,c
  8020  001B00  D004               	goto	i2l3539
  8021  001B02  5003               	movf	i2___awmod@divisor,w,c
  8022  001B04  5E01               	subwf	i2___awmod@dividend,f,c
  8023  001B06  5004               	movf	i2___awmod@divisor+1,w,c
  8024  001B08  5A02               	subwfb	i2___awmod@dividend+1,f,c
  8025  001B0A                     i2l3539:
  8026  001B0A  90D8               	bcf	status,0,c
  8027  001B0C  3204               	rrcf	i2___awmod@divisor+1,f,c
  8028  001B0E  3203               	rrcf	i2___awmod@divisor,f,c
  8029  001B10  2E05               	decfsz	i2___awmod@counter,f,c
  8030  001B12  D7F1               	goto	i2l3535
  8031  001B14                     i2l3543:
  8032  001B14  5006               	movf	i2___awmod@sign,w,c
  8033  001B16  B4D8               	btfsc	status,2,c
  8034  001B18  D004               	goto	i2l3547
  8035  001B1A  6C01               	negf	i2___awmod@dividend,c
  8036  001B1C  1E02               	comf	i2___awmod@dividend+1,f,c
  8037  001B1E  B0D8               	btfsc	status,0,c
  8038  001B20  2A02               	incf	i2___awmod@dividend+1,f,c
  8039  001B22                     i2l3547:
  8040  001B22  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  8041  001B26  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  8042  001B2A  0012               	return	
  8043  001B2C                     __end_ofi2___awmod:
  8044                           	opt stack 0
  8045                           pclatu	equ	0xFFB
  8046                           pclath	equ	0xFFA
  8047                           tblptru	equ	0xFF8
  8048                           tblptrh	equ	0xFF7
  8049                           tblptrl	equ	0xFF6
  8050                           tablat	equ	0xFF5
  8051                           prodh	equ	0xFF4
  8052                           prodl	equ	0xFF3
  8053                           intcon	equ	0xFF2
  8054                           intcon2	equ	0xFF1
  8055                           postinc0	equ	0xFEE
  8056                           fsr0h	equ	0xFEA
  8057                           fsr0l	equ	0xFE9
  8058                           wreg	equ	0xFE8
  8059                           indf1	equ	0xFE7
  8060                           fsr1h	equ	0xFE2
  8061                           fsr1l	equ	0xFE1
  8062                           indf2	equ	0xFDF
  8063                           fsr2h	equ	0xFDA
  8064                           fsr2l	equ	0xFD9
  8065                           status	equ	0xFD8
  8066                           
  8067 ;; *************** function i2___awdiv *****************
  8068 ;; Defined at:
  8069 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awdiv.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;  dividend        2    0[COMRAM] int 
  8072 ;;  divisor         2    2[COMRAM] int 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;  __awdiv         2    6[COMRAM] int 
  8075 ;;  __awdiv         1    5[COMRAM] unsigned char 
  8076 ;;  __awdiv         1    4[COMRAM] unsigned char 
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  2    0[COMRAM] int 
  8079 ;; Registers used:
  8080 ;;		wreg, status,2, status,0
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8086 ;;      Params:         4       0       0       0       0       0       0       0       0
  8087 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8089 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8090 ;;Total ram usage:        8 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; This function calls:
  8093 ;;		Nothing
  8094 ;; This function is called by:
  8095 ;;		_get_next_state
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           	psect	text37
  8100  0019B6                     __ptext37:
  8101                           	opt stack 0
  8102  0019B6                     i2___awdiv:
  8103                           	opt stack 24
  8104                           
  8105                           ;incstack = 0
  8106  0019B6  0E00               	movlw	0
  8107  0019B8  6E06               	movwf	i2___awdiv@sign,c
  8108  0019BA  AE04               	btfss	i2___awdiv@divisor+1,7,c
  8109  0019BC  D006               	goto	i2l3479
  8110  0019BE  6C03               	negf	i2___awdiv@divisor,c
  8111  0019C0  1E04               	comf	i2___awdiv@divisor+1,f,c
  8112  0019C2  B0D8               	btfsc	status,0,c
  8113  0019C4  2A04               	incf	i2___awdiv@divisor+1,f,c
  8114  0019C6  0E01               	movlw	1
  8115  0019C8  6E06               	movwf	i2___awdiv@sign,c
  8116  0019CA                     i2l3479:
  8117  0019CA  AE02               	btfss	i2___awdiv@dividend+1,7,c
  8118  0019CC  D006               	goto	i2l3485
  8119  0019CE  6C01               	negf	i2___awdiv@dividend,c
  8120  0019D0  1E02               	comf	i2___awdiv@dividend+1,f,c
  8121  0019D2  B0D8               	btfsc	status,0,c
  8122  0019D4  2A02               	incf	i2___awdiv@dividend+1,f,c
  8123  0019D6  0E01               	movlw	1
  8124  0019D8  1A06               	xorwf	i2___awdiv@sign,f,c
  8125  0019DA                     i2l3485:
  8126  0019DA  0E00               	movlw	0
  8127  0019DC  6E08               	movwf	i2___awdiv@quotient+1,c
  8128  0019DE  0E00               	movlw	0
  8129  0019E0  6E07               	movwf	i2___awdiv@quotient,c
  8130  0019E2  5003               	movf	i2___awdiv@divisor,w,c
  8131  0019E4  1004               	iorwf	i2___awdiv@divisor+1,w,c
  8132  0019E6  B4D8               	btfsc	status,2,c
  8133  0019E8  D01C               	goto	i2l3507
  8134  0019EA  0E01               	movlw	1
  8135  0019EC  6E05               	movwf	i2___awdiv@counter,c
  8136  0019EE  D004               	goto	i2l3493
  8137  0019F0                     i2l3491:
  8138  0019F0  90D8               	bcf	status,0,c
  8139  0019F2  3603               	rlcf	i2___awdiv@divisor,f,c
  8140  0019F4  3604               	rlcf	i2___awdiv@divisor+1,f,c
  8141  0019F6  2A05               	incf	i2___awdiv@counter,f,c
  8142  0019F8                     i2l3493:
  8143  0019F8  AE04               	btfss	i2___awdiv@divisor+1,7,c
  8144  0019FA  D7FA               	goto	i2l3491
  8145  0019FC                     i2l3495:
  8146  0019FC  90D8               	bcf	status,0,c
  8147  0019FE  3607               	rlcf	i2___awdiv@quotient,f,c
  8148  001A00  3608               	rlcf	i2___awdiv@quotient+1,f,c
  8149  001A02  5003               	movf	i2___awdiv@divisor,w,c
  8150  001A04  5C01               	subwf	i2___awdiv@dividend,w,c
  8151  001A06  5004               	movf	i2___awdiv@divisor+1,w,c
  8152  001A08  5802               	subwfb	i2___awdiv@dividend+1,w,c
  8153  001A0A  A0D8               	btfss	status,0,c
  8154  001A0C  D005               	goto	i2l3503
  8155  001A0E  5003               	movf	i2___awdiv@divisor,w,c
  8156  001A10  5E01               	subwf	i2___awdiv@dividend,f,c
  8157  001A12  5004               	movf	i2___awdiv@divisor+1,w,c
  8158  001A14  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  8159  001A16  8007               	bsf	i2___awdiv@quotient,0,c
  8160  001A18                     i2l3503:
  8161  001A18  90D8               	bcf	status,0,c
  8162  001A1A  3204               	rrcf	i2___awdiv@divisor+1,f,c
  8163  001A1C  3203               	rrcf	i2___awdiv@divisor,f,c
  8164  001A1E  2E05               	decfsz	i2___awdiv@counter,f,c
  8165  001A20  D7ED               	goto	i2l3495
  8166  001A22                     i2l3507:
  8167  001A22  5006               	movf	i2___awdiv@sign,w,c
  8168  001A24  B4D8               	btfsc	status,2,c
  8169  001A26  D004               	goto	i2l3511
  8170  001A28  6C07               	negf	i2___awdiv@quotient,c
  8171  001A2A  1E08               	comf	i2___awdiv@quotient+1,f,c
  8172  001A2C  B0D8               	btfsc	status,0,c
  8173  001A2E  2A08               	incf	i2___awdiv@quotient+1,f,c
  8174  001A30                     i2l3511:
  8175  001A30  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  8176  001A34  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  8177  001A38  0012               	return	
  8178  001A3A                     __end_ofi2___awdiv:
  8179                           	opt stack 0
  8180                           pclatu	equ	0xFFB
  8181                           pclath	equ	0xFFA
  8182                           tblptru	equ	0xFF8
  8183                           tblptrh	equ	0xFF7
  8184                           tblptrl	equ	0xFF6
  8185                           tablat	equ	0xFF5
  8186                           prodh	equ	0xFF4
  8187                           prodl	equ	0xFF3
  8188                           intcon	equ	0xFF2
  8189                           intcon2	equ	0xFF1
  8190                           postinc0	equ	0xFEE
  8191                           fsr0h	equ	0xFEA
  8192                           fsr0l	equ	0xFE9
  8193                           wreg	equ	0xFE8
  8194                           indf1	equ	0xFE7
  8195                           fsr1h	equ	0xFE2
  8196                           fsr1l	equ	0xFE1
  8197                           indf2	equ	0xFDF
  8198                           fsr2h	equ	0xFDA
  8199                           fsr2l	equ	0xFD9
  8200                           status	equ	0xFD8
  8201                           
  8202 ;; *************** function _set_time *****************
  8203 ;; Defined at:
  8204 ;;		line 237 in file "user.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;  seconds         1    wreg     unsigned char 
  8207 ;;  minutes         1    7[COMRAM] unsigned char 
  8208 ;;  hour            1    8[COMRAM] unsigned char 
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;  seconds         1    9[COMRAM] unsigned char 
  8211 ;;  hour_reg        1   12[COMRAM] unsigned char 
  8212 ;;  min_reg         1   11[COMRAM] unsigned char 
  8213 ;;  sec_reg         1   10[COMRAM] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  1    wreg      void 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8223 ;;      Params:         2       0       0       0       0       0       0       0       0
  8224 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8225 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8226 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8227 ;;Total ram usage:        6 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    3
  8230 ;; This function calls:
  8231 ;;		_byte_write
  8232 ;;		_get_hour_reg
  8233 ;;		i2_get_seconds_reg
  8234 ;; This function is called by:
  8235 ;;		_get_next_state
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           	psect	text38
  8240  001E94                     __ptext38:
  8241                           	opt stack 0
  8242  001E94                     _set_time:
  8243                           	opt stack 21
  8244                           
  8245                           ;incstack = 0
  8246                           ;set_time@seconds stored from wreg
  8247  001E94  6E0A               	movwf	set_time@seconds,c
  8248                           
  8249                           ;user.c: 240: char sec_reg = get_seconds_reg(seconds);
  8250  001E96  500A               	movf	set_time@seconds,w,c
  8251  001E98  ECAE  F00E         	call	i2_get_seconds_reg
  8252  001E9C  6E0B               	movwf	set_time@sec_reg,c
  8253                           
  8254                           ;user.c: 241: char min_reg = get_seconds_reg(minutes);
  8255  001E9E  5008               	movf	set_time@minutes,w,c
  8256  001EA0  ECAE  F00E         	call	i2_get_seconds_reg
  8257  001EA4  6E0C               	movwf	set_time@min_reg,c
  8258                           
  8259                           ;user.c: 242: char hour_reg = get_hour_reg(hour);
  8260  001EA6  5009               	movf	set_time@hour,w,c
  8261  001EA8  EC82  F00F         	call	_get_hour_reg
  8262  001EAC  6E0D               	movwf	set_time@hour_reg,c
  8263                           
  8264                           ;user.c: 244: byte_write(0x80,sec_reg);
  8265  001EAE  C00B  F006         	movff	set_time@sec_reg,byte_write@value
  8266  001EB2  0E80               	movlw	128
  8267  001EB4  ECAB  F00F         	call	_byte_write
  8268                           
  8269                           ;user.c: 245: byte_write(0x82,min_reg);
  8270  001EB8  C00C  F006         	movff	set_time@min_reg,byte_write@value
  8271  001EBC  0E82               	movlw	130
  8272  001EBE  ECAB  F00F         	call	_byte_write
  8273                           
  8274                           ;user.c: 246: byte_write(0x84,hour_reg);
  8275  001EC2  C00D  F006         	movff	set_time@hour_reg,byte_write@value
  8276  001EC6  0E84               	movlw	132
  8277  001EC8  ECAB  F00F         	call	_byte_write
  8278  001ECC  0012               	return		;funcret
  8279  001ECE                     __end_of_set_time:
  8280                           	opt stack 0
  8281                           pclatu	equ	0xFFB
  8282                           pclath	equ	0xFFA
  8283                           tblptru	equ	0xFF8
  8284                           tblptrh	equ	0xFF7
  8285                           tblptrl	equ	0xFF6
  8286                           tablat	equ	0xFF5
  8287                           prodh	equ	0xFF4
  8288                           prodl	equ	0xFF3
  8289                           intcon	equ	0xFF2
  8290                           intcon2	equ	0xFF1
  8291                           postinc0	equ	0xFEE
  8292                           fsr0h	equ	0xFEA
  8293                           fsr0l	equ	0xFE9
  8294                           wreg	equ	0xFE8
  8295                           indf1	equ	0xFE7
  8296                           fsr1h	equ	0xFE2
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           fsr2h	equ	0xFDA
  8300                           fsr2l	equ	0xFD9
  8301                           status	equ	0xFD8
  8302                           
  8303 ;; *************** function i2_get_seconds_reg *****************
  8304 ;; Defined at:
  8305 ;;		line 298 in file "user.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;  seconds         1    wreg     unsigned char 
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;  seconds         1    1[COMRAM] unsigned char 
  8310 ;;  get_seconds_    1    0[COMRAM] unsigned char 
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  1    wreg      unsigned char 
  8313 ;; Registers used:
  8314 ;;		wreg, status,2, status,0
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8320 ;;      Params:         0       0       0       0       0       0       0       0       0
  8321 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8322 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8323 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8324 ;;Total ram usage:        2 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; This function calls:
  8327 ;;		Nothing
  8328 ;; This function is called by:
  8329 ;;		_set_time
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           	psect	text39
  8334  001D5C                     __ptext39:
  8335                           	opt stack 0
  8336  001D5C                     i2_get_seconds_reg:
  8337                           	opt stack 23
  8338                           
  8339                           ;incstack = 0
  8340                           ;i2get_seconds_reg@seconds stored from wreg
  8341  001D5C  6E02               	movwf	i2get_seconds_reg@seconds,c
  8342                           
  8343                           ;user.c: 300: char res = 0;
  8344  001D5E  0E00               	movlw	0
  8345  001D60  6E01               	movwf	i2get_seconds_reg@res,c
  8346                           
  8347                           ;user.c: 301: if(seconds<10)
  8348  001D62  0E0A               	movlw	10
  8349  001D64  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8350  001D66  D003               	goto	i2l3263
  8351                           
  8352                           ;user.c: 302: {
  8353                           ;user.c: 303: res = seconds;
  8354  001D68  C002  F001         	movff	i2get_seconds_reg@seconds,i2get_seconds_reg@res
  8355                           
  8356                           ;user.c: 304: }
  8357  001D6C  D020               	goto	i2l3281
  8358  001D6E                     i2l3263:
  8359                           
  8360                           ;user.c: 305: else if(seconds <20)
  8361  001D6E  0E14               	movlw	20
  8362  001D70  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8363  001D72  D004               	goto	i2l3267
  8364                           
  8365                           ;user.c: 306: {
  8366                           ;user.c: 307: res = 1<<4 | (seconds - 10);
  8367  001D74  5002               	movf	i2get_seconds_reg@seconds,w,c
  8368  001D76  0FF6               	addlw	246
  8369  001D78  0910               	iorlw	16
  8370  001D7A  D018               	goto	L56
  8371  001D7C                     i2l3267:
  8372                           
  8373                           ;user.c: 309: else if(seconds <30)
  8374  001D7C  0E1E               	movlw	30
  8375  001D7E  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8376  001D80  D004               	goto	i2l3271
  8377                           
  8378                           ;user.c: 310: {
  8379                           ;user.c: 311: res = 2<<4 | (seconds -20);
  8380  001D82  5002               	movf	i2get_seconds_reg@seconds,w,c
  8381  001D84  0FEC               	addlw	236
  8382  001D86  0920               	iorlw	32
  8383  001D88  D011               	goto	L56
  8384  001D8A                     i2l3271:
  8385                           
  8386                           ;user.c: 313: else if(seconds <40)
  8387  001D8A  0E28               	movlw	40
  8388  001D8C  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8389  001D8E  D004               	goto	i2l3275
  8390                           
  8391                           ;user.c: 314: {
  8392                           ;user.c: 315: res = 3<<4 | (seconds - 30);
  8393  001D90  5002               	movf	i2get_seconds_reg@seconds,w,c
  8394  001D92  0FE2               	addlw	226
  8395  001D94  0930               	iorlw	48
  8396  001D96  D00A               	goto	L56
  8397  001D98                     i2l3275:
  8398                           
  8399                           ;user.c: 317: else if(seconds <50)
  8400  001D98  0E32               	movlw	50
  8401  001D9A  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8402  001D9C  D004               	goto	i2l3279
  8403                           
  8404                           ;user.c: 318: {
  8405                           ;user.c: 319: res = 4<<4 | (seconds - 40);
  8406  001D9E  5002               	movf	i2get_seconds_reg@seconds,w,c
  8407  001DA0  0FD8               	addlw	216
  8408  001DA2  0940               	iorlw	64
  8409  001DA4  D003               	goto	L56
  8410  001DA6                     i2l3279:
  8411                           
  8412                           ;user.c: 321: else
  8413                           ;user.c: 322: {
  8414                           ;user.c: 323: res = 5<<4 | (seconds -50);
  8415  001DA6  5002               	movf	i2get_seconds_reg@seconds,w,c
  8416  001DA8  0FCE               	addlw	206
  8417  001DAA  0950               	iorlw	80
  8418  001DAC                     L56:
  8419  001DAC  6E01               	movwf	i2get_seconds_reg@res,c
  8420  001DAE                     i2l3281:
  8421                           
  8422                           ;user.c: 324: }
  8423                           ;user.c: 326: return res;
  8424  001DAE  5001               	movf	i2get_seconds_reg@res,w,c
  8425  001DB0  0012               	return	
  8426  001DB2                     __end_ofi2_get_seconds_reg:
  8427                           	opt stack 0
  8428                           pclatu	equ	0xFFB
  8429                           pclath	equ	0xFFA
  8430                           tblptru	equ	0xFF8
  8431                           tblptrh	equ	0xFF7
  8432                           tblptrl	equ	0xFF6
  8433                           tablat	equ	0xFF5
  8434                           prodh	equ	0xFF4
  8435                           prodl	equ	0xFF3
  8436                           intcon	equ	0xFF2
  8437                           intcon2	equ	0xFF1
  8438                           postinc0	equ	0xFEE
  8439                           fsr0h	equ	0xFEA
  8440                           fsr0l	equ	0xFE9
  8441                           wreg	equ	0xFE8
  8442                           indf1	equ	0xFE7
  8443                           fsr1h	equ	0xFE2
  8444                           fsr1l	equ	0xFE1
  8445                           indf2	equ	0xFDF
  8446                           fsr2h	equ	0xFDA
  8447                           fsr2l	equ	0xFD9
  8448                           status	equ	0xFD8
  8449                           
  8450 ;; *************** function _get_hour_reg *****************
  8451 ;; Defined at:
  8452 ;;		line 337 in file "user.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;  hour            1    wreg     unsigned char 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  hour            1    1[COMRAM] unsigned char 
  8457 ;;  res             1    0[COMRAM] unsigned char 
  8458 ;; Return value:  Size  Location     Type
  8459 ;;                  1    wreg      unsigned char 
  8460 ;; Registers used:
  8461 ;;		wreg, status,2, status,0
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8467 ;;      Params:         0       0       0       0       0       0       0       0       0
  8468 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8469 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8470 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8471 ;;Total ram usage:        2 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; This function calls:
  8474 ;;		Nothing
  8475 ;; This function is called by:
  8476 ;;		_set_time
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text40
  8481  001F04                     __ptext40:
  8482                           	opt stack 0
  8483  001F04                     _get_hour_reg:
  8484                           	opt stack 23
  8485                           
  8486                           ;incstack = 0
  8487                           ;get_hour_reg@hour stored from wreg
  8488  001F04  6E02               	movwf	get_hour_reg@hour,c
  8489                           
  8490                           ;user.c: 339: char res = 0;
  8491  001F06  0E00               	movlw	0
  8492  001F08  6E01               	movwf	get_hour_reg@res,c
  8493                           
  8494                           ;user.c: 340: if(hour < 10)
  8495  001F0A  0E0A               	movlw	10
  8496  001F0C  6002               	cpfslt	get_hour_reg@hour,c
  8497  001F0E  D003               	goto	i2l3167
  8498                           
  8499                           ;user.c: 341: {
  8500                           ;user.c: 342: res = hour;
  8501  001F10  C002  F001         	movff	get_hour_reg@hour,get_hour_reg@res
  8502                           
  8503                           ;user.c: 343: }
  8504  001F14  D00B               	goto	i2l3173
  8505  001F16                     i2l3167:
  8506                           
  8507                           ;user.c: 344: else if(hour < 20)
  8508  001F16  0E14               	movlw	20
  8509  001F18  6002               	cpfslt	get_hour_reg@hour,c
  8510  001F1A  D004               	goto	i2l3171
  8511                           
  8512                           ;user.c: 345: {
  8513                           ;user.c: 346: res = 1<<4 | (hour -10);
  8514  001F1C  5002               	movf	get_hour_reg@hour,w,c
  8515  001F1E  0FF6               	addlw	246
  8516  001F20  0910               	iorlw	16
  8517  001F22  D003               	goto	L57
  8518  001F24                     i2l3171:
  8519                           
  8520                           ;user.c: 348: else
  8521                           ;user.c: 349: {
  8522                           ;user.c: 350: res = 2<<4 | (hour-20);
  8523  001F24  5002               	movf	get_hour_reg@hour,w,c
  8524  001F26  0FEC               	addlw	236
  8525  001F28  0920               	iorlw	32
  8526  001F2A                     L57:
  8527  001F2A  6E01               	movwf	get_hour_reg@res,c
  8528  001F2C                     i2l3173:
  8529                           
  8530                           ;user.c: 351: }
  8531                           ;user.c: 353: return res;
  8532  001F2C  5001               	movf	get_hour_reg@res,w,c
  8533  001F2E  0012               	return	
  8534  001F30                     __end_of_get_hour_reg:
  8535                           	opt stack 0
  8536                           pclatu	equ	0xFFB
  8537                           pclath	equ	0xFFA
  8538                           tblptru	equ	0xFF8
  8539                           tblptrh	equ	0xFF7
  8540                           tblptrl	equ	0xFF6
  8541                           tablat	equ	0xFF5
  8542                           prodh	equ	0xFF4
  8543                           prodl	equ	0xFF3
  8544                           intcon	equ	0xFF2
  8545                           intcon2	equ	0xFF1
  8546                           postinc0	equ	0xFEE
  8547                           fsr0h	equ	0xFEA
  8548                           fsr0l	equ	0xFE9
  8549                           wreg	equ	0xFE8
  8550                           indf1	equ	0xFE7
  8551                           fsr1h	equ	0xFE2
  8552                           fsr1l	equ	0xFE1
  8553                           indf2	equ	0xFDF
  8554                           fsr2h	equ	0xFDA
  8555                           fsr2l	equ	0xFD9
  8556                           status	equ	0xFD8
  8557                           
  8558 ;; *************** function _byte_write *****************
  8559 ;; Defined at:
  8560 ;;		line 225 in file "user.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;  address         1    wreg     unsigned char 
  8563 ;;  value           1    5[COMRAM] unsigned char 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  address         1    6[COMRAM] unsigned char 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      void 
  8568 ;; Registers used:
  8569 ;;		wreg, status,2, status,0, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8575 ;;      Params:         1       0       0       0       0       0       0       0       0
  8576 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8578 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8579 ;;Total ram usage:        2 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    2
  8582 ;; This function calls:
  8583 ;;		i2_ce_disable
  8584 ;;		i2_ce_enable
  8585 ;;		i2_send_command
  8586 ;; This function is called by:
  8587 ;;		_set_time
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           	psect	text41
  8592  001F56                     __ptext41:
  8593                           	opt stack 0
  8594  001F56                     _byte_write:
  8595                           	opt stack 21
  8596                           
  8597                           ;incstack = 0
  8598                           ;byte_write@address stored from wreg
  8599  001F56  6E07               	movwf	byte_write@address,c
  8600                           
  8601                           ;user.c: 227: ce_enable();
  8602  001F58  ECDB  F00F         	call	i2_ce_enable	;wreg free
  8603                           
  8604                           ;user.c: 230: send_command(address);
  8605  001F5C  5007               	movf	byte_write@address,w,c
  8606  001F5E  ECFF  F00D         	call	i2_send_command
  8607                           
  8608                           ;user.c: 231: send_command(value);
  8609  001F62  5006               	movf	byte_write@value,w,c
  8610  001F64  ECFF  F00D         	call	i2_send_command
  8611                           
  8612                           ;user.c: 233: ce_disable();
  8613  001F68  ECC6  F00F         	call	i2_ce_disable	;wreg free
  8614  001F6C  0012               	return		;funcret
  8615  001F6E                     __end_of_byte_write:
  8616                           	opt stack 0
  8617                           pclatu	equ	0xFFB
  8618                           pclath	equ	0xFFA
  8619                           tblptru	equ	0xFF8
  8620                           tblptrh	equ	0xFF7
  8621                           tblptrl	equ	0xFF6
  8622                           tablat	equ	0xFF5
  8623                           prodh	equ	0xFF4
  8624                           prodl	equ	0xFF3
  8625                           intcon	equ	0xFF2
  8626                           intcon2	equ	0xFF1
  8627                           postinc0	equ	0xFEE
  8628                           fsr0h	equ	0xFEA
  8629                           fsr0l	equ	0xFE9
  8630                           wreg	equ	0xFE8
  8631                           indf1	equ	0xFE7
  8632                           fsr1h	equ	0xFE2
  8633                           fsr1l	equ	0xFE1
  8634                           indf2	equ	0xFDF
  8635                           fsr2h	equ	0xFDA
  8636                           fsr2l	equ	0xFD9
  8637                           status	equ	0xFD8
  8638                           
  8639 ;; *************** function i2_send_command *****************
  8640 ;; Defined at:
  8641 ;;		line 358 in file "user.c"
  8642 ;; Parameters:    Size  Location     Type
  8643 ;;  command         1    wreg     unsigned char 
  8644 ;; Auto vars:     Size  Location     Type
  8645 ;;  command         1    2[COMRAM] unsigned char 
  8646 ;;  send_command    2    3[COMRAM] int 
  8647 ;; Return value:  Size  Location     Type
  8648 ;;                  1    wreg      void 
  8649 ;; Registers used:
  8650 ;;		wreg, status,2, status,0, cstack
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8656 ;;      Params:         0       0       0       0       0       0       0       0       0
  8657 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8658 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8659 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8660 ;;Total ram usage:        5 bytes
  8661 ;; Hardware stack levels used:    1
  8662 ;; Hardware stack levels required when called:    1
  8663 ;; This function calls:
  8664 ;;		i2_io_as_output
  8665 ;; This function is called by:
  8666 ;;		_byte_write
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	text42
  8671  001BFE                     __ptext42:
  8672                           	opt stack 0
  8673  001BFE                     i2_send_command:
  8674                           	opt stack 21
  8675                           
  8676                           ;incstack = 0
  8677                           ;i2send_command@command stored from wreg
  8678  001BFE  6E03               	movwf	i2send_command@command,c
  8679                           
  8680                           ;user.c: 360: int i;
  8681                           ;user.c: 361: io_as_output();
  8682  001C00  ECD9  F00F         	call	i2_io_as_output	;wreg free
  8683                           
  8684                           ;user.c: 362: for(i=0; i<8; i++)
  8685  001C04  0E00               	movlw	0
  8686  001C06  6E05               	movwf	i2send_command@i+1,c
  8687  001C08  0E00               	movlw	0
  8688  001C0A  6E04               	movwf	i2send_command@i,c
  8689  001C0C                     i2l3109:
  8690  001C0C  BE05               	btfsc	i2send_command@i+1,7,c
  8691  001C0E  D006               	goto	i2l3113
  8692  001C10  5005               	movf	i2send_command@i+1,w,c
  8693  001C12  E121               	bnz	i2l437
  8694  001C14  0E08               	movlw	8
  8695  001C16  5C04               	subwf	i2send_command@i,w,c
  8696  001C18  B0D8               	btfsc	status,0,c
  8697  001C1A  0012               	return	
  8698  001C1C                     i2l3113:
  8699                           
  8700                           ;user.c: 363: {
  8701                           ;user.c: 364: RA3 = command>>i & 0x01;
  8702  001C1C  C004  F001         	movff	i2send_command@i,??i2_send_command
  8703  001C20  C003  F002         	movff	i2send_command@command,??i2_send_command+1
  8704  001C24  2A01               	incf	??i2_send_command,f,c
  8705  001C26  D002               	goto	i2u286_44
  8706  001C28                     i2u286_45:
  8707  001C28  90D8               	bcf	status,0,c
  8708  001C2A  3202               	rrcf	??i2_send_command+1,f,c
  8709  001C2C                     i2u286_44:
  8710  001C2C  2E01               	decfsz	??i2_send_command,f,c
  8711  001C2E  D7FC               	goto	i2u286_45
  8712  001C30  3002               	rrcf	??i2_send_command+1,w,c
  8713  001C32  A0D8               	btfss	status,0,c
  8714  001C34  D002               	goto	i2u287_40
  8715  001C36  8680               	bsf	3968,3,c	;volatile
  8716  001C38  D001               	goto	i2l3115
  8717  001C3A                     i2u287_40:
  8718  001C3A  9680               	bcf	3968,3,c	;volatile
  8719  001C3C                     i2l3115:
  8720                           
  8721                           ;user.c: 365: RA2 = 1;
  8722  001C3C  8480               	bsf	3968,2,c	;volatile
  8723                           
  8724                           ;user.c: 366: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  8725  001C3E  0E10               	movlw	16
  8726  001C40                     i2u660_47:
  8727  001C40  2EE8               	decfsz	wreg,f,c
  8728  001C42  D7FE               	bra	i2u660_47
  8729  001C44  D000               	nop2	
  8730                           
  8731                           ;user.c: 367: RA2 = 0;
  8732  001C46  9480               	bcf	3968,2,c	;volatile
  8733                           
  8734                           ;user.c: 368: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  8735  001C48  0E06               	movlw	6
  8736  001C4A                     i2u661_47:
  8737  001C4A  2EE8               	decfsz	wreg,f,c
  8738  001C4C  D7FE               	bra	i2u661_47
  8739  001C4E  D000               	nop2	
  8740  001C50  4A04               	infsnz	i2send_command@i,f,c
  8741  001C52  2A05               	incf	i2send_command@i+1,f,c
  8742  001C54  D7DB               	goto	i2l3109
  8743  001C56                     i2l437:
  8744  001C56  0012               	return		;funcret
  8745  001C58                     __end_ofi2_send_command:
  8746                           	opt stack 0
  8747                           pclatu	equ	0xFFB
  8748                           pclath	equ	0xFFA
  8749                           tblptru	equ	0xFF8
  8750                           tblptrh	equ	0xFF7
  8751                           tblptrl	equ	0xFF6
  8752                           tablat	equ	0xFF5
  8753                           prodh	equ	0xFF4
  8754                           prodl	equ	0xFF3
  8755                           intcon	equ	0xFF2
  8756                           intcon2	equ	0xFF1
  8757                           postinc0	equ	0xFEE
  8758                           fsr0h	equ	0xFEA
  8759                           fsr0l	equ	0xFE9
  8760                           wreg	equ	0xFE8
  8761                           indf1	equ	0xFE7
  8762                           fsr1h	equ	0xFE2
  8763                           fsr1l	equ	0xFE1
  8764                           indf2	equ	0xFDF
  8765                           fsr2h	equ	0xFDA
  8766                           fsr2l	equ	0xFD9
  8767                           status	equ	0xFD8
  8768                           
  8769 ;; *************** function i2_io_as_output *****************
  8770 ;; Defined at:
  8771 ;;		line 380 in file "user.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;		None
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;		None
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      void 
  8778 ;; Registers used:
  8779 ;;		None
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8785 ;;      Params:         0       0       0       0       0       0       0       0       0
  8786 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8788 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8789 ;;Total ram usage:        0 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; This function calls:
  8792 ;;		Nothing
  8793 ;; This function is called by:
  8794 ;;		i2_send_command
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           	psect	text43
  8799  001FB2                     __ptext43:
  8800                           	opt stack 0
  8801  001FB2                     i2_io_as_output:
  8802                           	opt stack 21
  8803                           
  8804                           ;user.c: 382: TRISA3 = 0;
  8805                           
  8806                           ;incstack = 0
  8807  001FB2  9692               	bcf	3986,3,c	;volatile
  8808  001FB4  0012               	return		;funcret
  8809  001FB6                     __end_ofi2_io_as_output:
  8810                           	opt stack 0
  8811                           pclatu	equ	0xFFB
  8812                           pclath	equ	0xFFA
  8813                           tblptru	equ	0xFF8
  8814                           tblptrh	equ	0xFF7
  8815                           tblptrl	equ	0xFF6
  8816                           tablat	equ	0xFF5
  8817                           prodh	equ	0xFF4
  8818                           prodl	equ	0xFF3
  8819                           intcon	equ	0xFF2
  8820                           intcon2	equ	0xFF1
  8821                           postinc0	equ	0xFEE
  8822                           fsr0h	equ	0xFEA
  8823                           fsr0l	equ	0xFE9
  8824                           wreg	equ	0xFE8
  8825                           indf1	equ	0xFE7
  8826                           fsr1h	equ	0xFE2
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           fsr2h	equ	0xFDA
  8830                           fsr2l	equ	0xFD9
  8831                           status	equ	0xFD8
  8832                           
  8833 ;; *************** function i2_ce_enable *****************
  8834 ;; Defined at:
  8835 ;;		line 184 in file "user.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;		None
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;		None
  8840 ;; Return value:  Size  Location     Type
  8841 ;;                  1    wreg      void 
  8842 ;; Registers used:
  8843 ;;		None
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8849 ;;      Params:         0       0       0       0       0       0       0       0       0
  8850 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8851 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8852 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8853 ;;Total ram usage:        0 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; This function calls:
  8856 ;;		Nothing
  8857 ;; This function is called by:
  8858 ;;		_byte_write
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           	psect	text44
  8863  001FB6                     __ptext44:
  8864                           	opt stack 0
  8865  001FB6                     i2_ce_enable:
  8866                           	opt stack 22
  8867                           
  8868                           ;user.c: 187: RA5 = 1;
  8869                           
  8870                           ;incstack = 0
  8871  001FB6  8A80               	bsf	3968,5,c	;volatile
  8872  001FB8  0012               	return		;funcret
  8873  001FBA                     __end_ofi2_ce_enable:
  8874                           	opt stack 0
  8875                           pclatu	equ	0xFFB
  8876                           pclath	equ	0xFFA
  8877                           tblptru	equ	0xFF8
  8878                           tblptrh	equ	0xFF7
  8879                           tblptrl	equ	0xFF6
  8880                           tablat	equ	0xFF5
  8881                           prodh	equ	0xFF4
  8882                           prodl	equ	0xFF3
  8883                           intcon	equ	0xFF2
  8884                           intcon2	equ	0xFF1
  8885                           postinc0	equ	0xFEE
  8886                           fsr0h	equ	0xFEA
  8887                           fsr0l	equ	0xFE9
  8888                           wreg	equ	0xFE8
  8889                           indf1	equ	0xFE7
  8890                           fsr1h	equ	0xFE2
  8891                           fsr1l	equ	0xFE1
  8892                           indf2	equ	0xFDF
  8893                           fsr2h	equ	0xFDA
  8894                           fsr2l	equ	0xFD9
  8895                           status	equ	0xFD8
  8896                           
  8897 ;; *************** function i2_ce_disable *****************
  8898 ;; Defined at:
  8899 ;;		line 191 in file "user.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;		None
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;		None
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  1    wreg      void 
  8906 ;; Registers used:
  8907 ;;		None
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8913 ;;      Params:         0       0       0       0       0       0       0       0       0
  8914 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8916 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8917 ;;Total ram usage:        0 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; This function calls:
  8920 ;;		Nothing
  8921 ;; This function is called by:
  8922 ;;		_byte_write
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           	psect	text45
  8927  001F8C                     __ptext45:
  8928                           	opt stack 0
  8929  001F8C                     i2_ce_disable:
  8930                           	opt stack 22
  8931                           
  8932                           ;user.c: 193: RA5 = 0;
  8933                           
  8934                           ;incstack = 0
  8935  001F8C  9A80               	bcf	3968,5,c	;volatile
  8936                           
  8937                           ;user.c: 194: RA2 = 0;
  8938  001F8E  9480               	bcf	3968,2,c	;volatile
  8939  001F90  0012               	return		;funcret
  8940  001F92                     __end_ofi2_ce_disable:
  8941                           	opt stack 0
  8942  0000                     pclatu	equ	0xFFB
  8943                           pclath	equ	0xFFA
  8944                           tblptru	equ	0xFF8
  8945                           tblptrh	equ	0xFF7
  8946                           tblptrl	equ	0xFF6
  8947                           tablat	equ	0xFF5
  8948                           prodh	equ	0xFF4
  8949                           prodl	equ	0xFF3
  8950                           intcon	equ	0xFF2
  8951                           intcon2	equ	0xFF1
  8952                           postinc0	equ	0xFEE
  8953                           fsr0h	equ	0xFEA
  8954                           fsr0l	equ	0xFE9
  8955                           wreg	equ	0xFE8
  8956                           indf1	equ	0xFE7
  8957                           fsr1h	equ	0xFE2
  8958                           fsr1l	equ	0xFE1
  8959                           indf2	equ	0xFDF
  8960                           fsr2h	equ	0xFDA
  8961                           fsr2l	equ	0xFD9
  8962                           status	equ	0xFD8
  8963                           pclatu	equ	0xFFB
  8964                           pclath	equ	0xFFA
  8965                           tblptru	equ	0xFF8
  8966                           tblptrh	equ	0xFF7
  8967                           tblptrl	equ	0xFF6
  8968                           tablat	equ	0xFF5
  8969                           prodh	equ	0xFF4
  8970                           prodl	equ	0xFF3
  8971                           intcon	equ	0xFF2
  8972                           intcon2	equ	0xFF1
  8973                           postinc0	equ	0xFEE
  8974                           fsr0h	equ	0xFEA
  8975                           fsr0l	equ	0xFE9
  8976                           wreg	equ	0xFE8
  8977                           indf1	equ	0xFE7
  8978                           fsr1h	equ	0xFE2
  8979                           fsr1l	equ	0xFE1
  8980                           indf2	equ	0xFDF
  8981                           fsr2h	equ	0xFDA
  8982                           fsr2l	equ	0xFD9
  8983                           status	equ	0xFD8
  8984                           
  8985                           	psect	rparam
  8986  0000                     pclatu	equ	0xFFB
  8987                           pclath	equ	0xFFA
  8988                           tblptru	equ	0xFF8
  8989                           tblptrh	equ	0xFF7
  8990                           tblptrl	equ	0xFF6
  8991                           tablat	equ	0xFF5
  8992                           prodh	equ	0xFF4
  8993                           prodl	equ	0xFF3
  8994                           intcon	equ	0xFF2
  8995                           intcon2	equ	0xFF1
  8996                           postinc0	equ	0xFEE
  8997                           fsr0h	equ	0xFEA
  8998                           fsr0l	equ	0xFE9
  8999                           wreg	equ	0xFE8
  9000                           indf1	equ	0xFE7
  9001                           fsr1h	equ	0xFE2
  9002                           fsr1l	equ	0xFE1
  9003                           indf2	equ	0xFDF
  9004                           fsr2h	equ	0xFDA
  9005                           fsr2l	equ	0xFD9
  9006                           status	equ	0xFD8
  9007                           
  9008                           	psect	temp
  9009  000038                     btemp:
  9010                           	opt stack 0
  9011  000038                     	ds	1
  9012  0000                     int$flags	set	btemp
  9013                           pclatu	equ	0xFFB
  9014                           pclath	equ	0xFFA
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           intcon2	equ	0xFF1
  9023                           postinc0	equ	0xFEE
  9024                           fsr0h	equ	0xFEA
  9025                           fsr0l	equ	0xFE9
  9026                           wreg	equ	0xFE8
  9027                           indf1	equ	0xFE7
  9028                           fsr1h	equ	0xFE2
  9029                           fsr1l	equ	0xFE1
  9030                           indf2	equ	0xFDF
  9031                           fsr2h	equ	0xFDA
  9032                           fsr2l	equ	0xFD9
  9033                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         65
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      55
    BANK0           160     60     118
    BANK1           256     19      19
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    update_timer1_counter_10@counter	PTR unsigned char  size(2) Largest target is 1
		 -> timer1_counter_10(BANK0[1]), 

    get_timer1_counter_interval@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_timer1_counter_speed@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_timer1_counter_down@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_timer1_counter@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_time@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    put_nums@nums	PTR unsigned char  size(2) Largest target is 6
		 -> masked_digits(BANK0[6]), 


Critical Paths under _main in COMRAM

    _get_cents_reg->___awdiv
    _get_timer1_counter_interval->___awdiv
    _get_timer1_counter_down->_get_seconds_reg
    _get_timer1_counter->_get_seconds_reg
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _high_isr in COMRAM

    _high_isr->_get_next_state
    _put_nums->_put_num
    _get_next_state->_set_time
    _set_time->_byte_write
    _byte_write->i2_send_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_get_time
    _get_timer1_counter_speed->_get_cents_reg
    _get_cents_reg->___awdiv
    _get_cents_reg->___awmod
    _get_timer1_counter_interval->___awdiv
    _get_timer1_counter_interval->___awmod
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   11369
                                             16 BANK1      3     3      0
                _ConfigureOscillator
                            _InitApp
                     _buzzer_disable
                           _get_time
                 _get_timer1_counter
            _get_timer1_counter_down
        _get_timer1_counter_interval
           _get_timer1_counter_speed
                  _ir_is_code_number
                     _timer1_disable
                      _timer1_enable
 ---------------------------------------------------------------------------------
 (1) _timer1_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ir_is_code_number                                    1     1      0     310
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter_speed                             3     1      2    3346
                                              8 BANK1      3     1      2
                      _get_cents_reg
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (2) _get_cents_reg                                        4     4      0    2497
                                              4 BANK1      4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter_interval                          6     2      4    4491
                                              4 BANK1      6     2      4
                            ___awdiv
                            ___awmod
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1193
                                             39 COMRAM     2     2      0
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1205
                                             39 COMRAM     4     4      0
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter_down                              3     1      2     939
                                             41 COMRAM     1     1      0
                                              0 BANK1      2     0      2
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter                                   3     1      2     939
                                             41 COMRAM     1     1      0
                                              0 BANK1      2     0      2
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (2) _get_seconds_reg                                      2     2      0     393
                                             39 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             9     6      3    1304
                                              7 BANK1      9     6      3
                          _byte_read
 ---------------------------------------------------------------------------------
 (2) _byte_read                                            6     6      0     297
                                             41 COMRAM     2     2      0
                                              3 BANK1      4     4      0
                         _ce_disable
                          _ce_enable
                        _io_as_input
                       _send_command
 ---------------------------------------------------------------------------------
 (3) _send_command                                         5     5      0     130
                                             39 COMRAM     2     2      0
                                              0 BANK1      3     3      0
                       _io_as_output
 ---------------------------------------------------------------------------------
 (4) _io_as_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _io_as_input                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_enable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_disable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buzzer_disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            77    77      0    6822
                                             22 COMRAM    17    17      0
                                              0 BANK0     60    60      0
                     _get_next_state
                  _ir_get_human_code
                      _point_disable
                       _point_enable
                           _put_nums
                      _update_buzzer
                       _update_point
           _update_timer1_counter_10
 ---------------------------------------------------------------------------------
 (6) _update_timer1_counter_10                             4     2      2     802
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _update_point                                         3     0      3     306
                                              0 COMRAM     3     0      3
                      _point_disable
                       _point_enable
 ---------------------------------------------------------------------------------
 (7) _point_enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _point_disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _update_buzzer                                        3     0      3     306
                                              0 COMRAM     3     0      3
                      _buzzer_enable
                   i2_buzzer_disable
 ---------------------------------------------------------------------------------
 (7) i2_buzzer_disable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _buzzer_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _put_nums                                             4     2      2     536
                                              7 COMRAM     4     2      2
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (7) _put_num                                             17    17      0     348
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (7) _get_num                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ir_get_human_code                                    5     3      2     115
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _get_next_state                                       9     5      4    4301
                                             13 COMRAM     9     5      4
                           _set_time
                          i2___awdiv
                          i2___awmod
                    i2_timer1_enable
 ---------------------------------------------------------------------------------
 (7) i2_timer1_enable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _set_time                                             6     4      2    1056
                                              7 COMRAM     6     4      2
                         _byte_write
                       _get_hour_reg
                  i2_get_seconds_reg
 ---------------------------------------------------------------------------------
 (8) i2_get_seconds_reg                                    2     2      0     271
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _get_hour_reg                                         2     2      0     136
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _byte_write                                           2     1      1     362
                                              5 COMRAM     2     1      1
                       i2_ce_disable
                        i2_ce_enable
                     i2_send_command
 ---------------------------------------------------------------------------------
 (9) i2_send_command                                       5     5      0      90
                                              0 COMRAM     5     5      0
                     i2_io_as_output
 ---------------------------------------------------------------------------------
 (10) i2_io_as_output                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _buzzer_disable
   _get_time
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
   _get_timer1_counter
     _get_seconds_reg
   _get_timer1_counter_down
     _get_seconds_reg
   _get_timer1_counter_interval
     ___awdiv
     ___awmod
     _get_seconds_reg
   _get_timer1_counter_speed
     _get_cents_reg
       ___awdiv
       ___awmod
     _get_seconds_reg
   _ir_is_code_number
   _timer1_disable
   _timer1_enable

 _high_isr (ROOT)
   _get_next_state
     _set_time
       _byte_write
         i2_ce_disable
         i2_ce_enable
         i2_send_command
           i2_io_as_output
       _get_hour_reg
       i2_get_seconds_reg
     i2___awdiv
     i2___awmod
     i2_timer1_enable
   _ir_get_human_code
   _point_disable
   _point_enable
   _put_nums
     _get_num
     _put_num
   _update_buzzer
     _buzzer_enable
     i2_buzzer_disable
   _update_point
     _point_disable
     _point_enable
   _update_timer1_counter_10

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     13      13       7        7.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      76       5       73.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      37       1       58.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C0      20        0.0%
DATA                 0      0      C0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon May 29 01:11:42 2017

                              _update_point 1E04                               _update_buzzer 1E4C  
                              ___awdiv@sign 0029                                 __CFG_BOR$ON 000000  
                           ??_point_disable 0001                                 _put_num$982 0005  
                               __CFG_BORV$3 000000                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000        __size_of_get_timer1_counter_interval 0200  
                               __CFG_LVP$ON 000000                              i2_send_command 1BFE  
                               __CFG_WDT$ON 000000                    _update_timer1_counter_10 11D8  
                                       l177 086A                                         l437 1BFC  
                                       l394 1A74                                __CFG_CPB$OFF 000000  
                                       _RB0 007C08                                         _RA2 007C02  
                                       _RB1 007C09                                         _RA3 007C03  
                                       _RB3 007C0B                                         _RA5 007C05  
                                       _RB4 007C0C                                         _RB5 007C0D  
                           ?_get_next_state 000E                                __CFG_CPD$OFF 000000  
                              ___awmod@sign 0029                                         prod 000FF3  
                                       wreg 000FE8                                __CFG_FOSC$HS 000000  
               __size_of_get_timer1_counter 0090                                ?_io_as_input 0001  
                               high_isr@aux 0095                       ir_get_human_code@code 0001  
                          ?_get_seconds_reg 0001                                        l5003 188C  
                                      l5033 1AB2                                        l5017 1A5E  
                                      l5061 1D50                                        l5053 1D34  
                                      l5045 1D18                                        l5221 10C8  
                                      l5213 105E                                        l5063 1D58  
                                      l5223 1132                                        l5215 1084  
                                      l5311 08EE                                        l5303 08B2  
                                      l5057 1D42                                        l5049 1D26  
                                      l5225 115C                                        l5313 0900  
           update_timer1_counter_10@counter 0001                                        l5155 143C  
                                      l5227 116E                                        l5219 10B6  
                                      l5403 0A3E                                        l5323 091E  
                                      l5307 08CA                                        l5251 07F8  
                                      l5157 146A                                        l5149 1404  
                                      l5421 0A90                                        l5413 0A64  
                                      l5333 093C                                        l5309 08DC  
                                      l5261 0828                                        l5343 095A  
                                      l5271 084A                                        l5255 0804  
                                      l5185 1D02                                        l5417 0A7A  
                                      l5361 09B4                                        l5353 0978  
                                      l5249 07EE                                        l5179 1CFE  
                                      l5443 0B02                                        l5435 0AC6  
                                      l5363 09C6                                        l5283 0876  
                                      l5259 0812                                        l5507 0BD6  
                                      l5373 09E4                                        l5357 0990  
                                      l5293 0894                                        l5277 0864  
                                      l5269 0846                                        l4911 1BC0  
                                      l5447 0B20                                        l5439 0AE4  
                                      l5383 0A02                                        l5359 09A2  
                                      l4913 1BE0                                        l5457 0B3E  
                                      l5393 0A20                                        l4907 1BAA  
                                      l5467 0B5C                                        l4941 1788  
                                      l5477 0B7A                                        l4951 17B2  
                                      l4935 1774                                        l5487 0B98  
                                      l5497 0BB6                                        l4947 17A2  
                                      l4963 17EA                                        l4949 17AC  
                                      l4967 17F8                                        l4959 17DE  
                                      l4991 184C                                        l4983 182A  
                                      l4995 1870                                        l4987 183C  
                                      l4979 181A                                        l4989 1846  
                                      l4999 187C                                 get_time@aux 010E  
                                      _PIE1 000F9D                       __size_ofi2_ce_disable 0006  
                                      _RBIF 007F90                                        u5710 1BDE  
                                      u5704 1BD0                                        u5705 1BCC  
                                      i2l80 0F56                                        i2l73 0E0A  
                                      i2l91 0EF0                                        u6547 1A78  
                                      i2l85 0E8E                                        u6557 1AA4  
                                      u5870 1A8C                                        u6567 1BE4  
                                      u6577 1BEE                                        u5894 1A96  
                                      u5895 1A92                                        u5888 1A8E  
                               i2_ce_enable 1FB6                                        _aux1 00CD  
                                      _main 07B8                                        _next 002C  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr2h 000FDA                                        fsr0l 000FE9  
                                      indf1 000FE7                                        indf2 000FDF  
                                      fsr1l 000FE1                                        fsr2l 000FD9  
                                      btemp 0038                                        prodh 000FF4  
                                      prodl 000FF3                                        start 000E  
                             __CFG_IESO$OFF 000000                              ??_get_hour_reg 0001  
               get_timer1_counter_down@data 0100                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000000                                high_isr@code 0060  
                           __end_of_InitApp 1B98                              ?_update_buzzer 0001  
                             ?_io_as_output 0001                      __end_ofi2_send_command 1C58  
               ir_is_code_number@human_code 0028                               __CFG_PLLDIV$1 000000  
           __end_of_get_timer1_counter_down 1926                             ??_get_cents_reg 0104  
                            __CFG_CCP2MX$ON 000000                                       ?_main 0001  
                              get_time@data 0107                             __end_of___awdiv 1802  
                           __end_of___awmod 1896                                       _T0CON 000FD5  
                           ___awdiv@divisor 0102                                       _T1CON 000FCD  
                                     i2l104 0F9C                                       i2l331 1CAE  
                                     i2l336 1F02                                       i2l437 1C56  
                                     i2l447 07AE                             ___awdiv@counter 0028  
                       update_point@counter 0003                               __CFG_USBDIV$1 000000  
                              i2_ce_disable 1F8C                         _ConfigureOscillator 1FBA  
                             __CFG_PWRT$OFF 000000                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                           __end_of_get_num 16AA                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                            __CFG_EBTRB$OFF 000000                                       _state 00D4  
                                     pclath 000FFA                                       tablat 000FF5  
                           __end_of_put_num 1CB0                                       status 000FD8  
                        __size_ofi2___awdiv 0084                          __size_ofi2___awmod 0070  
                      ?_ConfigureOscillator 0001                            ??i2_io_as_output 0001  
                    get_timer1_counter@data 0100                             __initialization 1F30  
                             high_isr@i_166 009A                                __end_of_main 0CBA  
                            ??_io_as_output 0028                             ?i2_send_command 0001  
                                    ??_main 0110                               __activetblptr 000002  
          __end_of_get_timer1_counter_speed 175C                                      _ADCON1 000FC1  
                          get_hour_reg@hour 0002                            ___awdiv@dividend 0100  
           get_timer1_counter_interval@data 0104                               get_time@hours 010F  
                                    i2l3113 1C1C                                      i2l4001 1E74  
                                    i2l3115 1C3C                                      i2l4011 1ED6  
                                    i2l3109 1C0C                                      i2l3303 1C9A  
                                    i2l4015 1EE6                                      i2l4103 1374  
                                    i2l4041 124E                                      i2l4033 1220  
                                    i2l4025 11F0                                      i2l3171 1F24  
                                    i2l3331 15FE                                      i2l3323 15F6  
                                    i2l3315 15EE                                      i2l4035 122C  
                                    i2l3173 1F2C                                      i2l4061 12B0  
                                    i2l4053 1280                                      i2l3167 1F16  
                                    i2l3271 1D8A                                      i2l3263 1D6E  
                                    i2l3511 1A30                                      i2l3503 1A18  
                                    i2l3351 1612                                      i2l3343 160A  
                                    i2l3335 1602                                      i2l3327 15FA  
                                    i2l3319 15F2                                      i2l4063 12BC  
                                    i2l4047 1264                                      i2l4303 0E04  
                                    i2l3281 1DAE                                      i2l4049 126A  
                                    i2l4313 0E2E                                      i2l3275 1D98  
                                    i2l3267 1D7C                                      i2l3507 1A22  
                                    i2l3531 1AEA                                      i2l3523 1AD0  
                                    i2l3371 1626                                      i2l3363 161E  
                                    i2l3355 1616                                      i2l3347 160E  
                                    i2l3339 1606                                      i2l3291 1C66  
                                    i2l4083 1312                                      i2l4075 12F4  
                                    i2l4323 0E68                                      i2l3533 1AF2  
                                    i2l3701 0182                                      i2l4069 12DE  
                                    i2l4333 0E9A                                      i2l4325 0E78  
                                    i2l4309 0E18                                      i2l3279 1DA6  
                                    i2l3535 1AF6                                      i2l3543 1B14  
                                    i2l3527 1ADC                                      i2l3631 0028  
                                    i2l3383 1632                                      i2l3375 162A  
                                    i2l3367 1622                                      i2l3359 161A  
                                    i2l3295 1C76                                      i2l4095 134A  
                                    i2l4351 0EF2                                      i2l4319 0E5A  
                                    i2l3801 0370                                      i2l3713 01BE  
                                    i2l3705 0198                                      i2l3641 0056  
                                    i2l3633 0030                                      i2l3561 14D6  
                                    i2l3553 14BE                                      i2l3393 163A  
                                    i2l4089 1334                                      i2l4361 0F14  
                                    i2l4345 0EE0                                      i2l4273 0D20  
                                    i2l3491 19F0                                      i2l3547 1B22  
                                    i2l3539 1B0A                                      i2l3731 022A  
                                    i2l3723 0204                                      i2l3643 0064  
                                    i2l3571 14F4                                      i2l3563 14DC  
                                    i2l3555 14C4                                      i2l3387 1636  
                                    i2l3379 162E                                      i2l4099 135A  
                                    i2l4355 0EFC                                      i2l4339 0EC8  
                                    i2l4291 0D90                                      i2l3493 19F8  
                                    i2l3485 19DA                                      i2l3821 03D0  
                                    i2l3813 03A8                                      i2l3653 0092  
                                    i2l3645 006C                                      i2l3581 1512  
                                    i2l3573 14FA                                      i2l3565 14E2  
                                    i2l3557 14CA                                      i2l4381 0F9A  
                                    i2l4357 0F04                                      i2l4365 0F1C  
                                    i2l4285 0D66                                      i2l4277 0D36  
                                    i2l3495 19FC                                      i2l3479 19CA  
                                    i2l3807 0388                                      i2l3655 00A0  
                                    i2l3583 1518                                      i2l3575 1500  
                                    i2l3567 14E8                                      i2l3559 14D0  
                                    i2l4375 0F68                                      i2l4359 0F0C  
                                    i2l4367 0F46                                      i2l4287 0D7A  
                                    i2l3921 05D2                                      i2l3905 0568  
                                    i2l3753 028A                                      i2l3745 0268  
                                    i2l3737 0244                                      i2l3681 0122  
                                    i2l3665 00CE                                      i2l3657 00A8  
                                    i2l3585 151E                                      i2l3577 1506  
                                    i2l3569 14EE                                      i2l3593 1528  
                                    i2l4297 0DCC                                      i2l3907 0580  
                                    i2l3851 0476                                      i2l3843 044E  
                                    i2l3835 0420                                      i2l3675 0102  
                                    i2l3587 1524                                      i2l3579 150C  
                                    i2l3941 067E                                      i2l3917 05B2  
                                    i2l3909 058A                                      i2l3861 04A2  
                                    i2l3845 0456                                      i2l3837 042E  
                                    i2l3829 0404                                      i2l3749 027C  
                                    i2l3693 015A                                      i2l3669 00E4  
                                    i2l3951 070E                                      i2l3943 0682  
                                    i2l3871 04D0                                      i2l3839 0436  
                                    i2l3783 032C                                      i2l3775 0306  
                                    i2l3767 02D2                                      i2l3759 02AA  
                                    i2l3687 0142                                      _INTCON 000FF2  
                                    i2l3961 0756                                      i2l3953 0712  
                                    i2l3945 06C0                                      i2l3929 05FA  
                                    i2l3865 04B0                                      i2l3857 048E  
                                    i2l3793 0350                                      i2l3963 0776  
                                    i2l3885 051A                                      i2l3877 04F6  
                                    i2l5741 15A4                                      i2l5733 1564  
                                    i2l3981 1E26                                      i2l3967 078A  
                                    i2l3959 0752                                      i2l5743 15BA  
                                    i2l5735 157A                                      i2l3983 1E2C  
                                    i2l3889 0538                                      i2l5745 15C4  
                                    i2l5737 158A                                      i2l5747 15D4  
                                    i2l5739 159A                                      i2l3999 1E6E  
                                    _TMR0IF 007F92                                      _TMR1IF 007CF0  
                                    _TRISA2 007C92                                      _TRISB1 007C99  
                                    _TRISA3 007C93                                      _TRISB3 007C9B  
                                    _TRISA5 007C95                                      _TRISB4 007C9C  
                           i2_timer1_enable 1FAE                                   ??_InitApp 0028  
                     ??_ConfigureOscillator 0028                              __CFG_XINST$OFF 000000  
                           ??_update_buzzer 0004                            __end_of_high_isr 0FD8  
                          __end_of_get_time 14BC                             set_time@min_reg 000C  
                                 ??___awdiv 0028                              __CFG_STVREN$ON 000000  
                                 ??___awmod 0028                             set_time@sec_reg 000B  
                           set_time@minutes 0008                             set_time@seconds 000A  
                                    clear_0 1F36                                      clear_1 1F42  
                          ___awdiv@quotient 002A                           _ir_get_human_code 14BC  
                           ___awmod@divisor 0102                           ?i2_buzzer_disable 0001  
                           ___awmod@counter 0028                                   ??_get_num 0001  
                            i2___awdiv@sign 0006                          get_seconds_reg@res 0028  
                        ?_ir_get_human_code 0001                          ??i2_buzzer_disable 0001  
                         __end_ofi2___awdiv 1A3A                            __end_of_set_time 1ECE  
                         __end_ofi2___awmod 1B2C                               _masked_digits 00C7  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                        __end_of_get_hour_reg 1F30  
                            i2___awmod@sign 0006                            __end_of_put_nums 1F04  
                                 ??_put_num 0001                         ??_ir_get_human_code 0003  
                      __size_of_io_as_input 0004                                put_nums@nums 0008  
                                __accesstop 0060                     __end_of__initialization 1F48  
                           __CFG_PBADEN$OFF 000000                            ??_buzzer_disable 0028  
                             ___rparam_used 000001                             _current_program 002E  
                        __size_of_ce_enable 0004                  ??_update_timer1_counter_10 0003  
                            __pcstackCOMRAM 0001                   __end_of_ir_get_human_code 15EA  
                          ??_get_next_state 0012                              high_isr@digits 008F  
get_timer1_counter_interval@current_program 0107                                  _ce_disable 1F86  
                     __end_of_timer1_enable 1F96                     __end_ofi2_timer1_enable 1FB2  
                      __end_of_io_as_output 1F9E                                  __pbssBANK0 009C  
                              ?i2_ce_enable 0001         __end_of_get_timer1_counter_interval 11D8  
               _get_timer1_counter_interval 0FD8                                  __pnvCOMRAM 0035  
             update_timer1_counter_10@state 0004                          __size_of_byte_read 0082  
         __size_of_get_timer1_counter_speed 00B2                   ?_get_timer1_counter_speed 0108  
                        get_next_state@code 0010                          get_next_state@hour 0016  
                    __size_of_buzzer_enable 0008                     __size_of_timer1_disable 0004  
                             ?_send_command 0001                                     _CCP2CON 000FBA  
                            get_time@format 0109                       __end_of_point_disable 1FAE  
                         _timer1_counter_10 00D3            get_timer1_counter_interval@state 0106  
                __end_of_get_timer1_counter 19B6                                     _INTCON2 000FF1  
                         __end_of_ce_enable 1FA6                          update_buzzer@state 0001  
                  ?_get_timer1_counter_down 0100                                     _SSPCON1 000FC6  
                                 ?_high_isr 0001                                   ?_get_time 0107  
                           __CFG_VREGEN$OFF 000000                                     _InitApp 1B2C  
                  __size_of_get_seconds_reg 0056                                     __Hparam 0000  
                          ??i2_send_command 0001                                     __Lparam 0000  
                          byte_read@address 0103                                   ?_set_time 0008  
                              byte_read@res 0104                            get_time@aux_hour 010C  
                            ??_send_command 0028                                     ___awdiv 175C  
                                   ___awmod 1802                  __size_of_ir_get_human_code 012E  
                                 ?_put_nums 0008                                  _byte_write 1F56  
                                   __pcinit 1F30                            set_time@hour_reg 000D  
                                   __ramtop 0800                                     __ptext0 07B8  
                                   __ptext1 1F92                                     __ptext2 1F96  
                                   __ptext3 1CB0                                     __ptext4 16AA  
                                   __ptext5 1DB2                                     __ptext6 0FD8  
                                   __ptext7 1802                                     __ptext8 175C  
                                   __ptext9 1896                       __size_of_get_hour_reg 002C  
                                   _get_num 15EA                       __end_of_get_cents_reg 1E04  
                                   _counter 00C4                           __end_of_byte_read 1ABC  
                               ?_ce_disable 0001                                  _human_code 0034  
                          ___awmod@dividend 0100                               _buzzer_enable 1F7E  
                                   _put_num 1C58                            ?i2_timer1_enable 0001  
                                ??_high_isr 0017                                  ??_get_time 010A  
                            __pintcode_body 0CBA                               ?_point_enable 0001  
                      end_of_initialization 1F48                               _buzzer_status 00C6  
                             __Lmediumconst 0000                                     int_func 0CBA  
                          get_cents_reg@res 0106                           i2_get_seconds_reg 1D5C  
          __end_of_update_timer1_counter_10 138A                                  ??_set_time 000A  
                      update_buzzer@counter 0003                          ?i2_get_seconds_reg 0001  
                              _get_hour_reg 1F04                                     postinc0 000FEE  
                                ??_put_nums 000A                         ??i2_get_seconds_reg 0001  
                           byte_write@value 0006                       __size_of_io_as_output 0004  
                            ?_buzzer_enable 0001            ir_get_human_code@human_read_code 0005  
                            ??_point_enable 0001                                   i2___awdiv 19B6  
                                 i2___awmod 1ABC                 __end_of_ConfigureOscillator 1FBC  
                             send_command@i 0101                   __size_ofi2_buzzer_disable 0008  
                 __end_ofi2_get_seconds_reg 1DB2                                  get_num@num 0001  
                      __size_ofi2_ce_enable 0004                                  main@format 0112  
                        i2___awdiv@dividend 0001                         __size_of_ce_disable 0006  
                             ?_update_point 0001                          high_isr@final_code 0096  
                            _timer1_disable 1F96                       __end_of_update_buzzer 1E94  
                         ??_get_seconds_reg 0028                                _io_as_output 1F9A  
                            _timer1_counter 00C5                                 ?_byte_write 0006  
                    get_seconds_reg@seconds 0029                     __size_ofi2_io_as_output 0004  
                       start_initialization 1F30                          i2___awdiv@quotient 0007  
                             ??_io_as_input 0028                                  ?i2___awdiv 0001  
                                ?i2___awmod 0001                        __end_of_send_command 1BFE  
                     i2send_command@command 0003                             get_hour_reg@res 0001  
                    __end_of_timer1_disable 1F9A                                  byte_read@i 0105  
                            ??_update_point 0004                            __CFG_LPT1OSC$OFF 000000  
                               put_num@mask 0004                        i2get_seconds_reg@res 0001  
                           ??_buzzer_enable 0001                               ?i2_ce_disable 0001  
                               __pbssCOMRAM 002C                               __pcstackBANK0 0060  
                             __pcstackBANK1 0100           __size_of_update_timer1_counter_10 01B2  
                 ?_update_timer1_counter_10 0001                                   _ce_enable 1FA2  
                       __size_of_byte_write 0018                           __size_of_high_isr 0FD0  
                       __end_of_io_as_input 1FA2                          _get_timer1_counter 1926  
                         __size_of_get_time 0132                  __size_ofi2_get_seconds_reg 0056  
                                  ?_InitApp 0001                                   __pnvBANK0 00D4  
                              _current_type 0035                             ?_timer1_disable 0001  
          __size_of_get_timer1_counter_down 0090                         ?_get_timer1_counter 0100  
                                 __pintcode 0008                      __size_of_timer1_enable 0004  
                                  ?___awdiv 0100                                    ?___awmod 0100  
                      __end_of_point_enable 1FAA                           __size_of_set_time 003A  
                   __size_of_buzzer_disable 0008                         get_next_state@state 000E  
                                  ?_get_num 0001                           __size_of_put_nums 0036  
                            ??i2_ce_disable 0001                                ??_ce_disable 0028  
                   __size_of_get_next_state 07A6                        ??_get_timer1_counter 002A  
                                 _byte_read 1A3A                       get_next_state@minutes 0015  
                     get_next_state@seconds 0014                                    ?_put_num 0001  
                               ??i2___awdiv 0005                                 ??i2___awmod 0005  
                           get_time@minutes 010D                             get_time@seconds 010B  
                                ?_ce_enable 0001                            i2_buzzer_disable 1F76  
                                 _intervals 009C                          _timer1_counter_min 0033  
                  _get_timer1_counter_speed 16AA                      __size_of_point_disable 0004  
                                  i2u315_44 1C8A                                    i2u315_45 1C86  
                                  i2u510_44 0DB4                                    i2u318_45 1CA2  
                                  i2u510_45 0DAE                                    i2u318_46 1CA4  
                                  i2u512_40 0DDA                                    i2u443_41 0606  
                                  i2u286_44 1C2C                                    i2u286_45 1C28  
                                  i2u287_40 1C3A                          __end_of_ce_disable 1F8C  
                                  i2u660_47 1C40                                    i2u661_47 1C4A  
                                  i2u658_47 0D0A                                    i2u659_47 0D54  
                          __CFG_WDTPS$32768 000000                              i2_io_as_output 1FB2  
                                 high_isr@i 0098                       __size_of_send_command 0066  
                         i2___awdiv@divisor 0003                           i2___awdiv@counter 0005  
                         _ir_is_code_number 1CB0                               _timer1_enable 1F92  
                               _io_as_input 1F9E                                  ?_byte_read 0001  
                      __end_of_update_point 1E4C                          ?_ir_is_code_number 0001  
                         update_point@state 0001                          i2___awmod@dividend 0001  
                       send_command@command 0100                             _get_seconds_reg 1D06  
                       ??_ir_is_code_number 0028                    __size_ofi2_timer1_enable 0004  
                    __size_of_get_cents_reg 0052                            __size_of_InitApp 006C  
                                  __Hrparam 0000                                    __Lrparam 0000  
                                put_num@num 0003                                _send_command 1B98  
                              ??_byte_write 0007                            __size_of___awdiv 00A6  
                          __size_of___awmod 0094                      __end_ofi2_io_as_output 1FB6  
              get_timer1_counter_speed@data 0108                     __size_ofi2_send_command 005A  
                 __end_of_ir_is_code_number 1D06                               _point_disable 1FAA  
                          __size_of_get_num 00C0                          get_cents_reg@cents 0107  
                               _max_program 002F                              ?_timer1_enable 0001  
                                  __ptext10 1926                                    __ptext11 1D06  
                                  __ptext20 1B2C                                    __ptext12 138A  
                                  __ptext21 1FBA                                    __ptext13 1A3A  
                                  __ptext30 1ECE                                    __ptext14 1B98  
                                  __ptext31 1C58                                    __ptext23 11D8  
                                  __ptext15 1F9A                                    __ptext40 1F04  
                                  __ptext32 15EA                                    __ptext24 1E04  
                                  __ptext16 1F9E                                    __ptext41 1F56  
                                  __ptext33 14BC                                    __ptext25 1FA6  
                                  __ptext17 1FA2                                    __ptext42 1BFE  
                                  __ptext34 0012                                    __ptext26 1FAA  
                                  __ptext18 1F86                                    __ptext43 1FB2  
                                  __ptext35 1FAE                                    __ptext27 1E4C  
                                  __ptext19 1F6E                                    __ptext44 1FB6  
                                  __ptext36 1ABC                                    __ptext28 1F76  
                                  __ptext45 1F8C                                    __ptext37 19B6  
                                  __ptext29 1F7E                                    __ptext38 1E94  
                                  __ptext39 1D5C                                    _high_isr 0008  
                                  _get_time 138A                            __size_of_put_num 0058  
                             ??i2_ce_enable 0001                                 ??_ce_enable 0028  
              ?_get_timer1_counter_interval 0104                               __size_of_main 0502  
                        __end_of_byte_write 1F6E                         _timer1_up_limit_min 0036  
                       _timer1_up_limit_sec 0037                        __end_ofi2_ce_disable 1F92  
                   _get_timer1_counter_down 1896                __size_of_ConfigureOscillator 0002  
                     __size_of_point_enable 0004                                    _set_time 1E94  
                                  int$flags 0038                              _buzzer_disable 1F6E  
                                  _put_nums 1ECE                             ?i2_io_as_output 0001  
                     __CFG_CPUDIV$OSC1_PLL2 000000                              ?_point_disable 0001  
                        _timer1_speed_cents 0030                           i2___awmod@divisor 0003  
                         i2___awmod@counter 0005                               _get_cents_reg 1DB2  
                                _INTCONbits 000FF2                              _get_next_state 0012  
                      _timer1_down_init_min 0032                        _timer1_down_init_sec 0031  
                              set_time@hour 0009                     __end_of_get_seconds_reg 1D5C  
                               ??_byte_read 002A                                   put_nums@i 000A  
                                  intlevel2 0000                                _point_enable 1FA6  
                    __size_of_update_buzzer 0048                            ??_timer1_disable 0028  
             ??_get_timer1_counter_interval 0108                         __end_ofi2_ce_enable 1FBA  
                           i2send_command@i 0004                           byte_write@address 0007  
                    __end_of_buzzer_disable 1F76                    i2get_seconds_reg@seconds 0002  
                         ??i2_timer1_enable 0001                    __end_ofi2_buzzer_disable 1F7E  
                                  put_num@i 0006                      __end_of_get_next_state 07B8  
                            ?_get_cents_reg 0001                  __size_of_ir_is_code_number 0056  
                     __size_of_update_point 0048                             ??_timer1_enable 0028  
                     __end_of_buzzer_enable 1F86                  ??_get_timer1_counter_speed 010A  
                 ??_get_timer1_counter_down 002A                               ?_get_hour_reg 0001  
                           ?_buzzer_disable 0001  
