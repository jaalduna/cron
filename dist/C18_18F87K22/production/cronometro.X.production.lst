

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun May 28 03:27:10 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.42
    53                           ; Generated 13/04/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F2550 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	nvBANK0
    88  0000B2                     __pnvBANK0:
    89                           	opt stack 0
    90  0000B2                     _state:
    91                           	opt stack 0
    92  0000B2                     	ds	2
    93  0000                     _PIE1	set	3997
    94  0000                     _T1CON	set	4045
    95  0000                     _T0CON	set	4053
    96  0000                     _INTCON2	set	4081
    97  0000                     _INTCON	set	4082
    98  0000                     _ADCON1	set	4033
    99  0000                     _SSPCON1	set	4038
   100  0000                     _CCP2CON	set	4026
   101  0000                     _INTCONbits	set	4082
   102  0000                     _RA3	set	31747
   103  0000                     _RA2	set	31746
   104  0000                     _RA5	set	31749
   105  0000                     _RB1	set	31753
   106  0000                     _RB4	set	31756
   107  0000                     _RB3	set	31755
   108  0000                     _TRISA3	set	31891
   109  0000                     _TRISA5	set	31893
   110  0000                     _TRISA2	set	31890
   111  0000                     _TRISB1	set	31897
   112  0000                     _TRISB4	set	31900
   113  0000                     _TRISB3	set	31899
   114  0000                     _TMR1IF	set	31984
   115  0000                     _RB0	set	31752
   116  0000                     _TMR0IF	set	32658
   117  0000                     _RB5	set	31757
   118  0000                     _RBIF	set	32656
   119                           
   120                           ; #config settings
   121  0000                     
   122                           	psect	cinit
   123  000E38                     __pcinit:
   124                           	opt stack 0
   125  000E38                     start_initialization:
   126                           	opt stack 0
   127  000E38                     __initialization:
   128                           	opt stack 0
   129                           
   130                           ; Clear objects allocated to BANK0 (16 bytes)
   131  000E38  EE00  F0A2         	lfsr	0,__pbssBANK0
   132  000E3C  0E10               	movlw	16
   133  000E3E                     clear_0:
   134  000E3E  6AEE               	clrf	postinc0,c
   135  000E40  06E8               	decf	wreg,f,c
   136  000E42  E1FD               	bnz	clear_0
   137                           
   138                           ; Clear objects allocated to COMRAM (3 bytes)
   139  000E44  6A39               	clrf	(__pbssCOMRAM+2)& (0+255),c
   140  000E46  6A38               	clrf	(__pbssCOMRAM+1)& (0+255),c
   141  000E48  6A37               	clrf	__pbssCOMRAM& (0+255),c
   142  000E4A                     end_of_initialization:
   143                           	opt stack 0
   144  000E4A                     __end_of__initialization:
   145                           	opt stack 0
   146  000E4A  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   147  000E4C  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   148  000E4E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   149  000E50  6EF8               	movwf	tblptru,c
   150  000E52  0100               	movlb	0
   151  000E54  EF8A  F001         	goto	_main	;jump to C main() function
   152                           tblptru	equ	0xFF8
   153                           postinc0	equ	0xFEE
   154                           wreg	equ	0xFE8
   155                           
   156                           	psect	bssCOMRAM
   157  000037                     __pbssCOMRAM:
   158                           	opt stack 0
   159  000037                     _next:
   160                           	opt stack 0
   161  000037                     	ds	2
   162  000039                     _human_code:
   163                           	opt stack 0
   164  000039                     	ds	1
   165                           tblptru	equ	0xFF8
   166                           postinc0	equ	0xFEE
   167                           wreg	equ	0xFE8
   168                           
   169                           	psect	bssBANK0
   170  0000A2                     __pbssBANK0:
   171                           	opt stack 0
   172  0000A2                     _counter:
   173                           	opt stack 0
   174  0000A2                     	ds	1
   175  0000A3                     _timer1_counter:
   176                           	opt stack 0
   177  0000A3                     	ds	1
   178  0000A4                     _buzzer_status:
   179                           	opt stack 0
   180  0000A4                     	ds	1
   181  0000A5                     _masked_digits:
   182                           	opt stack 0
   183  0000A5                     	ds	6
   184  0000AB                     _aux1:
   185                           	opt stack 0
   186  0000AB                     	ds	6
   187  0000B1                     _timer1_counter_10:
   188                           	opt stack 0
   189  0000B1                     	ds	1
   190                           tblptru	equ	0xFF8
   191                           postinc0	equ	0xFEE
   192                           wreg	equ	0xFE8
   193                           
   194                           	psect	cstackBANK0
   195  000060                     __pcstackBANK0:
   196                           	opt stack 0
   197  000060                     high_isr@code:
   198                           	opt stack 0
   199                           
   200                           ; 47 bytes @ 0x0
   201  000060                     	ds	47
   202  00008F                     high_isr@digits:
   203                           	opt stack 0
   204                           
   205                           ; 6 bytes @ 0x2F
   206  00008F                     	ds	6
   207  000095                     high_isr@aux:
   208                           	opt stack 0
   209                           
   210                           ; 1 bytes @ 0x35
   211  000095                     	ds	1
   212  000096                     high_isr@final_code:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0x36
   216  000096                     	ds	2
   217  000098                     high_isr@i:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x38
   221  000098                     	ds	2
   222  00009A                     high_isr@i_150:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x3A
   226  00009A                     	ds	2
   227  00009C                     get_time@data:
   228                           	opt stack 0
   229  00009C                     get_timer1_counter@data:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x3C
   233  00009C                     	ds	2
   234  00009E                     get_time@format:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x3E
   238  00009E                     	ds	1
   239  00009F                     ??_main:
   240                           
   241                           ; 1 bytes @ 0x3F
   242  00009F                     	ds	2
   243  0000A1                     main@format:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x41
   247  0000A1                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           
   252                           	psect	cstackCOMRAM
   253  000001                     __pcstackCOMRAM:
   254                           	opt stack 0
   255  000001                     ??_put_num:
   256  000001                     ??i2_send_command:
   257  000001                     get_num@num:
   258                           	opt stack 0
   259  000001                     get_hour_reg@res:
   260                           	opt stack 0
   261  000001                     i2get_seconds_reg@res:
   262                           	opt stack 0
   263  000001                     ir_get_human_code@code:
   264                           	opt stack 0
   265  000001                     update_point@state:
   266                           	opt stack 0
   267  000001                     update_buzzer@state:
   268                           	opt stack 0
   269  000001                     update_timer1_counter_10@counter:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x0
   273  000001                     	ds	1
   274  000002                     get_hour_reg@hour:
   275                           	opt stack 0
   276  000002                     i2get_seconds_reg@seconds:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x1
   280  000002                     	ds	1
   281  000003                     ??_ir_get_human_code:
   282  000003                     put_num@num:
   283                           	opt stack 0
   284  000003                     update_point@counter:
   285                           	opt stack 0
   286  000003                     update_buzzer@counter:
   287                           	opt stack 0
   288  000003                     i2send_command@command:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0x2
   292  000003                     	ds	1
   293  000004                     put_num@mask:
   294                           	opt stack 0
   295  000004                     update_timer1_counter_10@state:
   296                           	opt stack 0
   297  000004                     i2send_command@i:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x3
   301  000004                     	ds	1
   302  000005                     ir_get_human_code@human_read_code:
   303                           	opt stack 0
   304  000005                     _put_num$903:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x4
   308  000005                     	ds	1
   309  000006                     byte_write@value:
   310                           	opt stack 0
   311  000006                     put_num@i:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x5
   315  000006                     	ds	1
   316  000007                     byte_write@address:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x6
   320  000007                     	ds	1
   321  000008                     set_time@minutes:
   322                           	opt stack 0
   323  000008                     put_nums@nums:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x7
   327  000008                     	ds	1
   328  000009                     set_time@hour:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x8
   332  000009                     	ds	1
   333  00000A                     set_time@seconds:
   334                           	opt stack 0
   335  00000A                     put_nums@i:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x9
   339  00000A                     	ds	1
   340  00000B                     set_time@sec_reg:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0xA
   344  00000B                     	ds	1
   345  00000C                     set_time@min_reg:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0xB
   349  00000C                     	ds	1
   350  00000D                     set_time@hour_reg:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0xC
   354  00000D                     	ds	1
   355  00000E                     ?_get_next_state:
   356                           	opt stack 0
   357  00000E                     get_next_state@state:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0xD
   361  00000E                     	ds	2
   362  000010                     get_next_state@code:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0xF
   366  000010                     	ds	2
   367  000012                     get_next_state@seconds:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x11
   371  000012                     	ds	1
   372  000013                     get_next_state@minutes:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x12
   376  000013                     	ds	1
   377  000014                     get_next_state@hour:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x13
   381  000014                     	ds	1
   382  000015                     ??_high_isr:
   383                           
   384                           ; 1 bytes @ 0x14
   385  000015                     	ds	17
   386  000026                     ??_send_command:
   387  000026                     get_seconds_reg@res:
   388                           	opt stack 0
   389  000026                     ir_is_code_number@human_code:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x25
   393  000026                     	ds	1
   394  000027                     get_seconds_reg@seconds:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x26
   398  000027                     	ds	1
   399  000028                     send_command@command:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x27
   403  000028                     	ds	1
   404  000029                     send_command@i:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x28
   408  000029                     	ds	2
   409  00002B                     ??_byte_read:
   410                           
   411                           ; 1 bytes @ 0x2A
   412  00002B                     	ds	2
   413  00002D                     byte_read@address:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x2C
   417  00002D                     	ds	1
   418  00002E                     byte_read@res:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x2D
   422  00002E                     	ds	1
   423  00002F                     byte_read@i:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x2E
   427  00002F                     	ds	2
   428  000031                     ??_get_time:
   429  000031                     ??_get_timer1_counter:
   430                           
   431                           ; 1 bytes @ 0x30
   432  000031                     	ds	1
   433  000032                     get_time@seconds:
   434                           	opt stack 0
   435  000032                     get_timer1_counter@seconds:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x31
   439  000032                     	ds	1
   440  000033                     get_time@aux_hour:
   441                           	opt stack 0
   442  000033                     get_timer1_counter@minutes:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0x32
   446  000033                     	ds	1
   447  000034                     get_time@minutes:
   448                           	opt stack 0
   449  000034                     get_timer1_counter@hours:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x33
   453  000034                     	ds	1
   454  000035                     get_time@aux:
   455                           	opt stack 0
   456  000035                     get_timer1_counter@aux:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x34
   460  000035                     	ds	1
   461  000036                     get_time@hours:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x35
   465  000036                     	ds	1
   466                           tblptru	equ	0xFF8
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           
   470 ;;
   471 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   472 ;;
   473 ;; *************** function _main *****************
   474 ;; Defined at:
   475 ;;		line 37 in file "main.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;		None
   478 ;; Auto vars:     Size  Location     Type
   479 ;;  format          1   65[BANK0 ] unsigned char 
   480 ;;  temp            1    0        unsigned char 
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   490 ;;      Params:         0       0       0       0       0       0       0       0       0
   491 ;;      Locals:         0       1       0       0       0       0       0       0       0
   492 ;;      Temps:          0       2       0       0       0       0       0       0       0
   493 ;;      Totals:         0       3       0       0       0       0       0       0       0
   494 ;;Total ram usage:        3 bytes
   495 ;; Hardware stack levels required when called:   10
   496 ;; This function calls:
   497 ;;		_ConfigureOscillator
   498 ;;		_InitApp
   499 ;;		_buzzer_disable
   500 ;;		_get_time
   501 ;;		_get_timer1_counter
   502 ;;		_ir_is_code_number
   503 ;; This function is called by:
   504 ;;		Startup code after reset
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           	psect	text0
   509  000314                     __ptext0:
   510                           	opt stack 0
   511  000314                     _main:
   512                           	opt stack 21
   513                           
   514                           ;main.c: 40: ConfigureOscillator();
   515                           
   516                           ;incstack = 0
   517  000314  EC5A  F007         	call	_ConfigureOscillator	;wreg free
   518                           
   519                           ;main.c: 43: InitApp();
   520  000318  EC51  F005         	call	_InitApp	;wreg free
   521                           
   522                           ;main.c: 48: aux1[0] = 1;
   523  00031C  0E01               	movlw	1
   524  00031E  0100               	movlb	0	; () banked
   525  000320  6FAB               	movwf	_aux1& (0+255),b
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 49: aux1[1] = 2;
   529  000322  0E02               	movlw	2
   530  000324  0100               	movlb	0	; () banked
   531  000326  6FAC               	movwf	(_aux1+1)& (0+255),b
   532                           
   533                           ; BSR set to: 0
   534                           ;main.c: 50: aux1[2] = 3;
   535  000328  0E03               	movlw	3
   536  00032A  0100               	movlb	0	; () banked
   537  00032C  6FAD               	movwf	(_aux1+2)& (0+255),b
   538                           
   539                           ; BSR set to: 0
   540                           ;main.c: 51: aux1[3] = 4;
   541  00032E  0E04               	movlw	4
   542  000330  0100               	movlb	0	; () banked
   543  000332  6FAE               	movwf	(_aux1+3)& (0+255),b
   544                           
   545                           ; BSR set to: 0
   546                           ;main.c: 52: aux1[4] = 5;
   547  000334  0E05               	movlw	5
   548  000336  0100               	movlb	0	; () banked
   549  000338  6FAF               	movwf	(_aux1+4)& (0+255),b
   550                           
   551                           ; BSR set to: 0
   552                           ;main.c: 53: aux1[5] = 6;
   553  00033A  0E06               	movlw	6
   554  00033C  0100               	movlb	0	; () banked
   555  00033E  6FB0               	movwf	(_aux1+5)& (0+255),b
   556                           
   557                           ; BSR set to: 0
   558                           ;main.c: 55: char temp;
   559                           ;main.c: 56: char format = 1;
   560  000340  0E01               	movlw	1
   561  000342  0100               	movlb	0	; () banked
   562  000344  6FA1               	movwf	main@format& (0+255),b
   563                           
   564                           ; BSR set to: 0
   565                           ;main.c: 57: buzzer_disable();
   566  000346  EC38  F007         	call	_buzzer_disable	;wreg free
   567  00034A                     l3423:
   568                           
   569                           ;main.c: 59: {
   570                           ;main.c: 60: state = next;
   571  00034A  C037  F0B2         	movff	_next,_state
   572  00034E  C038  F0B3         	movff	_next+1,_state+1
   573                           
   574                           ;main.c: 62: switch(state){
   575  000352  D07C               	goto	l3485
   576  000354                     l3425:
   577                           
   578                           ;main.c: 65: if(human_code == 13)
   579  000354  0E0D               	movlw	13
   580  000356  1839               	xorwf	_human_code,w,c
   581  000358  A4D8               	btfss	status,2,c
   582  00035A  D002               	goto	l3429
   583                           
   584                           ;main.c: 66: format = 1;
   585  00035C  0E01               	movlw	1
   586  00035E  D005               	goto	L1
   587  000360                     l3429:
   588                           
   589                           ;main.c: 67: else if (human_code == 14)
   590  000360  0E0E               	movlw	14
   591  000362  1839               	xorwf	_human_code,w,c
   592  000364  A4D8               	btfss	status,2,c
   593  000366  D003               	goto	l3433
   594                           
   595                           ;main.c: 68: format = 0;
   596  000368  0E00               	movlw	0
   597  00036A                     L1:
   598  00036A  0100               	movlb	0	; () banked
   599  00036C  6FA1               	movwf	main@format& (0+255),b
   600  00036E                     l3433:
   601                           
   602                           ;main.c: 69: get_time(aux1,format);
   603  00036E  0EAB               	movlw	low _aux1
   604  000370  0100               	movlb	0	; () banked
   605  000372  6F9C               	movwf	get_time@data& (0+255),b
   606  000374  0E00               	movlw	high _aux1
   607  000376  0100               	movlb	0	; () banked
   608  000378  6F9D               	movwf	(get_time@data+1)& (0+255),b
   609  00037A  C0A1  F09E         	movff	main@format,get_time@format
   610  00037E  ECA7  F003         	call	_get_time	;wreg free
   611                           
   612                           ;main.c: 76: break;
   613  000382  D7E3               	goto	l3423
   614  000384                     l3435:
   615                           
   616                           ;main.c: 80: if(ir_is_code_number(human_code) && human_code <=2)
   617  000384  5039               	movf	_human_code,w,c
   618  000386  EC05  F006         	call	_ir_is_code_number
   619  00038A  0900               	iorlw	0
   620  00038C  B4D8               	btfsc	status,2,c
   621  00038E  D7DD               	goto	l3423
   622  000390  0E03               	movlw	3
   623  000392  6039               	cpfslt	_human_code,c
   624  000394  D7DA               	goto	l3423
   625                           
   626                           ;main.c: 81: {
   627                           ;main.c: 82: aux1[3] = human_code;
   628  000396  C039  F0AE         	movff	_human_code,_aux1+3
   629                           
   630                           ;main.c: 83: next = 2;
   631  00039A  0E00               	movlw	0
   632  00039C  6E38               	movwf	_next+1,c
   633  00039E  0E02               	movlw	2
   634  0003A0  D035               	goto	L4
   635  0003A2                     l3443:
   636                           
   637                           ;main.c: 84: human_code = -1;
   638  0003A2  6839               	setf	_human_code,c
   639                           
   640                           ;main.c: 85: }
   641                           ;main.c: 86: break;
   642  0003A4  D7D2               	goto	l3423
   643  0003A6                     l3445:
   644                           
   645                           ;main.c: 89: if(ir_is_code_number(human_code) && ((aux1[2]<2 && human_code <=9) || human
      +                          _code <=3))
   646  0003A6  5039               	movf	_human_code,w,c
   647  0003A8  EC05  F006         	call	_ir_is_code_number
   648  0003AC  0900               	iorlw	0
   649  0003AE  B4D8               	btfsc	status,2,c
   650  0003B0  D7CC               	goto	l3423
   651  0003B2  0E02               	movlw	2
   652  0003B4  0100               	movlb	0	; () banked
   653  0003B6  61AD               	cpfslt	(_aux1+2)& (0+255),b
   654  0003B8  D003               	goto	l3451
   655                           
   656                           ; BSR set to: 0
   657  0003BA  0E09               	movlw	9
   658  0003BC  6439               	cpfsgt	_human_code,c
   659  0003BE  D003               	goto	l127
   660  0003C0                     l3451:
   661                           
   662                           ; BSR set to: 0
   663  0003C0  0E04               	movlw	4
   664  0003C2  6039               	cpfslt	_human_code,c
   665  0003C4  D7C2               	goto	l3423
   666  0003C6                     l127:
   667                           
   668                           ; BSR set to: 0
   669                           ;main.c: 90: {
   670                           ;main.c: 91: aux1[2] = human_code;
   671  0003C6  C039  F0AD         	movff	_human_code,_aux1+2
   672                           
   673                           ; BSR set to: 0
   674                           ;main.c: 92: next = 3;
   675  0003CA  0E00               	movlw	0
   676  0003CC  6E38               	movwf	_next+1,c
   677  0003CE  0E03               	movlw	3
   678  0003D0  D01D               	goto	L4
   679  0003D2                     l3457:
   680                           
   681                           ; BSR set to: 0
   682                           ;main.c: 98: if(ir_is_code_number(human_code) && human_code <=5)
   683  0003D2  5039               	movf	_human_code,w,c
   684  0003D4  EC05  F006         	call	_ir_is_code_number
   685  0003D8  0900               	iorlw	0
   686  0003DA  B4D8               	btfsc	status,2,c
   687  0003DC  D7B6               	goto	l3423
   688  0003DE  0E06               	movlw	6
   689  0003E0  6039               	cpfslt	_human_code,c
   690  0003E2  D7B3               	goto	l3423
   691                           
   692                           ;main.c: 99: {
   693                           ;main.c: 100: aux1[1] = human_code;
   694  0003E4  C039  F0AC         	movff	_human_code,_aux1+1
   695                           
   696                           ;main.c: 101: next = 4;
   697  0003E8  0E00               	movlw	0
   698  0003EA  6E38               	movwf	_next+1,c
   699  0003EC  0E04               	movlw	4
   700  0003EE  D00E               	goto	L4
   701  0003F0                     l3467:
   702                           
   703                           ;main.c: 106: if(ir_is_code_number(human_code) && human_code <=9)
   704  0003F0  5039               	movf	_human_code,w,c
   705  0003F2  EC05  F006         	call	_ir_is_code_number
   706  0003F6  0900               	iorlw	0
   707  0003F8  B4D8               	btfsc	status,2,c
   708  0003FA  D7A7               	goto	l3423
   709  0003FC  0E0A               	movlw	10
   710  0003FE  6039               	cpfslt	_human_code,c
   711  000400  D7A4               	goto	l3423
   712                           
   713                           ;main.c: 107: {
   714                           ;main.c: 108: aux1[0] = human_code;
   715  000402  C039  F0AB         	movff	_human_code,_aux1
   716                           
   717                           ;main.c: 109: next = 1;
   718  000406  0E00               	movlw	0
   719  000408  6E38               	movwf	_next+1,c
   720  00040A  0E01               	movlw	1
   721  00040C                     L4:
   722  00040C  6E37               	movwf	_next,c
   723  00040E  D7C9               	goto	l3443
   724  000410                     l3477:
   725                           
   726                           ;main.c: 115: timer1_counter_10 = 10;
   727  000410  0E0A               	movlw	10
   728  000412  0100               	movlb	0	; () banked
   729  000414  6FB1               	movwf	_timer1_counter_10& (0+255),b
   730                           
   731                           ; BSR set to: 0
   732                           ;main.c: 116: get_timer1_counter(aux1);
   733  000416  0EAB               	movlw	low _aux1
   734  000418  0100               	movlb	0	; () banked
   735  00041A  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   736  00041C  0E00               	movlw	high _aux1
   737  00041E  0100               	movlb	0	; () banked
   738  000420  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   739  000422  EC80  F004         	call	_get_timer1_counter	;wreg free
   740                           
   741                           ;main.c: 118: break;
   742  000426  D791               	goto	l3423
   743  000428                     l3481:
   744                           
   745                           ;main.c: 120: get_timer1_counter(aux1);
   746  000428  0EAB               	movlw	low _aux1
   747  00042A  0100               	movlb	0	; () banked
   748  00042C  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   749  00042E  0E00               	movlw	high _aux1
   750  000430  0100               	movlb	0	; () banked
   751  000432  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   752  000434  EC80  F004         	call	_get_timer1_counter	;wreg free
   753                           
   754                           ;main.c: 121: break;
   755  000438  D788               	goto	l3423
   756  00043A                     l3483:
   757                           
   758                           ;main.c: 123: get_timer1_counter(aux1);
   759  00043A  0EAB               	movlw	low _aux1
   760  00043C  0100               	movlb	0	; () banked
   761  00043E  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   762  000440  0E00               	movlw	high _aux1
   763  000442  0100               	movlb	0	; () banked
   764  000444  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   765  000446  EC80  F004         	call	_get_timer1_counter	;wreg free
   766                           
   767                           ;main.c: 129: }
   768                           
   769                           ;main.c: 127: default: ;
   770                           
   771                           ;main.c: 126: break;
   772                           
   773                           ;main.c: 125: case 6:
   774                           
   775                           ;main.c: 124: break;
   776  00044A  D77F               	goto	l3423
   777  00044C                     l3485:
   778  00044C  C0B2  F09F         	movff	_state,??_main
   779  000450  C0B3  F0A0         	movff	_state+1,??_main+1
   780                           
   781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   782                           ; Switch size 1, requested type "space"
   783                           ; Number of cases is 1, Range of values is 0 to 0
   784                           ; switch strategies available:
   785                           ; Name         Instructions Cycles
   786                           ; simple_byte            4     3 (average)
   787                           ;	Chosen strategy is simple_byte
   788  000454  0100               	movlb	0	; () banked
   789  000456  51A0               	movf	(??_main+1)& (0+255),w,b
   790  000458  0A00               	xorlw	0	; case 0
   791  00045A  A4D8               	btfss	status,2,c
   792  00045C  D776               	goto	l3423
   793                           
   794                           ; BSR set to: 0
   795                           ; Switch size 1, requested type "space"
   796                           ; Number of cases is 9, Range of values is 0 to 12
   797                           ; switch strategies available:
   798                           ; Name         Instructions Cycles
   799                           ; simple_byte           28    15 (average)
   800                           ;	Chosen strategy is simple_byte
   801  00045E  0100               	movlb	0	; () banked
   802  000460  519F               	movf	??_main& (0+255),w,b
   803  000462  0A00               	xorlw	0	; case 0
   804  000464  B4D8               	btfsc	status,2,c
   805  000466  D776               	goto	l3425
   806  000468  0A01               	xorlw	1	; case 1
   807  00046A  B4D8               	btfsc	status,2,c
   808  00046C  D78B               	goto	l3435
   809  00046E  0A03               	xorlw	3	; case 2
   810  000470  B4D8               	btfsc	status,2,c
   811  000472  D799               	goto	l3445
   812  000474  0A01               	xorlw	1	; case 3
   813  000476  B4D8               	btfsc	status,2,c
   814  000478  D7AC               	goto	l3457
   815  00047A  0A07               	xorlw	7	; case 4
   816  00047C  B4D8               	btfsc	status,2,c
   817  00047E  D7B8               	goto	l3467
   818  000480  0A01               	xorlw	1	; case 5
   819  000482  B4D8               	btfsc	status,2,c
   820  000484  D7C5               	goto	l3477
   821  000486  0A03               	xorlw	3	; case 6
   822  000488  B4D8               	btfsc	status,2,c
   823  00048A  D75F               	goto	l3423
   824  00048C  0A0D               	xorlw	13	; case 11
   825  00048E  B4D8               	btfsc	status,2,c
   826  000490  D7CB               	goto	l3481
   827  000492  0A07               	xorlw	7	; case 12
   828  000494  B4D8               	btfsc	status,2,c
   829  000496  D7D1               	goto	l3483
   830                           
   831                           ; BSR set to: 0
   832                           
   833                           ; BSR set to: 0
   834  000498  D758               	goto	l3423
   835  00049A                     __end_of_main:
   836                           	opt stack 0
   837                           tblptru	equ	0xFF8
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           status	equ	0xFD8
   841                           
   842 ;; *************** function _ir_is_code_number *****************
   843 ;; Defined at:
   844 ;;		line 407 in file "user.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  human_code      1    wreg     unsigned char 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  human_code      1   37[COMRAM] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      unsigned char 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   858 ;;      Params:         0       0       0       0       0       0       0       0       0
   859 ;;      Locals:         1       0       0       0       0       0       0       0       0
   860 ;;      Temps:          0       0       0       0       0       0       0       0       0
   861 ;;      Totals:         1       0       0       0       0       0       0       0       0
   862 ;;Total ram usage:        1 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    6
   865 ;; This function calls:
   866 ;;		Nothing
   867 ;; This function is called by:
   868 ;;		_main
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text1
   873  000C0A                     __ptext1:
   874                           	opt stack 0
   875  000C0A                     _ir_is_code_number:
   876                           	opt stack 24
   877                           
   878                           ; BSR set to: 0
   879                           ;incstack = 0
   880                           ;ir_is_code_number@human_code stored from wreg
   881  000C0A  6E26               	movwf	ir_is_code_number@human_code,c
   882                           
   883                           ;user.c: 409: if(human_code == 0 || human_code == 1 || human_code == 2 || human_code == 
      +                          3 || human_code == 4
   884                           ;user.c: 410: || human_code == 5 || human_code == 6 || human_code == 7 || human_code == 
      +                          8 || human_code == 9)
   885  000C0C  5026               	movf	ir_is_code_number@human_code,w,c
   886  000C0E  B4D8               	btfsc	status,2,c
   887  000C10  D023               	goto	l3371
   888  000C12  0426               	decf	ir_is_code_number@human_code,w,c
   889  000C14  B4D8               	btfsc	status,2,c
   890  000C16  D020               	goto	l3371
   891  000C18  0E02               	movlw	2
   892  000C1A  1826               	xorwf	ir_is_code_number@human_code,w,c
   893  000C1C  B4D8               	btfsc	status,2,c
   894  000C1E  D01C               	goto	l3371
   895  000C20  0E03               	movlw	3
   896  000C22  1826               	xorwf	ir_is_code_number@human_code,w,c
   897  000C24  B4D8               	btfsc	status,2,c
   898  000C26  D018               	goto	l3371
   899  000C28  0E04               	movlw	4
   900  000C2A  1826               	xorwf	ir_is_code_number@human_code,w,c
   901  000C2C  B4D8               	btfsc	status,2,c
   902  000C2E  D014               	goto	l3371
   903  000C30  0E05               	movlw	5
   904  000C32  1826               	xorwf	ir_is_code_number@human_code,w,c
   905  000C34  B4D8               	btfsc	status,2,c
   906  000C36  D010               	goto	l3371
   907  000C38  0E06               	movlw	6
   908  000C3A  1826               	xorwf	ir_is_code_number@human_code,w,c
   909  000C3C  B4D8               	btfsc	status,2,c
   910  000C3E  D00C               	goto	l3371
   911  000C40  0E07               	movlw	7
   912  000C42  1826               	xorwf	ir_is_code_number@human_code,w,c
   913  000C44  B4D8               	btfsc	status,2,c
   914  000C46  D008               	goto	l3371
   915  000C48  0E08               	movlw	8
   916  000C4A  1826               	xorwf	ir_is_code_number@human_code,w,c
   917  000C4C  B4D8               	btfsc	status,2,c
   918  000C4E  D004               	goto	l3371
   919  000C50  0E09               	movlw	9
   920  000C52  1826               	xorwf	ir_is_code_number@human_code,w,c
   921  000C54  A4D8               	btfss	status,2,c
   922  000C56  D002               	goto	l3377
   923  000C58                     l3371:
   924                           
   925                           ;user.c: 411: return 1;
   926  000C58  0E01               	movlw	1
   927  000C5A  0012               	return	
   928  000C5C                     l3377:
   929                           
   930                           ;user.c: 412: else
   931                           ;user.c: 413: return 0;
   932  000C5C  0E00               	movlw	0
   933  000C5E  0012               	return	
   934  000C60                     __end_of_ir_is_code_number:
   935                           	opt stack 0
   936                           tblptru	equ	0xFF8
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           status	equ	0xFD8
   940                           
   941 ;; *************** function _get_timer1_counter *****************
   942 ;; Defined at:
   943 ;;		line 506 in file "user.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  data            2   60[BANK0 ] PTR unsigned char 
   946 ;;		 -> aux1(6), 
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  aux             1   52[COMRAM] unsigned char 
   949 ;;  hours           1   51[COMRAM] unsigned char 
   950 ;;  minutes         1   50[COMRAM] unsigned char 
   951 ;;  seconds         1   49[COMRAM] unsigned char 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   961 ;;      Params:         0       2       0       0       0       0       0       0       0
   962 ;;      Locals:         4       0       0       0       0       0       0       0       0
   963 ;;      Temps:          1       0       0       0       0       0       0       0       0
   964 ;;      Totals:         5       2       0       0       0       0       0       0       0
   965 ;;Total ram usage:        7 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    9
   968 ;; This function calls:
   969 ;;		_byte_read
   970 ;;		_get_seconds_reg
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text2
   977  000900                     __ptext2:
   978                           	opt stack 0
   979  000900                     _get_timer1_counter:
   980                           	opt stack 21
   981                           
   982                           ;user.c: 508: char aux = 0x81;
   983                           
   984                           ;incstack = 0
   985  000900  0E81               	movlw	129
   986  000902  6E35               	movwf	get_timer1_counter@aux,c
   987                           
   988                           ;user.c: 509: char seconds = byte_read(aux);
   989  000904  5035               	movf	get_timer1_counter@aux,w,c
   990  000906  EC1A  F005         	call	_byte_read
   991  00090A  6E32               	movwf	get_timer1_counter@seconds,c
   992                           
   993                           ;user.c: 510: aux = 0x83;
   994  00090C  0E83               	movlw	131
   995  00090E  6E35               	movwf	get_timer1_counter@aux,c
   996                           
   997                           ;user.c: 511: char minutes = byte_read(aux);
   998  000910  5035               	movf	get_timer1_counter@aux,w,c
   999  000912  EC1A  F005         	call	_byte_read
  1000  000916  6E33               	movwf	get_timer1_counter@minutes,c
  1001                           
  1002                           ;user.c: 512: aux = 0x85;
  1003  000918  0E85               	movlw	133
  1004  00091A  6E35               	movwf	get_timer1_counter@aux,c
  1005                           
  1006                           ;user.c: 513: char hours = byte_read(aux);
  1007  00091C  5035               	movf	get_timer1_counter@aux,w,c
  1008  00091E  EC1A  F005         	call	_byte_read
  1009  000922  6E34               	movwf	get_timer1_counter@hours,c
  1010                           
  1011                           ;user.c: 516: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  1012  000924  0100               	movlb	0	; () banked
  1013  000926  51B1               	movf	_timer1_counter_10& (0+255),w,b
  1014  000928  EC30  F006         	call	_get_seconds_reg
  1015  00092C  0B0F               	andlw	15
  1016  00092E  C09C  FFD9         	movff	get_timer1_counter@data,fsr2l
  1017  000932  C09D  FFDA         	movff	get_timer1_counter@data+1,fsr2h
  1018  000936  6EDF               	movwf	indf2,c
  1019                           
  1020                           ;user.c: 517: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  1021  000938  0100               	movlb	0	; () banked
  1022  00093A  EE20 F001          	lfsr	2,1
  1023  00093E  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1024  000940  26D9               	addwf	fsr2l,f,c
  1025  000942  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1026  000944  22DA               	addwfc	fsr2h,f,c
  1027  000946  0100               	movlb	0	; () banked
  1028  000948  51B1               	movf	_timer1_counter_10& (0+255),w,b
  1029  00094A  EC30  F006         	call	_get_seconds_reg
  1030  00094E  6E31               	movwf	??_get_timer1_counter& (0+255),c
  1031  000950  3831               	swapf	??_get_timer1_counter,w,c
  1032  000952  0B0F               	andlw	15
  1033  000954  0B0F               	andlw	15
  1034  000956  6EDF               	movwf	indf2,c
  1035                           
  1036                           ;user.c: 518: data[2] = 0;
  1037  000958  0100               	movlb	0	; () banked
  1038  00095A  EE20 F002          	lfsr	2,2
  1039  00095E  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1040  000960  26D9               	addwf	fsr2l,f,c
  1041  000962  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1042  000964  22DA               	addwfc	fsr2h,f,c
  1043  000966  0E00               	movlw	0
  1044  000968  6EDF               	movwf	indf2,c
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;user.c: 519: data[3] = 0;
  1048  00096A  0100               	movlb	0	; () banked
  1049  00096C  EE20 F003          	lfsr	2,3
  1050  000970  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1051  000972  26D9               	addwf	fsr2l,f,c
  1052  000974  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1053  000976  22DA               	addwfc	fsr2h,f,c
  1054  000978  0E00               	movlw	0
  1055  00097A  6EDF               	movwf	indf2,c
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;user.c: 520: data[4] = 'P';
  1059  00097C  0100               	movlb	0	; () banked
  1060  00097E  EE20 F004          	lfsr	2,4
  1061  000982  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1062  000984  26D9               	addwf	fsr2l,f,c
  1063  000986  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1064  000988  22DA               	addwfc	fsr2h,f,c
  1065  00098A  0E50               	movlw	80
  1066  00098C  6EDF               	movwf	indf2,c
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;user.c: 521: data[5] = 'U';
  1070  00098E  0100               	movlb	0	; () banked
  1071  000990  EE20 F005          	lfsr	2,5
  1072  000994  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1073  000996  26D9               	addwf	fsr2l,f,c
  1074  000998  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1075  00099A  22DA               	addwfc	fsr2h,f,c
  1076  00099C  0E55               	movlw	85
  1077  00099E  6EDF               	movwf	indf2,c
  1078                           
  1079                           ; BSR set to: 0
  1080  0009A0  0012               	return		;funcret
  1081  0009A2                     __end_of_get_timer1_counter:
  1082                           	opt stack 0
  1083                           tblptru	equ	0xFF8
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           indf2	equ	0xFDF
  1087                           fsr2h	equ	0xFDA
  1088                           fsr2l	equ	0xFD9
  1089                           status	equ	0xFD8
  1090                           
  1091 ;; *************** function _get_seconds_reg *****************
  1092 ;; Defined at:
  1093 ;;		line 286 in file "user.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;  seconds         1    wreg     unsigned char 
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  seconds         1   38[COMRAM] unsigned char 
  1098 ;;  res             1   37[COMRAM] unsigned char 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      unsigned char 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2, status,0
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1108 ;;      Params:         0       0       0       0       0       0       0       0       0
  1109 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1111 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1112 ;;Total ram usage:        2 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    6
  1115 ;; This function calls:
  1116 ;;		Nothing
  1117 ;; This function is called by:
  1118 ;;		_get_timer1_counter
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text3
  1123  000C60                     __ptext3:
  1124                           	opt stack 0
  1125  000C60                     _get_seconds_reg:
  1126                           	opt stack 23
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;incstack = 0
  1130                           ;get_seconds_reg@seconds stored from wreg
  1131  000C60  6E27               	movwf	get_seconds_reg@seconds,c
  1132                           
  1133                           ;user.c: 288: char res = 0;
  1134  000C62  0E00               	movlw	0
  1135  000C64  6E26               	movwf	get_seconds_reg@res,c
  1136                           
  1137                           ;user.c: 289: if(seconds<10)
  1138  000C66  0E0A               	movlw	10
  1139  000C68  6027               	cpfslt	get_seconds_reg@seconds,c
  1140  000C6A  D003               	goto	l3253
  1141                           
  1142                           ;user.c: 290: {
  1143                           ;user.c: 291: res = seconds;
  1144  000C6C  C027  F026         	movff	get_seconds_reg@seconds,get_seconds_reg@res
  1145                           
  1146                           ;user.c: 292: }
  1147  000C70  D020               	goto	l3271
  1148  000C72                     l3253:
  1149                           
  1150                           ;user.c: 293: else if(seconds <20)
  1151  000C72  0E14               	movlw	20
  1152  000C74  6027               	cpfslt	get_seconds_reg@seconds,c
  1153  000C76  D004               	goto	l3257
  1154                           
  1155                           ;user.c: 294: {
  1156                           ;user.c: 295: res = 1<<4 | (seconds - 10);
  1157  000C78  5027               	movf	get_seconds_reg@seconds,w,c
  1158  000C7A  0FF6               	addlw	246
  1159  000C7C  0910               	iorlw	16
  1160  000C7E  D018               	goto	L8
  1161  000C80                     l3257:
  1162                           
  1163                           ;user.c: 297: else if(seconds <30)
  1164  000C80  0E1E               	movlw	30
  1165  000C82  6027               	cpfslt	get_seconds_reg@seconds,c
  1166  000C84  D004               	goto	l3261
  1167                           
  1168                           ;user.c: 298: {
  1169                           ;user.c: 299: res = 2<<4 | (seconds -20);
  1170  000C86  5027               	movf	get_seconds_reg@seconds,w,c
  1171  000C88  0FEC               	addlw	236
  1172  000C8A  0920               	iorlw	32
  1173  000C8C  D011               	goto	L8
  1174  000C8E                     l3261:
  1175                           
  1176                           ;user.c: 301: else if(seconds <40)
  1177  000C8E  0E28               	movlw	40
  1178  000C90  6027               	cpfslt	get_seconds_reg@seconds,c
  1179  000C92  D004               	goto	l3265
  1180                           
  1181                           ;user.c: 302: {
  1182                           ;user.c: 303: res = 3<<4 | (seconds - 30);
  1183  000C94  5027               	movf	get_seconds_reg@seconds,w,c
  1184  000C96  0FE2               	addlw	226
  1185  000C98  0930               	iorlw	48
  1186  000C9A  D00A               	goto	L8
  1187  000C9C                     l3265:
  1188                           
  1189                           ;user.c: 305: else if(seconds <50)
  1190  000C9C  0E32               	movlw	50
  1191  000C9E  6027               	cpfslt	get_seconds_reg@seconds,c
  1192  000CA0  D004               	goto	l3269
  1193                           
  1194                           ;user.c: 306: {
  1195                           ;user.c: 307: res = 4<<4 | (seconds - 40);
  1196  000CA2  5027               	movf	get_seconds_reg@seconds,w,c
  1197  000CA4  0FD8               	addlw	216
  1198  000CA6  0940               	iorlw	64
  1199  000CA8  D003               	goto	L8
  1200  000CAA                     l3269:
  1201                           
  1202                           ;user.c: 309: else
  1203                           ;user.c: 310: {
  1204                           ;user.c: 311: res = 5<<4 | (seconds -50);
  1205  000CAA  5027               	movf	get_seconds_reg@seconds,w,c
  1206  000CAC  0FCE               	addlw	206
  1207  000CAE  0950               	iorlw	80
  1208  000CB0                     L8:
  1209  000CB0  6E26               	movwf	get_seconds_reg@res,c
  1210  000CB2                     l3271:
  1211                           
  1212                           ;user.c: 312: }
  1213                           ;user.c: 314: return res;
  1214  000CB2  5026               	movf	get_seconds_reg@res,w,c
  1215  000CB4  0012               	return	
  1216  000CB6                     __end_of_get_seconds_reg:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           indf2	equ	0xFDF
  1222                           fsr2h	equ	0xFDA
  1223                           fsr2l	equ	0xFD9
  1224                           status	equ	0xFD8
  1225                           
  1226 ;; *************** function _get_time *****************
  1227 ;; Defined at:
  1228 ;;		line 242 in file "user.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  data            2   60[BANK0 ] PTR unsigned char 
  1231 ;;		 -> aux1(6), 
  1232 ;;  format          1   62[BANK0 ] unsigned char 
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  aux_hour        1   50[COMRAM] unsigned char 
  1235 ;;  hours           1   53[COMRAM] unsigned char 
  1236 ;;  aux             1   52[COMRAM] unsigned char 
  1237 ;;  minutes         1   51[COMRAM] unsigned char 
  1238 ;;  seconds         1   49[COMRAM] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1248 ;;      Params:         0       3       0       0       0       0       0       0       0
  1249 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1250 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1251 ;;      Totals:         6       3       0       0       0       0       0       0       0
  1252 ;;Total ram usage:        9 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    9
  1255 ;; This function calls:
  1256 ;;		_byte_read
  1257 ;; This function is called by:
  1258 ;;		_main
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text4
  1263  00074E                     __ptext4:
  1264                           	opt stack 0
  1265  00074E                     _get_time:
  1266                           	opt stack 21
  1267                           
  1268                           ;user.c: 244: char aux = 0x81;
  1269                           
  1270                           ;incstack = 0
  1271  00074E  0E81               	movlw	129
  1272  000750  6E35               	movwf	get_time@aux,c
  1273                           
  1274                           ;user.c: 245: char seconds = byte_read(aux);
  1275  000752  5035               	movf	get_time@aux,w,c
  1276  000754  EC1A  F005         	call	_byte_read
  1277  000758  6E32               	movwf	get_time@seconds,c
  1278                           
  1279                           ;user.c: 246: aux = 0x83;
  1280  00075A  0E83               	movlw	131
  1281  00075C  6E35               	movwf	get_time@aux,c
  1282                           
  1283                           ;user.c: 247: char minutes = byte_read(aux);
  1284  00075E  5035               	movf	get_time@aux,w,c
  1285  000760  EC1A  F005         	call	_byte_read
  1286  000764  6E34               	movwf	get_time@minutes,c
  1287                           
  1288                           ;user.c: 248: aux = 0x85;
  1289  000766  0E85               	movlw	133
  1290  000768  6E35               	movwf	get_time@aux,c
  1291                           
  1292                           ;user.c: 249: char hours = byte_read(aux);
  1293  00076A  5035               	movf	get_time@aux,w,c
  1294  00076C  EC1A  F005         	call	_byte_read
  1295  000770  6E36               	movwf	get_time@hours,c
  1296                           
  1297                           ;user.c: 252: data[0] = minutes & 0x0f;
  1298  000772  5034               	movf	get_time@minutes,w,c
  1299  000774  0B0F               	andlw	15
  1300  000776  C09C  FFD9         	movff	get_time@data,fsr2l
  1301  00077A  C09D  FFDA         	movff	get_time@data+1,fsr2h
  1302  00077E  6EDF               	movwf	indf2,c
  1303                           
  1304                           ;user.c: 253: data[1] = (minutes & 0xf0)>>4;
  1305  000780  0100               	movlb	0	; () banked
  1306  000782  EE20 F001          	lfsr	2,1
  1307  000786  519C               	movf	get_time@data& (0+255),w,b
  1308  000788  26D9               	addwf	fsr2l,f,c
  1309  00078A  519D               	movf	(get_time@data+1)& (0+255),w,b
  1310  00078C  22DA               	addwfc	fsr2h,f,c
  1311  00078E  3834               	swapf	get_time@minutes,w,c
  1312  000790  0B0F               	andlw	15
  1313  000792  0B0F               	andlw	15
  1314  000794  6EDF               	movwf	indf2,c
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;user.c: 255: if(format == 1)
  1318  000796  0100               	movlb	0	; () banked
  1319  000798  059E               	decf	get_time@format& (0+255),w,b
  1320  00079A  A4D8               	btfss	status,2,c
  1321  00079C  D00A               	goto	l3341
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;user.c: 256: {
  1325                           ;user.c: 258: data[4] = 1;
  1326  00079E  0100               	movlb	0	; () banked
  1327  0007A0  EE20 F004          	lfsr	2,4
  1328  0007A4  519C               	movf	get_time@data& (0+255),w,b
  1329  0007A6  26D9               	addwf	fsr2l,f,c
  1330  0007A8  519D               	movf	(get_time@data+1)& (0+255),w,b
  1331  0007AA  22DA               	addwfc	fsr2h,f,c
  1332  0007AC  0E01               	movlw	1
  1333  0007AE  6EDF               	movwf	indf2,c
  1334  0007B0  D017               	goto	l3347
  1335  0007B2                     l3341:
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;user.c: 263: else
  1339                           ;user.c: 264: {
  1340                           ;user.c: 265: data[4] = 2;
  1341  0007B2  0100               	movlb	0	; () banked
  1342  0007B4  EE20 F004          	lfsr	2,4
  1343  0007B8  519C               	movf	get_time@data& (0+255),w,b
  1344  0007BA  26D9               	addwf	fsr2l,f,c
  1345  0007BC  519D               	movf	(get_time@data+1)& (0+255),w,b
  1346  0007BE  22DA               	addwfc	fsr2h,f,c
  1347  0007C0  0E02               	movlw	2
  1348  0007C2  6EDF               	movwf	indf2,c
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;user.c: 266: char aux_hour = (hours>>4 & 0x0f)*10 + (hours & 0x0f);
  1352  0007C4  C036  F031         	movff	get_time@hours,??_get_time
  1353  0007C8  0E0F               	movlw	15
  1354  0007CA  1631               	andwf	??_get_time,f,c
  1355  0007CC  3836               	swapf	get_time@hours,w,c
  1356  0007CE  0B0F               	andlw	15
  1357  0007D0  0B0F               	andlw	15
  1358  0007D2  0D0A               	mullw	10
  1359  0007D4  50F3               	movf	prodl,w,c
  1360  0007D6  2431               	addwf	??_get_time,w,c
  1361  0007D8  6E33               	movwf	get_time@aux_hour,c
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;user.c: 267: if(aux_hour<=12)
  1365  0007DA  0E0D               	movlw	13
  1366  0007DC  6033               	cpfslt	get_time@aux_hour,c
  1367  0007DE  D015               	goto	l3349
  1368  0007E0                     l3347:
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;user.c: 268: {
  1372                           ;user.c: 269: data[2] = hours & 0x0f;
  1373  0007E0  0100               	movlb	0	; () banked
  1374  0007E2  EE20 F002          	lfsr	2,2
  1375  0007E6  519C               	movf	get_time@data& (0+255),w,b
  1376  0007E8  26D9               	addwf	fsr2l,f,c
  1377  0007EA  519D               	movf	(get_time@data+1)& (0+255),w,b
  1378  0007EC  22DA               	addwfc	fsr2h,f,c
  1379  0007EE  5036               	movf	get_time@hours,w,c
  1380  0007F0  0B0F               	andlw	15
  1381  0007F2  6EDF               	movwf	indf2,c
  1382                           
  1383                           ;user.c: 270: data[3] = (hours & 0xf0)>>4;
  1384  0007F4  0100               	movlb	0	; () banked
  1385  0007F6  EE20 F003          	lfsr	2,3
  1386  0007FA  519C               	movf	get_time@data& (0+255),w,b
  1387  0007FC  26D9               	addwf	fsr2l,f,c
  1388  0007FE  519D               	movf	(get_time@data+1)& (0+255),w,b
  1389  000800  22DA               	addwfc	fsr2h,f,c
  1390  000802  3836               	swapf	get_time@hours,w,c
  1391  000804  0B0F               	andlw	15
  1392  000806  0B0F               	andlw	15
  1393  000808  D01A               	goto	L9
  1394  00080A                     l3349:
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;user.c: 272: else
  1398                           ;user.c: 273: {
  1399                           ;user.c: 274: data[2] = (hours & 0x0f) - 2;
  1400  00080A  0100               	movlb	0	; () banked
  1401  00080C  EE20 F002          	lfsr	2,2
  1402  000810  519C               	movf	get_time@data& (0+255),w,b
  1403  000812  26D9               	addwf	fsr2l,f,c
  1404  000814  519D               	movf	(get_time@data+1)& (0+255),w,b
  1405  000816  22DA               	addwfc	fsr2h,f,c
  1406  000818  5036               	movf	get_time@hours,w,c
  1407  00081A  0B0F               	andlw	15
  1408  00081C  0FFE               	addlw	254
  1409  00081E  6EDF               	movwf	indf2,c
  1410                           
  1411                           ;user.c: 275: data[3] = (hours>>4 & 0x0f)-1;
  1412  000820  0100               	movlb	0	; () banked
  1413  000822  EE20 F003          	lfsr	2,3
  1414  000826  519C               	movf	get_time@data& (0+255),w,b
  1415  000828  26D9               	addwf	fsr2l,f,c
  1416  00082A  519D               	movf	(get_time@data+1)& (0+255),w,b
  1417  00082C  22DA               	addwfc	fsr2h,f,c
  1418  00082E  C036  F031         	movff	get_time@hours,??_get_time
  1419  000832  3A31               	swapf	??_get_time,f,c
  1420  000834  0E0F               	movlw	15
  1421  000836  1631               	andwf	??_get_time,f,c
  1422  000838  0E0F               	movlw	15
  1423  00083A  1631               	andwf	??_get_time,f,c
  1424  00083C  0431               	decf	??_get_time,w,c
  1425  00083E                     L9:
  1426  00083E  6EDF               	movwf	indf2,c
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;user.c: 276: }
  1430                           ;user.c: 278: }
  1431                           ;user.c: 281: data[5] = 'H';
  1432                           
  1433                           ; BSR set to: 0
  1434  000840  0100               	movlb	0	; () banked
  1435  000842  EE20 F005          	lfsr	2,5
  1436  000846  519C               	movf	get_time@data& (0+255),w,b
  1437  000848  26D9               	addwf	fsr2l,f,c
  1438  00084A  519D               	movf	(get_time@data+1)& (0+255),w,b
  1439  00084C  22DA               	addwfc	fsr2h,f,c
  1440  00084E  0E48               	movlw	72
  1441  000850  6EDF               	movwf	indf2,c
  1442                           
  1443                           ; BSR set to: 0
  1444  000852  0012               	return		;funcret
  1445  000854                     __end_of_get_time:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           prodl	equ	0xFF3
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           indf2	equ	0xFDF
  1452                           fsr2h	equ	0xFDA
  1453                           fsr2l	equ	0xFD9
  1454                           status	equ	0xFD8
  1455                           
  1456 ;; *************** function _byte_read *****************
  1457 ;; Defined at:
  1458 ;;		line 186 in file "user.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;  address         1    wreg     unsigned char 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  address         1   44[COMRAM] unsigned char 
  1463 ;;  i               2   46[COMRAM] int 
  1464 ;;  res             1   45[COMRAM] unsigned char 
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      unsigned char 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1474 ;;      Params:         0       0       0       0       0       0       0       0       0
  1475 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1476 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1477 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1478 ;;Total ram usage:        6 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    8
  1481 ;; This function calls:
  1482 ;;		_ce_disable
  1483 ;;		_ce_enable
  1484 ;;		_io_as_input
  1485 ;;		_send_command
  1486 ;; This function is called by:
  1487 ;;		_get_time
  1488 ;;		_get_timer1_counter
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text5
  1493  000A34                     __ptext5:
  1494                           	opt stack 0
  1495  000A34                     _byte_read:
  1496                           	opt stack 21
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;incstack = 0
  1500                           ;byte_read@address stored from wreg
  1501  000A34  6E2D               	movwf	byte_read@address,c
  1502                           
  1503                           ;user.c: 188: char res = 0;
  1504  000A36  0E00               	movlw	0
  1505  000A38  6E2E               	movwf	byte_read@res,c
  1506                           
  1507                           ;user.c: 191: ce_enable();
  1508  000A3A  EC4E  F007         	call	_ce_enable	;wreg free
  1509                           
  1510                           ;user.c: 193: send_command(address);
  1511  000A3E  502D               	movf	byte_read@address,w,c
  1512  000A40  EC7F  F005         	call	_send_command
  1513                           
  1514                           ;user.c: 194: io_as_input();
  1515  000A44  EC4C  F007         	call	_io_as_input	;wreg free
  1516                           
  1517                           ;user.c: 195: int i;
  1518                           ;user.c: 196: for(i=0;i<8;i++)
  1519  000A48  0E00               	movlw	0
  1520  000A4A  6E30               	movwf	byte_read@i+1,c
  1521  000A4C  0E00               	movlw	0
  1522  000A4E  6E2F               	movwf	byte_read@i,c
  1523  000A50                     l3225:
  1524  000A50  BE30               	btfsc	byte_read@i+1,7,c
  1525  000A52  D006               	goto	l283
  1526  000A54  5030               	movf	byte_read@i+1,w,c
  1527  000A56  E121               	bnz	l3241
  1528  000A58  0E08               	movlw	8
  1529  000A5A  5C2F               	subwf	byte_read@i,w,c
  1530  000A5C  B0D8               	btfsc	status,0,c
  1531  000A5E  D01D               	goto	l3241
  1532  000A60                     l283:
  1533                           
  1534                           ;user.c: 197: {
  1535                           ;user.c: 198: RA2 = 0;
  1536  000A60  9480               	bcf	3968,2,c	;volatile
  1537                           
  1538                           ;user.c: 199: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  1539  000A62  0E06               	movlw	6
  1540  000A64                     u2917:
  1541  000A64  2EE8               	decfsz	wreg,f,c
  1542  000A66  D7FE               	bra	u2917
  1543  000A68  D000               	nop2	
  1544                           
  1545                           ;user.c: 200: res |= RA3<<i;
  1546  000A6A  C02F  F02B         	movff	byte_read@i,??_byte_read
  1547  000A6E  A680               	btfss	3968,3,c	;volatile
  1548  000A70  D003               	goto	u2570
  1549  000A72  6A2C               	clrf	(??_byte_read+1)& (0+255),c
  1550  000A74  2A2C               	incf	(??_byte_read+1)& (0+255),f,c
  1551  000A76  D001               	goto	u2588
  1552  000A78                     u2570:
  1553  000A78  6A2C               	clrf	(??_byte_read+1)& (0+255),c
  1554  000A7A                     u2588:
  1555  000A7A  2A2B               	incf	??_byte_read,f,c
  1556  000A7C  D002               	goto	u2594
  1557  000A7E                     u2595:
  1558  000A7E  90D8               	bcf	status,0,c
  1559  000A80  362C               	rlcf	??_byte_read+1,f,c
  1560  000A82                     u2594:
  1561  000A82  2E2B               	decfsz	??_byte_read,f,c
  1562  000A84  D7FC               	goto	u2595
  1563  000A86  502C               	movf	??_byte_read+1,w,c
  1564  000A88  122E               	iorwf	byte_read@res,f,c
  1565                           
  1566                           ;user.c: 201: RA2 = 1;
  1567  000A8A  8480               	bsf	3968,2,c	;volatile
  1568                           
  1569                           ;user.c: 202: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  1570  000A8C  0E10               	movlw	16
  1571  000A8E                     u2927:
  1572  000A8E  2EE8               	decfsz	wreg,f,c
  1573  000A90  D7FE               	bra	u2927
  1574  000A92  D000               	nop2	
  1575  000A94  4A2F               	infsnz	byte_read@i,f,c
  1576  000A96  2A30               	incf	byte_read@i+1,f,c
  1577  000A98  D7DB               	goto	l3225
  1578  000A9A                     l3241:
  1579                           
  1580                           ;user.c: 204: }
  1581                           ;user.c: 206: ce_disable();
  1582  000A9A  EC44  F007         	call	_ce_disable	;wreg free
  1583                           
  1584                           ;user.c: 209: return res;
  1585  000A9E  502E               	movf	byte_read@res,w,c
  1586  000AA0  0012               	return	
  1587  000AA2                     __end_of_byte_read:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           prodl	equ	0xFF3
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           indf2	equ	0xFDF
  1594                           fsr2h	equ	0xFDA
  1595                           fsr2l	equ	0xFD9
  1596                           status	equ	0xFD8
  1597                           
  1598 ;; *************** function _send_command *****************
  1599 ;; Defined at:
  1600 ;;		line 339 in file "user.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  command         1    wreg     unsigned char 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  command         1   39[COMRAM] unsigned char 
  1605 ;;  i               2   40[COMRAM] int 
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, status,0, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1615 ;;      Params:         0       0       0       0       0       0       0       0       0
  1616 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1617 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1618 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1619 ;;Total ram usage:        5 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    7
  1622 ;; This function calls:
  1623 ;;		_io_as_output
  1624 ;; This function is called by:
  1625 ;;		_byte_read
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text6
  1630  000AFE                     __ptext6:
  1631                           	opt stack 0
  1632  000AFE                     _send_command:
  1633                           	opt stack 21
  1634                           
  1635                           ;incstack = 0
  1636                           ;send_command@command stored from wreg
  1637  000AFE  6E28               	movwf	send_command@command,c
  1638                           
  1639                           ;user.c: 341: int i;
  1640                           ;user.c: 342: io_as_output();
  1641  000B00  EC4A  F007         	call	_io_as_output	;wreg free
  1642                           
  1643                           ;user.c: 343: for(i=0; i<8; i++)
  1644  000B04  0E00               	movlw	0
  1645  000B06  6E2A               	movwf	send_command@i+1,c
  1646  000B08  0E00               	movlw	0
  1647  000B0A  6E29               	movwf	send_command@i,c
  1648  000B0C                     l3195:
  1649  000B0C  BE2A               	btfsc	send_command@i+1,7,c
  1650  000B0E  D006               	goto	l3199
  1651  000B10  502A               	movf	send_command@i+1,w,c
  1652  000B12  E121               	bnz	l323
  1653  000B14  0E08               	movlw	8
  1654  000B16  5C29               	subwf	send_command@i,w,c
  1655  000B18  B0D8               	btfsc	status,0,c
  1656  000B1A  0012               	return	
  1657  000B1C                     l3199:
  1658                           
  1659                           ;user.c: 344: {
  1660                           ;user.c: 345: RA3 = command>>i & 0x01;
  1661  000B1C  C029  F026         	movff	send_command@i,??_send_command
  1662  000B20  C028  F027         	movff	send_command@command,??_send_command+1
  1663  000B24  2A26               	incf	??_send_command,f,c
  1664  000B26  D002               	goto	u2524
  1665  000B28                     u2525:
  1666  000B28  90D8               	bcf	status,0,c
  1667  000B2A  3227               	rrcf	??_send_command+1,f,c
  1668  000B2C                     u2524:
  1669  000B2C  2E26               	decfsz	??_send_command,f,c
  1670  000B2E  D7FC               	goto	u2525
  1671  000B30  3027               	rrcf	??_send_command+1,w,c
  1672  000B32  A0D8               	btfss	status,0,c
  1673  000B34  D002               	goto	u2530
  1674  000B36  8680               	bsf	3968,3,c	;volatile
  1675  000B38  D001               	goto	l3201
  1676  000B3A                     u2530:
  1677  000B3A  9680               	bcf	3968,3,c	;volatile
  1678  000B3C                     l3201:
  1679                           
  1680                           ;user.c: 346: RA2 = 1;
  1681  000B3C  8480               	bsf	3968,2,c	;volatile
  1682                           
  1683                           ;user.c: 347: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  1684  000B3E  0E10               	movlw	16
  1685  000B40                     u2937:
  1686  000B40  2EE8               	decfsz	wreg,f,c
  1687  000B42  D7FE               	bra	u2937
  1688  000B44  D000               	nop2	
  1689                           
  1690                           ;user.c: 348: RA2 = 0;
  1691  000B46  9480               	bcf	3968,2,c	;volatile
  1692                           
  1693                           ;user.c: 349: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  1694  000B48  0E06               	movlw	6
  1695  000B4A                     u2947:
  1696  000B4A  2EE8               	decfsz	wreg,f,c
  1697  000B4C  D7FE               	bra	u2947
  1698  000B4E  D000               	nop2	
  1699  000B50  4A29               	infsnz	send_command@i,f,c
  1700  000B52  2A2A               	incf	send_command@i+1,f,c
  1701  000B54  D7DB               	goto	l3195
  1702  000B56                     l323:
  1703  000B56  0012               	return		;funcret
  1704  000B58                     __end_of_send_command:
  1705                           	opt stack 0
  1706                           tblptru	equ	0xFF8
  1707                           prodl	equ	0xFF3
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           indf2	equ	0xFDF
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _io_as_output *****************
  1716 ;; Defined at:
  1717 ;;		line 361 in file "user.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		None
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0
  1732 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1734 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1735 ;;Total ram usage:        0 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    6
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_send_command
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text7
  1746  000E94                     __ptext7:
  1747                           	opt stack 0
  1748  000E94                     _io_as_output:
  1749                           	opt stack 21
  1750                           
  1751                           ;user.c: 363: TRISA3 = 0;
  1752                           
  1753                           ;incstack = 0
  1754  000E94  9692               	bcf	3986,3,c	;volatile
  1755  000E96  0012               	return		;funcret
  1756  000E98                     __end_of_io_as_output:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           prodl	equ	0xFF3
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           indf2	equ	0xFDF
  1763                           fsr2h	equ	0xFDA
  1764                           fsr2l	equ	0xFD9
  1765                           status	equ	0xFD8
  1766                           
  1767 ;; *************** function _io_as_input *****************
  1768 ;; Defined at:
  1769 ;;		line 355 in file "user.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		None
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1783 ;;      Params:         0       0       0       0       0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1786 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    6
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_byte_read
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text8
  1798  000E98                     __ptext8:
  1799                           	opt stack 0
  1800  000E98                     _io_as_input:
  1801                           	opt stack 22
  1802                           
  1803                           ;user.c: 357: TRISA3 = 1;
  1804                           
  1805                           ;incstack = 0
  1806  000E98  8692               	bsf	3986,3,c	;volatile
  1807  000E9A  0012               	return		;funcret
  1808  000E9C                     __end_of_io_as_input:
  1809                           	opt stack 0
  1810                           tblptru	equ	0xFF8
  1811                           prodl	equ	0xFF3
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           indf2	equ	0xFDF
  1815                           fsr2h	equ	0xFDA
  1816                           fsr2l	equ	0xFD9
  1817                           status	equ	0xFD8
  1818                           
  1819 ;; *************** function _ce_enable *****************
  1820 ;; Defined at:
  1821 ;;		line 172 in file "user.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;		None
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;		None
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  1    wreg      void 
  1828 ;; Registers used:
  1829 ;;		None
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1835 ;;      Params:         0       0       0       0       0       0       0       0       0
  1836 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1837 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1838 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1839 ;;Total ram usage:        0 bytes
  1840 ;; Hardware stack levels used:    1
  1841 ;; Hardware stack levels required when called:    6
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_byte_read
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text9
  1850  000E9C                     __ptext9:
  1851                           	opt stack 0
  1852  000E9C                     _ce_enable:
  1853                           	opt stack 22
  1854                           
  1855                           ;user.c: 175: RA5 = 1;
  1856                           
  1857                           ;incstack = 0
  1858  000E9C  8A80               	bsf	3968,5,c	;volatile
  1859  000E9E  0012               	return		;funcret
  1860  000EA0                     __end_of_ce_enable:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           prodl	equ	0xFF3
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           indf2	equ	0xFDF
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _ce_disable *****************
  1872 ;; Defined at:
  1873 ;;		line 179 in file "user.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;		None
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		None
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1887 ;;      Params:         0       0       0       0       0       0       0       0       0
  1888 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1889 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1890 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1891 ;;Total ram usage:        0 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    6
  1894 ;; This function calls:
  1895 ;;		Nothing
  1896 ;; This function is called by:
  1897 ;;		_byte_read
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text10
  1902  000E88                     __ptext10:
  1903                           	opt stack 0
  1904  000E88                     _ce_disable:
  1905                           	opt stack 22
  1906                           
  1907                           ;user.c: 181: RA5 = 0;
  1908                           
  1909                           ;incstack = 0
  1910  000E88  9A80               	bcf	3968,5,c	;volatile
  1911                           
  1912                           ;user.c: 182: RA2 = 0;
  1913  000E8A  9480               	bcf	3968,2,c	;volatile
  1914  000E8C  0012               	return		;funcret
  1915  000E8E                     __end_of_ce_disable:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           prodl	equ	0xFF3
  1919                           postinc0	equ	0xFEE
  1920                           wreg	equ	0xFE8
  1921                           indf2	equ	0xFDF
  1922                           fsr2h	equ	0xFDA
  1923                           fsr2l	equ	0xFD9
  1924                           status	equ	0xFD8
  1925                           
  1926 ;; *************** function _buzzer_disable *****************
  1927 ;; Defined at:
  1928 ;;		line 158 in file "user.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;		None
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;		None
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  1    wreg      void 
  1935 ;; Registers used:
  1936 ;;		wreg, status,2
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1942 ;;      Params:         0       0       0       0       0       0       0       0       0
  1943 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1945 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1946 ;;Total ram usage:        0 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:    6
  1949 ;; This function calls:
  1950 ;;		Nothing
  1951 ;; This function is called by:
  1952 ;;		_main
  1953 ;;		_buzzer_toggle
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text11
  1958  000E70                     __ptext11:
  1959                           	opt stack 0
  1960  000E70                     _buzzer_disable:
  1961                           	opt stack 24
  1962                           
  1963                           ;user.c: 160: buzzer_status= 0;
  1964                           
  1965                           ;incstack = 0
  1966  000E70  0E00               	movlw	0
  1967  000E72  0100               	movlb	0	; () banked
  1968  000E74  6FA4               	movwf	_buzzer_status& (0+255),b
  1969                           
  1970                           ; BSR set to: 0
  1971  000E76  0012               	return		;funcret
  1972  000E78                     __end_of_buzzer_disable:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           prodl	equ	0xFF3
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           indf2	equ	0xFDF
  1979                           fsr2h	equ	0xFDA
  1980                           fsr2l	equ	0xFD9
  1981                           status	equ	0xFD8
  1982                           
  1983 ;; *************** function _InitApp *****************
  1984 ;; Defined at:
  1985 ;;		line 28 in file "user.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;		None
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;		None
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      void 
  1992 ;; Registers used:
  1993 ;;		wreg, status,2, status,0
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1999 ;;      Params:         0       0       0       0       0       0       0       0       0
  2000 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2002 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2003 ;;Total ram usage:        0 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    6
  2006 ;; This function calls:
  2007 ;;		Nothing
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text12
  2014  000AA2                     __ptext12:
  2015                           	opt stack 0
  2016  000AA2                     _InitApp:
  2017                           	opt stack 24
  2018                           
  2019                           ;user.c: 32: TRISB3 = 0;
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;incstack = 0
  2023  000AA2  9693               	bcf	3987,3,c	;volatile
  2024                           
  2025                           ;user.c: 33: TRISB4 = 0;
  2026  000AA4  9893               	bcf	3987,4,c	;volatile
  2027                           
  2028                           ;user.c: 35: CCP2CON = 0x00;
  2029  000AA6  0E00               	movlw	0
  2030  000AA8  6EBA               	movwf	4026,c	;volatile
  2031                           
  2032                           ;user.c: 36: SSPCON1 = 0X00;
  2033  000AAA  0E00               	movlw	0
  2034  000AAC  6EC6               	movwf	4038,c	;volatile
  2035                           
  2036                           ;user.c: 37: ADCON1 = 0X0F;
  2037  000AAE  0E0F               	movlw	15
  2038  000AB0  6EC1               	movwf	4033,c	;volatile
  2039                           
  2040                           ;user.c: 38: INTCON = 0b10001000;
  2041  000AB2  0E88               	movlw	136
  2042  000AB4  6EF2               	movwf	intcon,c	;volatile
  2043                           
  2044                           ;user.c: 39: INTCON = 0b0;
  2045  000AB6  0E00               	movlw	0
  2046  000AB8  6EF2               	movwf	intcon,c	;volatile
  2047                           
  2048                           ;user.c: 40: INTCON |= 1<<7;
  2049  000ABA  8EF2               	bsf	intcon,7,c	;volatile
  2050                           
  2051                           ;user.c: 41: INTCON |= 1<<6;
  2052  000ABC  8CF2               	bsf	intcon,6,c	;volatile
  2053                           
  2054                           ;user.c: 42: INTCON |= 1<<3;
  2055  000ABE  86F2               	bsf	intcon,3,c	;volatile
  2056                           
  2057                           ;user.c: 43: INTCON |= 1<<5;
  2058  000AC0  8AF2               	bsf	intcon,5,c	;volatile
  2059                           
  2060                           ;user.c: 44: INTCON2 = 0b10000101;
  2061  000AC2  0E85               	movlw	133
  2062  000AC4  6EF1               	movwf	intcon2,c	;volatile
  2063                           
  2064                           ;user.c: 45: INTCON2 |= 1<2;
  2065  000AC6  80F1               	bsf	intcon2,0,c	;volatile
  2066                           
  2067                           ;user.c: 47: T0CON = 0b10000010;
  2068  000AC8  0E82               	movlw	130
  2069  000ACA  6ED5               	movwf	4053,c	;volatile
  2070                           
  2071                           ;user.c: 50: T1CON = 0x00;
  2072  000ACC  0E00               	movlw	0
  2073  000ACE  6ECD               	movwf	4045,c	;volatile
  2074                           
  2075                           ;user.c: 51: T1CON |= 1<<7;
  2076  000AD0  8ECD               	bsf	4045,7,c	;volatile
  2077                           
  2078                           ;user.c: 52: T1CON |= 1<<5;
  2079  000AD2  8ACD               	bsf	4045,5,c	;volatile
  2080                           
  2081                           ;user.c: 53: T1CON |= 1<<4;
  2082  000AD4  88CD               	bsf	4045,4,c	;volatile
  2083                           
  2084                           ;user.c: 54: T1CON |= 0<<3;
  2085  000AD6  50CD               	movf	4045,w,c	;volatile
  2086                           
  2087                           ;user.c: 55: T1CON |= 0 << 1;
  2088  000AD8  50CD               	movf	4045,w,c	;volatile
  2089                           
  2090                           ;user.c: 56: T1CON |= 0 << 0;
  2091  000ADA  50CD               	movf	4045,w,c	;volatile
  2092                           
  2093                           ;user.c: 58: PIE1 = 0x00;
  2094  000ADC  0E00               	movlw	0
  2095  000ADE  6E9D               	movwf	3997,c	;volatile
  2096                           
  2097                           ;user.c: 59: PIE1 |= 1 << 0;
  2098  000AE0  809D               	bsf	3997,0,c	;volatile
  2099                           
  2100                           ;user.c: 61: TRISB1 = 0;
  2101  000AE2  9293               	bcf	3987,1,c	;volatile
  2102                           
  2103                           ;user.c: 62: TRISA2 = 0;
  2104  000AE4  9492               	bcf	3986,2,c	;volatile
  2105                           
  2106                           ;user.c: 63: TRISA5 = 0;
  2107  000AE6  9A92               	bcf	3986,5,c	;volatile
  2108                           
  2109                           ;user.c: 64: TRISA3 = 0;
  2110  000AE8  9692               	bcf	3986,3,c	;volatile
  2111                           
  2112                           ;user.c: 68: state = 0;
  2113  000AEA  0E00               	movlw	0
  2114  000AEC  0100               	movlb	0	; () banked
  2115  000AEE  6FB3               	movwf	(_state+1)& (0+255),b
  2116  000AF0  0E00               	movlw	0
  2117  000AF2  6FB2               	movwf	_state& (0+255),b
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;user.c: 69: next = 0;
  2121  000AF4  0E00               	movlw	0
  2122  000AF6  6E38               	movwf	_next+1,c
  2123  000AF8  0E00               	movlw	0
  2124  000AFA  6E37               	movwf	_next,c
  2125                           
  2126                           ; BSR set to: 0
  2127  000AFC  0012               	return		;funcret
  2128  000AFE                     __end_of_InitApp:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           prodl	equ	0xFF3
  2132                           intcon	equ	0xFF2
  2133                           intcon2	equ	0xFF1
  2134                           postinc0	equ	0xFEE
  2135                           wreg	equ	0xFE8
  2136                           indf2	equ	0xFDF
  2137                           fsr2h	equ	0xFDA
  2138                           fsr2l	equ	0xFD9
  2139                           status	equ	0xFD8
  2140                           
  2141 ;; *************** function _ConfigureOscillator *****************
  2142 ;; Defined at:
  2143 ;;		line 24 in file "system.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      void 
  2150 ;; Registers used:
  2151 ;;		None
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2157 ;;      Params:         0       0       0       0       0       0       0       0       0
  2158 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2160 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2161 ;;Total ram usage:        0 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; Hardware stack levels required when called:    6
  2164 ;; This function calls:
  2165 ;;		Nothing
  2166 ;; This function is called by:
  2167 ;;		_main
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text13
  2172  000EB4                     __ptext13:
  2173                           	opt stack 0
  2174  000EB4                     _ConfigureOscillator:
  2175                           	opt stack 24
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;incstack = 0
  2179  000EB4  0012               	return		;funcret
  2180  000EB6                     __end_of_ConfigureOscillator:
  2181                           	opt stack 0
  2182                           tblptru	equ	0xFF8
  2183                           prodl	equ	0xFF3
  2184                           intcon	equ	0xFF2
  2185                           intcon2	equ	0xFF1
  2186                           postinc0	equ	0xFEE
  2187                           wreg	equ	0xFE8
  2188                           indf2	equ	0xFDF
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _high_isr *****************
  2194 ;; Defined at:
  2195 ;;		line 32 in file "interrupts.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  digits          6   47[BANK0 ] unsigned char [6]
  2200 ;;  i               2   58[BANK0 ] int 
  2201 ;;  code           47    0[BANK0 ] unsigned char [47]
  2202 ;;  i               2   56[BANK0 ] int 
  2203 ;;  final_code      2   54[BANK0 ] int 
  2204 ;;  aux             1   53[BANK0 ] unsigned char 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0
  2215 ;;      Locals:         0      60       0       0       0       0       0       0       0
  2216 ;;      Temps:         17       0       0       0       0       0       0       0       0
  2217 ;;      Totals:        17      60       0       0       0       0       0       0       0
  2218 ;;Total ram usage:       77 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    5
  2221 ;; This function calls:
  2222 ;;		_get_next_state
  2223 ;;		_ir_get_human_code
  2224 ;;		_point_disable
  2225 ;;		_point_enable
  2226 ;;		_put_nums
  2227 ;;		_update_buzzer
  2228 ;;		_update_point
  2229 ;;		_update_timer1_counter_10
  2230 ;; This function is called by:
  2231 ;;		Interrupt level 2
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           	psect	intcode
  2236  000008                     __pintcode:
  2237                           	opt stack 0
  2238  000008                     _high_isr:
  2239                           	opt stack 21
  2240                           
  2241                           ;incstack = 0
  2242  000008  823A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2243  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  2244                           tblptru	equ	0xFF8
  2245                           prodl	equ	0xFF3
  2246                           intcon	equ	0xFF2
  2247                           intcon2	equ	0xFF1
  2248                           postinc0	equ	0xFEE
  2249                           wreg	equ	0xFE8
  2250                           indf2	equ	0xFDF
  2251                           fsr2h	equ	0xFDA
  2252                           fsr2l	equ	0xFD9
  2253                           status	equ	0xFD8
  2254                           
  2255                           	psect	intcode_body
  2256  000012                     __pintcode_body:
  2257                           	opt stack 21
  2258  000012                     int_func:
  2259                           	opt stack 21
  2260  000012  0006               	pop		; remove dummy address from shadow register refresh
  2261  000014  CFFA F018          	movff	pclath,??_high_isr+3
  2262  000018  CFFB F019          	movff	pclatu,??_high_isr+4
  2263  00001C  CFE9 F01A          	movff	fsr0l,??_high_isr+5
  2264  000020  CFEA F01B          	movff	fsr0h,??_high_isr+6
  2265  000024  CFE1 F01C          	movff	fsr1l,??_high_isr+7
  2266  000028  CFE2 F01D          	movff	fsr1h,??_high_isr+8
  2267  00002C  CFD9 F01E          	movff	fsr2l,??_high_isr+9
  2268  000030  CFDA F01F          	movff	fsr2h,??_high_isr+10
  2269  000034  CFF3 F020          	movff	prodl,??_high_isr+11
  2270  000038  CFF4 F021          	movff	prodh,??_high_isr+12
  2271  00003C  CFF6 F022          	movff	tblptrl,??_high_isr+13
  2272  000040  CFF7 F023          	movff	tblptrh,??_high_isr+14
  2273  000044  CFF8 F024          	movff	tblptru,??_high_isr+15
  2274  000048  CFF5 F025          	movff	tablat,??_high_isr+16
  2275                           
  2276                           ;interrupts.c: 68: if (RBIF == 1)
  2277  00004C  A0F2               	btfss	intcon,0,c	;volatile
  2278  00004E  D089               	goto	i2l53
  2279                           
  2280                           ;interrupts.c: 69: {
  2281                           ;interrupts.c: 71: INTCONbits.GIE = 0;
  2282  000050  9EF2               	bcf	intcon,7,c	;volatile
  2283                           
  2284                           ;interrupts.c: 72: char aux = 0;
  2285  000052  0E00               	movlw	0
  2286  000054  0100               	movlb	0	; () banked
  2287  000056  6F95               	movwf	high_isr@aux& (0+255),b
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;interrupts.c: 74: int i;
  2291                           ;interrupts.c: 75: char code[47];
  2292                           ;interrupts.c: 77: _delay((unsigned long)((40.7)*(20000000L/4000.0)));
  2293  000058  0E02               	movlw	2
  2294  00005A  6E16               	movwf	(??_high_isr+1)& (0+255),c
  2295  00005C  0E09               	movlw	9
  2296  00005E  6E15               	movwf	??_high_isr& (0+255),c
  2297  000060  0E46               	movlw	70
  2298  000062                     i2u295_47:
  2299  000062  2EE8               	decfsz	wreg,f,c
  2300  000064  D7FE               	bra	i2u295_47
  2301  000066  2E15               	decfsz	??_high_isr& (0+255),f,c
  2302  000068  D7FC               	bra	i2u295_47
  2303  00006A  2E16               	decfsz	(??_high_isr+1)& (0+255),f,c
  2304  00006C  D7FA               	bra	i2u295_47
  2305                           
  2306                           ;interrupts.c: 78: for(i = 0; i < 47 ; i ++)
  2307  00006E  0E00               	movlw	0
  2308  000070  0100               	movlb	0	; () banked
  2309  000072  6F99               	movwf	(high_isr@i+1)& (0+255),b
  2310  000074  0E00               	movlw	0
  2311  000076  6F98               	movwf	high_isr@i& (0+255),b
  2312  000078                     i2l2759:
  2313                           
  2314                           ; BSR set to: 0
  2315  000078  0100               	movlb	0	; () banked
  2316  00007A  BF99               	btfsc	(high_isr@i+1)& (0+255),7,b
  2317  00007C  D008               	goto	i2l2763
  2318  00007E  0100               	movlb	0	; () banked
  2319  000080  5199               	movf	(high_isr@i+1)& (0+255),w,b
  2320  000082  E11D               	bnz	i2l2771
  2321  000084  0E2F               	movlw	47
  2322  000086  0100               	movlb	0	; () banked
  2323  000088  5D98               	subwf	high_isr@i& (0+255),w,b
  2324  00008A  B0D8               	btfsc	status,0,c
  2325  00008C  D018               	goto	i2l2771
  2326  00008E                     i2l2763:
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;interrupts.c: 79: {
  2330                           ;interrupts.c: 80: code[i] = RB5;
  2331  00008E  0E60               	movlw	low high_isr@code
  2332  000090  0100               	movlb	0	; () banked
  2333  000092  2598               	addwf	high_isr@i& (0+255),w,b
  2334  000094  6ED9               	movwf	fsr2l,c
  2335  000096  0E00               	movlw	high high_isr@code
  2336  000098  0100               	movlb	0	; () banked
  2337  00009A  2199               	addwfc	(high_isr@i+1)& (0+255),w,b
  2338  00009C  6EDA               	movwf	fsr2h,c
  2339  00009E  0E00               	movlw	0
  2340  0000A0  BA81               	btfsc	3969,5,c	;volatile
  2341  0000A2  0E01               	movlw	1
  2342  0000A4  6EDF               	movwf	indf2,c
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;interrupts.c: 81: _delay((unsigned long)((565)*(20000000L/4000000.0)));
  2346  0000A6  0E04               	movlw	4
  2347  0000A8  6E15               	movwf	??_high_isr& (0+255),c
  2348  0000AA  0EAA               	movlw	170
  2349  0000AC                     i2u296_47:
  2350  0000AC  2EE8               	decfsz	wreg,f,c
  2351  0000AE  D7FE               	bra	i2u296_47
  2352  0000B0  2E15               	decfsz	??_high_isr& (0+255),f,c
  2353  0000B2  D7FC               	bra	i2u296_47
  2354  0000B4  F000               	nop	
  2355  0000B6  0100               	movlb	0	; () banked
  2356  0000B8  4B98               	infsnz	high_isr@i& (0+255),f,b
  2357  0000BA  2B99               	incf	(high_isr@i+1)& (0+255),f,b
  2358  0000BC  D7DD               	goto	i2l2759
  2359  0000BE                     i2l2771:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;interrupts.c: 82: }
  2363                           ;interrupts.c: 83: int final_code = 0;
  2364  0000BE  0E00               	movlw	0
  2365  0000C0  0100               	movlb	0	; () banked
  2366  0000C2  6F97               	movwf	(high_isr@final_code+1)& (0+255),b
  2367  0000C4  0E00               	movlw	0
  2368  0000C6  6F96               	movwf	high_isr@final_code& (0+255),b
  2369                           
  2370                           ;interrupts.c: 84: for(i = 0; i<16;i++)
  2371  0000C8  0E00               	movlw	0
  2372  0000CA  0100               	movlb	0	; () banked
  2373  0000CC  6F99               	movwf	(high_isr@i+1)& (0+255),b
  2374  0000CE  0E00               	movlw	0
  2375  0000D0  6F98               	movwf	high_isr@i& (0+255),b
  2376  0000D2                     i2l2773:
  2377                           
  2378                           ; BSR set to: 0
  2379  0000D2  0100               	movlb	0	; () banked
  2380  0000D4  BF99               	btfsc	(high_isr@i+1)& (0+255),7,b
  2381  0000D6  D008               	goto	i2l2777
  2382  0000D8  0100               	movlb	0	; () banked
  2383  0000DA  5199               	movf	(high_isr@i+1)& (0+255),w,b
  2384  0000DC  E123               	bnz	i2l2783
  2385  0000DE  0E10               	movlw	16
  2386  0000E0  0100               	movlb	0	; () banked
  2387  0000E2  5D98               	subwf	high_isr@i& (0+255),w,b
  2388  0000E4  B0D8               	btfsc	status,0,c
  2389  0000E6  D01E               	goto	i2l2783
  2390  0000E8                     i2l2777:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;interrupts.c: 85: {
  2394                           ;interrupts.c: 86: final_code |= code[i]<<i;
  2395  0000E8  C098  F015         	movff	high_isr@i,??_high_isr
  2396  0000EC  0E60               	movlw	low high_isr@code
  2397  0000EE  0100               	movlb	0	; () banked
  2398  0000F0  2598               	addwf	high_isr@i& (0+255),w,b
  2399  0000F2  6ED9               	movwf	fsr2l,c
  2400  0000F4  0E00               	movlw	high high_isr@code
  2401  0000F6  0100               	movlb	0	; () banked
  2402  0000F8  2199               	addwfc	(high_isr@i+1)& (0+255),w,b
  2403  0000FA  6EDA               	movwf	fsr2h,c
  2404  0000FC  50DF               	movf	indf2,w,c
  2405  0000FE  6E16               	movwf	(??_high_isr+1)& (0+255),c
  2406  000100  6A17               	clrf	(??_high_isr+2)& (0+255),c
  2407  000102  2A15               	incf	??_high_isr,f,c
  2408  000104  D003               	goto	i2u220_44
  2409  000106                     i2u220_45:
  2410  000106  90D8               	bcf	status,0,c
  2411  000108  3616               	rlcf	??_high_isr+1,f,c
  2412  00010A  3617               	rlcf	??_high_isr+2,f,c
  2413  00010C                     i2u220_44:
  2414  00010C  2E15               	decfsz	??_high_isr,f,c
  2415  00010E  D7FB               	goto	i2u220_45
  2416  000110  5016               	movf	??_high_isr+1,w,c
  2417  000112  0100               	movlb	0	; () banked
  2418  000114  1396               	iorwf	high_isr@final_code& (0+255),f,b
  2419  000116  5017               	movf	??_high_isr+2,w,c
  2420  000118  0100               	movlb	0	; () banked
  2421  00011A  1397               	iorwf	(high_isr@final_code+1)& (0+255),f,b
  2422                           
  2423                           ; BSR set to: 0
  2424  00011C  0100               	movlb	0	; () banked
  2425  00011E  4B98               	infsnz	high_isr@i& (0+255),f,b
  2426  000120  2B99               	incf	(high_isr@i+1)& (0+255),f,b
  2427  000122  D7D7               	goto	i2l2773
  2428  000124                     i2l2783:
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;interrupts.c: 87: }
  2432                           ;interrupts.c: 92: if(final_code !=0xffff)
  2433  000124  0100               	movlb	0	; () banked
  2434  000126  2996               	incf	high_isr@final_code& (0+255),w,b
  2435  000128  E104               	bnz	i2u222_40
  2436  00012A  0100               	movlb	0	; () banked
  2437  00012C  2997               	incf	(high_isr@final_code+1)& (0+255),w,b
  2438  00012E  B4D8               	btfsc	status,2,c
  2439  000130  D015               	goto	i2l2789
  2440  000132                     i2u222_40:
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;interrupts.c: 93: {
  2444                           ;interrupts.c: 94: human_code = ir_get_human_code(final_code);
  2445  000132  C096  F001         	movff	high_isr@final_code,ir_get_human_code@code
  2446  000136  C097  F002         	movff	high_isr@final_code+1,ir_get_human_code@code+1
  2447  00013A  EC10  F003         	call	_ir_get_human_code	;wreg free
  2448  00013E  6E39               	movwf	_human_code,c
  2449                           
  2450                           ;interrupts.c: 95: next = get_next_state(state,final_code);
  2451  000140  C0B2  F00E         	movff	_state,get_next_state@state
  2452  000144  C0B3  F00F         	movff	_state+1,get_next_state@state+1
  2453  000148  C096  F010         	movff	high_isr@final_code,get_next_state@code
  2454  00014C  C097  F011         	movff	high_isr@final_code+1,get_next_state@code+1
  2455  000150  EC4D  F002         	call	_get_next_state	;wreg free
  2456  000154  C00E  F037         	movff	?_get_next_state,_next
  2457  000158  C00F  F038         	movff	?_get_next_state+1,_next+1
  2458  00015C                     i2l2789:
  2459                           
  2460                           ;interrupts.c: 96: }
  2461                           ;interrupts.c: 98: RBIF = 0;
  2462  00015C  90F2               	bcf	intcon,0,c	;volatile
  2463                           
  2464                           ;interrupts.c: 99: INTCONbits.GIE = 1;
  2465  00015E  8EF2               	bsf	intcon,7,c	;volatile
  2466                           
  2467                           ;interrupts.c: 100: }
  2468  000160  D0BB               	goto	i2l84
  2469  000162                     i2l53:
  2470                           
  2471                           ;interrupts.c: 101: else if (TMR0IF == 1)
  2472  000162  A4F2               	btfss	intcon,2,c	;volatile
  2473  000164  D0A4               	goto	i2l60
  2474                           
  2475                           ;interrupts.c: 102: {
  2476                           ;interrupts.c: 104: int i;
  2477                           ;interrupts.c: 105: for(i=0; i<6;i++)
  2478  000166  0E00               	movlw	0
  2479  000168  0100               	movlb	0	; () banked
  2480  00016A  6F9B               	movwf	(high_isr@i_150+1)& (0+255),b
  2481  00016C  0E00               	movlw	0
  2482  00016E  6F9A               	movwf	high_isr@i_150& (0+255),b
  2483  000170                     i2l2795:
  2484                           
  2485                           ; BSR set to: 0
  2486  000170  0100               	movlb	0	; () banked
  2487  000172  BF9B               	btfsc	(high_isr@i_150+1)& (0+255),7,b
  2488  000174  D008               	goto	i2l2799
  2489  000176  0100               	movlb	0	; () banked
  2490  000178  519B               	movf	(high_isr@i_150+1)& (0+255),w,b
  2491  00017A  E11B               	bnz	i2l2805
  2492  00017C  0E06               	movlw	6
  2493  00017E  0100               	movlb	0	; () banked
  2494  000180  5D9A               	subwf	high_isr@i_150& (0+255),w,b
  2495  000182  B0D8               	btfsc	status,0,c
  2496  000184  D016               	goto	i2l2805
  2497  000186                     i2l2799:
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;interrupts.c: 106: {
  2501                           ;interrupts.c: 107: masked_digits[i] = aux1[i];
  2502  000186  0EAB               	movlw	low _aux1
  2503  000188  0100               	movlb	0	; () banked
  2504  00018A  259A               	addwf	high_isr@i_150& (0+255),w,b
  2505  00018C  6ED9               	movwf	fsr2l,c
  2506  00018E  0E00               	movlw	high _aux1
  2507  000190  0100               	movlb	0	; () banked
  2508  000192  219B               	addwfc	(high_isr@i_150+1)& (0+255),w,b
  2509  000194  6EDA               	movwf	fsr2h,c
  2510  000196  0EA5               	movlw	low _masked_digits
  2511  000198  0100               	movlb	0	; () banked
  2512  00019A  259A               	addwf	high_isr@i_150& (0+255),w,b
  2513  00019C  6EE1               	movwf	fsr1l,c
  2514  00019E  0E00               	movlw	high _masked_digits
  2515  0001A0  0100               	movlb	0	; () banked
  2516  0001A2  219B               	addwfc	(high_isr@i_150+1)& (0+255),w,b
  2517  0001A4  6EE2               	movwf	fsr1h,c
  2518  0001A6  CFDF FFE7          	movff	indf2,indf1
  2519                           
  2520                           ; BSR set to: 0
  2521  0001AA  0100               	movlb	0	; () banked
  2522  0001AC  4B9A               	infsnz	high_isr@i_150& (0+255),f,b
  2523  0001AE  2B9B               	incf	(high_isr@i_150+1)& (0+255),f,b
  2524  0001B0  D7DF               	goto	i2l2795
  2525  0001B2                     i2l2805:
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;interrupts.c: 108: }
  2529                           ;interrupts.c: 111: if(counter < 10 - 1)
  2530  0001B2  0E09               	movlw	9
  2531  0001B4  0100               	movlb	0	; () banked
  2532  0001B6  61A2               	cpfslt	_counter& (0+255),b
  2533  0001B8  D003               	goto	i2l2809
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;interrupts.c: 112: {
  2537                           ;interrupts.c: 113: counter = counter + 1;
  2538  0001BA  0100               	movlb	0	; () banked
  2539  0001BC  29A2               	incf	_counter& (0+255),w,b
  2540  0001BE  D001               	goto	L10
  2541  0001C0                     i2l2809:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;interrupts.c: 115: else
  2545                           ;interrupts.c: 116: {
  2546                           ;interrupts.c: 117: counter = 0;
  2547  0001C0  0E00               	movlw	0
  2548  0001C2                     L10:
  2549  0001C2  0100               	movlb	0	; () banked
  2550  0001C4  6FA2               	movwf	_counter& (0+255),b
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;interrupts.c: 118: }
  2554                           ;interrupts.c: 120: char digits[6];
  2555                           ;interrupts.c: 121: int i;
  2556                           ;interrupts.c: 123: for (i=0; i<6;i++)
  2557  0001C6  0E00               	movlw	0
  2558  0001C8  0100               	movlb	0	; () banked
  2559  0001CA  6F9B               	movwf	(high_isr@i_150+1)& (0+255),b
  2560  0001CC  0E00               	movlw	0
  2561  0001CE  6F9A               	movwf	high_isr@i_150& (0+255),b
  2562  0001D0                     i2l2811:
  2563                           
  2564                           ; BSR set to: 0
  2565  0001D0  0100               	movlb	0	; () banked
  2566  0001D2  BF9B               	btfsc	(high_isr@i_150+1)& (0+255),7,b
  2567  0001D4  D008               	goto	i2l65
  2568  0001D6  0100               	movlb	0	; () banked
  2569  0001D8  519B               	movf	(high_isr@i_150+1)& (0+255),w,b
  2570  0001DA  E10B               	bnz	i2l2819
  2571  0001DC  0E06               	movlw	6
  2572  0001DE  0100               	movlb	0	; () banked
  2573  0001E0  5D9A               	subwf	high_isr@i_150& (0+255),w,b
  2574  0001E2  B0D8               	btfsc	status,0,c
  2575  0001E4  D006               	goto	i2l2819
  2576  0001E6                     i2l65:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;interrupts.c: 124: digits[6] = i;
  2580  0001E6  C09A  F095         	movff	high_isr@i_150,high_isr@digits+6
  2581                           
  2582                           ; BSR set to: 0
  2583  0001EA  0100               	movlb	0	; () banked
  2584  0001EC  4B9A               	infsnz	high_isr@i_150& (0+255),f,b
  2585  0001EE  2B9B               	incf	(high_isr@i_150+1)& (0+255),f,b
  2586  0001F0  D7EF               	goto	i2l2811
  2587  0001F2                     i2l2819:
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;interrupts.c: 127: update_point(state,counter);
  2591  0001F2  C0B2  F001         	movff	_state,update_point@state
  2592  0001F6  C0B3  F002         	movff	_state+1,update_point@state+1
  2593  0001FA  C0A2  F003         	movff	_counter,update_point@counter
  2594  0001FE  EC86  F006         	call	_update_point	;wreg free
  2595                           
  2596                           ;interrupts.c: 128: update_buzzer(state,counter);
  2597  000202  C0B2  F001         	movff	_state,update_buzzer@state
  2598  000206  C0B3  F002         	movff	_state+1,update_buzzer@state+1
  2599  00020A  C0A2  F003         	movff	_counter,update_buzzer@counter
  2600  00020E  ECAA  F006         	call	_update_buzzer	;wreg free
  2601                           
  2602                           ;interrupts.c: 130: if(counter == 0 )
  2603  000212  0100               	movlb	0	; () banked
  2604  000214  51A2               	movf	_counter& (0+255),w,b
  2605  000216  A4D8               	btfss	status,2,c
  2606  000218  D003               	goto	i2l2825
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;interrupts.c: 131: {
  2610                           ;interrupts.c: 132: point_enable();
  2611  00021A  EC50  F007         	call	_point_enable	;wreg free
  2612                           
  2613                           ;interrupts.c: 133: }
  2614  00021E  D00C               	goto	i2l2831
  2615  000220                     i2l2825:
  2616                           
  2617                           ;interrupts.c: 134: else if(counter == 5 && state == 0)
  2618  000220  0E05               	movlw	5
  2619  000222  0100               	movlb	0	; () banked
  2620  000224  19A2               	xorwf	_counter& (0+255),w,b
  2621  000226  A4D8               	btfss	status,2,c
  2622  000228  D007               	goto	i2l2831
  2623                           
  2624                           ; BSR set to: 0
  2625  00022A  0100               	movlb	0	; () banked
  2626  00022C  51B2               	movf	_state& (0+255),w,b
  2627  00022E  0100               	movlb	0	; () banked
  2628  000230  11B3               	iorwf	(_state+1)& (0+255),w,b
  2629  000232  B4D8               	btfsc	status,2,c
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;interrupts.c: 135: {
  2633                           ;interrupts.c: 136: point_disable();
  2634  000234  EC52  F007         	call	_point_disable	;wreg free
  2635  000238                     i2l2831:
  2636                           
  2637                           ;interrupts.c: 137: }
  2638                           ;interrupts.c: 140: if(buzzer_status)
  2639  000238  0100               	movlb	0	; () banked
  2640  00023A  51A4               	movf	_buzzer_status& (0+255),w,b
  2641  00023C  B4D8               	btfsc	status,2,c
  2642  00023E  D005               	goto	i2l2837
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;interrupts.c: 141: {
  2646                           ;interrupts.c: 142: if(RB0 == 1)
  2647  000240  A081               	btfss	3969,0,c	;volatile
  2648  000242  D002               	goto	i2l71
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;interrupts.c: 143: RB0 = 0;
  2652  000244  9081               	bcf	3969,0,c	;volatile
  2653  000246  D001               	goto	i2l2837
  2654  000248                     i2l71:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;interrupts.c: 144: else
  2658                           ;interrupts.c: 145: RB0 = 1;
  2659  000248  8081               	bsf	3969,0,c	;volatile
  2660  00024A                     i2l2837:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;interrupts.c: 146: }
  2664                           ;interrupts.c: 147: if(counter >= 5)
  2665  00024A  0E04               	movlw	4
  2666  00024C  0100               	movlb	0	; () banked
  2667  00024E  65A2               	cpfsgt	_counter& (0+255),b
  2668  000250  D026               	goto	i2l2853
  2669  000252  D010               	goto	i2l2851
  2670  000254                     i2l2841:
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;interrupts.c: 152: masked_digits[3] = 'V';
  2674  000254  0E56               	movlw	86
  2675  000256  0100               	movlb	0	; () banked
  2676  000258  6FA8               	movwf	(_masked_digits+3)& (0+255),b
  2677                           
  2678                           ;interrupts.c: 153: break;
  2679  00025A  D021               	goto	i2l2853
  2680  00025C                     i2l2843:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;interrupts.c: 155: masked_digits[2] = 'V';
  2684  00025C  0E56               	movlw	86
  2685  00025E  0100               	movlb	0	; () banked
  2686  000260  6FA7               	movwf	(_masked_digits+2)& (0+255),b
  2687                           
  2688                           ;interrupts.c: 156: break;
  2689  000262  D01D               	goto	i2l2853
  2690  000264                     i2l2845:
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;interrupts.c: 158: masked_digits[1] = 'V';
  2694  000264  0E56               	movlw	86
  2695  000266  0100               	movlb	0	; () banked
  2696  000268  6FA6               	movwf	(_masked_digits+1)& (0+255),b
  2697                           
  2698                           ;interrupts.c: 159: break;
  2699  00026A  D019               	goto	i2l2853
  2700  00026C                     i2l2847:
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;interrupts.c: 161: masked_digits[0] = 'V';
  2704  00026C  0E56               	movlw	86
  2705  00026E  0100               	movlb	0	; () banked
  2706  000270  6FA5               	movwf	_masked_digits& (0+255),b
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;interrupts.c: 163: }
  2710                           
  2711                           ;interrupts.c: 162: break;
  2712  000272  D015               	goto	i2l2853
  2713  000274                     i2l2851:
  2714                           
  2715                           ; BSR set to: 0
  2716  000274  C0B2  F015         	movff	_state,??_high_isr
  2717  000278  C0B3  F016         	movff	_state+1,??_high_isr+1
  2718                           
  2719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2720                           ; Switch size 1, requested type "space"
  2721                           ; Number of cases is 1, Range of values is 0 to 0
  2722                           ; switch strategies available:
  2723                           ; Name         Instructions Cycles
  2724                           ; simple_byte            4     3 (average)
  2725                           ;	Chosen strategy is simple_byte
  2726  00027C  5016               	movf	??_high_isr+1,w,c
  2727  00027E  0A00               	xorlw	0	; case 0
  2728  000280  A4D8               	btfss	status,2,c
  2729  000282  D00D               	goto	i2l2853
  2730                           
  2731                           ; BSR set to: 0
  2732                           ; Switch size 1, requested type "space"
  2733                           ; Number of cases is 4, Range of values is 1 to 4
  2734                           ; switch strategies available:
  2735                           ; Name         Instructions Cycles
  2736                           ; simple_byte           13     7 (average)
  2737                           ;	Chosen strategy is simple_byte
  2738  000284  5015               	movf	??_high_isr,w,c
  2739  000286  0A01               	xorlw	1	; case 1
  2740  000288  B4D8               	btfsc	status,2,c
  2741  00028A  D7E4               	goto	i2l2841
  2742  00028C  0A03               	xorlw	3	; case 2
  2743  00028E  B4D8               	btfsc	status,2,c
  2744  000290  D7E5               	goto	i2l2843
  2745  000292  0A01               	xorlw	1	; case 3
  2746  000294  B4D8               	btfsc	status,2,c
  2747  000296  D7E6               	goto	i2l2845
  2748  000298  0A07               	xorlw	7	; case 4
  2749  00029A  B4D8               	btfsc	status,2,c
  2750  00029C  D7E7               	goto	i2l2847
  2751  00029E                     i2l2853:
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;interrupts.c: 164: }
  2755                           ;interrupts.c: 167: put_nums(masked_digits);
  2756  00029E  0EA5               	movlw	low _masked_digits
  2757  0002A0  6E08               	movwf	put_nums@nums,c
  2758  0002A2  0E00               	movlw	high _masked_digits
  2759  0002A4  6E09               	movwf	put_nums@nums+1,c
  2760  0002A6  ECEB  F006         	call	_put_nums	;wreg free
  2761                           
  2762                           ;interrupts.c: 168: TMR0IF = 0;
  2763  0002AA  94F2               	bcf	intcon,2,c	;volatile
  2764                           
  2765                           ;interrupts.c: 169: }
  2766  0002AC  D015               	goto	i2l84
  2767  0002AE                     i2l60:
  2768                           
  2769                           ;interrupts.c: 171: else if (TMR1IF == 1)
  2770  0002AE  A09E               	btfss	3998,0,c	;volatile
  2771  0002B0  D013               	goto	i2l84
  2772                           
  2773                           ;interrupts.c: 172: {
  2774                           ;interrupts.c: 174: if(timer1_counter <9)
  2775  0002B2  0E09               	movlw	9
  2776  0002B4  0100               	movlb	0	; () banked
  2777  0002B6  61A3               	cpfslt	_timer1_counter& (0+255),b
  2778  0002B8  D003               	goto	i2l2861
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;interrupts.c: 175: timer1_counter += 1;
  2782  0002BA  0100               	movlb	0	; () banked
  2783  0002BC  2BA3               	incf	_timer1_counter& (0+255),f,b
  2784  0002BE  D00B               	goto	i2l2865
  2785  0002C0                     i2l2861:
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;interrupts.c: 176: else
  2789                           ;interrupts.c: 177: {
  2790                           ;interrupts.c: 178: timer1_counter = 0;
  2791  0002C0  0E00               	movlw	0
  2792  0002C2  0100               	movlb	0	; () banked
  2793  0002C4  6FA3               	movwf	_timer1_counter& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;interrupts.c: 179: update_timer1_counter_10(state,&timer1_counter_10);
  2797  0002C6  0EB1               	movlw	low _timer1_counter_10
  2798  0002C8  6E01               	movwf	update_timer1_counter_10@counter,c
  2799  0002CA  0E00               	movlw	high _timer1_counter_10
  2800  0002CC  6E02               	movwf	update_timer1_counter_10@counter+1,c
  2801  0002CE  0100               	movlb	0	; () banked
  2802  0002D0  51B2               	movf	_state& (0+255),w,b
  2803  0002D2  ECD1  F004         	call	_update_timer1_counter_10
  2804  0002D6                     i2l2865:
  2805                           
  2806                           ;interrupts.c: 180: }
  2807                           ;interrupts.c: 182: TMR1IF = 0;
  2808  0002D6  909E               	bcf	3998,0,c	;volatile
  2809  0002D8                     i2l84:
  2810  0002D8  C025  FFF5         	movff	??_high_isr+16,tablat
  2811  0002DC  C024  FFF8         	movff	??_high_isr+15,tblptru
  2812  0002E0  C023  FFF7         	movff	??_high_isr+14,tblptrh
  2813  0002E4  C022  FFF6         	movff	??_high_isr+13,tblptrl
  2814  0002E8  C021  FFF4         	movff	??_high_isr+12,prodh
  2815  0002EC  C020  FFF3         	movff	??_high_isr+11,prodl
  2816  0002F0  C01F  FFDA         	movff	??_high_isr+10,fsr2h
  2817  0002F4  C01E  FFD9         	movff	??_high_isr+9,fsr2l
  2818  0002F8  C01D  FFE2         	movff	??_high_isr+8,fsr1h
  2819  0002FC  C01C  FFE1         	movff	??_high_isr+7,fsr1l
  2820  000300  C01B  FFEA         	movff	??_high_isr+6,fsr0h
  2821  000304  C01A  FFE9         	movff	??_high_isr+5,fsr0l
  2822  000308  C019  FFFB         	movff	??_high_isr+4,pclatu
  2823  00030C  C018  FFFA         	movff	??_high_isr+3,pclath
  2824  000310  923A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2825  000312  0011               	retfie		f
  2826  000314                     __end_of_high_isr:
  2827                           	opt stack 0
  2828                           pclatu	equ	0xFFB
  2829                           pclath	equ	0xFFA
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           intcon	equ	0xFF2
  2837                           intcon2	equ	0xFF1
  2838                           postinc0	equ	0xFEE
  2839                           fsr0h	equ	0xFEA
  2840                           fsr0l	equ	0xFE9
  2841                           wreg	equ	0xFE8
  2842                           indf1	equ	0xFE7
  2843                           fsr1h	equ	0xFE2
  2844                           fsr1l	equ	0xFE1
  2845                           indf2	equ	0xFDF
  2846                           fsr2h	equ	0xFDA
  2847                           fsr2l	equ	0xFD9
  2848                           status	equ	0xFD8
  2849                           
  2850 ;; *************** function _update_timer1_counter_10 *****************
  2851 ;; Defined at:
  2852 ;;		line 536 in file "user.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  state           1    wreg     unsigned char 
  2855 ;;  counter         2    0[COMRAM] PTR unsigned char 
  2856 ;;		 -> timer1_counter_10(1), 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  state           1    3[COMRAM] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2868 ;;      Params:         2       0       0       0       0       0       0       0       0
  2869 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2870 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2871 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2872 ;;Total ram usage:        4 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_high_isr
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text15
  2882  0009A2                     __ptext15:
  2883                           	opt stack 0
  2884  0009A2                     _update_timer1_counter_10:
  2885                           	opt stack 25
  2886                           
  2887                           ;incstack = 0
  2888                           ;update_timer1_counter_10@state stored from wreg
  2889  0009A2  6E04               	movwf	update_timer1_counter_10@state,c
  2890                           
  2891                           ;user.c: 538: if(state == 5)
  2892  0009A4  0E05               	movlw	5
  2893  0009A6  1804               	xorwf	update_timer1_counter_10@state,w,c
  2894  0009A8  A4D8               	btfss	status,2,c
  2895  0009AA  D007               	goto	i2l2601
  2896                           
  2897                           ;user.c: 539: *counter = 10;
  2898  0009AC  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2899  0009B0  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2900  0009B4  0E0A               	movlw	10
  2901  0009B6  6EDF               	movwf	indf2,c
  2902  0009B8  0012               	return	
  2903  0009BA                     i2l2601:
  2904                           
  2905                           ;user.c: 540: else if(state == 11)
  2906  0009BA  0E0B               	movlw	11
  2907  0009BC  1804               	xorwf	update_timer1_counter_10@state,w,c
  2908  0009BE  A4D8               	btfss	status,2,c
  2909  0009C0  D021               	goto	i2l2613
  2910                           
  2911                           ;user.c: 541: if(*counter>0)
  2912  0009C2  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2913  0009C6  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2914  0009CA  50DF               	movf	indf2,w,c
  2915  0009CC  B4D8               	btfsc	status,2,c
  2916  0009CE  D013               	goto	i2l2611
  2917                           
  2918                           ;user.c: 542: if (*counter>3)
  2919  0009D0  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2920  0009D4  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2921  0009D8  0E03               	movlw	3
  2922  0009DA  64DF               	cpfsgt	indf2,c
  2923  0009DC  D006               	goto	i2l2609
  2924                           
  2925                           ;user.c: 543: *counter-=1;
  2926  0009DE  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2927  0009E2  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2928  0009E6  06DF               	decf	indf2,f,c
  2929  0009E8  0012               	return	
  2930  0009EA                     i2l2609:
  2931                           
  2932                           ;user.c: 544: else
  2933                           ;user.c: 545: {
  2934                           ;user.c: 546: *counter-=1;
  2935  0009EA  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2936  0009EE  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2937  0009F2  06DF               	decf	indf2,f,c
  2938                           
  2939                           ;user.c: 548: }
  2940  0009F4  0012               	return	
  2941  0009F6                     i2l2611:
  2942                           
  2943                           ;user.c: 549: else
  2944                           ;user.c: 550: *counter= 10;
  2945  0009F6  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2946  0009FA  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2947  0009FE  0E0A               	movlw	10
  2948  000A00  6EDF               	movwf	indf2,c
  2949  000A02  0012               	return	
  2950  000A04                     i2l2613:
  2951                           
  2952                           ;user.c: 551: else if(state == 12)
  2953  000A04  0E0C               	movlw	12
  2954  000A06  1804               	xorwf	update_timer1_counter_10@state,w,c
  2955  000A08  A4D8               	btfss	status,2,c
  2956  000A0A  0012               	return	
  2957                           
  2958                           ;user.c: 552: if(*counter<59)
  2959  000A0C  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2960  000A10  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2961  000A14  0E3B               	movlw	59
  2962  000A16  60DF               	cpfslt	indf2,c
  2963  000A18  D006               	goto	i2l2619
  2964                           
  2965                           ;user.c: 553: *counter+=1;
  2966  000A1A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2967  000A1E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2968  000A22  2ADF               	incf	indf2,f,c
  2969  000A24  0012               	return	
  2970  000A26                     i2l2619:
  2971                           
  2972                           ;user.c: 554: else
  2973                           ;user.c: 555: {
  2974                           ;user.c: 556: *counter= 0;
  2975  000A26  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2976  000A2A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2977  000A2E  0E00               	movlw	0
  2978  000A30  6EDF               	movwf	indf2,c
  2979  000A32  0012               	return	
  2980  000A34                     __end_of_update_timer1_counter_10:
  2981                           	opt stack 0
  2982                           pclatu	equ	0xFFB
  2983                           pclath	equ	0xFFA
  2984                           tblptru	equ	0xFF8
  2985                           tblptrh	equ	0xFF7
  2986                           tblptrl	equ	0xFF6
  2987                           tablat	equ	0xFF5
  2988                           prodh	equ	0xFF4
  2989                           prodl	equ	0xFF3
  2990                           intcon	equ	0xFF2
  2991                           intcon2	equ	0xFF1
  2992                           postinc0	equ	0xFEE
  2993                           fsr0h	equ	0xFEA
  2994                           fsr0l	equ	0xFE9
  2995                           wreg	equ	0xFE8
  2996                           indf1	equ	0xFE7
  2997                           fsr1h	equ	0xFE2
  2998                           fsr1l	equ	0xFE1
  2999                           indf2	equ	0xFDF
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _update_point *****************
  3005 ;; Defined at:
  3006 ;;		line 481 in file "user.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  state           2    0[COMRAM] int 
  3009 ;;  counter         1    2[COMRAM] unsigned char 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;		None
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      void 
  3014 ;; Registers used:
  3015 ;;		wreg, status,2, status,0, cstack
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3021 ;;      Params:         3       0       0       0       0       0       0       0       0
  3022 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3024 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3025 ;;Total ram usage:        3 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    1
  3028 ;; This function calls:
  3029 ;;		_point_disable
  3030 ;;		_point_enable
  3031 ;; This function is called by:
  3032 ;;		_high_isr
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text16
  3037  000D0C                     __ptext16:
  3038                           	opt stack 0
  3039  000D0C                     _update_point:
  3040                           	opt stack 24
  3041                           
  3042                           ;user.c: 483: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  3043                           
  3044                           ;incstack = 0
  3045  000D0C  5003               	movf	update_point@counter,w,c
  3046  000D0E  A4D8               	btfss	status,2,c
  3047  000D10  D011               	goto	i2l2559
  3048  000D12  5001               	movf	update_point@state,w,c
  3049  000D14  1002               	iorwf	update_point@state+1,w,c
  3050  000D16  B4D8               	btfsc	status,2,c
  3051  000D18  D00A               	goto	i2l2557
  3052  000D1A  0E05               	movlw	5
  3053  000D1C  1801               	xorwf	update_point@state,w,c
  3054  000D1E  1002               	iorwf	update_point@state+1,w,c
  3055  000D20  B4D8               	btfsc	status,2,c
  3056  000D22  D005               	goto	i2l2557
  3057  000D24  0E0C               	movlw	12
  3058  000D26  1801               	xorwf	update_point@state,w,c
  3059  000D28  1002               	iorwf	update_point@state+1,w,c
  3060  000D2A  A4D8               	btfss	status,2,c
  3061  000D2C  D003               	goto	i2l2559
  3062  000D2E                     i2l2557:
  3063                           
  3064                           ;user.c: 484: {
  3065                           ;user.c: 485: point_enable();
  3066  000D2E  EC50  F007         	call	_point_enable	;wreg free
  3067                           
  3068                           ;user.c: 486: }
  3069  000D32  0012               	return	
  3070  000D34                     i2l2559:
  3071                           
  3072                           ;user.c: 487: else if(counter == 5 && state == 0 && state != 5)
  3073  000D34  0E05               	movlw	5
  3074  000D36  1803               	xorwf	update_point@counter,w,c
  3075  000D38  A4D8               	btfss	status,2,c
  3076  000D3A  0012               	return	
  3077  000D3C  5001               	movf	update_point@state,w,c
  3078  000D3E  1002               	iorwf	update_point@state+1,w,c
  3079  000D40  A4D8               	btfss	status,2,c
  3080  000D42  0012               	return	
  3081  000D44  0E05               	movlw	5
  3082  000D46  1801               	xorwf	update_point@state,w,c
  3083  000D48  1002               	iorwf	update_point@state+1,w,c
  3084  000D4A  B4D8               	btfsc	status,2,c
  3085  000D4C  0012               	return	
  3086                           
  3087                           ;user.c: 488: {
  3088                           ;user.c: 489: point_disable();
  3089  000D4E  EC52  F007         	call	_point_disable	;wreg free
  3090  000D52  0012               	return	
  3091  000D54                     __end_of_update_point:
  3092                           	opt stack 0
  3093                           pclatu	equ	0xFFB
  3094                           pclath	equ	0xFFA
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           prodh	equ	0xFF4
  3100                           prodl	equ	0xFF3
  3101                           intcon	equ	0xFF2
  3102                           intcon2	equ	0xFF1
  3103                           postinc0	equ	0xFEE
  3104                           fsr0h	equ	0xFEA
  3105                           fsr0l	equ	0xFE9
  3106                           wreg	equ	0xFE8
  3107                           indf1	equ	0xFE7
  3108                           fsr1h	equ	0xFE2
  3109                           fsr1l	equ	0xFE1
  3110                           indf2	equ	0xFDF
  3111                           fsr2h	equ	0xFDA
  3112                           fsr2l	equ	0xFD9
  3113                           status	equ	0xFD8
  3114                           
  3115 ;; *************** function _point_enable *****************
  3116 ;; Defined at:
  3117 ;;		line 132 in file "user.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;		None
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		None
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3131 ;;      Params:         0       0       0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3134 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3135 ;;Total ram usage:        0 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; This function calls:
  3138 ;;		Nothing
  3139 ;; This function is called by:
  3140 ;;		_high_isr
  3141 ;;		_update_point
  3142 ;;		_point_toggle
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text17
  3147  000EA0                     __ptext17:
  3148                           	opt stack 0
  3149  000EA0                     _point_enable:
  3150                           	opt stack 24
  3151                           
  3152                           ;user.c: 134: RB1 = 1;
  3153                           
  3154                           ;incstack = 0
  3155  000EA0  8281               	bsf	3969,1,c	;volatile
  3156  000EA2  0012               	return		;funcret
  3157  000EA4                     __end_of_point_enable:
  3158                           	opt stack 0
  3159                           pclatu	equ	0xFFB
  3160                           pclath	equ	0xFFA
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           intcon2	equ	0xFF1
  3169                           postinc0	equ	0xFEE
  3170                           fsr0h	equ	0xFEA
  3171                           fsr0l	equ	0xFE9
  3172                           wreg	equ	0xFE8
  3173                           indf1	equ	0xFE7
  3174                           fsr1h	equ	0xFE2
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function _point_disable *****************
  3182 ;; Defined at:
  3183 ;;		line 138 in file "user.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		None
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3197 ;;      Params:         0       0       0       0       0       0       0       0       0
  3198 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3200 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3201 ;;Total ram usage:        0 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_high_isr
  3207 ;;		_update_point
  3208 ;;		_point_toggle
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text18
  3213  000EA4                     __ptext18:
  3214                           	opt stack 0
  3215  000EA4                     _point_disable:
  3216                           	opt stack 24
  3217                           
  3218                           ;user.c: 140: RB1 = 0;
  3219                           
  3220                           ;incstack = 0
  3221  000EA4  9281               	bcf	3969,1,c	;volatile
  3222  000EA6  0012               	return		;funcret
  3223  000EA8                     __end_of_point_disable:
  3224                           	opt stack 0
  3225                           pclatu	equ	0xFFB
  3226                           pclath	equ	0xFFA
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           intcon	equ	0xFF2
  3234                           intcon2	equ	0xFF1
  3235                           postinc0	equ	0xFEE
  3236                           fsr0h	equ	0xFEA
  3237                           fsr0l	equ	0xFE9
  3238                           wreg	equ	0xFE8
  3239                           indf1	equ	0xFE7
  3240                           fsr1h	equ	0xFE2
  3241                           fsr1l	equ	0xFE1
  3242                           indf2	equ	0xFDF
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _update_buzzer *****************
  3248 ;; Defined at:
  3249 ;;		line 494 in file "user.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  state           2    0[COMRAM] int 
  3252 ;;  counter         1    2[COMRAM] unsigned char 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0, cstack
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3264 ;;      Params:         3       0       0       0       0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3267 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3268 ;;Total ram usage:        3 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    1
  3271 ;; This function calls:
  3272 ;;		_buzzer_enable
  3273 ;;		i2_buzzer_disable
  3274 ;; This function is called by:
  3275 ;;		_high_isr
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text19
  3280  000D54                     __ptext19:
  3281                           	opt stack 0
  3282  000D54                     _update_buzzer:
  3283                           	opt stack 24
  3284                           
  3285                           ;user.c: 496: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  3286                           
  3287                           ;incstack = 0
  3288  000D54  5003               	movf	update_buzzer@counter,w,c
  3289  000D56  A4D8               	btfss	status,2,c
  3290  000D58  D011               	goto	i2l2577
  3291  000D5A  5001               	movf	update_buzzer@state,w,c
  3292  000D5C  1002               	iorwf	update_buzzer@state+1,w,c
  3293  000D5E  B4D8               	btfsc	status,2,c
  3294  000D60  D00A               	goto	i2l2575
  3295  000D62  0E05               	movlw	5
  3296  000D64  1801               	xorwf	update_buzzer@state,w,c
  3297  000D66  1002               	iorwf	update_buzzer@state+1,w,c
  3298  000D68  B4D8               	btfsc	status,2,c
  3299  000D6A  D005               	goto	i2l2575
  3300  000D6C  0E0C               	movlw	12
  3301  000D6E  1801               	xorwf	update_buzzer@state,w,c
  3302  000D70  1002               	iorwf	update_buzzer@state+1,w,c
  3303  000D72  A4D8               	btfss	status,2,c
  3304  000D74  D003               	goto	i2l2577
  3305  000D76                     i2l2575:
  3306                           
  3307                           ;user.c: 497: {
  3308                           ;user.c: 498: buzzer_enable();
  3309  000D76  EC40  F007         	call	_buzzer_enable	;wreg free
  3310                           
  3311                           ;user.c: 499: }
  3312  000D7A  0012               	return	
  3313  000D7C                     i2l2577:
  3314                           
  3315                           ;user.c: 500: else if(counter == 5 && state == 0 && state != 5)
  3316  000D7C  0E05               	movlw	5
  3317  000D7E  1803               	xorwf	update_buzzer@counter,w,c
  3318  000D80  A4D8               	btfss	status,2,c
  3319  000D82  0012               	return	
  3320  000D84  5001               	movf	update_buzzer@state,w,c
  3321  000D86  1002               	iorwf	update_buzzer@state+1,w,c
  3322  000D88  A4D8               	btfss	status,2,c
  3323  000D8A  0012               	return	
  3324  000D8C  0E05               	movlw	5
  3325  000D8E  1801               	xorwf	update_buzzer@state,w,c
  3326  000D90  1002               	iorwf	update_buzzer@state+1,w,c
  3327  000D92  B4D8               	btfsc	status,2,c
  3328  000D94  0012               	return	
  3329                           
  3330                           ;user.c: 501: {
  3331                           ;user.c: 502: buzzer_disable();
  3332  000D96  EC3C  F007         	call	i2_buzzer_disable	;wreg free
  3333  000D9A  0012               	return	
  3334  000D9C                     __end_of_update_buzzer:
  3335                           	opt stack 0
  3336                           pclatu	equ	0xFFB
  3337                           pclath	equ	0xFFA
  3338                           tblptru	equ	0xFF8
  3339                           tblptrh	equ	0xFF7
  3340                           tblptrl	equ	0xFF6
  3341                           tablat	equ	0xFF5
  3342                           prodh	equ	0xFF4
  3343                           prodl	equ	0xFF3
  3344                           intcon	equ	0xFF2
  3345                           intcon2	equ	0xFF1
  3346                           postinc0	equ	0xFEE
  3347                           fsr0h	equ	0xFEA
  3348                           fsr0l	equ	0xFE9
  3349                           wreg	equ	0xFE8
  3350                           indf1	equ	0xFE7
  3351                           fsr1h	equ	0xFE2
  3352                           fsr1l	equ	0xFE1
  3353                           indf2	equ	0xFDF
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function i2_buzzer_disable *****************
  3359 ;; Defined at:
  3360 ;;		line 158 in file "user.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, status,2
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3374 ;;      Params:         0       0       0       0       0       0       0       0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3376 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3377 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3378 ;;Total ram usage:        0 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; This function calls:
  3381 ;;		Nothing
  3382 ;; This function is called by:
  3383 ;;		_update_buzzer
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           	psect	text20
  3388  000E78                     __ptext20:
  3389                           	opt stack 0
  3390  000E78                     i2_buzzer_disable:
  3391                           	opt stack 24
  3392                           
  3393                           ;user.c: 160: buzzer_status= 0;
  3394                           
  3395                           ;incstack = 0
  3396  000E78  0E00               	movlw	0
  3397  000E7A  0100               	movlb	0	; () banked
  3398  000E7C  6FA4               	movwf	_buzzer_status& (0+255),b
  3399                           
  3400                           ; BSR set to: 0
  3401  000E7E  0012               	return		;funcret
  3402  000E80                     __end_ofi2_buzzer_disable:
  3403                           	opt stack 0
  3404                           pclatu	equ	0xFFB
  3405                           pclath	equ	0xFFA
  3406                           tblptru	equ	0xFF8
  3407                           tblptrh	equ	0xFF7
  3408                           tblptrl	equ	0xFF6
  3409                           tablat	equ	0xFF5
  3410                           prodh	equ	0xFF4
  3411                           prodl	equ	0xFF3
  3412                           intcon	equ	0xFF2
  3413                           intcon2	equ	0xFF1
  3414                           postinc0	equ	0xFEE
  3415                           fsr0h	equ	0xFEA
  3416                           fsr0l	equ	0xFE9
  3417                           wreg	equ	0xFE8
  3418                           indf1	equ	0xFE7
  3419                           fsr1h	equ	0xFE2
  3420                           fsr1l	equ	0xFE1
  3421                           indf2	equ	0xFDF
  3422                           fsr2h	equ	0xFDA
  3423                           fsr2l	equ	0xFD9
  3424                           status	equ	0xFD8
  3425                           
  3426 ;; *************** function _buzzer_enable *****************
  3427 ;; Defined at:
  3428 ;;		line 153 in file "user.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;		None
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3442 ;;      Params:         0       0       0       0       0       0       0       0       0
  3443 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3445 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3446 ;;Total ram usage:        0 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_update_buzzer
  3452 ;;		_buzzer_toggle
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text21
  3457  000E80                     __ptext21:
  3458                           	opt stack 0
  3459  000E80                     _buzzer_enable:
  3460                           	opt stack 24
  3461                           
  3462                           ;user.c: 155: buzzer_status= 1;
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;incstack = 0
  3466  000E80  0E01               	movlw	1
  3467  000E82  0100               	movlb	0	; () banked
  3468  000E84  6FA4               	movwf	_buzzer_status& (0+255),b
  3469                           
  3470                           ; BSR set to: 0
  3471  000E86  0012               	return		;funcret
  3472  000E88                     __end_of_buzzer_enable:
  3473                           	opt stack 0
  3474                           pclatu	equ	0xFFB
  3475                           pclath	equ	0xFFA
  3476                           tblptru	equ	0xFF8
  3477                           tblptrh	equ	0xFF7
  3478                           tblptrl	equ	0xFF6
  3479                           tablat	equ	0xFF5
  3480                           prodh	equ	0xFF4
  3481                           prodl	equ	0xFF3
  3482                           intcon	equ	0xFF2
  3483                           intcon2	equ	0xFF1
  3484                           postinc0	equ	0xFEE
  3485                           fsr0h	equ	0xFEA
  3486                           fsr0l	equ	0xFE9
  3487                           wreg	equ	0xFE8
  3488                           indf1	equ	0xFE7
  3489                           fsr1h	equ	0xFE2
  3490                           fsr1l	equ	0xFE1
  3491                           indf2	equ	0xFDF
  3492                           fsr2h	equ	0xFDA
  3493                           fsr2l	equ	0xFD9
  3494                           status	equ	0xFD8
  3495                           
  3496 ;; *************** function _put_nums *****************
  3497 ;; Defined at:
  3498 ;;		line 87 in file "user.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  nums            2    7[COMRAM] PTR unsigned char 
  3501 ;;		 -> masked_digits(6), 
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;  i               2    9[COMRAM] int 
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  1    wreg      void 
  3506 ;; Registers used:
  3507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3513 ;;      Params:         2       0       0       0       0       0       0       0       0
  3514 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3516 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3517 ;;Total ram usage:        4 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    1
  3520 ;; This function calls:
  3521 ;;		_get_num
  3522 ;;		_put_num
  3523 ;; This function is called by:
  3524 ;;		_high_isr
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text22
  3529  000DD6                     __ptext22:
  3530                           	opt stack 0
  3531  000DD6                     _put_nums:
  3532                           	opt stack 24
  3533                           
  3534                           ;user.c: 89: int i;
  3535                           ;user.c: 90: for(i=0;i<6;i++)
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;incstack = 0
  3539  000DD6  0E00               	movlw	0
  3540  000DD8  6E0B               	movwf	put_nums@i+1,c
  3541  000DDA  0E00               	movlw	0
  3542  000DDC  6E0A               	movwf	put_nums@i,c
  3543  000DDE                     i2l2587:
  3544  000DDE  BE0B               	btfsc	put_nums@i+1,7,c
  3545  000DE0  D006               	goto	i2l2591
  3546  000DE2  500B               	movf	put_nums@i+1,w,c
  3547  000DE4  E112               	bnz	i2l227
  3548  000DE6  0E06               	movlw	6
  3549  000DE8  5C0A               	subwf	put_nums@i,w,c
  3550  000DEA  B0D8               	btfsc	status,0,c
  3551  000DEC  0012               	return	
  3552  000DEE                     i2l2591:
  3553                           
  3554                           ;user.c: 91: {
  3555                           ;user.c: 92: put_num(get_num(nums[i]));
  3556  000DEE  500A               	movf	put_nums@i,w,c
  3557  000DF0  2408               	addwf	put_nums@nums,w,c
  3558  000DF2  6ED9               	movwf	fsr2l,c
  3559  000DF4  500B               	movf	put_nums@i+1,w,c
  3560  000DF6  2009               	addwfc	put_nums@nums+1,w,c
  3561  000DF8  6EDA               	movwf	fsr2h,c
  3562  000DFA  50DF               	movf	indf2,w,c
  3563  000DFC  EC2A  F004         	call	_get_num
  3564  000E00  ECD9  F005         	call	_put_num
  3565  000E04  4A0A               	infsnz	put_nums@i,f,c
  3566  000E06  2A0B               	incf	put_nums@i+1,f,c
  3567  000E08  D7EA               	goto	i2l2587
  3568  000E0A                     i2l227:
  3569  000E0A  0012               	return		;funcret
  3570  000E0C                     __end_of_put_nums:
  3571                           	opt stack 0
  3572                           pclatu	equ	0xFFB
  3573                           pclath	equ	0xFFA
  3574                           tblptru	equ	0xFF8
  3575                           tblptrh	equ	0xFF7
  3576                           tblptrl	equ	0xFF6
  3577                           tablat	equ	0xFF5
  3578                           prodh	equ	0xFF4
  3579                           prodl	equ	0xFF3
  3580                           intcon	equ	0xFF2
  3581                           intcon2	equ	0xFF1
  3582                           postinc0	equ	0xFEE
  3583                           fsr0h	equ	0xFEA
  3584                           fsr0l	equ	0xFE9
  3585                           wreg	equ	0xFE8
  3586                           indf1	equ	0xFE7
  3587                           fsr1h	equ	0xFE2
  3588                           fsr1l	equ	0xFE1
  3589                           indf2	equ	0xFDF
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function _put_num *****************
  3595 ;; Defined at:
  3596 ;;		line 74 in file "user.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  num             1    wreg     unsigned char 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  num             1    2[COMRAM] unsigned char 
  3601 ;;  i               2    5[COMRAM] int 
  3602 ;;  mask            1    3[COMRAM] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3612 ;;      Params:         0       0       0       0       0       0       0       0       0
  3613 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3614 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3615 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3616 ;;Total ram usage:        7 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; This function calls:
  3619 ;;		Nothing
  3620 ;; This function is called by:
  3621 ;;		_put_nums
  3622 ;;		_put_nums_individual
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text23
  3627  000BB2                     __ptext23:
  3628                           	opt stack 0
  3629  000BB2                     _put_num:
  3630                           	opt stack 24
  3631                           
  3632                           ;incstack = 0
  3633                           ;put_num@num stored from wreg
  3634  000BB2  6E03               	movwf	put_num@num,c
  3635                           
  3636                           ;user.c: 76: char mask = 0x01;
  3637  000BB4  0E01               	movlw	1
  3638  000BB6  6E04               	movwf	put_num@mask,c
  3639                           
  3640                           ;user.c: 77: int i;
  3641                           ;user.c: 78: for(i= 0; i<8; i++)
  3642  000BB8  0E00               	movlw	0
  3643  000BBA  6E07               	movwf	put_num@i+1,c
  3644  000BBC  0E00               	movlw	0
  3645  000BBE  6E06               	movwf	put_num@i,c
  3646  000BC0                     i2l2235:
  3647  000BC0  BE07               	btfsc	put_num@i+1,7,c
  3648  000BC2  D006               	goto	i2l2239
  3649  000BC4  5007               	movf	put_num@i+1,w,c
  3650  000BC6  E120               	bnz	i2l222
  3651  000BC8  0E08               	movlw	8
  3652  000BCA  5C06               	subwf	put_num@i,w,c
  3653  000BCC  B0D8               	btfsc	status,0,c
  3654  000BCE  0012               	return	
  3655  000BD0                     i2l2239:
  3656                           
  3657                           ;user.c: 79: {
  3658                           ;user.c: 80: RB3 = num>>i & mask;
  3659  000BD0  0E00               	movlw	0
  3660  000BD2  6E05               	movwf	_put_num$903,c
  3661  000BD4  C006  F001         	movff	put_num@i,??_put_num
  3662  000BD8  C003  F002         	movff	put_num@num,??_put_num+1
  3663  000BDC  2A01               	incf	??_put_num,f,c
  3664  000BDE  D002               	goto	i2u144_44
  3665  000BE0                     i2u144_45:
  3666  000BE0  90D8               	bcf	status,0,c
  3667  000BE2  3202               	rrcf	??_put_num+1,f,c
  3668  000BE4                     i2u144_44:
  3669  000BE4  2E01               	decfsz	??_put_num,f,c
  3670  000BE6  D7FC               	goto	i2u144_45
  3671  000BE8  3002               	rrcf	??_put_num+1,w,c
  3672  000BEA  B0D8               	btfsc	status,0,c
  3673  000BEC  A004               	btfss	put_num@mask,0,c
  3674  000BEE  D002               	goto	i2l2247
  3675  000BF0  0E01               	movlw	1
  3676  000BF2  6E05               	movwf	_put_num$903,c
  3677  000BF4                     i2l2247:
  3678  000BF4  B005               	btfsc	_put_num$903,0,c
  3679  000BF6  D002               	bra	i2u147_45
  3680  000BF8  9681               	bcf	3969,3,c	;volatile
  3681  000BFA  D001               	bra	i2u147_46
  3682  000BFC                     i2u147_45:
  3683  000BFC  8681               	bsf	3969,3,c	;volatile
  3684  000BFE                     i2u147_46:
  3685                           
  3686                           ;user.c: 81: RB4 = 0;
  3687  000BFE  9881               	bcf	3969,4,c	;volatile
  3688                           
  3689                           ;user.c: 82: RB4 = 1;
  3690  000C00  8881               	bsf	3969,4,c	;volatile
  3691  000C02  4A06               	infsnz	put_num@i,f,c
  3692  000C04  2A07               	incf	put_num@i+1,f,c
  3693  000C06  D7DC               	goto	i2l2235
  3694  000C08                     i2l222:
  3695  000C08  0012               	return		;funcret
  3696  000C0A                     __end_of_put_num:
  3697                           	opt stack 0
  3698                           pclatu	equ	0xFFB
  3699                           pclath	equ	0xFFA
  3700                           tblptru	equ	0xFF8
  3701                           tblptrh	equ	0xFF7
  3702                           tblptrl	equ	0xFF6
  3703                           tablat	equ	0xFF5
  3704                           prodh	equ	0xFF4
  3705                           prodl	equ	0xFF3
  3706                           intcon	equ	0xFF2
  3707                           intcon2	equ	0xFF1
  3708                           postinc0	equ	0xFEE
  3709                           fsr0h	equ	0xFEA
  3710                           fsr0l	equ	0xFE9
  3711                           wreg	equ	0xFE8
  3712                           indf1	equ	0xFE7
  3713                           fsr1h	equ	0xFE2
  3714                           fsr1l	equ	0xFE1
  3715                           indf2	equ	0xFDF
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _get_num *****************
  3721 ;; Defined at:
  3722 ;;		line 107 in file "user.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  num             1    wreg     unsigned char 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  num             1    0[COMRAM] unsigned char 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      unsigned char 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0
  3737 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3739 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3740 ;;Total ram usage:        1 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; This function calls:
  3743 ;;		Nothing
  3744 ;; This function is called by:
  3745 ;;		_put_nums
  3746 ;;		_put_nums_individual
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text24
  3751  000854                     __ptext24:
  3752                           	opt stack 0
  3753  000854                     _get_num:
  3754                           	opt stack 24
  3755                           
  3756                           ;incstack = 0
  3757                           ;get_num@num stored from wreg
  3758  000854  6E01               	movwf	get_num@num,c
  3759                           
  3760                           ;user.c: 109: switch(num)
  3761  000856  D022               	goto	i2l2329
  3762  000858                     i2l2259:
  3763  000858  0E30               	movlw	48
  3764  00085A  0012               	return	
  3765  00085C                     i2l2263:
  3766  00085C  0E6D               	movlw	109
  3767  00085E  0012               	return	
  3768  000860                     i2l2267:
  3769  000860  0E79               	movlw	121
  3770  000862  0012               	return	
  3771  000864                     i2l2271:
  3772  000864  0E33               	movlw	51
  3773  000866  0012               	return	
  3774  000868                     i2l2275:
  3775  000868  0E5B               	movlw	91
  3776  00086A  0012               	return	
  3777  00086C                     i2l2279:
  3778  00086C  0E5F               	movlw	95
  3779  00086E  0012               	return	
  3780  000870                     i2l2283:
  3781  000870  0E70               	movlw	112
  3782  000872  0012               	return	
  3783  000874                     i2l2287:
  3784  000874  0E7F               	movlw	127
  3785  000876  0012               	return	
  3786  000878                     i2l2291:
  3787  000878  0E73               	movlw	115
  3788  00087A  0012               	return	
  3789  00087C                     i2l2295:
  3790  00087C  0E7E               	movlw	126
  3791  00087E  0012               	return	
  3792  000880                     i2l2299:
  3793  000880  0E3E               	movlw	62
  3794  000882  0012               	return	
  3795  000884                     i2l2303:
  3796  000884  0E67               	movlw	103
  3797  000886  0012               	return	
  3798  000888                     i2l2307:
  3799  000888  0E37               	movlw	55
  3800  00088A  0012               	return	
  3801  00088C                     i2l2311:
  3802  00088C  0E3D               	movlw	61
  3803  00088E  0012               	return	
  3804  000890                     i2l2315:
  3805  000890  0E15               	movlw	21
  3806  000892  0012               	return	
  3807  000894                     i2l2319:
  3808  000894  0E00               	movlw	0
  3809  000896  0012               	return	
  3810  000898                     i2l2323:
  3811  000898  0E7F               	movlw	127
  3812                           
  3813                           ;user.c: 128: }
  3814  00089A  0012               	return	
  3815  00089C                     i2l2329:
  3816  00089C  5001               	movf	get_num@num,w,c
  3817                           
  3818                           ; Switch size 1, requested type "space"
  3819                           ; Number of cases is 16, Range of values is 0 to 86
  3820                           ; switch strategies available:
  3821                           ; Name         Instructions Cycles
  3822                           ; simple_byte           49    25 (average)
  3823                           ;	Chosen strategy is simple_byte
  3824  00089E  0A00               	xorlw	0	; case 0
  3825  0008A0  B4D8               	btfsc	status,2,c
  3826  0008A2  D7EC               	goto	i2l2295
  3827  0008A4  0A01               	xorlw	1	; case 1
  3828  0008A6  B4D8               	btfsc	status,2,c
  3829  0008A8  D7D7               	goto	i2l2259
  3830  0008AA  0A03               	xorlw	3	; case 2
  3831  0008AC  B4D8               	btfsc	status,2,c
  3832  0008AE  D7D6               	goto	i2l2263
  3833  0008B0  0A01               	xorlw	1	; case 3
  3834  0008B2  B4D8               	btfsc	status,2,c
  3835  0008B4  D7D5               	goto	i2l2267
  3836  0008B6  0A07               	xorlw	7	; case 4
  3837  0008B8  B4D8               	btfsc	status,2,c
  3838  0008BA  D7D4               	goto	i2l2271
  3839  0008BC  0A01               	xorlw	1	; case 5
  3840  0008BE  B4D8               	btfsc	status,2,c
  3841  0008C0  D7D3               	goto	i2l2275
  3842  0008C2  0A03               	xorlw	3	; case 6
  3843  0008C4  B4D8               	btfsc	status,2,c
  3844  0008C6  D7D2               	goto	i2l2279
  3845  0008C8  0A01               	xorlw	1	; case 7
  3846  0008CA  B4D8               	btfsc	status,2,c
  3847  0008CC  D7D1               	goto	i2l2283
  3848  0008CE  0A0F               	xorlw	15	; case 8
  3849  0008D0  B4D8               	btfsc	status,2,c
  3850  0008D2  D7D0               	goto	i2l2287
  3851  0008D4  0A01               	xorlw	1	; case 9
  3852  0008D6  B4D8               	btfsc	status,2,c
  3853  0008D8  D7CF               	goto	i2l2291
  3854  0008DA  0A4D               	xorlw	77	; case 68
  3855  0008DC  B4D8               	btfsc	status,2,c
  3856  0008DE  D7D6               	goto	i2l2311
  3857  0008E0  0A0C               	xorlw	12	; case 72
  3858  0008E2  B4D8               	btfsc	status,2,c
  3859  0008E4  D7D1               	goto	i2l2307
  3860  0008E6  0A06               	xorlw	6	; case 78
  3861  0008E8  B4D8               	btfsc	status,2,c
  3862  0008EA  D7D2               	goto	i2l2315
  3863  0008EC  0A1E               	xorlw	30	; case 80
  3864  0008EE  B4D8               	btfsc	status,2,c
  3865  0008F0  D7C9               	goto	i2l2303
  3866  0008F2  0A05               	xorlw	5	; case 85
  3867  0008F4  B4D8               	btfsc	status,2,c
  3868  0008F6  D7C4               	goto	i2l2299
  3869  0008F8  0A03               	xorlw	3	; case 86
  3870  0008FA  B4D8               	btfsc	status,2,c
  3871  0008FC  D7CB               	goto	i2l2319
  3872  0008FE  D7CC               	goto	i2l2323
  3873  000900                     __end_of_get_num:
  3874                           	opt stack 0
  3875                           pclatu	equ	0xFFB
  3876                           pclath	equ	0xFFA
  3877                           tblptru	equ	0xFF8
  3878                           tblptrh	equ	0xFF7
  3879                           tblptrl	equ	0xFF6
  3880                           tablat	equ	0xFF5
  3881                           prodh	equ	0xFF4
  3882                           prodl	equ	0xFF3
  3883                           intcon	equ	0xFF2
  3884                           intcon2	equ	0xFF1
  3885                           postinc0	equ	0xFEE
  3886                           fsr0h	equ	0xFEA
  3887                           fsr0l	equ	0xFE9
  3888                           wreg	equ	0xFE8
  3889                           indf1	equ	0xFE7
  3890                           fsr1h	equ	0xFE2
  3891                           fsr1l	equ	0xFE1
  3892                           indf2	equ	0xFDF
  3893                           fsr2h	equ	0xFDA
  3894                           fsr2l	equ	0xFD9
  3895                           status	equ	0xFD8
  3896                           
  3897 ;; *************** function _ir_get_human_code *****************
  3898 ;; Defined at:
  3899 ;;		line 417 in file "user.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  code            2    0[COMRAM] int 
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;  human_read_c    1    4[COMRAM] unsigned char 
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      unsigned char 
  3906 ;; Registers used:
  3907 ;;		wreg, status,2, status,0
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3913 ;;      Params:         2       0       0       0       0       0       0       0       0
  3914 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3915 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3916 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3917 ;;Total ram usage:        5 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; This function calls:
  3920 ;;		Nothing
  3921 ;; This function is called by:
  3922 ;;		_high_isr
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text25
  3927  000620                     __ptext25:
  3928                           	opt stack 0
  3929  000620                     _ir_get_human_code:
  3930                           	opt stack 25
  3931                           
  3932                           ;user.c: 419: char human_read_code;
  3933                           ;user.c: 420: switch(code)
  3934                           
  3935                           ;incstack = 0
  3936  000620  D035               	goto	i2l2441
  3937  000622                     i2l2401:
  3938                           
  3939                           ;user.c: 423: human_read_code = 10;
  3940  000622  0E0A               	movlw	10
  3941  000624  6E05               	movwf	ir_get_human_code@human_read_code,c
  3942                           
  3943                           ;user.c: 424: break;
  3944  000626  0012               	return	
  3945  000628                     i2l2403:
  3946                           
  3947                           ;user.c: 426: human_read_code = 11;
  3948  000628  0E0B               	movlw	11
  3949  00062A  6E05               	movwf	ir_get_human_code@human_read_code,c
  3950                           
  3951                           ;user.c: 427: break;
  3952  00062C  0012               	return	
  3953  00062E                     i2l2405:
  3954                           
  3955                           ;user.c: 429: human_read_code = 12;
  3956  00062E  0E0C               	movlw	12
  3957  000630  6E05               	movwf	ir_get_human_code@human_read_code,c
  3958                           
  3959                           ;user.c: 430: break;
  3960  000632  0012               	return	
  3961  000634                     i2l2407:
  3962                           
  3963                           ;user.c: 432: human_read_code = 13;
  3964  000634  0E0D               	movlw	13
  3965  000636  6E05               	movwf	ir_get_human_code@human_read_code,c
  3966                           
  3967                           ;user.c: 433: break;
  3968  000638  0012               	return	
  3969  00063A                     i2l2409:
  3970                           
  3971                           ;user.c: 435: human_read_code = 14;
  3972  00063A  0E0E               	movlw	14
  3973  00063C  6E05               	movwf	ir_get_human_code@human_read_code,c
  3974                           
  3975                           ;user.c: 436: break;
  3976  00063E  0012               	return	
  3977  000640                     i2l2411:
  3978                           
  3979                           ;user.c: 438: human_read_code = 1;
  3980  000640  0E01               	movlw	1
  3981  000642  6E05               	movwf	ir_get_human_code@human_read_code,c
  3982                           
  3983                           ;user.c: 439: break;
  3984  000644  0012               	return	
  3985  000646                     i2l2413:
  3986                           
  3987                           ;user.c: 441: human_read_code = 2;
  3988  000646  0E02               	movlw	2
  3989  000648  6E05               	movwf	ir_get_human_code@human_read_code,c
  3990                           
  3991                           ;user.c: 442: break;
  3992  00064A  0012               	return	
  3993  00064C                     i2l2415:
  3994                           
  3995                           ;user.c: 444: human_read_code = 3;
  3996  00064C  0E03               	movlw	3
  3997  00064E  6E05               	movwf	ir_get_human_code@human_read_code,c
  3998                           
  3999                           ;user.c: 445: break;
  4000  000650  0012               	return	
  4001  000652                     i2l2417:
  4002                           
  4003                           ;user.c: 447: human_read_code = 4;
  4004  000652  0E04               	movlw	4
  4005  000654  6E05               	movwf	ir_get_human_code@human_read_code,c
  4006                           
  4007                           ;user.c: 448: break;
  4008  000656  0012               	return	
  4009  000658                     i2l2419:
  4010                           
  4011                           ;user.c: 450: human_read_code = 5;
  4012  000658  0E05               	movlw	5
  4013  00065A  6E05               	movwf	ir_get_human_code@human_read_code,c
  4014                           
  4015                           ;user.c: 451: break;
  4016  00065C  0012               	return	
  4017  00065E                     i2l2421:
  4018                           
  4019                           ;user.c: 453: human_read_code = 6;
  4020  00065E  0E06               	movlw	6
  4021  000660  6E05               	movwf	ir_get_human_code@human_read_code,c
  4022                           
  4023                           ;user.c: 454: break;
  4024  000662  0012               	return	
  4025  000664                     i2l2423:
  4026                           
  4027                           ;user.c: 456: human_read_code = 7;
  4028  000664  0E07               	movlw	7
  4029  000666  6E05               	movwf	ir_get_human_code@human_read_code,c
  4030                           
  4031                           ;user.c: 457: break;
  4032  000668  0012               	return	
  4033  00066A                     i2l2425:
  4034                           
  4035                           ;user.c: 459: human_read_code = 8;
  4036  00066A  0E08               	movlw	8
  4037  00066C  6E05               	movwf	ir_get_human_code@human_read_code,c
  4038                           
  4039                           ;user.c: 460: break;
  4040  00066E  0012               	return	
  4041  000670                     i2l2427:
  4042                           
  4043                           ;user.c: 462: human_read_code = 9;
  4044  000670  0E09               	movlw	9
  4045  000672  6E05               	movwf	ir_get_human_code@human_read_code,c
  4046                           
  4047                           ;user.c: 463: break;
  4048  000674  0012               	return	
  4049  000676                     i2l2429:
  4050                           
  4051                           ;user.c: 465: human_read_code = 0;
  4052  000676  0E00               	movlw	0
  4053  000678  6E05               	movwf	ir_get_human_code@human_read_code,c
  4054                           
  4055                           ;user.c: 466: break;
  4056  00067A  0012               	return	
  4057  00067C                     i2l2431:
  4058                           
  4059                           ;user.c: 468: human_read_code = 15;
  4060  00067C  0E0F               	movlw	15
  4061  00067E  6E05               	movwf	ir_get_human_code@human_read_code,c
  4062                           
  4063                           ;user.c: 469: break;
  4064  000680  0012               	return	
  4065  000682                     i2l2433:
  4066                           
  4067                           ;user.c: 471: human_read_code = 16;
  4068  000682  0E10               	movlw	16
  4069  000684  6E05               	movwf	ir_get_human_code@human_read_code,c
  4070                           
  4071                           ;user.c: 472: break;
  4072  000686  0012               	return	
  4073  000688                     i2l2435:
  4074                           
  4075                           ;user.c: 474: return -1;
  4076  000688  0EFF               	movlw	255
  4077                           
  4078                           ;user.c: 475: }
  4079  00068A  0012               	return	
  4080  00068C                     i2l2441:
  4081  00068C  C001  F003         	movff	ir_get_human_code@code,??_ir_get_human_code
  4082  000690  C002  F004         	movff	ir_get_human_code@code+1,??_ir_get_human_code+1
  4083                           
  4084                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 8 sub-sw
      +                          itches
  4085                           ; Switch size 1, requested type "space"
  4086                           ; Number of cases is 8, Range of values is 170 to 238
  4087                           ; switch strategies available:
  4088                           ; Name         Instructions Cycles
  4089                           ; simple_byte           25    13 (average)
  4090                           ;	Chosen strategy is simple_byte
  4091  000694  5004               	movf	??_ir_get_human_code+1,w,c
  4092  000696  0AAA               	xorlw	170	; case 170
  4093  000698  B4D8               	btfsc	status,2,c
  4094  00069A  D016               	goto	i2l3711
  4095  00069C  0A01               	xorlw	1	; case 171
  4096  00069E  B4D8               	btfsc	status,2,c
  4097  0006A0  D01E               	goto	i2l3713
  4098  0006A2  0A05               	xorlw	5	; case 174
  4099  0006A4  B4D8               	btfsc	status,2,c
  4100  0006A6  D023               	goto	i2l3715
  4101  0006A8  0A14               	xorlw	20	; case 186
  4102  0006AA  B4D8               	btfsc	status,2,c
  4103  0006AC  D028               	goto	i2l3717
  4104  0006AE  0A01               	xorlw	1	; case 187
  4105  0006B0  B4D8               	btfsc	status,2,c
  4106  0006B2  D02A               	goto	i2l3719
  4107  0006B4  0A51               	xorlw	81	; case 234
  4108  0006B6  B4D8               	btfsc	status,2,c
  4109  0006B8  D032               	goto	i2l3721
  4110  0006BA  0A01               	xorlw	1	; case 235
  4111  0006BC  B4D8               	btfsc	status,2,c
  4112  0006BE  D034               	goto	i2l3723
  4113  0006C0  0A05               	xorlw	5	; case 238
  4114  0006C2  B4D8               	btfsc	status,2,c
  4115  0006C4  D039               	goto	i2l3725
  4116  0006C6  D7E0               	goto	i2l2435
  4117  0006C8                     i2l3711:
  4118                           
  4119                           ; Switch size 1, requested type "space"
  4120                           ; Number of cases is 3, Range of values is 186 to 238
  4121                           ; switch strategies available:
  4122                           ; Name         Instructions Cycles
  4123                           ; simple_byte           10     6 (average)
  4124                           ;	Chosen strategy is simple_byte
  4125  0006C8  5003               	movf	??_ir_get_human_code,w,c
  4126  0006CA  0ABA               	xorlw	186	; case 186
  4127  0006CC  B4D8               	btfsc	status,2,c
  4128  0006CE  D7D6               	goto	i2l2431
  4129  0006D0  0A50               	xorlw	80	; case 234
  4130  0006D2  B4D8               	btfsc	status,2,c
  4131  0006D4  D7AF               	goto	i2l2407
  4132  0006D6  0A04               	xorlw	4	; case 238
  4133  0006D8  B4D8               	btfsc	status,2,c
  4134  0006DA  D7AF               	goto	i2l2409
  4135  0006DC  D7D5               	goto	i2l2435
  4136  0006DE                     i2l3713:
  4137                           
  4138                           ; Switch size 1, requested type "space"
  4139                           ; Number of cases is 2, Range of values is 170 to 186
  4140                           ; switch strategies available:
  4141                           ; Name         Instructions Cycles
  4142                           ; simple_byte            7     4 (average)
  4143                           ;	Chosen strategy is simple_byte
  4144  0006DE  5003               	movf	??_ir_get_human_code,w,c
  4145  0006E0  0AAA               	xorlw	170	; case 170
  4146  0006E2  B4D8               	btfsc	status,2,c
  4147  0006E4  D7BF               	goto	i2l2423
  4148  0006E6  0A10               	xorlw	16	; case 186
  4149  0006E8  B4D8               	btfsc	status,2,c
  4150  0006EA  D79B               	goto	i2l2401
  4151  0006EC  D7CD               	goto	i2l2435
  4152  0006EE                     i2l3715:
  4153                           
  4154                           ; Switch size 1, requested type "space"
  4155                           ; Number of cases is 2, Range of values is 186 to 234
  4156                           ; switch strategies available:
  4157                           ; Name         Instructions Cycles
  4158                           ; simple_byte            7     4 (average)
  4159                           ;	Chosen strategy is simple_byte
  4160  0006EE  5003               	movf	??_ir_get_human_code,w,c
  4161  0006F0  0ABA               	xorlw	186	; case 186
  4162  0006F2  B4D8               	btfsc	status,2,c
  4163  0006F4  D7C6               	goto	i2l2433
  4164  0006F6  0A50               	xorlw	80	; case 234
  4165  0006F8  B4D8               	btfsc	status,2,c
  4166  0006FA  D7AB               	goto	i2l2417
  4167  0006FC  D7C5               	goto	i2l2435
  4168  0006FE                     i2l3717:
  4169                           
  4170                           ; Switch size 1, requested type "space"
  4171                           ; Number of cases is 1, Range of values is 186 to 186
  4172                           ; switch strategies available:
  4173                           ; Name         Instructions Cycles
  4174                           ; simple_byte            4     3 (average)
  4175                           ;	Chosen strategy is simple_byte
  4176  0006FE  5003               	movf	??_ir_get_human_code,w,c
  4177  000700  0ABA               	xorlw	186	; case 186
  4178  000702  B4D8               	btfsc	status,2,c
  4179  000704  D7B8               	goto	i2l2429
  4180  000706  D7C0               	goto	i2l2435
  4181  000708                     i2l3719:
  4182                           
  4183                           ; Switch size 1, requested type "space"
  4184                           ; Number of cases is 3, Range of values is 170 to 186
  4185                           ; switch strategies available:
  4186                           ; Name         Instructions Cycles
  4187                           ; simple_byte           10     6 (average)
  4188                           ;	Chosen strategy is simple_byte
  4189  000708  5003               	movf	??_ir_get_human_code,w,c
  4190  00070A  0AAA               	xorlw	170	; case 170
  4191  00070C  B4D8               	btfsc	status,2,c
  4192  00070E  D7A4               	goto	i2l2419
  4193  000710  0A04               	xorlw	4	; case 174
  4194  000712  B4D8               	btfsc	status,2,c
  4195  000714  D79B               	goto	i2l2415
  4196  000716  0A14               	xorlw	20	; case 186
  4197  000718  B4D8               	btfsc	status,2,c
  4198  00071A  D7A1               	goto	i2l2421
  4199  00071C  D7B5               	goto	i2l2435
  4200  00071E                     i2l3721:
  4201                           
  4202                           ; Switch size 1, requested type "space"
  4203                           ; Number of cases is 1, Range of values is 170 to 170
  4204                           ; switch strategies available:
  4205                           ; Name         Instructions Cycles
  4206                           ; simple_byte            4     3 (average)
  4207                           ;	Chosen strategy is simple_byte
  4208  00071E  5003               	movf	??_ir_get_human_code,w,c
  4209  000720  0AAA               	xorlw	170	; case 170
  4210  000722  B4D8               	btfsc	status,2,c
  4211  000724  D781               	goto	i2l2403
  4212  000726  D7B0               	goto	i2l2435
  4213  000728                     i2l3723:
  4214                           
  4215                           ; Switch size 1, requested type "space"
  4216                           ; Number of cases is 2, Range of values is 174 to 186
  4217                           ; switch strategies available:
  4218                           ; Name         Instructions Cycles
  4219                           ; simple_byte            7     4 (average)
  4220                           ;	Chosen strategy is simple_byte
  4221  000728  5003               	movf	??_ir_get_human_code,w,c
  4222  00072A  0AAE               	xorlw	174	; case 174
  4223  00072C  B4D8               	btfsc	status,2,c
  4224  00072E  D77F               	goto	i2l2405
  4225  000730  0A14               	xorlw	20	; case 186
  4226  000732  B4D8               	btfsc	status,2,c
  4227  000734  D785               	goto	i2l2411
  4228  000736  D7A8               	goto	i2l2435
  4229  000738                     i2l3725:
  4230                           
  4231                           ; Switch size 1, requested type "space"
  4232                           ; Number of cases is 3, Range of values is 174 to 234
  4233                           ; switch strategies available:
  4234                           ; Name         Instructions Cycles
  4235                           ; simple_byte           10     6 (average)
  4236                           ;	Chosen strategy is simple_byte
  4237  000738  5003               	movf	??_ir_get_human_code,w,c
  4238  00073A  0AAE               	xorlw	174	; case 174
  4239  00073C  B4D8               	btfsc	status,2,c
  4240  00073E  D783               	goto	i2l2413
  4241  000740  0A14               	xorlw	20	; case 186
  4242  000742  B4D8               	btfsc	status,2,c
  4243  000744  D795               	goto	i2l2427
  4244  000746  0A50               	xorlw	80	; case 234
  4245  000748  B4D8               	btfsc	status,2,c
  4246  00074A  D78F               	goto	i2l2425
  4247  00074C  D79D               	goto	i2l2435
  4248  00074E                     __end_of_ir_get_human_code:
  4249                           	opt stack 0
  4250                           pclatu	equ	0xFFB
  4251                           pclath	equ	0xFFA
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           prodh	equ	0xFF4
  4257                           prodl	equ	0xFF3
  4258                           intcon	equ	0xFF2
  4259                           intcon2	equ	0xFF1
  4260                           postinc0	equ	0xFEE
  4261                           fsr0h	equ	0xFEA
  4262                           fsr0l	equ	0xFE9
  4263                           wreg	equ	0xFE8
  4264                           indf1	equ	0xFE7
  4265                           fsr1h	equ	0xFE2
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           fsr2h	equ	0xFDA
  4269                           fsr2l	equ	0xFD9
  4270                           status	equ	0xFD8
  4271                           
  4272 ;; *************** function _get_next_state *****************
  4273 ;; Defined at:
  4274 ;;		line 368 in file "user.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;  state           2   13[COMRAM] int 
  4277 ;;  code            2   15[COMRAM] int 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  hour            1   19[COMRAM] unsigned char 
  4280 ;;  minutes         1   18[COMRAM] unsigned char 
  4281 ;;  seconds         1   17[COMRAM] unsigned char 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  2   13[COMRAM] int 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4291 ;;      Params:         4       0       0       0       0       0       0       0       0
  4292 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4294 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4295 ;;Total ram usage:        7 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; Hardware stack levels required when called:    4
  4298 ;; This function calls:
  4299 ;;		_set_time
  4300 ;;		_timer1_enable
  4301 ;; This function is called by:
  4302 ;;		_high_isr
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text26
  4307  00049A                     __ptext26:
  4308                           	opt stack 0
  4309  00049A                     _get_next_state:
  4310                           	opt stack 21
  4311                           
  4312                           ;user.c: 370: if(state == 0 && code == 0xAABA)
  4313                           
  4314                           ;incstack = 0
  4315  00049A  500E               	movf	get_next_state@state,w,c
  4316  00049C  100F               	iorwf	get_next_state@state+1,w,c
  4317  00049E  A4D8               	btfss	status,2,c
  4318  0004A0  D00B               	goto	i2l2481
  4319  0004A2  0EBA               	movlw	186
  4320  0004A4  1810               	xorwf	get_next_state@code,w,c
  4321  0004A6  E108               	bnz	i2l2481
  4322  0004A8  0EAA               	movlw	170
  4323  0004AA  1811               	xorwf	get_next_state@code+1,w,c
  4324  0004AC  A4D8               	btfss	status,2,c
  4325  0004AE  D004               	goto	i2l2481
  4326  0004B0                     i2l2479:
  4327                           
  4328                           ;user.c: 371: next = 1;
  4329  0004B0  0E00               	movlw	0
  4330  0004B2  6E38               	movwf	_next+1,c
  4331  0004B4  0E01               	movlw	1
  4332  0004B6  D0AE               	goto	L17
  4333  0004B8                     i2l2481:
  4334                           
  4335                           ;user.c: 372: else if(state == 0 && code == 0xABBa)
  4336  0004B8  500E               	movf	get_next_state@state,w,c
  4337  0004BA  100F               	iorwf	get_next_state@state+1,w,c
  4338  0004BC  A4D8               	btfss	status,2,c
  4339  0004BE  D00B               	goto	i2l2487
  4340  0004C0  0EBA               	movlw	186
  4341  0004C2  1810               	xorwf	get_next_state@code,w,c
  4342  0004C4  E108               	bnz	i2l2487
  4343  0004C6  0EAB               	movlw	171
  4344  0004C8  1811               	xorwf	get_next_state@code+1,w,c
  4345  0004CA  A4D8               	btfss	status,2,c
  4346  0004CC  D004               	goto	i2l2487
  4347                           
  4348                           ;user.c: 373: next = 5;
  4349  0004CE  0E00               	movlw	0
  4350  0004D0  6E38               	movwf	_next+1,c
  4351  0004D2  0E05               	movlw	5
  4352  0004D4  D09F               	goto	L17
  4353  0004D6                     i2l2487:
  4354                           
  4355                           ;user.c: 374: else if(state == 0 && code == 0xEBAE)
  4356  0004D6  500E               	movf	get_next_state@state,w,c
  4357  0004D8  100F               	iorwf	get_next_state@state+1,w,c
  4358  0004DA  A4D8               	btfss	status,2,c
  4359  0004DC  D00B               	goto	i2l2493
  4360  0004DE  0EAE               	movlw	174
  4361  0004E0  1810               	xorwf	get_next_state@code,w,c
  4362  0004E2  E108               	bnz	i2l2493
  4363  0004E4  0EEB               	movlw	235
  4364  0004E6  1811               	xorwf	get_next_state@code+1,w,c
  4365  0004E8  A4D8               	btfss	status,2,c
  4366  0004EA  D004               	goto	i2l2493
  4367                           
  4368                           ;user.c: 375: next = 6;
  4369  0004EC  0E00               	movlw	0
  4370  0004EE  6E38               	movwf	_next+1,c
  4371  0004F0  0E06               	movlw	6
  4372  0004F2  D090               	goto	L17
  4373  0004F4                     i2l2493:
  4374                           
  4375                           ;user.c: 376: else if(state == 1 && code == 0xAAEE)
  4376  0004F4  040E               	decf	get_next_state@state,w,c
  4377  0004F6  100F               	iorwf	get_next_state@state+1,w,c
  4378  0004F8  A4D8               	btfss	status,2,c
  4379  0004FA  D00B               	goto	i2l2499
  4380  0004FC  0EEE               	movlw	238
  4381  0004FE  1810               	xorwf	get_next_state@code,w,c
  4382  000500  E108               	bnz	i2l2499
  4383  000502  0EAA               	movlw	170
  4384  000504  1811               	xorwf	get_next_state@code+1,w,c
  4385  000506  A4D8               	btfss	status,2,c
  4386  000508  D004               	goto	i2l2499
  4387                           
  4388                           ;user.c: 377: next = 2;
  4389  00050A  0E00               	movlw	0
  4390  00050C  6E38               	movwf	_next+1,c
  4391  00050E  0E02               	movlw	2
  4392  000510  D081               	goto	L17
  4393  000512                     i2l2499:
  4394                           
  4395                           ;user.c: 378: else if(state == 2 && code == 0xAAEE)
  4396  000512  0E02               	movlw	2
  4397  000514  180E               	xorwf	get_next_state@state,w,c
  4398  000516  100F               	iorwf	get_next_state@state+1,w,c
  4399  000518  A4D8               	btfss	status,2,c
  4400  00051A  D00B               	goto	i2l2505
  4401  00051C  0EEE               	movlw	238
  4402  00051E  1810               	xorwf	get_next_state@code,w,c
  4403  000520  E108               	bnz	i2l2505
  4404  000522  0EAA               	movlw	170
  4405  000524  1811               	xorwf	get_next_state@code+1,w,c
  4406  000526  A4D8               	btfss	status,2,c
  4407  000528  D004               	goto	i2l2505
  4408                           
  4409                           ;user.c: 379: next = 3;
  4410  00052A  0E00               	movlw	0
  4411  00052C  6E38               	movwf	_next+1,c
  4412  00052E  0E03               	movlw	3
  4413  000530  D071               	goto	L17
  4414  000532                     i2l2505:
  4415                           
  4416                           ;user.c: 380: else if(state == 3 && code == 0xAAEE)
  4417  000532  0E03               	movlw	3
  4418  000534  180E               	xorwf	get_next_state@state,w,c
  4419  000536  100F               	iorwf	get_next_state@state+1,w,c
  4420  000538  A4D8               	btfss	status,2,c
  4421  00053A  D00B               	goto	i2l2511
  4422  00053C  0EEE               	movlw	238
  4423  00053E  1810               	xorwf	get_next_state@code,w,c
  4424  000540  E108               	bnz	i2l2511
  4425  000542  0EAA               	movlw	170
  4426  000544  1811               	xorwf	get_next_state@code+1,w,c
  4427  000546  A4D8               	btfss	status,2,c
  4428  000548  D004               	goto	i2l2511
  4429                           
  4430                           ;user.c: 381: next = 4;
  4431  00054A  0E00               	movlw	0
  4432  00054C  6E38               	movwf	_next+1,c
  4433  00054E  0E04               	movlw	4
  4434  000550  D061               	goto	L17
  4435  000552                     i2l2511:
  4436                           
  4437                           ;user.c: 382: else if(state == 4 && code == 0xAAEE)
  4438  000552  0E04               	movlw	4
  4439  000554  180E               	xorwf	get_next_state@state,w,c
  4440  000556  100F               	iorwf	get_next_state@state+1,w,c
  4441  000558  A4D8               	btfss	status,2,c
  4442  00055A  D007               	goto	i2l2517
  4443  00055C  0EEE               	movlw	238
  4444  00055E  1810               	xorwf	get_next_state@code,w,c
  4445  000560  E104               	bnz	i2l2517
  4446  000562  0EAA               	movlw	170
  4447  000564  1811               	xorwf	get_next_state@code+1,w,c
  4448  000566  B4D8               	btfsc	status,2,c
  4449  000568  D7A3               	goto	i2l2479
  4450  00056A                     i2l2517:
  4451                           
  4452                           ;user.c: 384: else if((state == 1 || state == 2 || state == 3 || state == 4) && code == 
      +                          0xAEBA)
  4453  00056A  040E               	decf	get_next_state@state,w,c
  4454  00056C  100F               	iorwf	get_next_state@state+1,w,c
  4455  00056E  B4D8               	btfsc	status,2,c
  4456  000570  D00F               	goto	i2l2525
  4457  000572  0E02               	movlw	2
  4458  000574  180E               	xorwf	get_next_state@state,w,c
  4459  000576  100F               	iorwf	get_next_state@state+1,w,c
  4460  000578  B4D8               	btfsc	status,2,c
  4461  00057A  D00A               	goto	i2l2525
  4462  00057C  0E03               	movlw	3
  4463  00057E  180E               	xorwf	get_next_state@state,w,c
  4464  000580  100F               	iorwf	get_next_state@state+1,w,c
  4465  000582  B4D8               	btfsc	status,2,c
  4466  000584  D005               	goto	i2l2525
  4467  000586  0E04               	movlw	4
  4468  000588  180E               	xorwf	get_next_state@state,w,c
  4469  00058A  100F               	iorwf	get_next_state@state+1,w,c
  4470  00058C  A4D8               	btfss	status,2,c
  4471  00058E  D023               	goto	i2l2535
  4472  000590                     i2l2525:
  4473  000590  0EBA               	movlw	186
  4474  000592  1810               	xorwf	get_next_state@code,w,c
  4475  000594  E120               	bnz	i2l2535
  4476  000596  0EAE               	movlw	174
  4477  000598  1811               	xorwf	get_next_state@code+1,w,c
  4478  00059A  A4D8               	btfss	status,2,c
  4479  00059C  D01C               	goto	i2l2535
  4480                           
  4481                           ;user.c: 385: {
  4482                           ;user.c: 386: next = 0;
  4483  00059E  0E00               	movlw	0
  4484  0005A0  6E38               	movwf	_next+1,c
  4485  0005A2  0E00               	movlw	0
  4486  0005A4  6E37               	movwf	_next,c
  4487                           
  4488                           ;user.c: 387: char seconds = 0;
  4489  0005A6  0E00               	movlw	0
  4490  0005A8  6E12               	movwf	get_next_state@seconds,c
  4491                           
  4492                           ;user.c: 388: char minutes = aux1[0] + aux1[1]*10;
  4493  0005AA  0100               	movlb	0	; () banked
  4494  0005AC  51AC               	movf	(_aux1+1)& (0+255),w,b
  4495  0005AE  0D0A               	mullw	10
  4496  0005B0  50F3               	movf	prodl,w,c
  4497  0005B2  0100               	movlb	0	; () banked
  4498  0005B4  25AB               	addwf	_aux1& (0+255),w,b
  4499  0005B6  6E13               	movwf	get_next_state@minutes,c
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;user.c: 389: char hour = aux1[2] + aux1[3]*10;
  4503  0005B8  0100               	movlb	0	; () banked
  4504  0005BA  51AE               	movf	(_aux1+3)& (0+255),w,b
  4505  0005BC  0D0A               	mullw	10
  4506  0005BE  50F3               	movf	prodl,w,c
  4507  0005C0  0100               	movlb	0	; () banked
  4508  0005C2  25AD               	addwf	(_aux1+2)& (0+255),w,b
  4509  0005C4  6E14               	movwf	get_next_state@hour,c
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;user.c: 390: set_time(seconds,minutes,hour);
  4513  0005C6  C013  F008         	movff	get_next_state@minutes,set_time@minutes
  4514  0005CA  C014  F009         	movff	get_next_state@hour,set_time@hour
  4515  0005CE  5012               	movf	get_next_state@seconds,w,c
  4516  0005D0  ECCE  F006         	call	_set_time
  4517                           
  4518                           ;user.c: 391: }
  4519  0005D4  D020               	goto	i2l333
  4520  0005D6                     i2l2535:
  4521                           
  4522                           ;user.c: 392: else if((state == 5 && code == 0xEAAA))
  4523  0005D6  0E05               	movlw	5
  4524  0005D8  180E               	xorwf	get_next_state@state,w,c
  4525  0005DA  100F               	iorwf	get_next_state@state+1,w,c
  4526  0005DC  A4D8               	btfss	status,2,c
  4527  0005DE  D00E               	goto	i2l2543
  4528  0005E0  0EAA               	movlw	170
  4529  0005E2  1810               	xorwf	get_next_state@code,w,c
  4530  0005E4  E10B               	bnz	i2l2543
  4531  0005E6  0EEA               	movlw	234
  4532  0005E8  1811               	xorwf	get_next_state@code+1,w,c
  4533  0005EA  A4D8               	btfss	status,2,c
  4534  0005EC  D007               	goto	i2l2543
  4535                           
  4536                           ;user.c: 393: {
  4537                           ;user.c: 394: next = 11;
  4538  0005EE  0E00               	movlw	0
  4539  0005F0  6E38               	movwf	_next+1,c
  4540  0005F2  0E0B               	movlw	11
  4541  0005F4  6E37               	movwf	_next,c
  4542                           
  4543                           ;user.c: 396: timer1_enable();
  4544  0005F6  EC54  F007         	call	_timer1_enable	;wreg free
  4545                           
  4546                           ;user.c: 397: }
  4547  0005FA  D00D               	goto	i2l333
  4548  0005FC                     i2l2543:
  4549                           
  4550                           ;user.c: 398: else if((state == 11 && timer1_counter_10 == 0))
  4551  0005FC  0E0B               	movlw	11
  4552  0005FE  180E               	xorwf	get_next_state@state,w,c
  4553  000600  100F               	iorwf	get_next_state@state+1,w,c
  4554  000602  A4D8               	btfss	status,2,c
  4555  000604  D008               	goto	i2l333
  4556  000606  0100               	movlb	0	; () banked
  4557  000608  51B1               	movf	_timer1_counter_10& (0+255),w,b
  4558  00060A  A4D8               	btfss	status,2,c
  4559  00060C  D004               	goto	i2l333
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;user.c: 399: next = 12;
  4563  00060E  0E00               	movlw	0
  4564  000610  6E38               	movwf	_next+1,c
  4565  000612  0E0C               	movlw	12
  4566  000614                     L17:
  4567  000614  6E37               	movwf	_next,c
  4568  000616                     i2l333:
  4569                           
  4570                           ;user.c: 403: return next;
  4571  000616  C037  F00E         	movff	_next,?_get_next_state
  4572  00061A  C038  F00F         	movff	_next+1,?_get_next_state+1
  4573  00061E  0012               	return		;funcret
  4574  000620                     __end_of_get_next_state:
  4575                           	opt stack 0
  4576                           pclatu	equ	0xFFB
  4577                           pclath	equ	0xFFA
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           prodh	equ	0xFF4
  4583                           prodl	equ	0xFF3
  4584                           intcon	equ	0xFF2
  4585                           intcon2	equ	0xFF1
  4586                           postinc0	equ	0xFEE
  4587                           fsr0h	equ	0xFEA
  4588                           fsr0l	equ	0xFE9
  4589                           wreg	equ	0xFE8
  4590                           indf1	equ	0xFE7
  4591                           fsr1h	equ	0xFE2
  4592                           fsr1l	equ	0xFE1
  4593                           indf2	equ	0xFDF
  4594                           fsr2h	equ	0xFDA
  4595                           fsr2l	equ	0xFD9
  4596                           status	equ	0xFD8
  4597                           
  4598 ;; *************** function _timer1_enable *****************
  4599 ;; Defined at:
  4600 ;;		line 525 in file "user.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;		None
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;		None
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      void 
  4607 ;; Registers used:
  4608 ;;		status,2, status,0
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4614 ;;      Params:         0       0       0       0       0       0       0       0       0
  4615 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4617 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4618 ;;Total ram usage:        0 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; This function calls:
  4621 ;;		Nothing
  4622 ;; This function is called by:
  4623 ;;		_get_next_state
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text27
  4628  000EA8                     __ptext27:
  4629                           	opt stack 0
  4630  000EA8                     _timer1_enable:
  4631                           	opt stack 24
  4632                           
  4633                           ;user.c: 527: T1CON |= 1 << 0;
  4634                           
  4635                           ;incstack = 0
  4636  000EA8  80CD               	bsf	4045,0,c	;volatile
  4637  000EAA  0012               	return		;funcret
  4638  000EAC                     __end_of_timer1_enable:
  4639                           	opt stack 0
  4640                           pclatu	equ	0xFFB
  4641                           pclath	equ	0xFFA
  4642                           tblptru	equ	0xFF8
  4643                           tblptrh	equ	0xFF7
  4644                           tblptrl	equ	0xFF6
  4645                           tablat	equ	0xFF5
  4646                           prodh	equ	0xFF4
  4647                           prodl	equ	0xFF3
  4648                           intcon	equ	0xFF2
  4649                           intcon2	equ	0xFF1
  4650                           postinc0	equ	0xFEE
  4651                           fsr0h	equ	0xFEA
  4652                           fsr0l	equ	0xFE9
  4653                           wreg	equ	0xFE8
  4654                           indf1	equ	0xFE7
  4655                           fsr1h	equ	0xFE2
  4656                           fsr1l	equ	0xFE1
  4657                           indf2	equ	0xFDF
  4658                           fsr2h	equ	0xFDA
  4659                           fsr2l	equ	0xFD9
  4660                           status	equ	0xFD8
  4661                           
  4662 ;; *************** function _set_time *****************
  4663 ;; Defined at:
  4664 ;;		line 225 in file "user.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;  seconds         1    wreg     unsigned char 
  4667 ;;  minutes         1    7[COMRAM] unsigned char 
  4668 ;;  hour            1    8[COMRAM] unsigned char 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;  seconds         1    9[COMRAM] unsigned char 
  4671 ;;  hour_reg        1   12[COMRAM] unsigned char 
  4672 ;;  min_reg         1   11[COMRAM] unsigned char 
  4673 ;;  sec_reg         1   10[COMRAM] unsigned char 
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      void 
  4676 ;; Registers used:
  4677 ;;		wreg, status,2, status,0, cstack
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4683 ;;      Params:         2       0       0       0       0       0       0       0       0
  4684 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4686 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4687 ;;Total ram usage:        6 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    3
  4690 ;; This function calls:
  4691 ;;		_byte_write
  4692 ;;		_get_hour_reg
  4693 ;;		i2_get_seconds_reg
  4694 ;; This function is called by:
  4695 ;;		_get_next_state
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text28
  4700  000D9C                     __ptext28:
  4701                           	opt stack 0
  4702  000D9C                     _set_time:
  4703                           	opt stack 21
  4704                           
  4705                           ;incstack = 0
  4706                           ;set_time@seconds stored from wreg
  4707  000D9C  6E0A               	movwf	set_time@seconds,c
  4708                           
  4709                           ;user.c: 228: char sec_reg = get_seconds_reg(seconds);
  4710  000D9E  500A               	movf	set_time@seconds,w,c
  4711  000DA0  EC5B  F006         	call	i2_get_seconds_reg
  4712  000DA4  6E0B               	movwf	set_time@sec_reg,c
  4713                           
  4714                           ;user.c: 229: char min_reg = get_seconds_reg(minutes);
  4715  000DA6  5008               	movf	set_time@minutes,w,c
  4716  000DA8  EC5B  F006         	call	i2_get_seconds_reg
  4717  000DAC  6E0C               	movwf	set_time@min_reg,c
  4718                           
  4719                           ;user.c: 230: char hour_reg = get_hour_reg(hour);
  4720  000DAE  5009               	movf	set_time@hour,w,c
  4721  000DB0  EC06  F007         	call	_get_hour_reg
  4722  000DB4  6E0D               	movwf	set_time@hour_reg,c
  4723                           
  4724                           ;user.c: 232: byte_write(0x80,sec_reg);
  4725  000DB6  C00B  F006         	movff	set_time@sec_reg,byte_write@value
  4726  000DBA  0E80               	movlw	128
  4727  000DBC  EC2C  F007         	call	_byte_write
  4728                           
  4729                           ;user.c: 233: byte_write(0x82,min_reg);
  4730  000DC0  C00C  F006         	movff	set_time@min_reg,byte_write@value
  4731  000DC4  0E82               	movlw	130
  4732  000DC6  EC2C  F007         	call	_byte_write
  4733                           
  4734                           ;user.c: 234: byte_write(0x84,hour_reg);
  4735  000DCA  C00D  F006         	movff	set_time@hour_reg,byte_write@value
  4736  000DCE  0E84               	movlw	132
  4737  000DD0  EC2C  F007         	call	_byte_write
  4738  000DD4  0012               	return		;funcret
  4739  000DD6                     __end_of_set_time:
  4740                           	opt stack 0
  4741                           pclatu	equ	0xFFB
  4742                           pclath	equ	0xFFA
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           intcon	equ	0xFF2
  4750                           intcon2	equ	0xFF1
  4751                           postinc0	equ	0xFEE
  4752                           fsr0h	equ	0xFEA
  4753                           fsr0l	equ	0xFE9
  4754                           wreg	equ	0xFE8
  4755                           indf1	equ	0xFE7
  4756                           fsr1h	equ	0xFE2
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function i2_get_seconds_reg *****************
  4764 ;; Defined at:
  4765 ;;		line 286 in file "user.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  seconds         1    wreg     unsigned char 
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;  seconds         1    1[COMRAM] unsigned char 
  4770 ;;  get_seconds_    1    0[COMRAM] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      unsigned char 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0
  4781 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4783 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4784 ;;Total ram usage:        2 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_set_time
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text29
  4794  000CB6                     __ptext29:
  4795                           	opt stack 0
  4796  000CB6                     i2_get_seconds_reg:
  4797                           	opt stack 23
  4798                           
  4799                           ;incstack = 0
  4800                           ;i2get_seconds_reg@seconds stored from wreg
  4801  000CB6  6E02               	movwf	i2get_seconds_reg@seconds,c
  4802                           
  4803                           ;user.c: 288: char res = 0;
  4804  000CB8  0E00               	movlw	0
  4805  000CBA  6E01               	movwf	i2get_seconds_reg@res,c
  4806                           
  4807                           ;user.c: 289: if(seconds<10)
  4808  000CBC  0E0A               	movlw	10
  4809  000CBE  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4810  000CC0  D003               	goto	i2l2207
  4811                           
  4812                           ;user.c: 290: {
  4813                           ;user.c: 291: res = seconds;
  4814  000CC2  C002  F001         	movff	i2get_seconds_reg@seconds,i2get_seconds_reg@res
  4815                           
  4816                           ;user.c: 292: }
  4817  000CC6  D020               	goto	i2l2225
  4818  000CC8                     i2l2207:
  4819                           
  4820                           ;user.c: 293: else if(seconds <20)
  4821  000CC8  0E14               	movlw	20
  4822  000CCA  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4823  000CCC  D004               	goto	i2l2211
  4824                           
  4825                           ;user.c: 294: {
  4826                           ;user.c: 295: res = 1<<4 | (seconds - 10);
  4827  000CCE  5002               	movf	i2get_seconds_reg@seconds,w,c
  4828  000CD0  0FF6               	addlw	246
  4829  000CD2  0910               	iorlw	16
  4830  000CD4  D018               	goto	L21
  4831  000CD6                     i2l2211:
  4832                           
  4833                           ;user.c: 297: else if(seconds <30)
  4834  000CD6  0E1E               	movlw	30
  4835  000CD8  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4836  000CDA  D004               	goto	i2l2215
  4837                           
  4838                           ;user.c: 298: {
  4839                           ;user.c: 299: res = 2<<4 | (seconds -20);
  4840  000CDC  5002               	movf	i2get_seconds_reg@seconds,w,c
  4841  000CDE  0FEC               	addlw	236
  4842  000CE0  0920               	iorlw	32
  4843  000CE2  D011               	goto	L21
  4844  000CE4                     i2l2215:
  4845                           
  4846                           ;user.c: 301: else if(seconds <40)
  4847  000CE4  0E28               	movlw	40
  4848  000CE6  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4849  000CE8  D004               	goto	i2l2219
  4850                           
  4851                           ;user.c: 302: {
  4852                           ;user.c: 303: res = 3<<4 | (seconds - 30);
  4853  000CEA  5002               	movf	i2get_seconds_reg@seconds,w,c
  4854  000CEC  0FE2               	addlw	226
  4855  000CEE  0930               	iorlw	48
  4856  000CF0  D00A               	goto	L21
  4857  000CF2                     i2l2219:
  4858                           
  4859                           ;user.c: 305: else if(seconds <50)
  4860  000CF2  0E32               	movlw	50
  4861  000CF4  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4862  000CF6  D004               	goto	i2l2223
  4863                           
  4864                           ;user.c: 306: {
  4865                           ;user.c: 307: res = 4<<4 | (seconds - 40);
  4866  000CF8  5002               	movf	i2get_seconds_reg@seconds,w,c
  4867  000CFA  0FD8               	addlw	216
  4868  000CFC  0940               	iorlw	64
  4869  000CFE  D003               	goto	L21
  4870  000D00                     i2l2223:
  4871                           
  4872                           ;user.c: 309: else
  4873                           ;user.c: 310: {
  4874                           ;user.c: 311: res = 5<<4 | (seconds -50);
  4875  000D00  5002               	movf	i2get_seconds_reg@seconds,w,c
  4876  000D02  0FCE               	addlw	206
  4877  000D04  0950               	iorlw	80
  4878  000D06                     L21:
  4879  000D06  6E01               	movwf	i2get_seconds_reg@res,c
  4880  000D08                     i2l2225:
  4881                           
  4882                           ;user.c: 312: }
  4883                           ;user.c: 314: return res;
  4884  000D08  5001               	movf	i2get_seconds_reg@res,w,c
  4885  000D0A  0012               	return	
  4886  000D0C                     __end_ofi2_get_seconds_reg:
  4887                           	opt stack 0
  4888                           pclatu	equ	0xFFB
  4889                           pclath	equ	0xFFA
  4890                           tblptru	equ	0xFF8
  4891                           tblptrh	equ	0xFF7
  4892                           tblptrl	equ	0xFF6
  4893                           tablat	equ	0xFF5
  4894                           prodh	equ	0xFF4
  4895                           prodl	equ	0xFF3
  4896                           intcon	equ	0xFF2
  4897                           intcon2	equ	0xFF1
  4898                           postinc0	equ	0xFEE
  4899                           fsr0h	equ	0xFEA
  4900                           fsr0l	equ	0xFE9
  4901                           wreg	equ	0xFE8
  4902                           indf1	equ	0xFE7
  4903                           fsr1h	equ	0xFE2
  4904                           fsr1l	equ	0xFE1
  4905                           indf2	equ	0xFDF
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _get_hour_reg *****************
  4911 ;; Defined at:
  4912 ;;		line 318 in file "user.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  hour            1    wreg     unsigned char 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  hour            1    1[COMRAM] unsigned char 
  4917 ;;  res             1    0[COMRAM] unsigned char 
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      unsigned char 
  4920 ;; Registers used:
  4921 ;;		wreg, status,2, status,0
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4927 ;;      Params:         0       0       0       0       0       0       0       0       0
  4928 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4929 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4930 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4931 ;;Total ram usage:        2 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_set_time
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text30
  4941  000E0C                     __ptext30:
  4942                           	opt stack 0
  4943  000E0C                     _get_hour_reg:
  4944                           	opt stack 23
  4945                           
  4946                           ;incstack = 0
  4947                           ;get_hour_reg@hour stored from wreg
  4948  000E0C  6E02               	movwf	get_hour_reg@hour,c
  4949                           
  4950                           ;user.c: 320: char res = 0;
  4951  000E0E  0E00               	movlw	0
  4952  000E10  6E01               	movwf	get_hour_reg@res,c
  4953                           
  4954                           ;user.c: 321: if(hour < 10)
  4955  000E12  0E0A               	movlw	10
  4956  000E14  6002               	cpfslt	get_hour_reg@hour,c
  4957  000E16  D003               	goto	i2l2191
  4958                           
  4959                           ;user.c: 322: {
  4960                           ;user.c: 323: res = hour;
  4961  000E18  C002  F001         	movff	get_hour_reg@hour,get_hour_reg@res
  4962                           
  4963                           ;user.c: 324: }
  4964  000E1C  D00B               	goto	i2l2197
  4965  000E1E                     i2l2191:
  4966                           
  4967                           ;user.c: 325: else if(hour < 20)
  4968  000E1E  0E14               	movlw	20
  4969  000E20  6002               	cpfslt	get_hour_reg@hour,c
  4970  000E22  D004               	goto	i2l2195
  4971                           
  4972                           ;user.c: 326: {
  4973                           ;user.c: 327: res = 1<<4 | (hour -10);
  4974  000E24  5002               	movf	get_hour_reg@hour,w,c
  4975  000E26  0FF6               	addlw	246
  4976  000E28  0910               	iorlw	16
  4977  000E2A  D003               	goto	L22
  4978  000E2C                     i2l2195:
  4979                           
  4980                           ;user.c: 329: else
  4981                           ;user.c: 330: {
  4982                           ;user.c: 331: res = 2<<4 | (hour-20);
  4983  000E2C  5002               	movf	get_hour_reg@hour,w,c
  4984  000E2E  0FEC               	addlw	236
  4985  000E30  0920               	iorlw	32
  4986  000E32                     L22:
  4987  000E32  6E01               	movwf	get_hour_reg@res,c
  4988  000E34                     i2l2197:
  4989                           
  4990                           ;user.c: 332: }
  4991                           ;user.c: 334: return res;
  4992  000E34  5001               	movf	get_hour_reg@res,w,c
  4993  000E36  0012               	return	
  4994  000E38                     __end_of_get_hour_reg:
  4995                           	opt stack 0
  4996                           pclatu	equ	0xFFB
  4997                           pclath	equ	0xFFA
  4998                           tblptru	equ	0xFF8
  4999                           tblptrh	equ	0xFF7
  5000                           tblptrl	equ	0xFF6
  5001                           tablat	equ	0xFF5
  5002                           prodh	equ	0xFF4
  5003                           prodl	equ	0xFF3
  5004                           intcon	equ	0xFF2
  5005                           intcon2	equ	0xFF1
  5006                           postinc0	equ	0xFEE
  5007                           fsr0h	equ	0xFEA
  5008                           fsr0l	equ	0xFE9
  5009                           wreg	equ	0xFE8
  5010                           indf1	equ	0xFE7
  5011                           fsr1h	equ	0xFE2
  5012                           fsr1l	equ	0xFE1
  5013                           indf2	equ	0xFDF
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           
  5018 ;; *************** function _byte_write *****************
  5019 ;; Defined at:
  5020 ;;		line 213 in file "user.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;  address         1    wreg     unsigned char 
  5023 ;;  value           1    5[COMRAM] unsigned char 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  address         1    6[COMRAM] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, status,2, status,0, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5035 ;;      Params:         1       0       0       0       0       0       0       0       0
  5036 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5037 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5038 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5039 ;;Total ram usage:        2 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    2
  5042 ;; This function calls:
  5043 ;;		i2_ce_disable
  5044 ;;		i2_ce_enable
  5045 ;;		i2_send_command
  5046 ;; This function is called by:
  5047 ;;		_set_time
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           	psect	text31
  5052  000E58                     __ptext31:
  5053                           	opt stack 0
  5054  000E58                     _byte_write:
  5055                           	opt stack 21
  5056                           
  5057                           ;incstack = 0
  5058                           ;byte_write@address stored from wreg
  5059  000E58  6E07               	movwf	byte_write@address,c
  5060                           
  5061                           ;user.c: 215: ce_enable();
  5062  000E5A  EC58  F007         	call	i2_ce_enable	;wreg free
  5063                           
  5064                           ;user.c: 218: send_command(address);
  5065  000E5E  5007               	movf	byte_write@address,w,c
  5066  000E60  ECAC  F005         	call	i2_send_command
  5067                           
  5068                           ;user.c: 219: send_command(value);
  5069  000E64  5006               	movf	byte_write@value,w,c
  5070  000E66  ECAC  F005         	call	i2_send_command
  5071                           
  5072                           ;user.c: 221: ce_disable();
  5073  000E6A  EC47  F007         	call	i2_ce_disable	;wreg free
  5074  000E6E  0012               	return		;funcret
  5075  000E70                     __end_of_byte_write:
  5076                           	opt stack 0
  5077                           pclatu	equ	0xFFB
  5078                           pclath	equ	0xFFA
  5079                           tblptru	equ	0xFF8
  5080                           tblptrh	equ	0xFF7
  5081                           tblptrl	equ	0xFF6
  5082                           tablat	equ	0xFF5
  5083                           prodh	equ	0xFF4
  5084                           prodl	equ	0xFF3
  5085                           intcon	equ	0xFF2
  5086                           intcon2	equ	0xFF1
  5087                           postinc0	equ	0xFEE
  5088                           fsr0h	equ	0xFEA
  5089                           fsr0l	equ	0xFE9
  5090                           wreg	equ	0xFE8
  5091                           indf1	equ	0xFE7
  5092                           fsr1h	equ	0xFE2
  5093                           fsr1l	equ	0xFE1
  5094                           indf2	equ	0xFDF
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099 ;; *************** function i2_send_command *****************
  5100 ;; Defined at:
  5101 ;;		line 339 in file "user.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;  command         1    wreg     unsigned char 
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;  command         1    2[COMRAM] unsigned char 
  5106 ;;  send_command    2    3[COMRAM] int 
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, status,0, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0
  5117 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5118 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5119 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5120 ;;Total ram usage:        5 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    1
  5123 ;; This function calls:
  5124 ;;		i2_io_as_output
  5125 ;; This function is called by:
  5126 ;;		_byte_write
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text32
  5131  000B58                     __ptext32:
  5132                           	opt stack 0
  5133  000B58                     i2_send_command:
  5134                           	opt stack 21
  5135                           
  5136                           ;incstack = 0
  5137                           ;i2send_command@command stored from wreg
  5138  000B58  6E03               	movwf	i2send_command@command,c
  5139                           
  5140                           ;user.c: 341: int i;
  5141                           ;user.c: 342: io_as_output();
  5142  000B5A  EC56  F007         	call	i2_io_as_output	;wreg free
  5143                           
  5144                           ;user.c: 343: for(i=0; i<8; i++)
  5145  000B5E  0E00               	movlw	0
  5146  000B60  6E05               	movwf	i2send_command@i+1,c
  5147  000B62  0E00               	movlw	0
  5148  000B64  6E04               	movwf	i2send_command@i,c
  5149  000B66                     i2l2133:
  5150  000B66  BE05               	btfsc	i2send_command@i+1,7,c
  5151  000B68  D006               	goto	i2l2137
  5152  000B6A  5005               	movf	i2send_command@i+1,w,c
  5153  000B6C  E121               	bnz	i2l323
  5154  000B6E  0E08               	movlw	8
  5155  000B70  5C04               	subwf	i2send_command@i,w,c
  5156  000B72  B0D8               	btfsc	status,0,c
  5157  000B74  0012               	return	
  5158  000B76                     i2l2137:
  5159                           
  5160                           ;user.c: 344: {
  5161                           ;user.c: 345: RA3 = command>>i & 0x01;
  5162  000B76  C004  F001         	movff	i2send_command@i,??i2_send_command
  5163  000B7A  C003  F002         	movff	i2send_command@command,??i2_send_command+1
  5164  000B7E  2A01               	incf	??i2_send_command,f,c
  5165  000B80  D002               	goto	i2u127_44
  5166  000B82                     i2u127_45:
  5167  000B82  90D8               	bcf	status,0,c
  5168  000B84  3202               	rrcf	??i2_send_command+1,f,c
  5169  000B86                     i2u127_44:
  5170  000B86  2E01               	decfsz	??i2_send_command,f,c
  5171  000B88  D7FC               	goto	i2u127_45
  5172  000B8A  3002               	rrcf	??i2_send_command+1,w,c
  5173  000B8C  A0D8               	btfss	status,0,c
  5174  000B8E  D002               	goto	i2u128_40
  5175  000B90  8680               	bsf	3968,3,c	;volatile
  5176  000B92  D001               	goto	i2l2139
  5177  000B94                     i2u128_40:
  5178  000B94  9680               	bcf	3968,3,c	;volatile
  5179  000B96                     i2l2139:
  5180                           
  5181                           ;user.c: 346: RA2 = 1;
  5182  000B96  8480               	bsf	3968,2,c	;volatile
  5183                           
  5184                           ;user.c: 347: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  5185  000B98  0E10               	movlw	16
  5186  000B9A                     i2u297_47:
  5187  000B9A  2EE8               	decfsz	wreg,f,c
  5188  000B9C  D7FE               	bra	i2u297_47
  5189  000B9E  D000               	nop2	
  5190                           
  5191                           ;user.c: 348: RA2 = 0;
  5192  000BA0  9480               	bcf	3968,2,c	;volatile
  5193                           
  5194                           ;user.c: 349: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  5195  000BA2  0E06               	movlw	6
  5196  000BA4                     i2u298_47:
  5197  000BA4  2EE8               	decfsz	wreg,f,c
  5198  000BA6  D7FE               	bra	i2u298_47
  5199  000BA8  D000               	nop2	
  5200  000BAA  4A04               	infsnz	i2send_command@i,f,c
  5201  000BAC  2A05               	incf	i2send_command@i+1,f,c
  5202  000BAE  D7DB               	goto	i2l2133
  5203  000BB0                     i2l323:
  5204  000BB0  0012               	return		;funcret
  5205  000BB2                     __end_ofi2_send_command:
  5206                           	opt stack 0
  5207                           pclatu	equ	0xFFB
  5208                           pclath	equ	0xFFA
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           intcon2	equ	0xFF1
  5217                           postinc0	equ	0xFEE
  5218                           fsr0h	equ	0xFEA
  5219                           fsr0l	equ	0xFE9
  5220                           wreg	equ	0xFE8
  5221                           indf1	equ	0xFE7
  5222                           fsr1h	equ	0xFE2
  5223                           fsr1l	equ	0xFE1
  5224                           indf2	equ	0xFDF
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function i2_io_as_output *****************
  5230 ;; Defined at:
  5231 ;;		line 361 in file "user.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		None
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5245 ;;      Params:         0       0       0       0       0       0       0       0       0
  5246 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5248 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5249 ;;Total ram usage:        0 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		i2_send_command
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text33
  5259  000EAC                     __ptext33:
  5260                           	opt stack 0
  5261  000EAC                     i2_io_as_output:
  5262                           	opt stack 21
  5263                           
  5264                           ;user.c: 363: TRISA3 = 0;
  5265                           
  5266                           ;incstack = 0
  5267  000EAC  9692               	bcf	3986,3,c	;volatile
  5268  000EAE  0012               	return		;funcret
  5269  000EB0                     __end_ofi2_io_as_output:
  5270                           	opt stack 0
  5271                           pclatu	equ	0xFFB
  5272                           pclath	equ	0xFFA
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           intcon	equ	0xFF2
  5280                           intcon2	equ	0xFF1
  5281                           postinc0	equ	0xFEE
  5282                           fsr0h	equ	0xFEA
  5283                           fsr0l	equ	0xFE9
  5284                           wreg	equ	0xFE8
  5285                           indf1	equ	0xFE7
  5286                           fsr1h	equ	0xFE2
  5287                           fsr1l	equ	0xFE1
  5288                           indf2	equ	0xFDF
  5289                           fsr2h	equ	0xFDA
  5290                           fsr2l	equ	0xFD9
  5291                           status	equ	0xFD8
  5292                           
  5293 ;; *************** function i2_ce_enable *****************
  5294 ;; Defined at:
  5295 ;;		line 172 in file "user.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;		None
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;		None
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  1    wreg      void 
  5302 ;; Registers used:
  5303 ;;		None
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5309 ;;      Params:         0       0       0       0       0       0       0       0       0
  5310 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5312 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5313 ;;Total ram usage:        0 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_byte_write
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text34
  5323  000EB0                     __ptext34:
  5324                           	opt stack 0
  5325  000EB0                     i2_ce_enable:
  5326                           	opt stack 22
  5327                           
  5328                           ;user.c: 175: RA5 = 1;
  5329                           
  5330                           ;incstack = 0
  5331  000EB0  8A80               	bsf	3968,5,c	;volatile
  5332  000EB2  0012               	return		;funcret
  5333  000EB4                     __end_ofi2_ce_enable:
  5334                           	opt stack 0
  5335                           pclatu	equ	0xFFB
  5336                           pclath	equ	0xFFA
  5337                           tblptru	equ	0xFF8
  5338                           tblptrh	equ	0xFF7
  5339                           tblptrl	equ	0xFF6
  5340                           tablat	equ	0xFF5
  5341                           prodh	equ	0xFF4
  5342                           prodl	equ	0xFF3
  5343                           intcon	equ	0xFF2
  5344                           intcon2	equ	0xFF1
  5345                           postinc0	equ	0xFEE
  5346                           fsr0h	equ	0xFEA
  5347                           fsr0l	equ	0xFE9
  5348                           wreg	equ	0xFE8
  5349                           indf1	equ	0xFE7
  5350                           fsr1h	equ	0xFE2
  5351                           fsr1l	equ	0xFE1
  5352                           indf2	equ	0xFDF
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function i2_ce_disable *****************
  5358 ;; Defined at:
  5359 ;;		line 179 in file "user.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		None
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5376 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5377 ;;Total ram usage:        0 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_byte_write
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text35
  5387  000E8E                     __ptext35:
  5388                           	opt stack 0
  5389  000E8E                     i2_ce_disable:
  5390                           	opt stack 22
  5391                           
  5392                           ;user.c: 181: RA5 = 0;
  5393                           
  5394                           ;incstack = 0
  5395  000E8E  9A80               	bcf	3968,5,c	;volatile
  5396                           
  5397                           ;user.c: 182: RA2 = 0;
  5398  000E90  9480               	bcf	3968,2,c	;volatile
  5399  000E92  0012               	return		;funcret
  5400  000E94                     __end_ofi2_ce_disable:
  5401                           	opt stack 0
  5402  0000                     pclatu	equ	0xFFB
  5403                           pclath	equ	0xFFA
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           prodh	equ	0xFF4
  5409                           prodl	equ	0xFF3
  5410                           intcon	equ	0xFF2
  5411                           intcon2	equ	0xFF1
  5412                           postinc0	equ	0xFEE
  5413                           fsr0h	equ	0xFEA
  5414                           fsr0l	equ	0xFE9
  5415                           wreg	equ	0xFE8
  5416                           indf1	equ	0xFE7
  5417                           fsr1h	equ	0xFE2
  5418                           fsr1l	equ	0xFE1
  5419                           indf2	equ	0xFDF
  5420                           fsr2h	equ	0xFDA
  5421                           fsr2l	equ	0xFD9
  5422                           status	equ	0xFD8
  5423                           pclatu	equ	0xFFB
  5424                           pclath	equ	0xFFA
  5425                           tblptru	equ	0xFF8
  5426                           tblptrh	equ	0xFF7
  5427                           tblptrl	equ	0xFF6
  5428                           tablat	equ	0xFF5
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           intcon2	equ	0xFF1
  5433                           postinc0	equ	0xFEE
  5434                           fsr0h	equ	0xFEA
  5435                           fsr0l	equ	0xFE9
  5436                           wreg	equ	0xFE8
  5437                           indf1	equ	0xFE7
  5438                           fsr1h	equ	0xFE2
  5439                           fsr1l	equ	0xFE1
  5440                           indf2	equ	0xFDF
  5441                           fsr2h	equ	0xFDA
  5442                           fsr2l	equ	0xFD9
  5443                           status	equ	0xFD8
  5444                           
  5445                           	psect	rparam
  5446  0000                     pclatu	equ	0xFFB
  5447                           pclath	equ	0xFFA
  5448                           tblptru	equ	0xFF8
  5449                           tblptrh	equ	0xFF7
  5450                           tblptrl	equ	0xFF6
  5451                           tablat	equ	0xFF5
  5452                           prodh	equ	0xFF4
  5453                           prodl	equ	0xFF3
  5454                           intcon	equ	0xFF2
  5455                           intcon2	equ	0xFF1
  5456                           postinc0	equ	0xFEE
  5457                           fsr0h	equ	0xFEA
  5458                           fsr0l	equ	0xFE9
  5459                           wreg	equ	0xFE8
  5460                           indf1	equ	0xFE7
  5461                           fsr1h	equ	0xFE2
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468                           	psect	temp
  5469  00003A                     btemp:
  5470                           	opt stack 0
  5471  00003A                     	ds	1
  5472  0000                     int$flags	set	btemp
  5473                           pclatu	equ	0xFFB
  5474                           pclath	equ	0xFFA
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           intcon	equ	0xFF2
  5482                           intcon2	equ	0xFF1
  5483                           postinc0	equ	0xFEE
  5484                           fsr0h	equ	0xFEA
  5485                           fsr0l	equ	0xFE9
  5486                           wreg	equ	0xFE8
  5487                           indf1	equ	0xFE7
  5488                           fsr1h	equ	0xFE2
  5489                           fsr1l	equ	0xFE1
  5490                           indf2	equ	0xFDF
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         19
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      57
    BANK0           160     66      84
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    update_timer1_counter_10@counter	PTR unsigned char  size(2) Largest target is 1
		 -> timer1_counter_10(BANK0[1]), 

    get_timer1_counter@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_time@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    put_nums@nums	PTR unsigned char  size(2) Largest target is 6
		 -> masked_digits(BANK0[6]), 


Critical Paths under _main in COMRAM

    _main->_get_time
    _get_timer1_counter->_byte_read
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _high_isr in COMRAM

    _high_isr->_get_next_state
    _put_nums->_put_num
    _get_next_state->_set_time
    _set_time->_byte_write
    _byte_write->i2_send_command

Critical Paths under _main in BANK0

    _main->_get_time

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2911
                                             63 BANK0      3     3      0
                _ConfigureOscillator
                            _InitApp
                     _buzzer_disable
                           _get_time
                 _get_timer1_counter
                  _ir_is_code_number
 ---------------------------------------------------------------------------------
 (1) _ir_is_code_number                                    1     1      0     310
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter                                   7     5      2    1257
                                             48 COMRAM     5     5      0
                                             60 BANK0      2     0      2
                          _byte_read
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (2) _get_seconds_reg                                      2     2      0     393
                                             37 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             9     6      3    1304
                                             48 COMRAM     6     6      0
                                             60 BANK0      3     0      3
                          _byte_read
 ---------------------------------------------------------------------------------
 (2) _byte_read                                            6     6      0     297
                                             42 COMRAM     6     6      0
                         _ce_disable
                          _ce_enable
                        _io_as_input
                       _send_command
 ---------------------------------------------------------------------------------
 (3) _send_command                                         5     5      0     130
                                             37 COMRAM     5     5      0
                       _io_as_output
 ---------------------------------------------------------------------------------
 (4) _io_as_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _io_as_input                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_enable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_disable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buzzer_disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            77    77      0    3820
                                             20 COMRAM    17    17      0
                                              0 BANK0     60    60      0
                     _get_next_state
                  _ir_get_human_code
                      _point_disable
                       _point_enable
                           _put_nums
                      _update_buzzer
                       _update_point
           _update_timer1_counter_10
 ---------------------------------------------------------------------------------
 (6) _update_timer1_counter_10                             4     2      2     340
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _update_point                                         3     0      3     306
                                              0 COMRAM     3     0      3
                      _point_disable
                       _point_enable
 ---------------------------------------------------------------------------------
 (7) _point_enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _point_disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _update_buzzer                                        3     0      3     306
                                              0 COMRAM     3     0      3
                      _buzzer_enable
                   i2_buzzer_disable
 ---------------------------------------------------------------------------------
 (7) i2_buzzer_disable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _buzzer_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _put_nums                                             4     2      2     536
                                              7 COMRAM     4     2      2
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (7) _put_num                                             17    17      0     348
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (7) _get_num                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ir_get_human_code                                    5     3      2     115
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _get_next_state                                       7     3      4    1761
                                             13 COMRAM     7     3      4
                           _set_time
                      _timer1_enable
 ---------------------------------------------------------------------------------
 (7) _timer1_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _set_time                                             6     4      2    1056
                                              7 COMRAM     6     4      2
                         _byte_write
                       _get_hour_reg
                  i2_get_seconds_reg
 ---------------------------------------------------------------------------------
 (8) i2_get_seconds_reg                                    2     2      0     271
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _get_hour_reg                                         2     2      0     136
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _byte_write                                           2     1      1     362
                                              5 COMRAM     2     1      1
                       i2_ce_disable
                        i2_ce_enable
                     i2_send_command
 ---------------------------------------------------------------------------------
 (9) i2_send_command                                       5     5      0      90
                                              0 COMRAM     5     5      0
                     i2_io_as_output
 ---------------------------------------------------------------------------------
 (10) i2_io_as_output                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _buzzer_disable
   _get_time
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
   _get_timer1_counter
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
     _get_seconds_reg
   _ir_is_code_number

 _high_isr (ROOT)
   _get_next_state
     _set_time
       _byte_write
         i2_ce_disable
         i2_ce_enable
         i2_send_command
           i2_io_as_output
       _get_hour_reg
       i2_get_seconds_reg
     _timer1_enable
   _ir_get_human_code
   _point_disable
   _point_enable
   _put_nums
     _get_num
     _put_num
   _update_buzzer
     _buzzer_enable
     i2_buzzer_disable
   _update_point
     _point_disable
     _point_enable
   _update_timer1_counter_10

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     42      54       5       52.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      39       1       60.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8D      20        0.0%
DATA                 0      0      8D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun May 28 03:27:10 2017

                     _update_point 0D0C                      _update_buzzer 0D54  
                      __CFG_BOR$ON 000000                    ??_point_disable 0001  
                      _put_num$903 0005                        __CFG_BORV$3 000000  
                     __CFG_CP0$OFF 000000                       __CFG_CP1$OFF 000000  
                     __CFG_CP2$OFF 000000                       __CFG_CP3$OFF 000000  
                      __CFG_LVP$ON 000000                     i2_send_command 0B58  
                      __CFG_WDT$ON 000000           _update_timer1_counter_10 09A2  
                              l127 03C6                                l323 0B56  
                              l283 0A60                       __CFG_CPB$OFF 000000  
                              _RB0 007C08                                _RA2 007C02  
                              _RB1 007C09                                _RA3 007C03  
                              _RB3 007C0B                                _RA5 007C05  
                              _RB4 007C0C                                _RB5 007C0D  
                  ?_get_next_state 000E                       __CFG_CPD$OFF 000000  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
      __size_of_get_timer1_counter 00A2                       ?_io_as_input 0001  
                      high_isr@aux 0095              ir_get_human_code@code 0001  
                 ?_get_seconds_reg 0001                               l3201 0B3C  
                             l3241 0A9A                               l3225 0A50  
                             l3341 07B2                               l3261 0C8E  
                             l3253 0C72                               l3271 0CB2  
                             l3423 034A                               l3265 0C9C  
                             l3257 0C80                               l3433 036E  
                             l3425 0354                               l3195 0B0C  
                             l3347 07E0                               l3371 0C58  
                             l3451 03C0                               l3443 03A2  
                             l3435 0384                               l3349 080A  
                             l3269 0CAA                               l3445 03A6  
                             l3429 0360                               l3199 0B1C  
                             l3377 0C5C                               l3481 0428  
                             l3457 03D2    update_timer1_counter_10@counter 0001  
                             l3483 043A                               l3467 03F0  
                             l3477 0410                               l3485 044C  
                      get_time@aux 0035                               u2530 0B3A  
                             u2524 0B2C                               u2525 0B28  
                             _PIE1 000F9D                               u2570 0A78  
            __size_ofi2_ce_disable 0006                               u2594 0A82  
                             u2595 0A7E                               u2588 0A7A  
                             u2917 0A64                               u2927 0A8E  
                             _RBIF 007F90                               u2937 0B40  
                             u2947 0B4A                               i2l60 02AE  
                             i2l53 0162                               i2l71 0248  
                             i2l65 01E6                               i2l84 02D8  
                      i2_ce_enable 0EB0                               _aux1 00AB  
                             _main 0314                               _next 0037  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr2h 000FDA                               fsr0l 000FE9  
                             indf1 000FE7                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 003A                               prodh 000FF4  
                             prodl 000FF3                               start 000E  
                    __CFG_IESO$OFF 000000                     ??_get_hour_reg 0001  
                    __CFG_MCLRE$ON 000000                       ___param_bank 000000  
                     high_isr@code 0060                    __end_of_InitApp 0AFE  
                   ?_update_buzzer 0001                      ?_io_as_output 0001  
           __end_ofi2_send_command 0BB2        ir_is_code_number@human_code 0026  
                    __CFG_PLLDIV$1 000000                     __CFG_CCP2MX$ON 000000  
                            ?_main 0001                       get_time@data 009C  
                            _T0CON 000FD5                              _T1CON 000FCD  
                            i2l222 0C08                              i2l323 0BB0  
                            i2l227 0E0A                              i2l333 0616  
              update_point@counter 0003                      __CFG_USBDIV$1 000000  
                     i2_ce_disable 0E8E                _ConfigureOscillator 0EB4  
                    __CFG_PWRT$OFF 000000                      __CFG_WRT0$OFF 000000  
                    __CFG_WRT1$OFF 000000                      __CFG_WRT2$OFF 000000  
                    __CFG_WRT3$OFF 000000                     __CFG_EBTR0$OFF 000000  
                   __CFG_FCMEN$OFF 000000                     __CFG_EBTR1$OFF 000000  
                   __CFG_EBTR2$OFF 000000                     __CFG_EBTR3$OFF 000000  
                  __end_of_get_num 0900                      __CFG_WRTB$OFF 000000  
                    __CFG_WRTC$OFF 000000                      __CFG_WRTD$OFF 000000  
                   __CFG_EBTRB$OFF 000000                              _state 00B2  
                            pclath 000FFA                              tablat 000FF5  
                  __end_of_put_num 0C0A                              status 000FD8  
             ?_ConfigureOscillator 0001                   ??i2_io_as_output 0001  
           get_timer1_counter@data 009C                    __initialization 0E38  
                    high_isr@i_150 009A                       __end_of_main 049A  
                   ??_io_as_output 0026                    ?i2_send_command 0001  
                           ??_main 009F                      __activetblptr 000002  
                           _ADCON1 000FC1                   get_hour_reg@hour 0002  
                    get_time@hours 0036                             i2l2211 0CD6  
                           i2l2133 0B66                             i2l2223 0D00  
                           i2l2215 0CE4                             i2l2207 0CC8  
                           i2l2311 088C                             i2l2303 0884  
                           i2l2137 0B76                             i2l2225 0D08  
                           i2l2401 0622                             i2l2139 0B96  
                           i2l2219 0CF2                             i2l2411 0640  
                           i2l2403 0628                             i2l2323 0898  
                           i2l2315 0890                             i2l2307 0888  
                           i2l2235 0BC0                             i2l2421 065E  
                           i2l2413 0646                             i2l2405 062E  
                           i2l2191 0E1E                             i2l2511 0552  
                           i2l2431 067C                             i2l2423 0664  
                           i2l2415 064C                             i2l2407 0634  
                           i2l2319 0894                             i2l2271 0864  
                           i2l2263 085C                             i2l2247 0BF4  
                           i2l2239 0BD0                             i2l2505 0532  
                           i2l2433 0682                             i2l2425 066A  
                           i2l2417 0652                             i2l2409 063A  
                           i2l2441 068C                             i2l2329 089C  
                           i2l2601 09BA                             i2l2195 0E2C  
                           i2l2435 0688                             i2l2427 0670  
                           i2l2419 0658                             i2l2291 0878  
                           i2l2283 0870                             i2l2275 0868  
                           i2l2267 0860                             i2l2259 0858  
                           i2l2611 09F6                             i2l2197 0E34  
                           i2l2525 0590                             i2l2517 056A  
                           i2l2429 0676                             i2l2613 0A04  
                           i2l2543 05FC                             i2l2535 05D6  
                           i2l2295 087C                             i2l2287 0874  
                           i2l2279 086C                             i2l2481 04B8  
                           i2l2609 09EA                             i2l2299 0880  
                           i2l2619 0A26                             i2l2811 01D0  
                           i2l2493 04F4                             i2l2557 0D2E  
                           i2l2805 01B2                             i2l2487 04D6  
                           i2l2479 04B0                             i2l3711 06C8  
                           i2l2591 0DEE                             i2l2575 0D76  
                           i2l2559 0D34                             i2l2831 0238  
                           i2l3721 071E                             i2l3713 06DE  
                           i2l2577 0D7C                             i2l2841 0254  
                           i2l2825 0220                             i2l2809 01C0  
                           i2l2499 0512                             i2l3723 0728  
                           i2l3715 06EE                             i2l2587 0DDE  
                           i2l2843 025C                             i2l2851 0274  
                           i2l2819 01F2                             i2l2771 00BE  
                           i2l2763 008E                             i2l3725 0738  
                           i2l3717 06FE                             i2l2861 02C0  
                           i2l2845 0264                             i2l2853 029E  
                           i2l2837 024A                             i2l2773 00D2  
                           i2l3719 0708                             i2l2847 026C  
                           i2l2783 0124                             i2l2759 0078  
                           i2l2865 02D6                             i2l2777 00E8  
                           i2l2795 0170                             i2l2789 015C  
                           i2l2799 0186                             _INTCON 000FF2  
                           _TMR0IF 007F92                             _TMR1IF 007CF0  
                           _TRISA2 007C92                             _TRISB1 007C99  
                           _TRISA3 007C93                             _TRISB3 007C9B  
                           _TRISA5 007C95                             _TRISB4 007C9C  
                        ??_InitApp 0026              ??_ConfigureOscillator 0026  
                   __CFG_XINST$OFF 000000                    ??_update_buzzer 0004  
                 __end_of_high_isr 0314                   __end_of_get_time 0854  
                  set_time@min_reg 000C                     __CFG_STVREN$ON 000000  
                  set_time@sec_reg 000B                    set_time@minutes 0008  
                  set_time@seconds 000A                             clear_0 0E3E  
                _ir_get_human_code 0620                  ?i2_buzzer_disable 0001  
                        ??_get_num 0001                 get_seconds_reg@res 0026  
               ?_ir_get_human_code 0001                 ??i2_buzzer_disable 0001  
                 __end_of_set_time 0DD6                      _masked_digits 00A5  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8               __end_of_get_hour_reg 0E38  
                 __end_of_put_nums 0E0C                          ??_put_num 0001  
              ??_ir_get_human_code 0003               __size_of_io_as_input 0004  
                     put_nums@nums 0008                         __accesstop 0060  
          __end_of__initialization 0E4A                    __CFG_PBADEN$OFF 000000  
                 ??_buzzer_disable 0026                      ___rparam_used 000001  
               __size_of_ce_enable 0004         ??_update_timer1_counter_10 0003  
          get_timer1_counter@hours 0034                     __pcstackCOMRAM 0001  
        __end_of_ir_get_human_code 074E                   ??_get_next_state 0012  
                   high_isr@digits 008F                         _ce_disable 0E88  
            __end_of_timer1_enable 0EAC               __end_of_io_as_output 0E98  
                       __pbssBANK0 00A2                       ?i2_ce_enable 0001  
    update_timer1_counter_10@state 0004                 __size_of_byte_read 006E  
               get_next_state@code 0010                 get_next_state@hour 0014  
           __size_of_buzzer_enable 0008                      ?_send_command 0001  
                          _CCP2CON 000FBA                     get_time@format 009E  
            __end_of_point_disable 0EA8                  _timer1_counter_10 00B1  
       __end_of_get_timer1_counter 09A2                            _INTCON2 000FF1  
                __end_of_ce_enable 0EA0                 update_buzzer@state 0001  
                          _SSPCON1 000FC6                          ?_high_isr 0001  
                        ?_get_time 009C                    __CFG_VREGEN$OFF 000000  
                          _InitApp 0AA2           __size_of_get_seconds_reg 0056  
                          __Hparam 0000                   ??i2_send_command 0001  
                          __Lparam 0000                   byte_read@address 002D  
                        ?_set_time 0008                       byte_read@res 002E  
                 get_time@aux_hour 0033                     ??_send_command 0026  
       __size_of_ir_get_human_code 012E                          ?_put_nums 0008  
                       _byte_write 0E58                            __pcinit 0E38  
                 set_time@hour_reg 000D                            __ramtop 0800  
                          __ptext0 0314                            __ptext1 0C0A  
                          __ptext2 0900                            __ptext3 0C60  
                          __ptext4 074E                            __ptext5 0A34  
                          __ptext6 0AFE                            __ptext7 0E94  
                          __ptext8 0E98                            __ptext9 0E9C  
            __size_of_get_hour_reg 002C                            _get_num 0854  
                          _counter 00A2                  __end_of_byte_read 0AA2  
                      ?_ce_disable 0001                         _human_code 0039  
                    _buzzer_enable 0E80                            _put_num 0BB2  
                       ??_high_isr 0015                         ??_get_time 0031  
                   __pintcode_body 0012                      ?_point_enable 0001  
             end_of_initialization 0E4A                      _buzzer_status 00A4  
                    __Lmediumconst 0000                            int_func 0012  
                i2_get_seconds_reg 0CB6   __end_of_update_timer1_counter_10 0A34  
                       ??_set_time 000A               update_buzzer@counter 0003  
               ?i2_get_seconds_reg 0001                       _get_hour_reg 0E0C  
                          postinc0 000FEE                         ??_put_nums 000A  
              ??i2_get_seconds_reg 0001                    byte_write@value 0006  
            __size_of_io_as_output 0004                     ?_buzzer_enable 0001  
 ir_get_human_code@human_read_code 0005                     ??_point_enable 0001  
      __end_of_ConfigureOscillator 0EB6                      send_command@i 0029  
        __size_ofi2_buzzer_disable 0008          __end_ofi2_get_seconds_reg 0D0C  
                       get_num@num 0001               __size_ofi2_ce_enable 0004  
                       main@format 00A1                __size_of_ce_disable 0006  
                    ?_update_point 0001                 high_isr@final_code 0096  
            __end_of_update_buzzer 0D9C                  ??_get_seconds_reg 0026  
                     _io_as_output 0E94                     _timer1_counter 00A3  
                      ?_byte_write 0006             get_seconds_reg@seconds 0027  
          __size_ofi2_io_as_output 0004                start_initialization 0E38  
            get_timer1_counter@aux 0035                      ??_io_as_input 0026  
             __end_of_send_command 0B58              i2send_command@command 0003  
                  get_hour_reg@res 0001                         byte_read@i 002F  
                   ??_update_point 0004                   __CFG_LPT1OSC$OFF 000000  
                      put_num@mask 0004               i2get_seconds_reg@res 0001  
                  ??_buzzer_enable 0001                      ?i2_ce_disable 0001  
                      __pbssCOMRAM 0037                      __pcstackBANK0 0060  
__size_of_update_timer1_counter_10 0092          ?_update_timer1_counter_10 0001  
                        _ce_enable 0E9C                __size_of_byte_write 0018  
                __size_of_high_isr 030C                __end_of_io_as_input 0E9C  
               _get_timer1_counter 0900                  __size_of_get_time 0106  
       __size_ofi2_get_seconds_reg 0056                           ?_InitApp 0001  
                        __pnvBANK0 00B2          get_timer1_counter@minutes 0033  
        get_timer1_counter@seconds 0032                ?_get_timer1_counter 009C  
                        __pintcode 0008             __size_of_timer1_enable 0004  
             __end_of_point_enable 0EA4                  __size_of_set_time 003A  
          __size_of_buzzer_disable 0008                get_next_state@state 000E  
                         ?_get_num 0001                  __size_of_put_nums 0036  
                   ??i2_ce_disable 0001                       ??_ce_disable 0026  
          __size_of_get_next_state 0186               ??_get_timer1_counter 0031  
                        _byte_read 0A34              get_next_state@minutes 0013  
            get_next_state@seconds 0012                           ?_put_num 0001  
                  get_time@minutes 0034                    get_time@seconds 0032  
                       ?_ce_enable 0001                   i2_buzzer_disable 0E78  
           __size_of_point_disable 0004                           i2u220_44 010C  
                         i2u220_45 0106                           i2u222_40 0132  
                         i2u127_44 0B86                           i2u127_45 0B82  
                         i2u128_40 0B94                           i2u144_44 0BE4  
                         i2u144_45 0BE0                           i2u147_45 0BFC  
                         i2u147_46 0BFE                           i2u295_47 0062  
                         i2u296_47 00AC                           i2u297_47 0B9A  
                         i2u298_47 0BA4                 __end_of_ce_disable 0E8E  
                 __CFG_WDTPS$32768 000000                     i2_io_as_output 0EAC  
                        high_isr@i 0098              __size_of_send_command 005A  
                _ir_is_code_number 0C0A                      _timer1_enable 0EA8  
                      _io_as_input 0E98                         ?_byte_read 0001  
             __end_of_update_point 0D54                 ?_ir_is_code_number 0001  
                update_point@state 0001                send_command@command 0028  
                  _get_seconds_reg 0C60                ??_ir_is_code_number 0026  
                 __size_of_InitApp 005C                           __Hrparam 0000  
                         __Lrparam 0000                         put_num@num 0003  
                     _send_command 0AFE                       ??_byte_write 0007  
           __end_ofi2_io_as_output 0EB0            __size_ofi2_send_command 005A  
        __end_of_ir_is_code_number 0C60                      _point_disable 0EA4  
                 __size_of_get_num 00AC                     ?_timer1_enable 0001  
                         __ptext10 0E88                           __ptext11 0E70  
                         __ptext20 0E78                           __ptext12 0AA2  
                         __ptext21 0E80                           __ptext13 0EB4  
                         __ptext30 0E0C                           __ptext22 0DD6  
                         __ptext31 0E58                           __ptext23 0BB2  
                         __ptext15 09A2                           __ptext32 0B58  
                         __ptext24 0854                           __ptext16 0D0C  
                         __ptext33 0EAC                           __ptext25 0620  
                         __ptext17 0EA0                           __ptext34 0EB0  
                         __ptext26 049A                           __ptext18 0EA4  
                         __ptext35 0E8E                           __ptext27 0EA8  
                         __ptext19 0D54                           __ptext28 0D9C  
                         __ptext29 0CB6                           _high_isr 0008  
                         _get_time 074E                   __size_of_put_num 0058  
                    ??i2_ce_enable 0001                        ??_ce_enable 0026  
                    __size_of_main 0186                 __end_of_byte_write 0E70  
             __end_ofi2_ce_disable 0E94       __size_of_ConfigureOscillator 0002  
            __size_of_point_enable 0004                           _set_time 0D9C  
                         int$flags 003A                     _buzzer_disable 0E70  
                         _put_nums 0DD6                    ?i2_io_as_output 0001  
            __CFG_CPUDIV$OSC1_PLL2 000000                     ?_point_disable 0001  
                       _INTCONbits 000FF2                     _get_next_state 049A  
                     set_time@hour 0009            __end_of_get_seconds_reg 0CB6  
                      ??_byte_read 002B                          put_nums@i 000A  
                         intlevel2 0000                       _point_enable 0EA0  
           __size_of_update_buzzer 0048                __end_ofi2_ce_enable 0EB4  
                  i2send_command@i 0004                  byte_write@address 0007  
           __end_of_buzzer_disable 0E78           i2get_seconds_reg@seconds 0002  
         __end_ofi2_buzzer_disable 0E80                           put_num@i 0006  
           __end_of_get_next_state 0620         __size_of_ir_is_code_number 0056  
            __size_of_update_point 0048                    ??_timer1_enable 0001  
            __end_of_buzzer_enable 0E88                      ?_get_hour_reg 0001  
                  ?_buzzer_disable 0001  
