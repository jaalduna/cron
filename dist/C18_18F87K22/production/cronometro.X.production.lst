

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun May 21 15:34:17 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.42
    45                           ; Generated 13/04/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F2550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	nvCOMRAM
    80  00005A                     __pnvCOMRAM:
    81                           	opt stack 0
    82  00005A                     _state:
    83                           	opt stack 0
    84  00005A                     	ds	2
    85  0000                     _INTCON	set	4082
    86  0000                     _ADCON1	set	4033
    87  0000                     _SSPCON1	set	4038
    88  0000                     _CCP2CON	set	4026
    89  0000                     _INTCONbits	set	4082
    90  0000                     _RA3	set	31747
    91  0000                     _RA2	set	31746
    92  0000                     _RA5	set	31749
    93  0000                     _RB0	set	31752
    94  0000                     _RB1	set	31753
    95  0000                     _RB4	set	31756
    96  0000                     _RB3	set	31755
    97  0000                     _TRISA3	set	31891
    98  0000                     _TRISA5	set	31893
    99  0000                     _TRISA2	set	31890
   100  0000                     _TRISB1	set	31897
   101  0000                     _TRISB4	set	31900
   102  0000                     _TRISB3	set	31899
   103  0000                     _RB5	set	31757
   104  0000                     _RBIF	set	32656
   105                           
   106                           ; #config settings
   107  0000                     
   108                           	psect	cinit
   109  000B9A                     __pcinit:
   110                           	opt stack 0
   111  000B9A                     start_initialization:
   112                           	opt stack 0
   113  000B9A                     __initialization:
   114                           	opt stack 0
   115                           
   116                           ; Clear objects allocated to BANK0 (9 bytes)
   117  000B9A  EE00  F073         	lfsr	0,__pbssBANK0
   118  000B9E  0E09               	movlw	9
   119  000BA0                     clear_0:
   120  000BA0  6AEE               	clrf	postinc0,c
   121  000BA2  06E8               	decf	wreg,f,c
   122  000BA4  E1FD               	bnz	clear_0
   123  000BA6                     end_of_initialization:
   124                           	opt stack 0
   125  000BA6                     __end_of__initialization:
   126                           	opt stack 0
   127  000BA6  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   128  000BA8  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   129  000BAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   130  000BAC  6EF8               	movwf	tblptru,c
   131  000BAE  0100               	movlb	0
   132  000BB0  EF09  F000         	goto	_main	;jump to C main() function
   133                           tblptru	equ	0xFF8
   134                           postinc0	equ	0xFEE
   135                           wreg	equ	0xFE8
   136                           
   137                           	psect	bssBANK0
   138  000073                     __pbssBANK0:
   139                           	opt stack 0
   140  000073                     _next:
   141                           	opt stack 0
   142  000073                     	ds	2
   143  000075                     _human_code:
   144                           	opt stack 0
   145  000075                     	ds	1
   146  000076                     _aux1:
   147                           	opt stack 0
   148  000076                     	ds	6
   149                           tblptru	equ	0xFF8
   150                           postinc0	equ	0xFEE
   151                           wreg	equ	0xFE8
   152                           
   153                           	psect	cstackBANK0
   154  000060                     __pcstackBANK0:
   155                           	opt stack 0
   156  000060                     ??_send_command:
   157  000060                     ??_put_num:
   158  000060                     get_num@num:
   159                           	opt stack 0
   160  000060                     ir_is_code_number@human_code:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0x0
   164  000060                     	ds	2
   165  000062                     put_num@num:
   166                           	opt stack 0
   167  000062                     send_command@command:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x2
   171  000062                     	ds	1
   172  000063                     put_num@mask:
   173                           	opt stack 0
   174  000063                     send_command@i:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x3
   178  000063                     	ds	1
   179  000064                     _put_num$845:
   180                           	opt stack 0
   181                           
   182                           ; 1 bytes @ 0x4
   183  000064                     	ds	1
   184  000065                     ??_byte_read:
   185  000065                     put_num@i:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x5
   189  000065                     	ds	2
   190  000067                     put_nums_individual@num4:
   191                           	opt stack 0
   192  000067                     byte_read@address:
   193                           	opt stack 0
   194  000067                     put_nums@nums:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x7
   198  000067                     	ds	1
   199  000068                     put_nums_individual@num3:
   200                           	opt stack 0
   201  000068                     byte_read@res:
   202                           	opt stack 0
   203                           
   204                           ; 1 bytes @ 0x8
   205  000068                     	ds	1
   206  000069                     put_nums_individual@num2:
   207                           	opt stack 0
   208  000069                     put_nums@i:
   209                           	opt stack 0
   210  000069                     byte_read@i:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x9
   214  000069                     	ds	1
   215  00006A                     put_nums_individual@num1:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0xA
   219  00006A                     	ds	1
   220  00006B                     put_nums_individual@num0:
   221                           	opt stack 0
   222  00006B                     get_time@data:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0xB
   226  00006B                     	ds	1
   227  00006C                     put_nums_individual@num5:
   228                           	opt stack 0
   229                           
   230                           ; 1 bytes @ 0xC
   231  00006C                     	ds	1
   232  00006D                     get_time@seconds:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xD
   236  00006D                     	ds	1
   237  00006E                     get_time@minutes:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0xE
   241  00006E                     	ds	1
   242  00006F                     get_time@hours:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0xF
   246  00006F                     	ds	1
   247  000070                     get_time@aux:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x10
   251  000070                     	ds	1
   252  000071                     ??_main:
   253                           
   254                           ; 1 bytes @ 0x11
   255  000071                     	ds	2
   256                           tblptru	equ	0xFF8
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	cstackCOMRAM
   261  000001                     __pcstackCOMRAM:
   262                           	opt stack 0
   263  000001                     ??i2_send_command:
   264  000001                     get_seconds_reg@res:
   265                           	opt stack 0
   266  000001                     get_hour_reg@res:
   267                           	opt stack 0
   268  000001                     ir_get_human_code@code:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x0
   272  000001                     	ds	1
   273  000002                     get_seconds_reg@seconds:
   274                           	opt stack 0
   275  000002                     get_hour_reg@hour:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x1
   279  000002                     	ds	1
   280  000003                     ??_ir_get_human_code:
   281  000003                     i2send_command@command:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0x2
   285  000003                     	ds	1
   286  000004                     i2send_command@i:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x3
   290  000004                     	ds	1
   291  000005                     ir_get_human_code@human_read_code:
   292                           	opt stack 0
   293                           
   294                           ; 1 bytes @ 0x4
   295  000005                     	ds	1
   296  000006                     byte_write@value:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x5
   300  000006                     	ds	1
   301  000007                     byte_write@address:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x6
   305  000007                     	ds	1
   306  000008                     set_time@minutes:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x7
   310  000008                     	ds	1
   311  000009                     set_time@hour:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x8
   315  000009                     	ds	1
   316  00000A                     set_time@seconds:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x9
   320  00000A                     	ds	1
   321  00000B                     set_time@sec_reg:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0xA
   325  00000B                     	ds	1
   326  00000C                     set_time@min_reg:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0xB
   330  00000C                     	ds	1
   331  00000D                     set_time@hour_reg:
   332                           	opt stack 0
   333                           
   334                           ; 1 bytes @ 0xC
   335  00000D                     	ds	1
   336  00000E                     ?_get_next_state:
   337                           	opt stack 0
   338  00000E                     get_next_state@state:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0xD
   342  00000E                     	ds	2
   343  000010                     get_next_state@code:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0xF
   347  000010                     	ds	2
   348  000012                     get_next_state@seconds:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x11
   352  000012                     	ds	1
   353  000013                     get_next_state@minutes:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x12
   357  000013                     	ds	1
   358  000014                     get_next_state@hour:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x13
   362  000014                     	ds	1
   363  000015                     ??_high_isr:
   364                           
   365                           ; 1 bytes @ 0x14
   366  000015                     	ds	17
   367  000026                     high_isr@code:
   368                           	opt stack 0
   369                           
   370                           ; 47 bytes @ 0x25
   371  000026                     	ds	47
   372  000055                     high_isr@aux:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x54
   376  000055                     	ds	1
   377  000056                     high_isr@final_code:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x55
   381  000056                     	ds	2
   382  000058                     high_isr@i:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x57
   386  000058                     	ds	2
   387                           tblptru	equ	0xFF8
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391 ;;
   392 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   393 ;;
   394 ;; *************** function _main *****************
   395 ;; Defined at:
   396 ;;		line 37 in file "main.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  temp            1    0        unsigned char 
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   410 ;;      Params:         0       0       0       0       0       0       0       0       0
   411 ;;      Locals:         0       0       0       0       0       0       0       0       0
   412 ;;      Temps:          0       2       0       0       0       0       0       0       0
   413 ;;      Totals:         0       2       0       0       0       0       0       0       0
   414 ;;Total ram usage:        2 bytes
   415 ;; Hardware stack levels required when called:   10
   416 ;; This function calls:
   417 ;;		_ConfigureOscillator
   418 ;;		_InitApp
   419 ;;		_get_time
   420 ;;		_ir_is_code_number
   421 ;;		_point_toggle
   422 ;;		_put_nums
   423 ;;		_put_nums_individual
   424 ;; This function is called by:
   425 ;;		Startup code after reset
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           	psect	text0
   430  000012                     __ptext0:
   431                           	opt stack 0
   432  000012                     _main:
   433                           	opt stack 21
   434                           
   435                           ;main.c: 40: ConfigureOscillator();
   436                           
   437                           ;incstack = 0
   438  000012  EC02  F006         	call	_ConfigureOscillator	;wreg free
   439                           
   440                           ;main.c: 43: InitApp();
   441  000016  EC9F  F005         	call	_InitApp	;wreg free
   442                           
   443                           ;main.c: 48: aux1[0] = 1;
   444  00001A  0E01               	movlw	1
   445  00001C  0100               	movlb	0	; () banked
   446  00001E  6F76               	movwf	_aux1& (0+255),b
   447                           
   448                           ;main.c: 49: aux1[1] = 2;
   449  000020  0E02               	movlw	2
   450  000022  0100               	movlb	0	; () banked
   451  000024  6F77               	movwf	(_aux1+1)& (0+255),b
   452                           
   453                           ;main.c: 50: aux1[2] = 3;
   454  000026  0E03               	movlw	3
   455  000028  0100               	movlb	0	; () banked
   456  00002A  6F78               	movwf	(_aux1+2)& (0+255),b
   457                           
   458                           ;main.c: 51: aux1[3] = 4;
   459  00002C  0E04               	movlw	4
   460  00002E  0100               	movlb	0	; () banked
   461  000030  6F79               	movwf	(_aux1+3)& (0+255),b
   462                           
   463                           ;main.c: 52: aux1[4] = 5;
   464  000032  0E05               	movlw	5
   465  000034  0100               	movlb	0	; () banked
   466  000036  6F7A               	movwf	(_aux1+4)& (0+255),b
   467                           
   468                           ;main.c: 53: aux1[5] = 6;
   469  000038  0E06               	movlw	6
   470  00003A  0100               	movlb	0	; () banked
   471  00003C  6F7B               	movwf	(_aux1+5)& (0+255),b
   472  00003E                     l2251:
   473                           
   474                           ;main.c: 58: {
   475                           ;main.c: 59: state = next;
   476  00003E  C073  F05A         	movff	_next,_state
   477  000042  C074  F05B         	movff	_next+1,_state+1
   478                           
   479                           ;main.c: 61: switch(state){
   480  000046  D120               	goto	l2309
   481  000048                     l2253:
   482                           
   483                           ;main.c: 63: get_time(aux1);
   484  000048  0E76               	movlw	low _aux1
   485  00004A  0100               	movlb	0	; () banked
   486  00004C  6F6B               	movwf	get_time@data& (0+255),b
   487  00004E  0E00               	movlw	high _aux1
   488  000050  0100               	movlb	0	; () banked
   489  000052  6F6C               	movwf	(get_time@data+1)& (0+255),b
   490  000054  EC3B  F003         	call	_get_time	;wreg free
   491                           
   492                           ;main.c: 64: put_nums(aux1);
   493  000058  0E76               	movlw	low _aux1
   494  00005A  0100               	movlb	0	; () banked
   495  00005C  6F67               	movwf	put_nums@nums& (0+255),b
   496  00005E  0E00               	movlw	high _aux1
   497  000060  0100               	movlb	0	; () banked
   498  000062  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   499  000064  EC5E  F005         	call	_put_nums	;wreg free
   500                           
   501                           ;main.c: 65: _delay((unsigned long)((500)*(20000000L/4000.0)));
   502  000068  0E0D               	movlw	13
   503  00006A  0100               	movlb	0	; () banked
   504  00006C  6F72               	movwf	(??_main+1)& (0+255),b
   505  00006E  0EAF               	movlw	175
   506  000070  0100               	movlb	0	; () banked
   507  000072  6F71               	movwf	??_main& (0+255),b
   508  000074  0EB6               	movlw	182
   509  000076                     u1407:
   510  000076  2EE8               	decfsz	wreg,f,c
   511  000078  D7FE               	bra	u1407
   512  00007A  2F71               	decfsz	??_main& (0+255),f,b
   513  00007C  D7FC               	bra	u1407
   514  00007E  2F72               	decfsz	(??_main+1)& (0+255),f,b
   515  000080  D7FA               	bra	u1407
   516  000082  F000               	nop	
   517                           
   518                           ;main.c: 66: point_toggle();
   519  000084  ECE6  F005         	call	_point_toggle	;wreg free
   520                           
   521                           ;main.c: 68: _delay((unsigned long)((500)*(20000000L/4000.0)));
   522  000088  0E0D               	movlw	13
   523  00008A  0100               	movlb	0	; () banked
   524  00008C  6F72               	movwf	(??_main+1)& (0+255),b
   525  00008E  0EAF               	movlw	175
   526  000090  0100               	movlb	0	; () banked
   527  000092  6F71               	movwf	??_main& (0+255),b
   528  000094  0EB6               	movlw	182
   529  000096                     u1417:
   530  000096  2EE8               	decfsz	wreg,f,c
   531  000098  D7FE               	bra	u1417
   532  00009A  2F71               	decfsz	??_main& (0+255),f,b
   533  00009C  D7FC               	bra	u1417
   534  00009E  2F72               	decfsz	(??_main+1)& (0+255),f,b
   535  0000A0  D7FA               	bra	u1417
   536  0000A2  F000               	nop	
   537                           
   538                           ;main.c: 69: point_toggle();
   539  0000A4  ECE6  F005         	call	_point_toggle	;wreg free
   540                           
   541                           ;main.c: 70: break;
   542  0000A8  D7CA               	goto	l2251
   543  0000AA                     l2263:
   544                           
   545                           ;main.c: 74: if(ir_is_code_number(human_code) && human_code <=2)
   546  0000AA  0100               	movlb	0	; () banked
   547  0000AC  5175               	movf	_human_code& (0+255),w,b
   548  0000AE  ECA8  F004         	call	_ir_is_code_number
   549  0000B2  0900               	iorlw	0
   550  0000B4  B4D8               	btfsc	status,2,c
   551  0000B6  D006               	goto	l2269
   552  0000B8  0E03               	movlw	3
   553  0000BA  0100               	movlb	0	; () banked
   554  0000BC  6175               	cpfslt	_human_code& (0+255),b
   555  0000BE  D002               	goto	l2269
   556                           
   557                           ; BSR set to: 0
   558                           ;main.c: 75: aux1[3] = human_code;
   559  0000C0  C075  F079         	movff	_human_code,_aux1+3
   560  0000C4                     l2269:
   561                           
   562                           ;main.c: 78: put_nums(aux1);
   563  0000C4  0E76               	movlw	low _aux1
   564  0000C6  0100               	movlb	0	; () banked
   565  0000C8  6F67               	movwf	put_nums@nums& (0+255),b
   566  0000CA  0E00               	movlw	high _aux1
   567  0000CC  0100               	movlb	0	; () banked
   568  0000CE  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   569  0000D0  EC5E  F005         	call	_put_nums	;wreg free
   570                           
   571                           ;main.c: 79: _delay((unsigned long)((500)*(20000000L/4000.0)));
   572  0000D4  0E0D               	movlw	13
   573  0000D6  0100               	movlb	0	; () banked
   574  0000D8  6F72               	movwf	(??_main+1)& (0+255),b
   575  0000DA  0EAF               	movlw	175
   576  0000DC  0100               	movlb	0	; () banked
   577  0000DE  6F71               	movwf	??_main& (0+255),b
   578  0000E0  0EB6               	movlw	182
   579  0000E2                     u1427:
   580  0000E2  2EE8               	decfsz	wreg,f,c
   581  0000E4  D7FE               	bra	u1427
   582  0000E6  2F71               	decfsz	??_main& (0+255),f,b
   583  0000E8  D7FC               	bra	u1427
   584  0000EA  2F72               	decfsz	(??_main+1)& (0+255),f,b
   585  0000EC  D7FA               	bra	u1427
   586  0000EE  F000               	nop	
   587                           
   588                           ;main.c: 80: put_nums_individual(aux1[5], aux1[4], 'V',aux1[2],aux1[1],aux1[0]);
   589  0000F0  C07A  F067         	movff	_aux1+4,put_nums_individual@num4
   590  0000F4  0E56               	movlw	86
   591  0000F6  0100               	movlb	0	; () banked
   592  0000F8  6F68               	movwf	put_nums_individual@num3& (0+255),b
   593  0000FA  C078  F069         	movff	_aux1+2,put_nums_individual@num2
   594  0000FE  C077  F06A         	movff	_aux1+1,put_nums_individual@num1
   595  000102  C076  F06B         	movff	_aux1,put_nums_individual@num0
   596  000106  0100               	movlb	0	; () banked
   597  000108  517B               	movf	(_aux1+5)& (0+255),w,b
   598  00010A  EC37  F005         	call	_put_nums_individual
   599                           
   600                           ;main.c: 81: _delay((unsigned long)((500)*(20000000L/4000.0)));
   601  00010E  0E0D               	movlw	13
   602  000110  0100               	movlb	0	; () banked
   603  000112  6F72               	movwf	(??_main+1)& (0+255),b
   604  000114  0EAF               	movlw	175
   605  000116  0100               	movlb	0	; () banked
   606  000118  6F71               	movwf	??_main& (0+255),b
   607  00011A  0EB6               	movlw	182
   608  00011C                     u1437:
   609  00011C  2EE8               	decfsz	wreg,f,c
   610  00011E  D7FE               	bra	u1437
   611  000120  2F71               	decfsz	??_main& (0+255),f,b
   612  000122  D7FC               	bra	u1437
   613  000124  2F72               	decfsz	(??_main+1)& (0+255),f,b
   614  000126  D7FA               	bra	u1437
   615  000128  D0AD               	goto	L3
   616  00012A                     l2277:
   617                           
   618                           ;main.c: 85: if(ir_is_code_number(human_code) && ((aux1[3]<2 && human_code <=9) || human
      +                          _code <=3))
   619  00012A  0100               	movlb	0	; () banked
   620  00012C  5175               	movf	_human_code& (0+255),w,b
   621  00012E  ECA8  F004         	call	_ir_is_code_number
   622  000132  0900               	iorlw	0
   623  000134  B4D8               	btfsc	status,2,c
   624  000136  D00E               	goto	l2285
   625  000138  0E02               	movlw	2
   626  00013A  0100               	movlb	0	; () banked
   627  00013C  6179               	cpfslt	(_aux1+3)& (0+255),b
   628  00013E  D004               	goto	l2283
   629                           
   630                           ; BSR set to: 0
   631  000140  0E09               	movlw	9
   632  000142  0100               	movlb	0	; () banked
   633  000144  6575               	cpfsgt	_human_code& (0+255),b
   634  000146  D004               	goto	l69
   635  000148                     l2283:
   636                           
   637                           ; BSR set to: 0
   638  000148  0E04               	movlw	4
   639  00014A  0100               	movlb	0	; () banked
   640  00014C  6175               	cpfslt	_human_code& (0+255),b
   641  00014E  D002               	goto	l2285
   642  000150                     l69:
   643                           
   644                           ; BSR set to: 0
   645                           ;main.c: 86: aux1[2] = human_code;
   646  000150  C075  F078         	movff	_human_code,_aux1+2
   647  000154                     l2285:
   648                           
   649                           ;main.c: 87: put_nums(aux1);
   650  000154  0E76               	movlw	low _aux1
   651  000156  0100               	movlb	0	; () banked
   652  000158  6F67               	movwf	put_nums@nums& (0+255),b
   653  00015A  0E00               	movlw	high _aux1
   654  00015C  0100               	movlb	0	; () banked
   655  00015E  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   656  000160  EC5E  F005         	call	_put_nums	;wreg free
   657                           
   658                           ;main.c: 88: _delay((unsigned long)((500)*(20000000L/4000.0)));
   659  000164  0E0D               	movlw	13
   660  000166  0100               	movlb	0	; () banked
   661  000168  6F72               	movwf	(??_main+1)& (0+255),b
   662  00016A  0EAF               	movlw	175
   663  00016C  0100               	movlb	0	; () banked
   664  00016E  6F71               	movwf	??_main& (0+255),b
   665  000170  0EB6               	movlw	182
   666  000172                     u1447:
   667  000172  2EE8               	decfsz	wreg,f,c
   668  000174  D7FE               	bra	u1447
   669  000176  2F71               	decfsz	??_main& (0+255),f,b
   670  000178  D7FC               	bra	u1447
   671  00017A  2F72               	decfsz	(??_main+1)& (0+255),f,b
   672  00017C  D7FA               	bra	u1447
   673  00017E  F000               	nop	
   674                           
   675                           ;main.c: 89: put_nums_individual(aux1[5], aux1[4], aux1[3],'V',aux1[1],aux1[0]);
   676  000180  C07A  F067         	movff	_aux1+4,put_nums_individual@num4
   677  000184  C079  F068         	movff	_aux1+3,put_nums_individual@num3
   678  000188  0E56               	movlw	86
   679  00018A  0100               	movlb	0	; () banked
   680  00018C  6F69               	movwf	put_nums_individual@num2& (0+255),b
   681  00018E  C077  F06A         	movff	_aux1+1,put_nums_individual@num1
   682  000192  C076  F06B         	movff	_aux1,put_nums_individual@num0
   683  000196  0100               	movlb	0	; () banked
   684  000198  517B               	movf	(_aux1+5)& (0+255),w,b
   685  00019A  EC37  F005         	call	_put_nums_individual
   686                           
   687                           ;main.c: 90: _delay((unsigned long)((500)*(20000000L/4000.0)));
   688  00019E  0E0D               	movlw	13
   689  0001A0  0100               	movlb	0	; () banked
   690  0001A2  6F72               	movwf	(??_main+1)& (0+255),b
   691  0001A4  0EAF               	movlw	175
   692  0001A6  0100               	movlb	0	; () banked
   693  0001A8  6F71               	movwf	??_main& (0+255),b
   694  0001AA  0EB6               	movlw	182
   695  0001AC                     u1457:
   696  0001AC  2EE8               	decfsz	wreg,f,c
   697  0001AE  D7FE               	bra	u1457
   698  0001B0  2F71               	decfsz	??_main& (0+255),f,b
   699  0001B2  D7FC               	bra	u1457
   700  0001B4  2F72               	decfsz	(??_main+1)& (0+255),f,b
   701  0001B6  D7FA               	bra	u1457
   702  0001B8  D065               	goto	L3
   703  0001BA                     l2293:
   704                           
   705                           ;main.c: 93: put_nums(aux1);
   706  0001BA  0E76               	movlw	low _aux1
   707  0001BC  0100               	movlb	0	; () banked
   708  0001BE  6F67               	movwf	put_nums@nums& (0+255),b
   709  0001C0  0E00               	movlw	high _aux1
   710  0001C2  0100               	movlb	0	; () banked
   711  0001C4  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   712  0001C6  EC5E  F005         	call	_put_nums	;wreg free
   713                           
   714                           ;main.c: 94: _delay((unsigned long)((500)*(20000000L/4000.0)));
   715  0001CA  0E0D               	movlw	13
   716  0001CC  0100               	movlb	0	; () banked
   717  0001CE  6F72               	movwf	(??_main+1)& (0+255),b
   718  0001D0  0EAF               	movlw	175
   719  0001D2  0100               	movlb	0	; () banked
   720  0001D4  6F71               	movwf	??_main& (0+255),b
   721  0001D6  0EB6               	movlw	182
   722  0001D8                     u1467:
   723  0001D8  2EE8               	decfsz	wreg,f,c
   724  0001DA  D7FE               	bra	u1467
   725  0001DC  2F71               	decfsz	??_main& (0+255),f,b
   726  0001DE  D7FC               	bra	u1467
   727  0001E0  2F72               	decfsz	(??_main+1)& (0+255),f,b
   728  0001E2  D7FA               	bra	u1467
   729  0001E4  F000               	nop	
   730                           
   731                           ;main.c: 95: put_nums_individual(aux1[5], aux1[4], aux1[3],aux1[2],'V',aux1[0]);
   732  0001E6  C07A  F067         	movff	_aux1+4,put_nums_individual@num4
   733  0001EA  C079  F068         	movff	_aux1+3,put_nums_individual@num3
   734  0001EE  C078  F069         	movff	_aux1+2,put_nums_individual@num2
   735  0001F2  0E56               	movlw	86
   736  0001F4  0100               	movlb	0	; () banked
   737  0001F6  6F6A               	movwf	put_nums_individual@num1& (0+255),b
   738  0001F8  C076  F06B         	movff	_aux1,put_nums_individual@num0
   739  0001FC  0100               	movlb	0	; () banked
   740  0001FE  517B               	movf	(_aux1+5)& (0+255),w,b
   741  000200  EC37  F005         	call	_put_nums_individual
   742                           
   743                           ;main.c: 96: _delay((unsigned long)((500)*(20000000L/4000.0)));
   744  000204  0E0D               	movlw	13
   745  000206  0100               	movlb	0	; () banked
   746  000208  6F72               	movwf	(??_main+1)& (0+255),b
   747  00020A  0EAF               	movlw	175
   748  00020C  0100               	movlb	0	; () banked
   749  00020E  6F71               	movwf	??_main& (0+255),b
   750  000210  0EB6               	movlw	182
   751  000212                     u1477:
   752  000212  2EE8               	decfsz	wreg,f,c
   753  000214  D7FE               	bra	u1477
   754  000216  2F71               	decfsz	??_main& (0+255),f,b
   755  000218  D7FC               	bra	u1477
   756  00021A  2F72               	decfsz	(??_main+1)& (0+255),f,b
   757  00021C  D7FA               	bra	u1477
   758  00021E  D032               	goto	L3
   759  000220                     l2301:
   760                           
   761                           ;main.c: 99: put_nums(aux1);
   762  000220  0E76               	movlw	low _aux1
   763  000222  0100               	movlb	0	; () banked
   764  000224  6F67               	movwf	put_nums@nums& (0+255),b
   765  000226  0E00               	movlw	high _aux1
   766  000228  0100               	movlb	0	; () banked
   767  00022A  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   768  00022C  EC5E  F005         	call	_put_nums	;wreg free
   769                           
   770                           ;main.c: 100: _delay((unsigned long)((500)*(20000000L/4000.0)));
   771  000230  0E0D               	movlw	13
   772  000232  0100               	movlb	0	; () banked
   773  000234  6F72               	movwf	(??_main+1)& (0+255),b
   774  000236  0EAF               	movlw	175
   775  000238  0100               	movlb	0	; () banked
   776  00023A  6F71               	movwf	??_main& (0+255),b
   777  00023C  0EB6               	movlw	182
   778  00023E                     u1487:
   779  00023E  2EE8               	decfsz	wreg,f,c
   780  000240  D7FE               	bra	u1487
   781  000242  2F71               	decfsz	??_main& (0+255),f,b
   782  000244  D7FC               	bra	u1487
   783  000246  2F72               	decfsz	(??_main+1)& (0+255),f,b
   784  000248  D7FA               	bra	u1487
   785  00024A  F000               	nop	
   786                           
   787                           ;main.c: 101: put_nums_individual(aux1[5], aux1[4], aux1[3],aux1[2],aux1[1],'V');
   788  00024C  C07A  F067         	movff	_aux1+4,put_nums_individual@num4
   789  000250  C079  F068         	movff	_aux1+3,put_nums_individual@num3
   790  000254  C078  F069         	movff	_aux1+2,put_nums_individual@num2
   791  000258  C077  F06A         	movff	_aux1+1,put_nums_individual@num1
   792  00025C  0E56               	movlw	86
   793  00025E  0100               	movlb	0	; () banked
   794  000260  6F6B               	movwf	put_nums_individual@num0& (0+255),b
   795  000262  0100               	movlb	0	; () banked
   796  000264  517B               	movf	(_aux1+5)& (0+255),w,b
   797  000266  EC37  F005         	call	_put_nums_individual
   798                           
   799                           ;main.c: 102: _delay((unsigned long)((500)*(20000000L/4000.0)));
   800  00026A  0E0D               	movlw	13
   801  00026C  0100               	movlb	0	; () banked
   802  00026E  6F72               	movwf	(??_main+1)& (0+255),b
   803  000270  0EAF               	movlw	175
   804  000272  0100               	movlb	0	; () banked
   805  000274  6F71               	movwf	??_main& (0+255),b
   806  000276  0EB6               	movlw	182
   807  000278                     u1497:
   808  000278  2EE8               	decfsz	wreg,f,c
   809  00027A  D7FE               	bra	u1497
   810  00027C  2F71               	decfsz	??_main& (0+255),f,b
   811  00027E  D7FC               	bra	u1497
   812  000280  2F72               	decfsz	(??_main+1)& (0+255),f,b
   813  000282  D7FA               	bra	u1497
   814  000284                     L3:
   815  000284  F000               	nop	
   816                           
   817                           ;main.c: 106: }
   818                           
   819                           ;main.c: 104: default: ;
   820                           
   821                           ;main.c: 103: break;
   822  000286  D6DB               	goto	l2251
   823  000288                     l2309:
   824  000288  C05A  F071         	movff	_state,??_main
   825  00028C  C05B  F072         	movff	_state+1,??_main+1
   826                           
   827                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   828                           ; Switch size 1, requested type "space"
   829                           ; Number of cases is 1, Range of values is 0 to 0
   830                           ; switch strategies available:
   831                           ; Name         Instructions Cycles
   832                           ; simple_byte            4     3 (average)
   833                           ;	Chosen strategy is simple_byte
   834  000290  0100               	movlb	0	; () banked
   835  000292  5172               	movf	(??_main+1)& (0+255),w,b
   836  000294  0A00               	xorlw	0	; case 0
   837  000296  A4D8               	btfss	status,2,c
   838  000298  D6D2               	goto	l2251
   839                           
   840                           ; BSR set to: 0
   841                           ; Switch size 1, requested type "space"
   842                           ; Number of cases is 5, Range of values is 0 to 4
   843                           ; switch strategies available:
   844                           ; Name         Instructions Cycles
   845                           ; simple_byte           16     9 (average)
   846                           ;	Chosen strategy is simple_byte
   847  00029A  0100               	movlb	0	; () banked
   848  00029C  5171               	movf	??_main& (0+255),w,b
   849  00029E  0A00               	xorlw	0	; case 0
   850  0002A0  B4D8               	btfsc	status,2,c
   851  0002A2  D6D2               	goto	l2253
   852  0002A4  0A01               	xorlw	1	; case 1
   853  0002A6  B4D8               	btfsc	status,2,c
   854  0002A8  D700               	goto	l2263
   855  0002AA  0A03               	xorlw	3	; case 2
   856  0002AC  B4D8               	btfsc	status,2,c
   857  0002AE  D73D               	goto	l2277
   858  0002B0  0A01               	xorlw	1	; case 3
   859  0002B2  B4D8               	btfsc	status,2,c
   860  0002B4  D782               	goto	l2293
   861  0002B6  0A07               	xorlw	7	; case 4
   862  0002B8  B4D8               	btfsc	status,2,c
   863  0002BA  D7B2               	goto	l2301
   864                           
   865                           ; BSR set to: 0
   866                           
   867                           ; BSR set to: 0
   868  0002BC  D6C0               	goto	l2251
   869  0002BE                     __end_of_main:
   870                           	opt stack 0
   871                           tblptru	equ	0xFF8
   872                           postinc0	equ	0xFEE
   873                           wreg	equ	0xFE8
   874                           status	equ	0xFD8
   875                           
   876 ;; *************** function _put_nums_individual *****************
   877 ;; Defined at:
   878 ;;		line 72 in file "user.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  num5            1    wreg     unsigned char 
   881 ;;  num4            1    7[BANK0 ] unsigned char 
   882 ;;  num3            1    8[BANK0 ] unsigned char 
   883 ;;  num2            1    9[BANK0 ] unsigned char 
   884 ;;  num1            1   10[BANK0 ] unsigned char 
   885 ;;  num0            1   11[BANK0 ] unsigned char 
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  num5            1   12[BANK0 ] unsigned char 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, status,2, status,0, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   897 ;;      Params:         0       5       0       0       0       0       0       0       0
   898 ;;      Locals:         0       1       0       0       0       0       0       0       0
   899 ;;      Temps:          0       0       0       0       0       0       0       0       0
   900 ;;      Totals:         0       6       0       0       0       0       0       0       0
   901 ;;Total ram usage:        6 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; Hardware stack levels required when called:    7
   904 ;; This function calls:
   905 ;;		_get_num
   906 ;;		_put_num
   907 ;; This function is called by:
   908 ;;		_main
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text1
   913  000A6E                     __ptext1:
   914                           	opt stack 0
   915  000A6E                     _put_nums_individual:
   916                           	opt stack 23
   917                           
   918                           ; BSR set to: 0
   919                           ;incstack = 0
   920                           ;put_nums_individual@num5 stored from wreg
   921  000A6E  0100               	movlb	0	; () banked
   922  000A70  6F6C               	movwf	put_nums_individual@num5& (0+255),b
   923                           
   924                           ;user.c: 74: put_num(get_num(num0));
   925  000A72  0100               	movlb	0	; () banked
   926  000A74  516B               	movf	put_nums_individual@num0& (0+255),w,b
   927  000A76  EC94  F003         	call	_get_num
   928  000A7A  EC33  F004         	call	_put_num
   929                           
   930                           ;user.c: 75: put_num(get_num(num1));
   931  000A7E  0100               	movlb	0	; () banked
   932  000A80  516A               	movf	put_nums_individual@num1& (0+255),w,b
   933  000A82  EC94  F003         	call	_get_num
   934  000A86  EC33  F004         	call	_put_num
   935                           
   936                           ;user.c: 76: put_num(get_num(num2));
   937  000A8A  0100               	movlb	0	; () banked
   938  000A8C  5169               	movf	put_nums_individual@num2& (0+255),w,b
   939  000A8E  EC94  F003         	call	_get_num
   940  000A92  EC33  F004         	call	_put_num
   941                           
   942                           ;user.c: 77: put_num(get_num(num3));
   943  000A96  0100               	movlb	0	; () banked
   944  000A98  5168               	movf	put_nums_individual@num3& (0+255),w,b
   945  000A9A  EC94  F003         	call	_get_num
   946  000A9E  EC33  F004         	call	_put_num
   947                           
   948                           ;user.c: 78: put_num(get_num(num4));
   949  000AA2  0100               	movlb	0	; () banked
   950  000AA4  5167               	movf	put_nums_individual@num4& (0+255),w,b
   951  000AA6  EC94  F003         	call	_get_num
   952  000AAA  EC33  F004         	call	_put_num
   953                           
   954                           ;user.c: 79: put_num(get_num(num5));
   955  000AAE  0100               	movlb	0	; () banked
   956  000AB0  516C               	movf	put_nums_individual@num5& (0+255),w,b
   957  000AB2  EC94  F003         	call	_get_num
   958  000AB6  EC33  F004         	call	_put_num
   959  000ABA  0012               	return		;funcret
   960  000ABC                     __end_of_put_nums_individual:
   961                           	opt stack 0
   962                           tblptru	equ	0xFF8
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           status	equ	0xFD8
   966                           
   967 ;; *************** function _put_nums *****************
   968 ;; Defined at:
   969 ;;		line 63 in file "user.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;  nums            2    7[BANK0 ] PTR unsigned char 
   972 ;;		 -> aux1(6), 
   973 ;; Auto vars:     Size  Location     Type
   974 ;;  i               2    9[BANK0 ] int 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   984 ;;      Params:         0       2       0       0       0       0       0       0       0
   985 ;;      Locals:         0       2       0       0       0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0       0       0
   987 ;;      Totals:         0       4       0       0       0       0       0       0       0
   988 ;;Total ram usage:        4 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:    7
   991 ;; This function calls:
   992 ;;		_get_num
   993 ;;		_put_num
   994 ;; This function is called by:
   995 ;;		_main
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text2
  1000  000ABC                     __ptext2:
  1001                           	opt stack 0
  1002  000ABC                     _put_nums:
  1003                           	opt stack 23
  1004                           
  1005                           ;user.c: 65: int i;
  1006                           ;user.c: 66: for(i=0;i<6;i++)
  1007                           
  1008                           ;incstack = 0
  1009  000ABC  0E00               	movlw	0
  1010  000ABE  0100               	movlb	0	; () banked
  1011  000AC0  6F6A               	movwf	(put_nums@i+1)& (0+255),b
  1012  000AC2  0E00               	movlw	0
  1013  000AC4  6F69               	movwf	put_nums@i& (0+255),b
  1014  000AC6                     l2155:
  1015                           
  1016                           ; BSR set to: 0
  1017  000AC6  0100               	movlb	0	; () banked
  1018  000AC8  BF6A               	btfsc	(put_nums@i+1)& (0+255),7,b
  1019  000ACA  D008               	goto	l2159
  1020  000ACC  0100               	movlb	0	; () banked
  1021  000ACE  516A               	movf	(put_nums@i+1)& (0+255),w,b
  1022  000AD0  E118               	bnz	l149
  1023  000AD2  0E06               	movlw	6
  1024  000AD4  0100               	movlb	0	; () banked
  1025  000AD6  5D69               	subwf	put_nums@i& (0+255),w,b
  1026  000AD8  B0D8               	btfsc	status,0,c
  1027  000ADA  0012               	return	
  1028  000ADC                     l2159:
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;user.c: 67: {
  1032                           ;user.c: 68: put_num(get_num(nums[i]));
  1033  000ADC  0100               	movlb	0	; () banked
  1034  000ADE  5169               	movf	put_nums@i& (0+255),w,b
  1035  000AE0  0100               	movlb	0	; () banked
  1036  000AE2  2567               	addwf	put_nums@nums& (0+255),w,b
  1037  000AE4  6ED9               	movwf	fsr2l,c
  1038  000AE6  0100               	movlb	0	; () banked
  1039  000AE8  516A               	movf	(put_nums@i+1)& (0+255),w,b
  1040  000AEA  0100               	movlb	0	; () banked
  1041  000AEC  2168               	addwfc	(put_nums@nums+1)& (0+255),w,b
  1042  000AEE  6EDA               	movwf	fsr2h,c
  1043  000AF0  50DF               	movf	indf2,w,c
  1044  000AF2  EC94  F003         	call	_get_num
  1045  000AF6  EC33  F004         	call	_put_num
  1046  000AFA  0100               	movlb	0	; () banked
  1047  000AFC  4B69               	infsnz	put_nums@i& (0+255),f,b
  1048  000AFE  2B6A               	incf	(put_nums@i+1)& (0+255),f,b
  1049  000B00  D7E2               	goto	l2155
  1050  000B02                     l149:
  1051                           
  1052                           ; BSR set to: 0
  1053  000B02  0012               	return		;funcret
  1054  000B04                     __end_of_put_nums:
  1055                           	opt stack 0
  1056                           tblptru	equ	0xFF8
  1057                           postinc0	equ	0xFEE
  1058                           wreg	equ	0xFE8
  1059                           indf2	equ	0xFDF
  1060                           fsr2h	equ	0xFDA
  1061                           fsr2l	equ	0xFD9
  1062                           status	equ	0xFD8
  1063                           
  1064 ;; *************** function _put_num *****************
  1065 ;; Defined at:
  1066 ;;		line 51 in file "user.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;  num             1    wreg     unsigned char 
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;  num             1    2[BANK0 ] unsigned char 
  1071 ;;  i               2    5[BANK0 ] int 
  1072 ;;  mask            1    3[BANK0 ] unsigned char 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg, status,2, status,0
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1082 ;;      Params:         0       0       0       0       0       0       0       0       0
  1083 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1084 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1085 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1086 ;;Total ram usage:        7 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    6
  1089 ;; This function calls:
  1090 ;;		Nothing
  1091 ;; This function is called by:
  1092 ;;		_put_nums
  1093 ;;		_put_nums_individual
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text3
  1098  000866                     __ptext3:
  1099                           	opt stack 0
  1100  000866                     _put_num:
  1101                           	opt stack 23
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;incstack = 0
  1105                           ;put_num@num stored from wreg
  1106  000866  0100               	movlb	0	; () banked
  1107  000868  6F62               	movwf	put_num@num& (0+255),b
  1108                           
  1109                           ;user.c: 53: char mask = 0x01;
  1110  00086A  0E01               	movlw	1
  1111  00086C  0100               	movlb	0	; () banked
  1112  00086E  6F63               	movwf	put_num@mask& (0+255),b
  1113                           
  1114                           ;user.c: 54: int i;
  1115                           ;user.c: 55: for(i= 0; i<8; i++)
  1116  000870  0E00               	movlw	0
  1117  000872  0100               	movlb	0	; () banked
  1118  000874  6F66               	movwf	(put_num@i+1)& (0+255),b
  1119  000876  0E00               	movlw	0
  1120  000878  6F65               	movwf	put_num@i& (0+255),b
  1121  00087A                     l1853:
  1122                           
  1123                           ; BSR set to: 0
  1124  00087A  0100               	movlb	0	; () banked
  1125  00087C  BF66               	btfsc	(put_num@i+1)& (0+255),7,b
  1126  00087E  D008               	goto	l1857
  1127  000880  0100               	movlb	0	; () banked
  1128  000882  5166               	movf	(put_num@i+1)& (0+255),w,b
  1129  000884  E12C               	bnz	l144
  1130  000886  0E08               	movlw	8
  1131  000888  0100               	movlb	0	; () banked
  1132  00088A  5D65               	subwf	put_num@i& (0+255),w,b
  1133  00088C  B0D8               	btfsc	status,0,c
  1134  00088E  0012               	return	
  1135  000890                     l1857:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;user.c: 56: {
  1139                           ;user.c: 57: RB3 = num>>i & mask;
  1140  000890  0E00               	movlw	0
  1141  000892  0100               	movlb	0	; () banked
  1142  000894  6F64               	movwf	_put_num$845& (0+255),b
  1143                           
  1144                           ; BSR set to: 0
  1145  000896  C065  F060         	movff	put_num@i,??_put_num
  1146  00089A  C062  F061         	movff	put_num@num,??_put_num+1
  1147  00089E  0100               	movlb	0	; () banked
  1148  0008A0  2B60               	incf	??_put_num& (0+255),f,b
  1149  0008A2  D003               	goto	u894
  1150  0008A4                     u895:
  1151  0008A4  0100               	movlb	0	; () banked
  1152  0008A6  90D8               	bcf	status,0,c
  1153  0008A8  3361               	rrcf	(??_put_num+1)& (0+255),f,b
  1154  0008AA                     u894:
  1155  0008AA  0100               	movlb	0	; () banked
  1156  0008AC  2F60               	decfsz	??_put_num& (0+255),f,b
  1157  0008AE  D7FA               	goto	u895
  1158  0008B0  0100               	movlb	0	; () banked
  1159  0008B2  3161               	rrcf	(??_put_num+1)& (0+255),w,b
  1160  0008B4  0100               	movlb	0	; () banked
  1161  0008B6  A0D8               	btfss	status,0,c
  1162  0008B8  D006               	goto	l1865
  1163                           
  1164                           ; BSR set to: 0
  1165  0008BA  0100               	movlb	0	; () banked
  1166  0008BC  A163               	btfss	put_num@mask& (0+255),0,b
  1167  0008BE  D003               	goto	l1865
  1168                           
  1169                           ; BSR set to: 0
  1170  0008C0  0E01               	movlw	1
  1171  0008C2  0100               	movlb	0	; () banked
  1172  0008C4  6F64               	movwf	_put_num$845& (0+255),b
  1173  0008C6                     l1865:
  1174                           
  1175                           ; BSR set to: 0
  1176  0008C6  0100               	movlb	0	; () banked
  1177  0008C8  B164               	btfsc	_put_num$845& (0+255),0,b
  1178  0008CA  D002               	bra	u925
  1179  0008CC  9681               	bcf	3969,3,c	;volatile
  1180  0008CE  D001               	bra	u926
  1181  0008D0                     u925:
  1182  0008D0  8681               	bsf	3969,3,c	;volatile
  1183  0008D2                     u926:
  1184                           
  1185                           ;user.c: 58: RB4 = 0;
  1186  0008D2  9881               	bcf	3969,4,c	;volatile
  1187                           
  1188                           ;user.c: 59: RB4 = 1;
  1189  0008D4  8881               	bsf	3969,4,c	;volatile
  1190  0008D6  0100               	movlb	0	; () banked
  1191  0008D8  4B65               	infsnz	put_num@i& (0+255),f,b
  1192  0008DA  2B66               	incf	(put_num@i+1)& (0+255),f,b
  1193  0008DC  D7CE               	goto	l1853
  1194  0008DE                     l144:
  1195                           
  1196                           ; BSR set to: 0
  1197  0008DE  0012               	return		;funcret
  1198  0008E0                     __end_of_put_num:
  1199                           	opt stack 0
  1200                           tblptru	equ	0xFF8
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           indf2	equ	0xFDF
  1204                           fsr2h	equ	0xFDA
  1205                           fsr2l	equ	0xFD9
  1206                           status	equ	0xFD8
  1207                           
  1208 ;; *************** function _get_num *****************
  1209 ;; Defined at:
  1210 ;;		line 82 in file "user.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;  num             1    wreg     unsigned char 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  num             1    0[BANK0 ] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      unsigned char 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1224 ;;      Params:         0       0       0       0       0       0       0       0       0
  1225 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1227 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1228 ;;Total ram usage:        1 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; Hardware stack levels required when called:    6
  1231 ;; This function calls:
  1232 ;;		Nothing
  1233 ;; This function is called by:
  1234 ;;		_put_nums
  1235 ;;		_put_nums_individual
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           	psect	text4
  1240  000728                     __ptext4:
  1241                           	opt stack 0
  1242  000728                     _get_num:
  1243                           	opt stack 23
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;incstack = 0
  1247                           ;get_num@num stored from wreg
  1248  000728  0100               	movlb	0	; () banked
  1249  00072A  6F60               	movwf	get_num@num& (0+255),b
  1250                           
  1251                           ;user.c: 84: switch(num)
  1252  00072C  D022               	goto	l1947
  1253  00072E                     l1877:
  1254  00072E  0E30               	movlw	48
  1255  000730  0012               	return	
  1256  000732                     l1881:
  1257  000732  0E6D               	movlw	109
  1258  000734  0012               	return	
  1259  000736                     l1885:
  1260  000736  0E79               	movlw	121
  1261  000738  0012               	return	
  1262  00073A                     l1889:
  1263  00073A  0E33               	movlw	51
  1264  00073C  0012               	return	
  1265  00073E                     l1893:
  1266  00073E  0E5B               	movlw	91
  1267  000740  0012               	return	
  1268  000742                     l1897:
  1269  000742  0E5F               	movlw	95
  1270  000744  0012               	return	
  1271  000746                     l1901:
  1272  000746  0E70               	movlw	112
  1273  000748  0012               	return	
  1274  00074A                     l1905:
  1275  00074A  0E7F               	movlw	127
  1276  00074C  0012               	return	
  1277  00074E                     l1909:
  1278  00074E  0E73               	movlw	115
  1279  000750  0012               	return	
  1280  000752                     l1913:
  1281  000752  0E7E               	movlw	126
  1282  000754  0012               	return	
  1283  000756                     l1917:
  1284  000756  0E3E               	movlw	62
  1285  000758  0012               	return	
  1286  00075A                     l1921:
  1287  00075A  0E67               	movlw	103
  1288  00075C  0012               	return	
  1289  00075E                     l1925:
  1290  00075E  0E37               	movlw	55
  1291  000760  0012               	return	
  1292  000762                     l1929:
  1293  000762  0E3D               	movlw	61
  1294  000764  0012               	return	
  1295  000766                     l1933:
  1296  000766  0E15               	movlw	21
  1297  000768  0012               	return	
  1298  00076A                     l1937:
  1299  00076A  0E00               	movlw	0
  1300  00076C  0012               	return	
  1301  00076E                     l1941:
  1302  00076E  0E7F               	movlw	127
  1303                           
  1304                           ;user.c: 103: }
  1305  000770  0012               	return	
  1306  000772                     l1947:
  1307  000772  0100               	movlb	0	; () banked
  1308  000774  5160               	movf	get_num@num& (0+255),w,b
  1309                           
  1310                           ; Switch size 1, requested type "space"
  1311                           ; Number of cases is 16, Range of values is 0 to 86
  1312                           ; switch strategies available:
  1313                           ; Name         Instructions Cycles
  1314                           ; simple_byte           49    25 (average)
  1315                           ;	Chosen strategy is simple_byte
  1316  000776  0A00               	xorlw	0	; case 0
  1317  000778  B4D8               	btfsc	status,2,c
  1318  00077A  D7EB               	goto	l1913
  1319  00077C  0A01               	xorlw	1	; case 1
  1320  00077E  B4D8               	btfsc	status,2,c
  1321  000780  D7D6               	goto	l1877
  1322  000782  0A03               	xorlw	3	; case 2
  1323  000784  B4D8               	btfsc	status,2,c
  1324  000786  D7D5               	goto	l1881
  1325  000788  0A01               	xorlw	1	; case 3
  1326  00078A  B4D8               	btfsc	status,2,c
  1327  00078C  D7D4               	goto	l1885
  1328  00078E  0A07               	xorlw	7	; case 4
  1329  000790  B4D8               	btfsc	status,2,c
  1330  000792  D7D3               	goto	l1889
  1331  000794  0A01               	xorlw	1	; case 5
  1332  000796  B4D8               	btfsc	status,2,c
  1333  000798  D7D2               	goto	l1893
  1334  00079A  0A03               	xorlw	3	; case 6
  1335  00079C  B4D8               	btfsc	status,2,c
  1336  00079E  D7D1               	goto	l1897
  1337  0007A0  0A01               	xorlw	1	; case 7
  1338  0007A2  B4D8               	btfsc	status,2,c
  1339  0007A4  D7D0               	goto	l1901
  1340  0007A6  0A0F               	xorlw	15	; case 8
  1341  0007A8  B4D8               	btfsc	status,2,c
  1342  0007AA  D7CF               	goto	l1905
  1343  0007AC  0A01               	xorlw	1	; case 9
  1344  0007AE  B4D8               	btfsc	status,2,c
  1345  0007B0  D7CE               	goto	l1909
  1346  0007B2  0A4D               	xorlw	77	; case 68
  1347  0007B4  B4D8               	btfsc	status,2,c
  1348  0007B6  D7D5               	goto	l1929
  1349  0007B8  0A0C               	xorlw	12	; case 72
  1350  0007BA  B4D8               	btfsc	status,2,c
  1351  0007BC  D7D0               	goto	l1925
  1352  0007BE  0A06               	xorlw	6	; case 78
  1353  0007C0  B4D8               	btfsc	status,2,c
  1354  0007C2  D7D1               	goto	l1933
  1355  0007C4  0A1E               	xorlw	30	; case 80
  1356  0007C6  B4D8               	btfsc	status,2,c
  1357  0007C8  D7C8               	goto	l1921
  1358  0007CA  0A05               	xorlw	5	; case 85
  1359  0007CC  B4D8               	btfsc	status,2,c
  1360  0007CE  D7C3               	goto	l1917
  1361  0007D0  0A03               	xorlw	3	; case 86
  1362  0007D2  B4D8               	btfsc	status,2,c
  1363  0007D4  D7CA               	goto	l1937
  1364  0007D6  D7CB               	goto	l1941
  1365  0007D8                     __end_of_get_num:
  1366                           	opt stack 0
  1367                           tblptru	equ	0xFF8
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           indf2	equ	0xFDF
  1371                           fsr2h	equ	0xFDA
  1372                           fsr2l	equ	0xFD9
  1373                           status	equ	0xFD8
  1374                           
  1375 ;; *************** function _point_toggle *****************
  1376 ;; Defined at:
  1377 ;;		line 116 in file "user.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;		None
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;		None
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      void 
  1384 ;; Registers used:
  1385 ;;		cstack
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1391 ;;      Params:         0       0       0       0       0       0       0       0       0
  1392 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1394 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1395 ;;Total ram usage:        0 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; Hardware stack levels required when called:    7
  1398 ;; This function calls:
  1399 ;;		_point_disable
  1400 ;;		_point_enable
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text5
  1407  000BCC                     __ptext5:
  1408                           	opt stack 0
  1409  000BCC                     _point_toggle:
  1410                           	opt stack 23
  1411                           
  1412                           ;user.c: 118: if(RB1 == 0)
  1413                           
  1414                           ;incstack = 0
  1415  000BCC  B281               	btfsc	3969,1,c	;volatile
  1416  000BCE  D003               	goto	l2169
  1417                           
  1418                           ;user.c: 119: point_enable();
  1419  000BD0  ECF4  F005         	call	_point_enable	;wreg free
  1420  000BD4  0012               	return	
  1421  000BD6                     l2169:
  1422                           
  1423                           ;user.c: 120: else
  1424                           ;user.c: 121: point_disable();
  1425  000BD6  ECF6  F005         	call	_point_disable	;wreg free
  1426  000BDA  0012               	return	
  1427  000BDC                     __end_of_point_toggle:
  1428                           	opt stack 0
  1429                           tblptru	equ	0xFF8
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           indf2	equ	0xFDF
  1433                           fsr2h	equ	0xFDA
  1434                           fsr2l	equ	0xFD9
  1435                           status	equ	0xFD8
  1436                           
  1437 ;; *************** function _point_enable *****************
  1438 ;; Defined at:
  1439 ;;		line 106 in file "user.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;		None
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;		None
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		None
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1453 ;;      Params:         0       0       0       0       0       0       0       0       0
  1454 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1456 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1457 ;;Total ram usage:        0 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    6
  1460 ;; This function calls:
  1461 ;;		Nothing
  1462 ;; This function is called by:
  1463 ;;		_point_toggle
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text6
  1468  000BE8                     __ptext6:
  1469                           	opt stack 0
  1470  000BE8                     _point_enable:
  1471                           	opt stack 23
  1472                           
  1473                           ;user.c: 108: RB1 = 1;
  1474                           
  1475                           ;incstack = 0
  1476  000BE8  8281               	bsf	3969,1,c	;volatile
  1477  000BEA  0012               	return		;funcret
  1478  000BEC                     __end_of_point_enable:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           indf2	equ	0xFDF
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _point_disable *****************
  1489 ;; Defined at:
  1490 ;;		line 111 in file "user.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		None
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1504 ;;      Params:         0       0       0       0       0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    6
  1511 ;; This function calls:
  1512 ;;		Nothing
  1513 ;; This function is called by:
  1514 ;;		_point_toggle
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text7
  1519  000BEC                     __ptext7:
  1520                           	opt stack 0
  1521  000BEC                     _point_disable:
  1522                           	opt stack 23
  1523                           
  1524                           ;user.c: 113: RB1 = 0;
  1525                           
  1526                           ;incstack = 0
  1527  000BEC  9281               	bcf	3969,1,c	;volatile
  1528  000BEE  0012               	return		;funcret
  1529  000BF0                     __end_of_point_disable:
  1530                           	opt stack 0
  1531                           tblptru	equ	0xFF8
  1532                           postinc0	equ	0xFEE
  1533                           wreg	equ	0xFE8
  1534                           indf2	equ	0xFDF
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8
  1538                           
  1539 ;; *************** function _ir_is_code_number *****************
  1540 ;; Defined at:
  1541 ;;		line 322 in file "user.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  human_code      1    wreg     unsigned char 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  human_code      1    0[BANK0 ] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      unsigned char 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1555 ;;      Params:         0       0       0       0       0       0       0       0       0
  1556 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1558 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1559 ;;Total ram usage:        1 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    6
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text8
  1570  000950                     __ptext8:
  1571                           	opt stack 0
  1572  000950                     _ir_is_code_number:
  1573                           	opt stack 24
  1574                           
  1575                           ;incstack = 0
  1576                           ;ir_is_code_number@human_code stored from wreg
  1577  000950  0100               	movlb	0	; () banked
  1578  000952  6F60               	movwf	ir_is_code_number@human_code& (0+255),b
  1579                           
  1580                           ;user.c: 324: if(human_code == 0 || human_code == 1 || human_code == 2 || human_code == 
      +                          3 || human_code == 4
  1581                           ;user.c: 325: || human_code == 5 || human_code == 6 || human_code == 7 || human_code == 
      +                          8 || human_code == 9)
  1582  000954  0100               	movlb	0	; () banked
  1583  000956  5160               	movf	ir_is_code_number@human_code& (0+255),w,b
  1584  000958  0100               	movlb	0	; () banked
  1585  00095A  B4D8               	btfsc	status,2,c
  1586  00095C  D02C               	goto	l2191
  1587                           
  1588                           ; BSR set to: 0
  1589  00095E  0100               	movlb	0	; () banked
  1590  000960  0560               	decf	ir_is_code_number@human_code& (0+255),w,b
  1591  000962  B4D8               	btfsc	status,2,c
  1592  000964  D028               	goto	l2191
  1593                           
  1594                           ; BSR set to: 0
  1595  000966  0E02               	movlw	2
  1596  000968  0100               	movlb	0	; () banked
  1597  00096A  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1598  00096C  B4D8               	btfsc	status,2,c
  1599  00096E  D023               	goto	l2191
  1600                           
  1601                           ; BSR set to: 0
  1602  000970  0E03               	movlw	3
  1603  000972  0100               	movlb	0	; () banked
  1604  000974  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1605  000976  B4D8               	btfsc	status,2,c
  1606  000978  D01E               	goto	l2191
  1607                           
  1608                           ; BSR set to: 0
  1609  00097A  0E04               	movlw	4
  1610  00097C  0100               	movlb	0	; () banked
  1611  00097E  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1612  000980  B4D8               	btfsc	status,2,c
  1613  000982  D019               	goto	l2191
  1614                           
  1615                           ; BSR set to: 0
  1616  000984  0E05               	movlw	5
  1617  000986  0100               	movlb	0	; () banked
  1618  000988  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1619  00098A  B4D8               	btfsc	status,2,c
  1620  00098C  D014               	goto	l2191
  1621                           
  1622                           ; BSR set to: 0
  1623  00098E  0E06               	movlw	6
  1624  000990  0100               	movlb	0	; () banked
  1625  000992  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1626  000994  B4D8               	btfsc	status,2,c
  1627  000996  D00F               	goto	l2191
  1628                           
  1629                           ; BSR set to: 0
  1630  000998  0E07               	movlw	7
  1631  00099A  0100               	movlb	0	; () banked
  1632  00099C  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1633  00099E  B4D8               	btfsc	status,2,c
  1634  0009A0  D00A               	goto	l2191
  1635                           
  1636                           ; BSR set to: 0
  1637  0009A2  0E08               	movlw	8
  1638  0009A4  0100               	movlb	0	; () banked
  1639  0009A6  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1640  0009A8  B4D8               	btfsc	status,2,c
  1641  0009AA  D005               	goto	l2191
  1642                           
  1643                           ; BSR set to: 0
  1644  0009AC  0E09               	movlw	9
  1645  0009AE  0100               	movlb	0	; () banked
  1646  0009B0  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1647  0009B2  A4D8               	btfss	status,2,c
  1648  0009B4  D002               	goto	l2197
  1649  0009B6                     l2191:
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;user.c: 326: return 1;
  1653  0009B6  0E01               	movlw	1
  1654                           
  1655                           ; BSR set to: 0
  1656                           
  1657                           ; BSR set to: 0
  1658  0009B8  0012               	return	
  1659  0009BA                     l2197:
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;user.c: 327: else
  1663                           ;user.c: 328: return 0;
  1664  0009BA  0E00               	movlw	0
  1665                           
  1666                           ; BSR set to: 0
  1667  0009BC  0012               	return	
  1668  0009BE                     __end_of_ir_is_code_number:
  1669                           	opt stack 0
  1670                           tblptru	equ	0xFF8
  1671                           postinc0	equ	0xFEE
  1672                           wreg	equ	0xFE8
  1673                           indf2	equ	0xFDF
  1674                           fsr2h	equ	0xFDA
  1675                           fsr2l	equ	0xFD9
  1676                           status	equ	0xFD8
  1677                           
  1678 ;; *************** function _get_time *****************
  1679 ;; Defined at:
  1680 ;;		line 199 in file "user.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  data            2   11[BANK0 ] PTR unsigned char 
  1683 ;;		 -> aux1(6), 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  aux             1   16[BANK0 ] unsigned char 
  1686 ;;  hours           1   15[BANK0 ] unsigned char 
  1687 ;;  minutes         1   14[BANK0 ] unsigned char 
  1688 ;;  seconds         1   13[BANK0 ] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1698 ;;      Params:         0       2       0       0       0       0       0       0       0
  1699 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1701 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1702 ;;Total ram usage:        6 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    9
  1705 ;; This function calls:
  1706 ;;		_byte_read
  1707 ;; This function is called by:
  1708 ;;		_main
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text9
  1713  000676                     __ptext9:
  1714                           	opt stack 0
  1715  000676                     _get_time:
  1716                           	opt stack 21
  1717                           
  1718                           ;user.c: 201: char aux = 0x81;
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;incstack = 0
  1722  000676  0E81               	movlw	129
  1723  000678  0100               	movlb	0	; () banked
  1724  00067A  6F70               	movwf	get_time@aux& (0+255),b
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;user.c: 202: char seconds = byte_read(aux);
  1728  00067C  0100               	movlb	0	; () banked
  1729  00067E  5170               	movf	get_time@aux& (0+255),w,b
  1730  000680  ECEC  F003         	call	_byte_read
  1731  000684  0100               	movlb	0	; () banked
  1732  000686  6F6D               	movwf	get_time@seconds& (0+255),b
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;user.c: 203: aux = 0x83;
  1736  000688  0E83               	movlw	131
  1737  00068A  0100               	movlb	0	; () banked
  1738  00068C  6F70               	movwf	get_time@aux& (0+255),b
  1739                           
  1740                           ;user.c: 204: char minutes = byte_read(aux);
  1741  00068E  0100               	movlb	0	; () banked
  1742  000690  5170               	movf	get_time@aux& (0+255),w,b
  1743  000692  ECEC  F003         	call	_byte_read
  1744  000696  0100               	movlb	0	; () banked
  1745  000698  6F6E               	movwf	get_time@minutes& (0+255),b
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;user.c: 205: aux = 0x85;
  1749  00069A  0E85               	movlw	133
  1750  00069C  0100               	movlb	0	; () banked
  1751  00069E  6F70               	movwf	get_time@aux& (0+255),b
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;user.c: 206: char hours = byte_read(aux);
  1755  0006A0  0100               	movlb	0	; () banked
  1756  0006A2  5170               	movf	get_time@aux& (0+255),w,b
  1757  0006A4  ECEC  F003         	call	_byte_read
  1758  0006A8  0100               	movlb	0	; () banked
  1759  0006AA  6F6F               	movwf	get_time@hours& (0+255),b
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;user.c: 208: data[0] = minutes & 0x0f;
  1763  0006AC  0100               	movlb	0	; () banked
  1764  0006AE  516E               	movf	get_time@minutes& (0+255),w,b
  1765  0006B0  0B0F               	andlw	15
  1766  0006B2  C06B  FFD9         	movff	get_time@data,fsr2l
  1767  0006B6  C06C  FFDA         	movff	get_time@data+1,fsr2h
  1768  0006BA  6EDF               	movwf	indf2,c
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;user.c: 209: data[1] = (minutes & 0xf0)>>4;
  1772  0006BC  0100               	movlb	0	; () banked
  1773  0006BE  EE20 F001          	lfsr	2,1
  1774  0006C2  516B               	movf	get_time@data& (0+255),w,b
  1775  0006C4  26D9               	addwf	fsr2l,f,c
  1776  0006C6  516C               	movf	(get_time@data+1)& (0+255),w,b
  1777  0006C8  22DA               	addwfc	fsr2h,f,c
  1778  0006CA  0100               	movlb	0	; () banked
  1779  0006CC  396E               	swapf	get_time@minutes& (0+255),w,b
  1780  0006CE  0B0F               	andlw	15
  1781  0006D0  0B0F               	andlw	15
  1782  0006D2  6EDF               	movwf	indf2,c
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;user.c: 210: data[2] = hours & 0x0f;
  1786  0006D4  0100               	movlb	0	; () banked
  1787  0006D6  EE20 F002          	lfsr	2,2
  1788  0006DA  516B               	movf	get_time@data& (0+255),w,b
  1789  0006DC  26D9               	addwf	fsr2l,f,c
  1790  0006DE  516C               	movf	(get_time@data+1)& (0+255),w,b
  1791  0006E0  22DA               	addwfc	fsr2h,f,c
  1792  0006E2  0100               	movlb	0	; () banked
  1793  0006E4  516F               	movf	get_time@hours& (0+255),w,b
  1794  0006E6  0B0F               	andlw	15
  1795  0006E8  6EDF               	movwf	indf2,c
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;user.c: 211: data[3] = (hours & 0xf0)>>4;
  1799  0006EA  0100               	movlb	0	; () banked
  1800  0006EC  EE20 F003          	lfsr	2,3
  1801  0006F0  516B               	movf	get_time@data& (0+255),w,b
  1802  0006F2  26D9               	addwf	fsr2l,f,c
  1803  0006F4  516C               	movf	(get_time@data+1)& (0+255),w,b
  1804  0006F6  22DA               	addwfc	fsr2h,f,c
  1805  0006F8  0100               	movlb	0	; () banked
  1806  0006FA  396F               	swapf	get_time@hours& (0+255),w,b
  1807  0006FC  0B0F               	andlw	15
  1808  0006FE  0B0F               	andlw	15
  1809  000700  6EDF               	movwf	indf2,c
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;user.c: 212: data[4] = 1;
  1813  000702  0100               	movlb	0	; () banked
  1814  000704  EE20 F004          	lfsr	2,4
  1815  000708  516B               	movf	get_time@data& (0+255),w,b
  1816  00070A  26D9               	addwf	fsr2l,f,c
  1817  00070C  516C               	movf	(get_time@data+1)& (0+255),w,b
  1818  00070E  22DA               	addwfc	fsr2h,f,c
  1819  000710  0E01               	movlw	1
  1820  000712  6EDF               	movwf	indf2,c
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;user.c: 213: data[5] = 'H';
  1824  000714  0100               	movlb	0	; () banked
  1825  000716  EE20 F005          	lfsr	2,5
  1826  00071A  516B               	movf	get_time@data& (0+255),w,b
  1827  00071C  26D9               	addwf	fsr2l,f,c
  1828  00071E  516C               	movf	(get_time@data+1)& (0+255),w,b
  1829  000720  22DA               	addwfc	fsr2h,f,c
  1830  000722  0E48               	movlw	72
  1831  000724  6EDF               	movwf	indf2,c
  1832                           
  1833                           ; BSR set to: 0
  1834  000726  0012               	return		;funcret
  1835  000728                     __end_of_get_time:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           indf2	equ	0xFDF
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _byte_read *****************
  1846 ;; Defined at:
  1847 ;;		line 150 in file "user.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  address         1    wreg     unsigned char 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  address         1    7[BANK0 ] unsigned char 
  1852 ;;  i               2    9[BANK0 ] int 
  1853 ;;  res             1    8[BANK0 ] unsigned char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      unsigned char 
  1856 ;; Registers used:
  1857 ;;		wreg, status,2, status,0, cstack
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1863 ;;      Params:         0       0       0       0       0       0       0       0       0
  1864 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1865 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1866 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1867 ;;Total ram usage:        6 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    8
  1870 ;; This function calls:
  1871 ;;		_ce_disable
  1872 ;;		_ce_enable
  1873 ;;		_io_as_input
  1874 ;;		_send_command
  1875 ;; This function is called by:
  1876 ;;		_get_time
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text10
  1881  0007D8                     __ptext10:
  1882                           	opt stack 0
  1883  0007D8                     _byte_read:
  1884                           	opt stack 21
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;incstack = 0
  1888                           ;byte_read@address stored from wreg
  1889  0007D8  0100               	movlb	0	; () banked
  1890  0007DA  6F67               	movwf	byte_read@address& (0+255),b
  1891                           
  1892                           ;user.c: 151: char res = 0;
  1893  0007DC  0E00               	movlw	0
  1894  0007DE  0100               	movlb	0	; () banked
  1895  0007E0  6F68               	movwf	byte_read@res& (0+255),b
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;user.c: 154: ce_enable();
  1899  0007E2  ECFC  F005         	call	_ce_enable	;wreg free
  1900                           
  1901                           ;user.c: 156: send_command(address);
  1902  0007E6  0100               	movlb	0	; () banked
  1903  0007E8  5167               	movf	byte_read@address& (0+255),w,b
  1904  0007EA  EC70  F004         	call	_send_command
  1905                           
  1906                           ;user.c: 157: io_as_input();
  1907  0007EE  ECFA  F005         	call	_io_as_input	;wreg free
  1908                           
  1909                           ;user.c: 158: int i;
  1910                           ;user.c: 159: for(i=0;i<8;i++)
  1911  0007F2  0E00               	movlw	0
  1912  0007F4  0100               	movlb	0	; () banked
  1913  0007F6  6F6A               	movwf	(byte_read@i+1)& (0+255),b
  1914  0007F8  0E00               	movlw	0
  1915  0007FA  6F69               	movwf	byte_read@i& (0+255),b
  1916  0007FC                     l1963:
  1917                           
  1918                           ; BSR set to: 0
  1919  0007FC  0100               	movlb	0	; () banked
  1920  0007FE  BF6A               	btfsc	(byte_read@i+1)& (0+255),7,b
  1921  000800  D008               	goto	l205
  1922  000802  0100               	movlb	0	; () banked
  1923  000804  516A               	movf	(byte_read@i+1)& (0+255),w,b
  1924  000806  E12A               	bnz	l1979
  1925  000808  0E08               	movlw	8
  1926  00080A  0100               	movlb	0	; () banked
  1927  00080C  5D69               	subwf	byte_read@i& (0+255),w,b
  1928  00080E  B0D8               	btfsc	status,0,c
  1929  000810  D025               	goto	l1979
  1930  000812                     l205:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;user.c: 160: {
  1934                           ;user.c: 161: RA2 = 0;
  1935  000812  9480               	bcf	3968,2,c	;volatile
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;user.c: 162: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  1939  000814  0E06               	movlw	6
  1940  000816                     u1507:
  1941  000816  2EE8               	decfsz	wreg,f,c
  1942  000818  D7FE               	bra	u1507
  1943  00081A  D000               	nop2	
  1944                           
  1945                           ;user.c: 163: res |= RA3<<i;
  1946  00081C  C069  F065         	movff	byte_read@i,??_byte_read
  1947  000820  A680               	btfss	3968,3,c	;volatile
  1948  000822  D004               	goto	u950
  1949  000824  0100               	movlb	0	; () banked
  1950  000826  6B66               	clrf	(??_byte_read+1)& (0+255),b
  1951  000828  2B66               	incf	(??_byte_read+1)& (0+255),f,b
  1952  00082A  D002               	goto	u968
  1953  00082C                     u950:
  1954  00082C  0100               	movlb	0	; () banked
  1955  00082E  6B66               	clrf	(??_byte_read+1)& (0+255),b
  1956  000830                     u968:
  1957  000830  0100               	movlb	0	; () banked
  1958  000832  2B65               	incf	??_byte_read& (0+255),f,b
  1959  000834  D003               	goto	u974
  1960  000836                     u975:
  1961  000836  0100               	movlb	0	; () banked
  1962  000838  90D8               	bcf	status,0,c
  1963  00083A  3766               	rlcf	(??_byte_read+1)& (0+255),f,b
  1964  00083C                     u974:
  1965  00083C  0100               	movlb	0	; () banked
  1966  00083E  2F65               	decfsz	??_byte_read& (0+255),f,b
  1967  000840  D7FA               	goto	u975
  1968  000842  0100               	movlb	0	; () banked
  1969  000844  5166               	movf	(??_byte_read+1)& (0+255),w,b
  1970  000846  0100               	movlb	0	; () banked
  1971  000848  1368               	iorwf	byte_read@res& (0+255),f,b
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;user.c: 164: RA2 = 1;
  1975  00084A  8480               	bsf	3968,2,c	;volatile
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;user.c: 165: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  1979  00084C  0E10               	movlw	16
  1980  00084E                     u1517:
  1981  00084E  2EE8               	decfsz	wreg,f,c
  1982  000850  D7FE               	bra	u1517
  1983  000852  D000               	nop2	
  1984  000854  0100               	movlb	0	; () banked
  1985  000856  4B69               	infsnz	byte_read@i& (0+255),f,b
  1986  000858  2B6A               	incf	(byte_read@i+1)& (0+255),f,b
  1987  00085A  D7D0               	goto	l1963
  1988  00085C                     l1979:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;user.c: 167: }
  1992                           ;user.c: 169: ce_disable();
  1993  00085C  ECEE  F005         	call	_ce_disable	;wreg free
  1994                           
  1995                           ;user.c: 172: return res;
  1996  000860  0100               	movlb	0	; () banked
  1997  000862  5168               	movf	byte_read@res& (0+255),w,b
  1998  000864  0012               	return	
  1999  000866                     __end_of_byte_read:
  2000                           	opt stack 0
  2001                           tblptru	equ	0xFF8
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           indf2	equ	0xFDF
  2005                           fsr2h	equ	0xFDA
  2006                           fsr2l	equ	0xFD9
  2007                           status	equ	0xFD8
  2008                           
  2009 ;; *************** function _send_command *****************
  2010 ;; Defined at:
  2011 ;;		line 265 in file "user.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  command         1    wreg     unsigned char 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  command         1    2[BANK0 ] unsigned char 
  2016 ;;  i               2    3[BANK0 ] int 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2026 ;;      Params:         0       0       0       0       0       0       0       0       0
  2027 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2028 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2029 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2030 ;;Total ram usage:        5 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    7
  2033 ;; This function calls:
  2034 ;;		_io_as_output
  2035 ;; This function is called by:
  2036 ;;		_byte_read
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text11
  2041  0008E0                     __ptext11:
  2042                           	opt stack 0
  2043  0008E0                     _send_command:
  2044                           	opt stack 21
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;incstack = 0
  2048                           ;send_command@command stored from wreg
  2049  0008E0  0100               	movlb	0	; () banked
  2050  0008E2  6F62               	movwf	send_command@command& (0+255),b
  2051                           
  2052                           ;user.c: 267: int i;
  2053                           ;user.c: 268: io_as_output();
  2054  0008E4  ECF8  F005         	call	_io_as_output	;wreg free
  2055                           
  2056                           ;user.c: 269: for(i=0; i<8; i++)
  2057  0008E8  0E00               	movlw	0
  2058  0008EA  0100               	movlb	0	; () banked
  2059  0008EC  6F64               	movwf	(send_command@i+1)& (0+255),b
  2060  0008EE  0E00               	movlw	0
  2061  0008F0  6F63               	movwf	send_command@i& (0+255),b
  2062  0008F2                     l1781:
  2063                           
  2064                           ; BSR set to: 0
  2065  0008F2  0100               	movlb	0	; () banked
  2066  0008F4  BF64               	btfsc	(send_command@i+1)& (0+255),7,b
  2067  0008F6  D008               	goto	l1785
  2068  0008F8  0100               	movlb	0	; () banked
  2069  0008FA  5164               	movf	(send_command@i+1)& (0+255),w,b
  2070  0008FC  E128               	bnz	l241
  2071  0008FE  0E08               	movlw	8
  2072  000900  0100               	movlb	0	; () banked
  2073  000902  5D63               	subwf	send_command@i& (0+255),w,b
  2074  000904  B0D8               	btfsc	status,0,c
  2075  000906  0012               	return	
  2076  000908                     l1785:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;user.c: 270: {
  2080                           ;user.c: 271: RA3 = command>>i & 0x01;
  2081  000908  C063  F060         	movff	send_command@i,??_send_command
  2082  00090C  C062  F061         	movff	send_command@command,??_send_command+1
  2083  000910  0100               	movlb	0	; () banked
  2084  000912  2B60               	incf	??_send_command& (0+255),f,b
  2085  000914  D003               	goto	u774
  2086  000916                     u775:
  2087  000916  0100               	movlb	0	; () banked
  2088  000918  90D8               	bcf	status,0,c
  2089  00091A  3361               	rrcf	(??_send_command+1)& (0+255),f,b
  2090  00091C                     u774:
  2091  00091C  0100               	movlb	0	; () banked
  2092  00091E  2F60               	decfsz	??_send_command& (0+255),f,b
  2093  000920  D7FA               	goto	u775
  2094  000922  0100               	movlb	0	; () banked
  2095  000924  3161               	rrcf	(??_send_command+1)& (0+255),w,b
  2096  000926  0100               	movlb	0	; () banked
  2097  000928  A0D8               	btfss	status,0,c
  2098  00092A  D002               	goto	u780
  2099  00092C  8680               	bsf	3968,3,c	;volatile
  2100  00092E  D001               	goto	l1787
  2101  000930                     u780:
  2102  000930  9680               	bcf	3968,3,c	;volatile
  2103  000932                     l1787:
  2104                           
  2105                           ;user.c: 272: RA2 = 1;
  2106  000932  8480               	bsf	3968,2,c	;volatile
  2107                           
  2108                           ;user.c: 273: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  2109  000934  0E10               	movlw	16
  2110  000936                     u1527:
  2111  000936  2EE8               	decfsz	wreg,f,c
  2112  000938  D7FE               	bra	u1527
  2113  00093A  D000               	nop2	
  2114                           
  2115                           ;user.c: 274: RA2 = 0;
  2116  00093C  9480               	bcf	3968,2,c	;volatile
  2117                           
  2118                           ;user.c: 275: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  2119  00093E  0E06               	movlw	6
  2120  000940                     u1537:
  2121  000940  2EE8               	decfsz	wreg,f,c
  2122  000942  D7FE               	bra	u1537
  2123  000944  D000               	nop2	
  2124  000946  0100               	movlb	0	; () banked
  2125  000948  4B63               	infsnz	send_command@i& (0+255),f,b
  2126  00094A  2B64               	incf	(send_command@i+1)& (0+255),f,b
  2127  00094C  D7D2               	goto	l1781
  2128  00094E                     l241:
  2129                           
  2130                           ; BSR set to: 0
  2131  00094E  0012               	return		;funcret
  2132  000950                     __end_of_send_command:
  2133                           	opt stack 0
  2134                           tblptru	equ	0xFF8
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           indf2	equ	0xFDF
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _io_as_output *****************
  2143 ;; Defined at:
  2144 ;;		line 285 in file "user.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;		None
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;		None
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      void 
  2151 ;; Registers used:
  2152 ;;		None
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2158 ;;      Params:         0       0       0       0       0       0       0       0       0
  2159 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2161 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2162 ;;Total ram usage:        0 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    6
  2165 ;; This function calls:
  2166 ;;		Nothing
  2167 ;; This function is called by:
  2168 ;;		_send_command
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text12
  2173  000BF0                     __ptext12:
  2174                           	opt stack 0
  2175  000BF0                     _io_as_output:
  2176                           	opt stack 21
  2177                           
  2178                           ;user.c: 287: TRISA3 = 0;
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;incstack = 0
  2182  000BF0  9692               	bcf	3986,3,c	;volatile
  2183  000BF2  0012               	return		;funcret
  2184  000BF4                     __end_of_io_as_output:
  2185                           	opt stack 0
  2186                           tblptru	equ	0xFF8
  2187                           postinc0	equ	0xFEE
  2188                           wreg	equ	0xFE8
  2189                           indf2	equ	0xFDF
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function _io_as_input *****************
  2195 ;; Defined at:
  2196 ;;		line 280 in file "user.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		None
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2210 ;;      Params:         0       0       0       0       0       0       0       0       0
  2211 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2213 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2214 ;;Total ram usage:        0 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    6
  2217 ;; This function calls:
  2218 ;;		Nothing
  2219 ;; This function is called by:
  2220 ;;		_byte_read
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text13
  2225  000BF4                     __ptext13:
  2226                           	opt stack 0
  2227  000BF4                     _io_as_input:
  2228                           	opt stack 22
  2229                           
  2230                           ;user.c: 282: TRISA3 = 1;
  2231                           
  2232                           ;incstack = 0
  2233  000BF4  8692               	bsf	3986,3,c	;volatile
  2234  000BF6  0012               	return		;funcret
  2235  000BF8                     __end_of_io_as_input:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           postinc0	equ	0xFEE
  2239                           wreg	equ	0xFE8
  2240                           indf2	equ	0xFDF
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _ce_enable *****************
  2246 ;; Defined at:
  2247 ;;		line 142 in file "user.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;		None
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		None
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0
  2262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2264 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2265 ;;Total ram usage:        0 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    6
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_byte_read
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text14
  2276  000BF8                     __ptext14:
  2277                           	opt stack 0
  2278  000BF8                     _ce_enable:
  2279                           	opt stack 22
  2280                           
  2281                           ;user.c: 143: RA5 = 1;
  2282                           
  2283                           ;incstack = 0
  2284  000BF8  8A80               	bsf	3968,5,c	;volatile
  2285  000BFA  0012               	return		;funcret
  2286  000BFC                     __end_of_ce_enable:
  2287                           	opt stack 0
  2288                           tblptru	equ	0xFF8
  2289                           postinc0	equ	0xFEE
  2290                           wreg	equ	0xFE8
  2291                           indf2	equ	0xFDF
  2292                           fsr2h	equ	0xFDA
  2293                           fsr2l	equ	0xFD9
  2294                           status	equ	0xFD8
  2295                           
  2296 ;; *************** function _ce_disable *****************
  2297 ;; Defined at:
  2298 ;;		line 145 in file "user.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;		None
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;		None
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		None
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2312 ;;      Params:         0       0       0       0       0       0       0       0       0
  2313 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2315 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2316 ;;Total ram usage:        0 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    6
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_byte_read
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text15
  2327  000BDC                     __ptext15:
  2328                           	opt stack 0
  2329  000BDC                     _ce_disable:
  2330                           	opt stack 22
  2331                           
  2332                           ;user.c: 146: RA5 = 0;
  2333                           
  2334                           ;incstack = 0
  2335  000BDC  9A80               	bcf	3968,5,c	;volatile
  2336                           
  2337                           ;user.c: 147: RA2 = 0;
  2338  000BDE  9480               	bcf	3968,2,c	;volatile
  2339  000BE0  0012               	return		;funcret
  2340  000BE2                     __end_of_ce_disable:
  2341                           	opt stack 0
  2342                           tblptru	equ	0xFF8
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           indf2	equ	0xFDF
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8
  2349                           
  2350 ;; *************** function _InitApp *****************
  2351 ;; Defined at:
  2352 ;;		line 28 in file "user.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;		None
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;		None
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2366 ;;      Params:         0       0       0       0       0       0       0       0       0
  2367 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2369 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2370 ;;Total ram usage:        0 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    6
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_main
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text16
  2381  000B3E                     __ptext16:
  2382                           	opt stack 0
  2383  000B3E                     _InitApp:
  2384                           	opt stack 24
  2385                           
  2386                           ;user.c: 32: TRISB3 = 0;
  2387                           
  2388                           ;incstack = 0
  2389  000B3E  9693               	bcf	3987,3,c	;volatile
  2390                           
  2391                           ;user.c: 33: TRISB4 = 0;
  2392  000B40  9893               	bcf	3987,4,c	;volatile
  2393                           
  2394                           ;user.c: 35: CCP2CON = 0x00;
  2395  000B42  0E00               	movlw	0
  2396  000B44  6EBA               	movwf	4026,c	;volatile
  2397                           
  2398                           ;user.c: 36: SSPCON1 = 0X00;
  2399  000B46  0E00               	movlw	0
  2400  000B48  6EC6               	movwf	4038,c	;volatile
  2401                           
  2402                           ;user.c: 37: ADCON1 = 0X0F;
  2403  000B4A  0E0F               	movlw	15
  2404  000B4C  6EC1               	movwf	4033,c	;volatile
  2405                           
  2406                           ;user.c: 38: INTCON = 0b10001000;
  2407  000B4E  0E88               	movlw	136
  2408  000B50  6EF2               	movwf	intcon,c	;volatile
  2409                           
  2410                           ;user.c: 39: TRISB1 = 0;
  2411  000B52  9293               	bcf	3987,1,c	;volatile
  2412                           
  2413                           ;user.c: 40: TRISA2 = 0;
  2414  000B54  9492               	bcf	3986,2,c	;volatile
  2415                           
  2416                           ;user.c: 41: TRISA5 = 0;
  2417  000B56  9A92               	bcf	3986,5,c	;volatile
  2418                           
  2419                           ;user.c: 42: TRISA3 = 0;
  2420  000B58  9692               	bcf	3986,3,c	;volatile
  2421                           
  2422                           ;user.c: 46: state = 0;
  2423  000B5A  0E00               	movlw	0
  2424  000B5C  6E5B               	movwf	_state+1,c
  2425  000B5E  0E00               	movlw	0
  2426  000B60  6E5A               	movwf	_state,c
  2427                           
  2428                           ;user.c: 47: next = 0;
  2429  000B62  0E00               	movlw	0
  2430  000B64  0100               	movlb	0	; () banked
  2431  000B66  6F74               	movwf	(_next+1)& (0+255),b
  2432  000B68  0E00               	movlw	0
  2433  000B6A  6F73               	movwf	_next& (0+255),b
  2434                           
  2435                           ; BSR set to: 0
  2436  000B6C  0012               	return		;funcret
  2437  000B6E                     __end_of_InitApp:
  2438                           	opt stack 0
  2439                           tblptru	equ	0xFF8
  2440                           intcon	equ	0xFF2
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           indf2	equ	0xFDF
  2444                           fsr2h	equ	0xFDA
  2445                           fsr2l	equ	0xFD9
  2446                           status	equ	0xFD8
  2447                           
  2448 ;; *************** function _ConfigureOscillator *****************
  2449 ;; Defined at:
  2450 ;;		line 24 in file "system.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;		None
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;		None
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  1    wreg      void 
  2457 ;; Registers used:
  2458 ;;		None
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2464 ;;      Params:         0       0       0       0       0       0       0       0       0
  2465 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2467 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2468 ;;Total ram usage:        0 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    6
  2471 ;; This function calls:
  2472 ;;		Nothing
  2473 ;; This function is called by:
  2474 ;;		_main
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text17
  2479  000C04                     __ptext17:
  2480                           	opt stack 0
  2481  000C04                     _ConfigureOscillator:
  2482                           	opt stack 24
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;incstack = 0
  2486  000C04  0012               	return		;funcret
  2487  000C06                     __end_of_ConfigureOscillator:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           intcon	equ	0xFF2
  2491                           postinc0	equ	0xFEE
  2492                           wreg	equ	0xFE8
  2493                           indf2	equ	0xFDF
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _high_isr *****************
  2499 ;; Defined at:
  2500 ;;		line 30 in file "interrupts.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  code           47   37[COMRAM] unsigned char [47]
  2505 ;;  i               2   87[COMRAM] int 
  2506 ;;  final_code      2   85[COMRAM] int 
  2507 ;;  aux             1   84[COMRAM] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  1    wreg      void 
  2510 ;; Registers used:
  2511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2517 ;;      Params:         0       0       0       0       0       0       0       0       0
  2518 ;;      Locals:        52       0       0       0       0       0       0       0       0
  2519 ;;      Temps:         17       0       0       0       0       0       0       0       0
  2520 ;;      Totals:        69       0       0       0       0       0       0       0       0
  2521 ;;Total ram usage:       69 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    5
  2524 ;; This function calls:
  2525 ;;		_get_next_state
  2526 ;;		_ir_get_human_code
  2527 ;; This function is called by:
  2528 ;;		Interrupt level 2
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	intcode
  2533  000008                     __pintcode:
  2534                           	opt stack 0
  2535  000008                     _high_isr:
  2536                           	opt stack 21
  2537                           
  2538                           ;incstack = 0
  2539  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2540  00000A  ED5F  F001         	call	int_func,f	;refresh shadow registers
  2541                           tblptru	equ	0xFF8
  2542                           intcon	equ	0xFF2
  2543                           postinc0	equ	0xFEE
  2544                           wreg	equ	0xFE8
  2545                           indf2	equ	0xFDF
  2546                           fsr2h	equ	0xFDA
  2547                           fsr2l	equ	0xFD9
  2548                           status	equ	0xFD8
  2549                           
  2550                           	psect	intcode_body
  2551  0002BE                     __pintcode_body:
  2552                           	opt stack 21
  2553  0002BE                     int_func:
  2554                           	opt stack 21
  2555  0002BE  0006               	pop		; remove dummy address from shadow register refresh
  2556  0002C0  CFFA F018          	movff	pclath,??_high_isr+3
  2557  0002C4  CFFB F019          	movff	pclatu,??_high_isr+4
  2558  0002C8  CFE9 F01A          	movff	fsr0l,??_high_isr+5
  2559  0002CC  CFEA F01B          	movff	fsr0h,??_high_isr+6
  2560  0002D0  CFE1 F01C          	movff	fsr1l,??_high_isr+7
  2561  0002D4  CFE2 F01D          	movff	fsr1h,??_high_isr+8
  2562  0002D8  CFD9 F01E          	movff	fsr2l,??_high_isr+9
  2563  0002DC  CFDA F01F          	movff	fsr2h,??_high_isr+10
  2564  0002E0  CFF3 F020          	movff	prodl,??_high_isr+11
  2565  0002E4  CFF4 F021          	movff	prodh,??_high_isr+12
  2566  0002E8  CFF6 F022          	movff	tblptrl,??_high_isr+13
  2567  0002EC  CFF7 F023          	movff	tblptrh,??_high_isr+14
  2568  0002F0  CFF8 F024          	movff	tblptru,??_high_isr+15
  2569  0002F4  CFF5 F025          	movff	tablat,??_high_isr+16
  2570                           
  2571                           ;interrupts.c: 66: if (RBIF == 1)
  2572  0002F8  A0F2               	btfss	intcon,0,c	;volatile
  2573  0002FA  D074               	goto	i2l31
  2574                           
  2575                           ;interrupts.c: 67: {
  2576                           ;interrupts.c: 69: INTCONbits.GIE = 0;
  2577  0002FC  9EF2               	bcf	intcon,7,c	;volatile
  2578                           
  2579                           ;interrupts.c: 70: char aux = 0;
  2580  0002FE  0E00               	movlw	0
  2581  000300  6E55               	movwf	high_isr@aux,c
  2582                           
  2583                           ;interrupts.c: 72: int i;
  2584                           ;interrupts.c: 73: char code[47];
  2585                           ;interrupts.c: 75: _delay((unsigned long)((40.6)*(20000000L/4000.0)));
  2586  000302  0E02               	movlw	2
  2587  000304  6E16               	movwf	(??_high_isr+1)& (0+255),c
  2588  000306  0E08               	movlw	8
  2589  000308  6E15               	movwf	??_high_isr& (0+255),c
  2590  00030A  0EA0               	movlw	160
  2591  00030C                     i2u154_47:
  2592  00030C  2EE8               	decfsz	wreg,f,c
  2593  00030E  D7FE               	bra	i2u154_47
  2594  000310  2E15               	decfsz	??_high_isr& (0+255),f,c
  2595  000312  D7FC               	bra	i2u154_47
  2596  000314  2E16               	decfsz	(??_high_isr+1)& (0+255),f,c
  2597  000316  D7FA               	bra	i2u154_47
  2598                           
  2599                           ;interrupts.c: 76: for(i = 0; i < 47 ; i ++)
  2600  000318  0E00               	movlw	0
  2601  00031A  6E59               	movwf	high_isr@i+1,c
  2602  00031C  0E00               	movlw	0
  2603  00031E  6E58               	movwf	high_isr@i,c
  2604  000320                     i2l2213:
  2605  000320  BE59               	btfsc	high_isr@i+1,7,c
  2606  000322  D006               	goto	i2l2217
  2607  000324  5059               	movf	high_isr@i+1,w,c
  2608  000326  E118               	bnz	i2l2225
  2609  000328  0E2F               	movlw	47
  2610  00032A  5C58               	subwf	high_isr@i,w,c
  2611  00032C  B0D8               	btfsc	status,0,c
  2612  00032E  D014               	goto	i2l2225
  2613  000330                     i2l2217:
  2614                           
  2615                           ;interrupts.c: 77: {
  2616                           ;interrupts.c: 78: code[i] = RB5;
  2617  000330  0E26               	movlw	low high_isr@code
  2618  000332  2458               	addwf	high_isr@i,w,c
  2619  000334  6ED9               	movwf	fsr2l,c
  2620  000336  0E00               	movlw	high high_isr@code
  2621  000338  2059               	addwfc	high_isr@i+1,w,c
  2622  00033A  6EDA               	movwf	fsr2h,c
  2623  00033C  0E00               	movlw	0
  2624  00033E  BA81               	btfsc	3969,5,c	;volatile
  2625  000340  0E01               	movlw	1
  2626  000342  6EDF               	movwf	indf2,c
  2627                           
  2628                           ;interrupts.c: 79: _delay((unsigned long)((590)*(20000000L/4000000.0)));
  2629  000344  0E04               	movlw	4
  2630  000346  6E15               	movwf	??_high_isr& (0+255),c
  2631  000348  0ED4               	movlw	212
  2632  00034A                     i2u155_47:
  2633  00034A  2EE8               	decfsz	wreg,f,c
  2634  00034C  D7FE               	bra	i2u155_47
  2635  00034E  2E15               	decfsz	??_high_isr& (0+255),f,c
  2636  000350  D7FC               	bra	i2u155_47
  2637  000352  4A58               	infsnz	high_isr@i,f,c
  2638  000354  2A59               	incf	high_isr@i+1,f,c
  2639  000356  D7E4               	goto	i2l2213
  2640  000358                     i2l2225:
  2641                           
  2642                           ;interrupts.c: 80: }
  2643                           ;interrupts.c: 81: int final_code = 0;
  2644  000358  0E00               	movlw	0
  2645  00035A  6E57               	movwf	high_isr@final_code+1,c
  2646  00035C  0E00               	movlw	0
  2647  00035E  6E56               	movwf	high_isr@final_code,c
  2648                           
  2649                           ;interrupts.c: 82: for(i = 0; i<16;i++)
  2650  000360  0E00               	movlw	0
  2651  000362  6E59               	movwf	high_isr@i+1,c
  2652  000364  0E00               	movlw	0
  2653  000366  6E58               	movwf	high_isr@i,c
  2654  000368                     i2l2227:
  2655  000368  BE59               	btfsc	high_isr@i+1,7,c
  2656  00036A  D006               	goto	i2l2231
  2657  00036C  5059               	movf	high_isr@i+1,w,c
  2658  00036E  E11D               	bnz	i2l2237
  2659  000370  0E10               	movlw	16
  2660  000372  5C58               	subwf	high_isr@i,w,c
  2661  000374  B0D8               	btfsc	status,0,c
  2662  000376  D019               	goto	i2l2237
  2663  000378                     i2l2231:
  2664                           
  2665                           ;interrupts.c: 83: {
  2666                           ;interrupts.c: 84: final_code |= code[i]<<i;
  2667  000378  C058  F015         	movff	high_isr@i,??_high_isr
  2668  00037C  0E26               	movlw	low high_isr@code
  2669  00037E  2458               	addwf	high_isr@i,w,c
  2670  000380  6ED9               	movwf	fsr2l,c
  2671  000382  0E00               	movlw	high high_isr@code
  2672  000384  2059               	addwfc	high_isr@i+1,w,c
  2673  000386  6EDA               	movwf	fsr2h,c
  2674  000388  50DF               	movf	indf2,w,c
  2675  00038A  6E16               	movwf	(??_high_isr+1)& (0+255),c
  2676  00038C  6A17               	clrf	(??_high_isr+2)& (0+255),c
  2677  00038E  2A15               	incf	??_high_isr,f,c
  2678  000390  D003               	goto	i2u131_44
  2679  000392                     i2u131_45:
  2680  000392  90D8               	bcf	status,0,c
  2681  000394  3616               	rlcf	??_high_isr+1,f,c
  2682  000396  3617               	rlcf	??_high_isr+2,f,c
  2683  000398                     i2u131_44:
  2684  000398  2E15               	decfsz	??_high_isr,f,c
  2685  00039A  D7FB               	goto	i2u131_45
  2686  00039C  5016               	movf	??_high_isr+1,w,c
  2687  00039E  1256               	iorwf	high_isr@final_code,f,c
  2688  0003A0  5017               	movf	??_high_isr+2,w,c
  2689  0003A2  1257               	iorwf	high_isr@final_code+1,f,c
  2690  0003A4  4A58               	infsnz	high_isr@i,f,c
  2691  0003A6  2A59               	incf	high_isr@i+1,f,c
  2692  0003A8  D7DF               	goto	i2l2227
  2693  0003AA                     i2l2237:
  2694                           
  2695                           ;interrupts.c: 85: }
  2696                           ;interrupts.c: 90: if(final_code !=0xffff)
  2697  0003AA  2856               	incf	high_isr@final_code,w,c
  2698  0003AC  E103               	bnz	i2u133_40
  2699  0003AE  2857               	incf	high_isr@final_code+1,w,c
  2700  0003B0  B4D8               	btfsc	status,2,c
  2701  0003B2  D016               	goto	i2l2243
  2702  0003B4                     i2u133_40:
  2703                           
  2704                           ;interrupts.c: 91: {
  2705                           ;interrupts.c: 92: human_code = ir_get_human_code(final_code);
  2706  0003B4  C056  F001         	movff	high_isr@final_code,ir_get_human_code@code
  2707  0003B8  C057  F002         	movff	high_isr@final_code+1,ir_get_human_code@code+1
  2708  0003BC  EC10  F002         	call	_ir_get_human_code	;wreg free
  2709  0003C0  0100               	movlb	0	; () banked
  2710  0003C2  6F75               	movwf	_human_code& (0+255),b
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;interrupts.c: 93: next = get_next_state(state,final_code);
  2714  0003C4  C05A  F00E         	movff	_state,get_next_state@state
  2715  0003C8  C05B  F00F         	movff	_state+1,get_next_state@state+1
  2716  0003CC  C056  F010         	movff	high_isr@final_code,get_next_state@code
  2717  0003D0  C057  F011         	movff	high_isr@final_code+1,get_next_state@code+1
  2718  0003D4  ECB1  F002         	call	_get_next_state	;wreg free
  2719  0003D8  C00E  F073         	movff	?_get_next_state,_next
  2720  0003DC  C00F  F074         	movff	?_get_next_state+1,_next+1
  2721  0003E0                     i2l2243:
  2722                           
  2723                           ;interrupts.c: 94: }
  2724                           ;interrupts.c: 96: RBIF = 0;
  2725  0003E0  90F2               	bcf	intcon,0,c	;volatile
  2726                           
  2727                           ;interrupts.c: 97: INTCONbits.GIE = 1;
  2728  0003E2  8EF2               	bsf	intcon,7,c	;volatile
  2729  0003E4                     i2l31:
  2730  0003E4  C025  FFF5         	movff	??_high_isr+16,tablat
  2731  0003E8  C024  FFF8         	movff	??_high_isr+15,tblptru
  2732  0003EC  C023  FFF7         	movff	??_high_isr+14,tblptrh
  2733  0003F0  C022  FFF6         	movff	??_high_isr+13,tblptrl
  2734  0003F4  C021  FFF4         	movff	??_high_isr+12,prodh
  2735  0003F8  C020  FFF3         	movff	??_high_isr+11,prodl
  2736  0003FC  C01F  FFDA         	movff	??_high_isr+10,fsr2h
  2737  000400  C01E  FFD9         	movff	??_high_isr+9,fsr2l
  2738  000404  C01D  FFE2         	movff	??_high_isr+8,fsr1h
  2739  000408  C01C  FFE1         	movff	??_high_isr+7,fsr1l
  2740  00040C  C01B  FFEA         	movff	??_high_isr+6,fsr0h
  2741  000410  C01A  FFE9         	movff	??_high_isr+5,fsr0l
  2742  000414  C019  FFFB         	movff	??_high_isr+4,pclatu
  2743  000418  C018  FFFA         	movff	??_high_isr+3,pclath
  2744  00041C  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2745  00041E  0011               	retfie		f
  2746  000420                     __end_of_high_isr:
  2747                           	opt stack 0
  2748                           pclatu	equ	0xFFB
  2749                           pclath	equ	0xFFA
  2750                           tblptru	equ	0xFF8
  2751                           tblptrh	equ	0xFF7
  2752                           tblptrl	equ	0xFF6
  2753                           tablat	equ	0xFF5
  2754                           prodh	equ	0xFF4
  2755                           prodl	equ	0xFF3
  2756                           intcon	equ	0xFF2
  2757                           postinc0	equ	0xFEE
  2758                           fsr0h	equ	0xFEA
  2759                           fsr0l	equ	0xFE9
  2760                           wreg	equ	0xFE8
  2761                           fsr1h	equ	0xFE2
  2762                           fsr1l	equ	0xFE1
  2763                           indf2	equ	0xFDF
  2764                           fsr2h	equ	0xFDA
  2765                           fsr2l	equ	0xFD9
  2766                           status	equ	0xFD8
  2767                           
  2768 ;; *************** function _ir_get_human_code *****************
  2769 ;; Defined at:
  2770 ;;		line 332 in file "user.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  code            2    0[COMRAM] int 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  human_read_c    1    4[COMRAM] unsigned char 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      unsigned char 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2784 ;;      Params:         2       0       0       0       0       0       0       0       0
  2785 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2786 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2787 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2788 ;;Total ram usage:        5 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; This function calls:
  2791 ;;		Nothing
  2792 ;; This function is called by:
  2793 ;;		_high_isr
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text19
  2798  000420                     __ptext19:
  2799                           	opt stack 0
  2800  000420                     _ir_get_human_code:
  2801                           	opt stack 25
  2802                           
  2803                           ;user.c: 334: char human_read_code;
  2804                           ;user.c: 335: switch(code)
  2805                           
  2806                           ;incstack = 0
  2807  000420  D035               	goto	i2l2029
  2808  000422                     i2l1989:
  2809                           
  2810                           ;user.c: 338: human_read_code = 10;
  2811  000422  0E0A               	movlw	10
  2812  000424  6E05               	movwf	ir_get_human_code@human_read_code,c
  2813                           
  2814                           ;user.c: 339: break;
  2815  000426  0012               	return	
  2816  000428                     i2l1991:
  2817                           
  2818                           ;user.c: 341: human_read_code = 11;
  2819  000428  0E0B               	movlw	11
  2820  00042A  6E05               	movwf	ir_get_human_code@human_read_code,c
  2821                           
  2822                           ;user.c: 342: break;
  2823  00042C  0012               	return	
  2824  00042E                     i2l1993:
  2825                           
  2826                           ;user.c: 344: human_read_code = 12;
  2827  00042E  0E0C               	movlw	12
  2828  000430  6E05               	movwf	ir_get_human_code@human_read_code,c
  2829                           
  2830                           ;user.c: 345: break;
  2831  000432  0012               	return	
  2832  000434                     i2l1995:
  2833                           
  2834                           ;user.c: 347: human_read_code = 13;
  2835  000434  0E0D               	movlw	13
  2836  000436  6E05               	movwf	ir_get_human_code@human_read_code,c
  2837                           
  2838                           ;user.c: 348: break;
  2839  000438  0012               	return	
  2840  00043A                     i2l1997:
  2841                           
  2842                           ;user.c: 350: human_read_code = 14;
  2843  00043A  0E0E               	movlw	14
  2844  00043C  6E05               	movwf	ir_get_human_code@human_read_code,c
  2845                           
  2846                           ;user.c: 351: break;
  2847  00043E  0012               	return	
  2848  000440                     i2l1999:
  2849                           
  2850                           ;user.c: 353: human_read_code = 1;
  2851  000440  0E01               	movlw	1
  2852  000442  6E05               	movwf	ir_get_human_code@human_read_code,c
  2853                           
  2854                           ;user.c: 354: break;
  2855  000444  0012               	return	
  2856  000446                     i2l2001:
  2857                           
  2858                           ;user.c: 356: human_read_code = 2;
  2859  000446  0E02               	movlw	2
  2860  000448  6E05               	movwf	ir_get_human_code@human_read_code,c
  2861                           
  2862                           ;user.c: 357: break;
  2863  00044A  0012               	return	
  2864  00044C                     i2l2003:
  2865                           
  2866                           ;user.c: 359: human_read_code = 3;
  2867  00044C  0E03               	movlw	3
  2868  00044E  6E05               	movwf	ir_get_human_code@human_read_code,c
  2869                           
  2870                           ;user.c: 360: break;
  2871  000450  0012               	return	
  2872  000452                     i2l2005:
  2873                           
  2874                           ;user.c: 362: human_read_code = 4;
  2875  000452  0E04               	movlw	4
  2876  000454  6E05               	movwf	ir_get_human_code@human_read_code,c
  2877                           
  2878                           ;user.c: 363: break;
  2879  000456  0012               	return	
  2880  000458                     i2l2007:
  2881                           
  2882                           ;user.c: 365: human_read_code = 5;
  2883  000458  0E05               	movlw	5
  2884  00045A  6E05               	movwf	ir_get_human_code@human_read_code,c
  2885                           
  2886                           ;user.c: 366: break;
  2887  00045C  0012               	return	
  2888  00045E                     i2l2009:
  2889                           
  2890                           ;user.c: 368: human_read_code = 6;
  2891  00045E  0E06               	movlw	6
  2892  000460  6E05               	movwf	ir_get_human_code@human_read_code,c
  2893                           
  2894                           ;user.c: 369: break;
  2895  000462  0012               	return	
  2896  000464                     i2l2011:
  2897                           
  2898                           ;user.c: 371: human_read_code = 7;
  2899  000464  0E07               	movlw	7
  2900  000466  6E05               	movwf	ir_get_human_code@human_read_code,c
  2901                           
  2902                           ;user.c: 372: break;
  2903  000468  0012               	return	
  2904  00046A                     i2l2013:
  2905                           
  2906                           ;user.c: 374: human_read_code = 8;
  2907  00046A  0E08               	movlw	8
  2908  00046C  6E05               	movwf	ir_get_human_code@human_read_code,c
  2909                           
  2910                           ;user.c: 375: break;
  2911  00046E  0012               	return	
  2912  000470                     i2l2015:
  2913                           
  2914                           ;user.c: 377: human_read_code = 9;
  2915  000470  0E09               	movlw	9
  2916  000472  6E05               	movwf	ir_get_human_code@human_read_code,c
  2917                           
  2918                           ;user.c: 378: break;
  2919  000474  0012               	return	
  2920  000476                     i2l2017:
  2921                           
  2922                           ;user.c: 380: human_read_code = 0;
  2923  000476  0E00               	movlw	0
  2924  000478  6E05               	movwf	ir_get_human_code@human_read_code,c
  2925                           
  2926                           ;user.c: 381: break;
  2927  00047A  0012               	return	
  2928  00047C                     i2l2019:
  2929                           
  2930                           ;user.c: 383: human_read_code = 15;
  2931  00047C  0E0F               	movlw	15
  2932  00047E  6E05               	movwf	ir_get_human_code@human_read_code,c
  2933                           
  2934                           ;user.c: 384: break;
  2935  000480  0012               	return	
  2936  000482                     i2l2021:
  2937                           
  2938                           ;user.c: 386: human_read_code = 16;
  2939  000482  0E10               	movlw	16
  2940  000484  6E05               	movwf	ir_get_human_code@human_read_code,c
  2941                           
  2942                           ;user.c: 387: break;
  2943  000486  0012               	return	
  2944  000488                     i2l2023:
  2945                           
  2946                           ;user.c: 389: return -1;
  2947  000488  0EFF               	movlw	255
  2948                           
  2949                           ;user.c: 390: }
  2950  00048A  0012               	return	
  2951  00048C                     i2l2029:
  2952  00048C  C001  F003         	movff	ir_get_human_code@code,??_ir_get_human_code
  2953  000490  C002  F004         	movff	ir_get_human_code@code+1,??_ir_get_human_code+1
  2954                           
  2955                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 10 sub-s
      +                          witches
  2956                           ; Switch size 1, requested type "space"
  2957                           ; Number of cases is 10, Range of values is 17 to 238
  2958                           ; switch strategies available:
  2959                           ; Name         Instructions Cycles
  2960                           ; simple_byte           31    16 (average)
  2961                           ;	Chosen strategy is simple_byte
  2962  000494  5004               	movf	??_ir_get_human_code+1,w,c
  2963  000496  0A11               	xorlw	17	; case 17
  2964  000498  B4D8               	btfsc	status,2,c
  2965  00049A  D01C               	goto	i2l2537
  2966  00049C  0A7F               	xorlw	127	; case 110
  2967  00049E  B4D8               	btfsc	status,2,c
  2968  0004A0  D01E               	goto	i2l2539
  2969  0004A2  0AC4               	xorlw	196	; case 170
  2970  0004A4  B4D8               	btfsc	status,2,c
  2971  0004A6  D023               	goto	i2l2541
  2972  0004A8  0A01               	xorlw	1	; case 171
  2973  0004AA  B4D8               	btfsc	status,2,c
  2974  0004AC  D02B               	goto	i2l2543
  2975  0004AE  0A05               	xorlw	5	; case 174
  2976  0004B0  B4D8               	btfsc	status,2,c
  2977  0004B2  D030               	goto	i2l2545
  2978  0004B4  0A14               	xorlw	20	; case 186
  2979  0004B6  B4D8               	btfsc	status,2,c
  2980  0004B8  D035               	goto	i2l2547
  2981  0004BA  0A01               	xorlw	1	; case 187
  2982  0004BC  B4D8               	btfsc	status,2,c
  2983  0004BE  D037               	goto	i2l2549
  2984  0004C0  0A51               	xorlw	81	; case 234
  2985  0004C2  B4D8               	btfsc	status,2,c
  2986  0004C4  D03C               	goto	i2l2551
  2987  0004C6  0A01               	xorlw	1	; case 235
  2988  0004C8  B4D8               	btfsc	status,2,c
  2989  0004CA  D03E               	goto	i2l2553
  2990  0004CC  0A05               	xorlw	5	; case 238
  2991  0004CE  B4D8               	btfsc	status,2,c
  2992  0004D0  D043               	goto	i2l2555
  2993  0004D2  D7DA               	goto	i2l2023
  2994  0004D4                     i2l2537:
  2995                           
  2996                           ; Switch size 1, requested type "space"
  2997                           ; Number of cases is 1, Range of values is 17 to 17
  2998                           ; switch strategies available:
  2999                           ; Name         Instructions Cycles
  3000                           ; simple_byte            4     3 (average)
  3001                           ;	Chosen strategy is simple_byte
  3002  0004D4  5003               	movf	??_ir_get_human_code,w,c
  3003  0004D6  0A11               	xorlw	17	; case 17
  3004  0004D8  B4D8               	btfsc	status,2,c
  3005  0004DA  D7B8               	goto	i2l2003
  3006  0004DC  D7D5               	goto	i2l2023
  3007  0004DE                     i2l2539:
  3008                           
  3009                           ; Switch size 1, requested type "space"
  3010                           ; Number of cases is 2, Range of values is 185 to 233
  3011                           ; switch strategies available:
  3012                           ; Name         Instructions Cycles
  3013                           ; simple_byte            7     4 (average)
  3014                           ;	Chosen strategy is simple_byte
  3015  0004DE  5003               	movf	??_ir_get_human_code,w,c
  3016  0004E0  0AB9               	xorlw	185	; case 185
  3017  0004E2  B4D8               	btfsc	status,2,c
  3018  0004E4  D7C5               	goto	i2l2015
  3019  0004E6  0A50               	xorlw	80	; case 233
  3020  0004E8  B4D8               	btfsc	status,2,c
  3021  0004EA  D7BF               	goto	i2l2013
  3022  0004EC  D7CD               	goto	i2l2023
  3023  0004EE                     i2l2541:
  3024                           
  3025                           ; Switch size 1, requested type "space"
  3026                           ; Number of cases is 3, Range of values is 186 to 238
  3027                           ; switch strategies available:
  3028                           ; Name         Instructions Cycles
  3029                           ; simple_byte           10     6 (average)
  3030                           ;	Chosen strategy is simple_byte
  3031  0004EE  5003               	movf	??_ir_get_human_code,w,c
  3032  0004F0  0ABA               	xorlw	186	; case 186
  3033  0004F2  B4D8               	btfsc	status,2,c
  3034  0004F4  D7C3               	goto	i2l2019
  3035  0004F6  0A53               	xorlw	83	; case 233
  3036  0004F8  B4D8               	btfsc	status,2,c
  3037  0004FA  D79C               	goto	i2l1995
  3038  0004FC  0A07               	xorlw	7	; case 238
  3039  0004FE  B4D8               	btfsc	status,2,c
  3040  000500  D79C               	goto	i2l1997
  3041  000502  D7C2               	goto	i2l2023
  3042  000504                     i2l2543:
  3043                           
  3044                           ; Switch size 1, requested type "space"
  3045                           ; Number of cases is 2, Range of values is 169 to 185
  3046                           ; switch strategies available:
  3047                           ; Name         Instructions Cycles
  3048                           ; simple_byte            7     4 (average)
  3049                           ;	Chosen strategy is simple_byte
  3050  000504  5003               	movf	??_ir_get_human_code,w,c
  3051  000506  0AA9               	xorlw	169	; case 169
  3052  000508  B4D8               	btfsc	status,2,c
  3053  00050A  D7AC               	goto	i2l2011
  3054  00050C  0A10               	xorlw	16	; case 185
  3055  00050E  B4D8               	btfsc	status,2,c
  3056  000510  D788               	goto	i2l1989
  3057  000512  D7BA               	goto	i2l2023
  3058  000514                     i2l2545:
  3059                           
  3060                           ; Switch size 1, requested type "space"
  3061                           ; Number of cases is 2, Range of values is 186 to 233
  3062                           ; switch strategies available:
  3063                           ; Name         Instructions Cycles
  3064                           ; simple_byte            7     4 (average)
  3065                           ;	Chosen strategy is simple_byte
  3066  000514  5003               	movf	??_ir_get_human_code,w,c
  3067  000516  0ABA               	xorlw	186	; case 186
  3068  000518  B4D8               	btfsc	status,2,c
  3069  00051A  D7B3               	goto	i2l2021
  3070  00051C  0A53               	xorlw	83	; case 233
  3071  00051E  B4D8               	btfsc	status,2,c
  3072  000520  D798               	goto	i2l2005
  3073  000522  D7B2               	goto	i2l2023
  3074  000524                     i2l2547:
  3075                           
  3076                           ; Switch size 1, requested type "space"
  3077                           ; Number of cases is 1, Range of values is 186 to 186
  3078                           ; switch strategies available:
  3079                           ; Name         Instructions Cycles
  3080                           ; simple_byte            4     3 (average)
  3081                           ;	Chosen strategy is simple_byte
  3082  000524  5003               	movf	??_ir_get_human_code,w,c
  3083  000526  0ABA               	xorlw	186	; case 186
  3084  000528  B4D8               	btfsc	status,2,c
  3085  00052A  D7A5               	goto	i2l2017
  3086  00052C  D7AD               	goto	i2l2023
  3087  00052E                     i2l2549:
  3088                           
  3089                           ; Switch size 1, requested type "space"
  3090                           ; Number of cases is 2, Range of values is 169 to 185
  3091                           ; switch strategies available:
  3092                           ; Name         Instructions Cycles
  3093                           ; simple_byte            7     4 (average)
  3094                           ;	Chosen strategy is simple_byte
  3095  00052E  5003               	movf	??_ir_get_human_code,w,c
  3096  000530  0AA9               	xorlw	169	; case 169
  3097  000532  B4D8               	btfsc	status,2,c
  3098  000534  D791               	goto	i2l2007
  3099  000536  0A10               	xorlw	16	; case 185
  3100  000538  B4D8               	btfsc	status,2,c
  3101  00053A  D791               	goto	i2l2009
  3102  00053C  D7A5               	goto	i2l2023
  3103  00053E                     i2l2551:
  3104                           
  3105                           ; Switch size 1, requested type "space"
  3106                           ; Number of cases is 1, Range of values is 169 to 169
  3107                           ; switch strategies available:
  3108                           ; Name         Instructions Cycles
  3109                           ; simple_byte            4     3 (average)
  3110                           ;	Chosen strategy is simple_byte
  3111  00053E  5003               	movf	??_ir_get_human_code,w,c
  3112  000540  0AA9               	xorlw	169	; case 169
  3113  000542  B4D8               	btfsc	status,2,c
  3114  000544  D771               	goto	i2l1991
  3115  000546  D7A0               	goto	i2l2023
  3116  000548                     i2l2553:
  3117                           
  3118                           ; Switch size 1, requested type "space"
  3119                           ; Number of cases is 2, Range of values is 173 to 186
  3120                           ; switch strategies available:
  3121                           ; Name         Instructions Cycles
  3122                           ; simple_byte            7     4 (average)
  3123                           ;	Chosen strategy is simple_byte
  3124  000548  5003               	movf	??_ir_get_human_code,w,c
  3125  00054A  0AAD               	xorlw	173	; case 173
  3126  00054C  B4D8               	btfsc	status,2,c
  3127  00054E  D76F               	goto	i2l1993
  3128  000550  0A17               	xorlw	23	; case 186
  3129  000552  B4D8               	btfsc	status,2,c
  3130  000554  D775               	goto	i2l1999
  3131  000556  D798               	goto	i2l2023
  3132  000558                     i2l2555:
  3133                           
  3134                           ; Switch size 1, requested type "space"
  3135                           ; Number of cases is 1, Range of values is 174 to 174
  3136                           ; switch strategies available:
  3137                           ; Name         Instructions Cycles
  3138                           ; simple_byte            4     3 (average)
  3139                           ;	Chosen strategy is simple_byte
  3140  000558  5003               	movf	??_ir_get_human_code,w,c
  3141  00055A  0AAE               	xorlw	174	; case 174
  3142  00055C  B4D8               	btfsc	status,2,c
  3143  00055E  D773               	goto	i2l2001
  3144  000560  D793               	goto	i2l2023
  3145  000562                     __end_of_ir_get_human_code:
  3146                           	opt stack 0
  3147                           pclatu	equ	0xFFB
  3148                           pclath	equ	0xFFA
  3149                           tblptru	equ	0xFF8
  3150                           tblptrh	equ	0xFF7
  3151                           tblptrl	equ	0xFF6
  3152                           tablat	equ	0xFF5
  3153                           prodh	equ	0xFF4
  3154                           prodl	equ	0xFF3
  3155                           intcon	equ	0xFF2
  3156                           postinc0	equ	0xFEE
  3157                           fsr0h	equ	0xFEA
  3158                           fsr0l	equ	0xFE9
  3159                           wreg	equ	0xFE8
  3160                           fsr1h	equ	0xFE2
  3161                           fsr1l	equ	0xFE1
  3162                           indf2	equ	0xFDF
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167 ;; *************** function _get_next_state *****************
  3168 ;; Defined at:
  3169 ;;		line 295 in file "user.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  state           2   13[COMRAM] int 
  3172 ;;  code            2   15[COMRAM] int 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  hour            1   19[COMRAM] unsigned char 
  3175 ;;  minutes         1   18[COMRAM] unsigned char 
  3176 ;;  seconds         1   17[COMRAM] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  2   13[COMRAM] int 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3186 ;;      Params:         4       0       0       0       0       0       0       0       0
  3187 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3189 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3190 ;;Total ram usage:        7 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    4
  3193 ;; This function calls:
  3194 ;;		_set_time
  3195 ;; This function is called by:
  3196 ;;		_high_isr
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text20
  3201  000562                     __ptext20:
  3202                           	opt stack 0
  3203  000562                     _get_next_state:
  3204                           	opt stack 21
  3205                           
  3206                           ;user.c: 297: if(state == 0 && code == 0xAABA)
  3207                           
  3208                           ;incstack = 0
  3209  000562  500E               	movf	get_next_state@state,w,c
  3210  000564  100F               	iorwf	get_next_state@state+1,w,c
  3211  000566  A4D8               	btfss	status,2,c
  3212  000568  D007               	goto	i2l2077
  3213  00056A  0EBA               	movlw	186
  3214  00056C  1810               	xorwf	get_next_state@code,w,c
  3215  00056E  E104               	bnz	i2l2077
  3216  000570  0EAA               	movlw	170
  3217  000572  1811               	xorwf	get_next_state@code+1,w,c
  3218  000574  B4D8               	btfsc	status,2,c
  3219  000576  D03E               	goto	i2l2099
  3220  000578                     i2l2077:
  3221                           
  3222                           ;user.c: 299: else if(state == 1 && code == 0xAAEE)
  3223  000578  040E               	decf	get_next_state@state,w,c
  3224  00057A  100F               	iorwf	get_next_state@state+1,w,c
  3225  00057C  A4D8               	btfss	status,2,c
  3226  00057E  D00C               	goto	i2l2083
  3227  000580  0EEE               	movlw	238
  3228  000582  1810               	xorwf	get_next_state@code,w,c
  3229  000584  E109               	bnz	i2l2083
  3230  000586  0EAA               	movlw	170
  3231  000588  1811               	xorwf	get_next_state@code+1,w,c
  3232  00058A  A4D8               	btfss	status,2,c
  3233  00058C  D005               	goto	i2l2083
  3234                           
  3235                           ;user.c: 300: next = 2;
  3236  00058E  0E00               	movlw	0
  3237  000590  0100               	movlb	0	; () banked
  3238  000592  6F74               	movwf	(_next+1)& (0+255),b
  3239  000594  0E02               	movlw	2
  3240  000596  D032               	goto	L7
  3241  000598                     i2l2083:
  3242                           
  3243                           ;user.c: 301: else if(state == 2 && code == 0xAAEE)
  3244  000598  0E02               	movlw	2
  3245  00059A  180E               	xorwf	get_next_state@state,w,c
  3246  00059C  100F               	iorwf	get_next_state@state+1,w,c
  3247  00059E  A4D8               	btfss	status,2,c
  3248  0005A0  D00C               	goto	i2l2089
  3249  0005A2  0EEE               	movlw	238
  3250  0005A4  1810               	xorwf	get_next_state@code,w,c
  3251  0005A6  E109               	bnz	i2l2089
  3252  0005A8  0EAA               	movlw	170
  3253  0005AA  1811               	xorwf	get_next_state@code+1,w,c
  3254  0005AC  A4D8               	btfss	status,2,c
  3255  0005AE  D005               	goto	i2l2089
  3256                           
  3257                           ;user.c: 302: next = 3;
  3258  0005B0  0E00               	movlw	0
  3259  0005B2  0100               	movlb	0	; () banked
  3260  0005B4  6F74               	movwf	(_next+1)& (0+255),b
  3261  0005B6  0E03               	movlw	3
  3262  0005B8  D021               	goto	L7
  3263  0005BA                     i2l2089:
  3264                           
  3265                           ;user.c: 303: else if(state == 3 && code == 0xAAEE)
  3266  0005BA  0E03               	movlw	3
  3267  0005BC  180E               	xorwf	get_next_state@state,w,c
  3268  0005BE  100F               	iorwf	get_next_state@state+1,w,c
  3269  0005C0  A4D8               	btfss	status,2,c
  3270  0005C2  D00C               	goto	i2l2095
  3271  0005C4  0EEE               	movlw	238
  3272  0005C6  1810               	xorwf	get_next_state@code,w,c
  3273  0005C8  E109               	bnz	i2l2095
  3274  0005CA  0EAA               	movlw	170
  3275  0005CC  1811               	xorwf	get_next_state@code+1,w,c
  3276  0005CE  A4D8               	btfss	status,2,c
  3277  0005D0  D005               	goto	i2l2095
  3278                           
  3279                           ;user.c: 304: next = 4;
  3280  0005D2  0E00               	movlw	0
  3281  0005D4  0100               	movlb	0	; () banked
  3282  0005D6  6F74               	movwf	(_next+1)& (0+255),b
  3283  0005D8  0E04               	movlw	4
  3284  0005DA  D010               	goto	L7
  3285  0005DC                     i2l2095:
  3286                           
  3287                           ;user.c: 305: else if(state == 4 && code == 0xAAEE)
  3288  0005DC  0E04               	movlw	4
  3289  0005DE  180E               	xorwf	get_next_state@state,w,c
  3290  0005E0  100F               	iorwf	get_next_state@state+1,w,c
  3291  0005E2  A4D8               	btfss	status,2,c
  3292  0005E4  D00D               	goto	i2l2101
  3293  0005E6  0EEE               	movlw	238
  3294  0005E8  1810               	xorwf	get_next_state@code,w,c
  3295  0005EA  E10A               	bnz	i2l2101
  3296  0005EC  0EAA               	movlw	170
  3297  0005EE  1811               	xorwf	get_next_state@code+1,w,c
  3298  0005F0  A4D8               	btfss	status,2,c
  3299  0005F2  D006               	goto	i2l2101
  3300  0005F4                     i2l2099:
  3301                           
  3302                           ;user.c: 306: next = 1;
  3303  0005F4  0E00               	movlw	0
  3304  0005F6  0100               	movlb	0	; () banked
  3305  0005F8  6F74               	movwf	(_next+1)& (0+255),b
  3306  0005FA  0E01               	movlw	1
  3307  0005FC                     L7:
  3308  0005FC  6F73               	movwf	_next& (0+255),b
  3309  0005FE  D036               	goto	i2l254
  3310  000600                     i2l2101:
  3311                           
  3312                           ;user.c: 307: else if((state == 1 || state == 2 || state == 3 || state == 4) && code == 
      +                          0xAEBA)
  3313  000600  040E               	decf	get_next_state@state,w,c
  3314  000602  100F               	iorwf	get_next_state@state+1,w,c
  3315  000604  B4D8               	btfsc	status,2,c
  3316  000606  D00F               	goto	i2l2109
  3317  000608  0E02               	movlw	2
  3318  00060A  180E               	xorwf	get_next_state@state,w,c
  3319  00060C  100F               	iorwf	get_next_state@state+1,w,c
  3320  00060E  B4D8               	btfsc	status,2,c
  3321  000610  D00A               	goto	i2l2109
  3322  000612  0E03               	movlw	3
  3323  000614  180E               	xorwf	get_next_state@state,w,c
  3324  000616  100F               	iorwf	get_next_state@state+1,w,c
  3325  000618  B4D8               	btfsc	status,2,c
  3326  00061A  D005               	goto	i2l2109
  3327  00061C  0E04               	movlw	4
  3328  00061E  180E               	xorwf	get_next_state@state,w,c
  3329  000620  100F               	iorwf	get_next_state@state+1,w,c
  3330  000622  A4D8               	btfss	status,2,c
  3331  000624  D023               	goto	i2l254
  3332  000626                     i2l2109:
  3333  000626  0EBA               	movlw	186
  3334  000628  1810               	xorwf	get_next_state@code,w,c
  3335  00062A  E120               	bnz	i2l254
  3336  00062C  0EAE               	movlw	174
  3337  00062E  1811               	xorwf	get_next_state@code+1,w,c
  3338  000630  A4D8               	btfss	status,2,c
  3339  000632  D01C               	goto	i2l254
  3340                           
  3341                           ;user.c: 308: {
  3342                           ;user.c: 309: next = 0;
  3343  000634  0E00               	movlw	0
  3344  000636  0100               	movlb	0	; () banked
  3345  000638  6F74               	movwf	(_next+1)& (0+255),b
  3346  00063A  0E00               	movlw	0
  3347  00063C  6F73               	movwf	_next& (0+255),b
  3348                           
  3349                           ;user.c: 310: char seconds = 0;
  3350  00063E  0E00               	movlw	0
  3351  000640  6E12               	movwf	get_next_state@seconds,c
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;user.c: 311: char minutes = aux1[0] + aux1[1]*10;
  3355  000642  0100               	movlb	0	; () banked
  3356  000644  5177               	movf	(_aux1+1)& (0+255),w,b
  3357  000646  0D0A               	mullw	10
  3358  000648  50F3               	movf	prodl,w,c
  3359  00064A  0100               	movlb	0	; () banked
  3360  00064C  2576               	addwf	_aux1& (0+255),w,b
  3361  00064E  6E13               	movwf	get_next_state@minutes,c
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;user.c: 312: char hour = aux1[2] + aux1[3]*10;
  3365  000650  0100               	movlb	0	; () banked
  3366  000652  5179               	movf	(_aux1+3)& (0+255),w,b
  3367  000654  0D0A               	mullw	10
  3368  000656  50F3               	movf	prodl,w,c
  3369  000658  0100               	movlb	0	; () banked
  3370  00065A  2578               	addwf	(_aux1+2)& (0+255),w,b
  3371  00065C  6E14               	movwf	get_next_state@hour,c
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;user.c: 313: set_time(seconds,minutes,hour);
  3375  00065E  C013  F008         	movff	get_next_state@minutes,set_time@minutes
  3376  000662  C014  F009         	movff	get_next_state@hour,set_time@hour
  3377  000666  5012               	movf	get_next_state@seconds,w,c
  3378  000668  EC82  F005         	call	_set_time
  3379  00066C                     i2l254:
  3380                           
  3381                           ;user.c: 318: return next;
  3382  00066C  C073  F00E         	movff	_next,?_get_next_state
  3383  000670  C074  F00F         	movff	_next+1,?_get_next_state+1
  3384  000674  0012               	return		;funcret
  3385  000676                     __end_of_get_next_state:
  3386                           	opt stack 0
  3387                           pclatu	equ	0xFFB
  3388                           pclath	equ	0xFFA
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           prodh	equ	0xFF4
  3394                           prodl	equ	0xFF3
  3395                           intcon	equ	0xFF2
  3396                           postinc0	equ	0xFEE
  3397                           fsr0h	equ	0xFEA
  3398                           fsr0l	equ	0xFE9
  3399                           wreg	equ	0xFE8
  3400                           fsr1h	equ	0xFE2
  3401                           fsr1l	equ	0xFE1
  3402                           indf2	equ	0xFDF
  3403                           fsr2h	equ	0xFDA
  3404                           fsr2l	equ	0xFD9
  3405                           status	equ	0xFD8
  3406                           
  3407 ;; *************** function _set_time *****************
  3408 ;; Defined at:
  3409 ;;		line 186 in file "user.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  seconds         1    wreg     unsigned char 
  3412 ;;  minutes         1    7[COMRAM] unsigned char 
  3413 ;;  hour            1    8[COMRAM] unsigned char 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  seconds         1    9[COMRAM] unsigned char 
  3416 ;;  hour_reg        1   12[COMRAM] unsigned char 
  3417 ;;  min_reg         1   11[COMRAM] unsigned char 
  3418 ;;  sec_reg         1   10[COMRAM] unsigned char 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3428 ;;      Params:         2       0       0       0       0       0       0       0       0
  3429 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3431 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3432 ;;Total ram usage:        6 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    3
  3435 ;; This function calls:
  3436 ;;		_byte_write
  3437 ;;		_get_hour_reg
  3438 ;;		_get_seconds_reg
  3439 ;; This function is called by:
  3440 ;;		_get_next_state
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text21
  3445  000B04                     __ptext21:
  3446                           	opt stack 0
  3447  000B04                     _set_time:
  3448                           	opt stack 21
  3449                           
  3450                           ;incstack = 0
  3451                           ;set_time@seconds stored from wreg
  3452  000B04  6E0A               	movwf	set_time@seconds,c
  3453                           
  3454                           ;user.c: 189: char sec_reg = get_seconds_reg(seconds);
  3455  000B06  500A               	movf	set_time@seconds,w,c
  3456  000B08  EC0C  F005         	call	_get_seconds_reg
  3457  000B0C  6E0B               	movwf	set_time@sec_reg,c
  3458                           
  3459                           ;user.c: 190: char min_reg = get_seconds_reg(minutes);
  3460  000B0E  5008               	movf	set_time@minutes,w,c
  3461  000B10  EC0C  F005         	call	_get_seconds_reg
  3462  000B14  6E0C               	movwf	set_time@min_reg,c
  3463                           
  3464                           ;user.c: 191: char hour_reg = get_hour_reg(hour);
  3465  000B16  5009               	movf	set_time@hour,w,c
  3466  000B18  ECB7  F005         	call	_get_hour_reg
  3467  000B1C  6E0D               	movwf	set_time@hour_reg,c
  3468                           
  3469                           ;user.c: 193: byte_write(0x80,sec_reg);
  3470  000B1E  C00B  F006         	movff	set_time@sec_reg,byte_write@value
  3471  000B22  0E80               	movlw	128
  3472  000B24  ECDA  F005         	call	_byte_write
  3473                           
  3474                           ;user.c: 194: byte_write(0x82,min_reg);
  3475  000B28  C00C  F006         	movff	set_time@min_reg,byte_write@value
  3476  000B2C  0E82               	movlw	130
  3477  000B2E  ECDA  F005         	call	_byte_write
  3478                           
  3479                           ;user.c: 195: byte_write(0x84,hour_reg);
  3480  000B32  C00D  F006         	movff	set_time@hour_reg,byte_write@value
  3481  000B36  0E84               	movlw	132
  3482  000B38  ECDA  F005         	call	_byte_write
  3483  000B3C  0012               	return		;funcret
  3484  000B3E                     __end_of_set_time:
  3485                           	opt stack 0
  3486                           pclatu	equ	0xFFB
  3487                           pclath	equ	0xFFA
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           postinc0	equ	0xFEE
  3496                           fsr0h	equ	0xFEA
  3497                           fsr0l	equ	0xFE9
  3498                           wreg	equ	0xFE8
  3499                           fsr1h	equ	0xFE2
  3500                           fsr1l	equ	0xFE1
  3501                           indf2	equ	0xFDF
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _get_seconds_reg *****************
  3507 ;; Defined at:
  3508 ;;		line 216 in file "user.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  seconds         1    wreg     unsigned char 
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;  seconds         1    1[COMRAM] unsigned char 
  3513 ;;  res             1    0[COMRAM] unsigned char 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      unsigned char 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3523 ;;      Params:         0       0       0       0       0       0       0       0       0
  3524 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3526 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3527 ;;Total ram usage:        2 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_set_time
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text22
  3537  000A18                     __ptext22:
  3538                           	opt stack 0
  3539  000A18                     _get_seconds_reg:
  3540                           	opt stack 23
  3541                           
  3542                           ;incstack = 0
  3543                           ;get_seconds_reg@seconds stored from wreg
  3544  000A18  6E02               	movwf	get_seconds_reg@seconds,c
  3545                           
  3546                           ;user.c: 218: char res = 0;
  3547  000A1A  0E00               	movlw	0
  3548  000A1C  6E01               	movwf	get_seconds_reg@res,c
  3549                           
  3550                           ;user.c: 219: if(seconds<10)
  3551  000A1E  0E0A               	movlw	10
  3552  000A20  6002               	cpfslt	get_seconds_reg@seconds,c
  3553  000A22  D003               	goto	i2l1813
  3554                           
  3555                           ;user.c: 220: {
  3556                           ;user.c: 221: res = seconds;
  3557  000A24  C002  F001         	movff	get_seconds_reg@seconds,get_seconds_reg@res
  3558                           
  3559                           ;user.c: 222: }
  3560  000A28  D020               	goto	i2l1831
  3561  000A2A                     i2l1813:
  3562                           
  3563                           ;user.c: 223: else if(seconds <20)
  3564  000A2A  0E14               	movlw	20
  3565  000A2C  6002               	cpfslt	get_seconds_reg@seconds,c
  3566  000A2E  D004               	goto	i2l1817
  3567                           
  3568                           ;user.c: 224: {
  3569                           ;user.c: 225: res = 1<<4 | (seconds - 10);
  3570  000A30  5002               	movf	get_seconds_reg@seconds,w,c
  3571  000A32  0FF6               	addlw	246
  3572  000A34  0910               	iorlw	16
  3573  000A36  D018               	goto	L11
  3574  000A38                     i2l1817:
  3575                           
  3576                           ;user.c: 227: else if(seconds <30)
  3577  000A38  0E1E               	movlw	30
  3578  000A3A  6002               	cpfslt	get_seconds_reg@seconds,c
  3579  000A3C  D004               	goto	i2l1821
  3580                           
  3581                           ;user.c: 228: {
  3582                           ;user.c: 229: res = 2<<4 | (seconds -20);
  3583  000A3E  5002               	movf	get_seconds_reg@seconds,w,c
  3584  000A40  0FEC               	addlw	236
  3585  000A42  0920               	iorlw	32
  3586  000A44  D011               	goto	L11
  3587  000A46                     i2l1821:
  3588                           
  3589                           ;user.c: 231: else if(seconds <40)
  3590  000A46  0E28               	movlw	40
  3591  000A48  6002               	cpfslt	get_seconds_reg@seconds,c
  3592  000A4A  D004               	goto	i2l1825
  3593                           
  3594                           ;user.c: 232: {
  3595                           ;user.c: 233: res = 3<<4 | (seconds - 30);
  3596  000A4C  5002               	movf	get_seconds_reg@seconds,w,c
  3597  000A4E  0FE2               	addlw	226
  3598  000A50  0930               	iorlw	48
  3599  000A52  D00A               	goto	L11
  3600  000A54                     i2l1825:
  3601                           
  3602                           ;user.c: 235: else if(seconds <50)
  3603  000A54  0E32               	movlw	50
  3604  000A56  6002               	cpfslt	get_seconds_reg@seconds,c
  3605  000A58  D004               	goto	i2l1829
  3606                           
  3607                           ;user.c: 236: {
  3608                           ;user.c: 237: res = 4<<4 | (seconds - 40);
  3609  000A5A  5002               	movf	get_seconds_reg@seconds,w,c
  3610  000A5C  0FD8               	addlw	216
  3611  000A5E  0940               	iorlw	64
  3612  000A60  D003               	goto	L11
  3613  000A62                     i2l1829:
  3614                           
  3615                           ;user.c: 239: else
  3616                           ;user.c: 240: {
  3617                           ;user.c: 241: res = 5<<4 | (seconds -50);
  3618  000A62  5002               	movf	get_seconds_reg@seconds,w,c
  3619  000A64  0FCE               	addlw	206
  3620  000A66  0950               	iorlw	80
  3621  000A68                     L11:
  3622  000A68  6E01               	movwf	get_seconds_reg@res,c
  3623  000A6A                     i2l1831:
  3624                           
  3625                           ;user.c: 242: }
  3626                           ;user.c: 244: return res;
  3627  000A6A  5001               	movf	get_seconds_reg@res,w,c
  3628  000A6C  0012               	return	
  3629  000A6E                     __end_of_get_seconds_reg:
  3630                           	opt stack 0
  3631                           pclatu	equ	0xFFB
  3632                           pclath	equ	0xFFA
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           prodh	equ	0xFF4
  3638                           prodl	equ	0xFF3
  3639                           intcon	equ	0xFF2
  3640                           postinc0	equ	0xFEE
  3641                           fsr0h	equ	0xFEA
  3642                           fsr0l	equ	0xFE9
  3643                           wreg	equ	0xFE8
  3644                           fsr1h	equ	0xFE2
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           fsr2h	equ	0xFDA
  3648                           fsr2l	equ	0xFD9
  3649                           status	equ	0xFD8
  3650                           
  3651 ;; *************** function _get_hour_reg *****************
  3652 ;; Defined at:
  3653 ;;		line 246 in file "user.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  hour            1    wreg     unsigned char 
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;  hour            1    1[COMRAM] unsigned char 
  3658 ;;  res             1    0[COMRAM] unsigned char 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      unsigned char 
  3661 ;; Registers used:
  3662 ;;		wreg, status,2, status,0
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3668 ;;      Params:         0       0       0       0       0       0       0       0       0
  3669 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3671 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3672 ;;Total ram usage:        2 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; This function calls:
  3675 ;;		Nothing
  3676 ;; This function is called by:
  3677 ;;		_set_time
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text23
  3682  000B6E                     __ptext23:
  3683                           	opt stack 0
  3684  000B6E                     _get_hour_reg:
  3685                           	opt stack 23
  3686                           
  3687                           ;incstack = 0
  3688                           ;get_hour_reg@hour stored from wreg
  3689  000B6E  6E02               	movwf	get_hour_reg@hour,c
  3690                           
  3691                           ;user.c: 248: char res = 0;
  3692  000B70  0E00               	movlw	0
  3693  000B72  6E01               	movwf	get_hour_reg@res,c
  3694                           
  3695                           ;user.c: 249: if(hour < 10)
  3696  000B74  0E0A               	movlw	10
  3697  000B76  6002               	cpfslt	get_hour_reg@hour,c
  3698  000B78  D003               	goto	i2l1841
  3699                           
  3700                           ;user.c: 250: {
  3701                           ;user.c: 251: res = hour;
  3702  000B7A  C002  F001         	movff	get_hour_reg@hour,get_hour_reg@res
  3703                           
  3704                           ;user.c: 252: }
  3705  000B7E  D00B               	goto	i2l1847
  3706  000B80                     i2l1841:
  3707                           
  3708                           ;user.c: 253: else if(hour < 20)
  3709  000B80  0E14               	movlw	20
  3710  000B82  6002               	cpfslt	get_hour_reg@hour,c
  3711  000B84  D004               	goto	i2l1845
  3712                           
  3713                           ;user.c: 254: {
  3714                           ;user.c: 255: res = 1<<4 | (hour -10);
  3715  000B86  5002               	movf	get_hour_reg@hour,w,c
  3716  000B88  0FF6               	addlw	246
  3717  000B8A  0910               	iorlw	16
  3718  000B8C  D003               	goto	L12
  3719  000B8E                     i2l1845:
  3720                           
  3721                           ;user.c: 257: else
  3722                           ;user.c: 258: {
  3723                           ;user.c: 259: res = 2<<4 | (hour-20);
  3724  000B8E  5002               	movf	get_hour_reg@hour,w,c
  3725  000B90  0FEC               	addlw	236
  3726  000B92  0920               	iorlw	32
  3727  000B94                     L12:
  3728  000B94  6E01               	movwf	get_hour_reg@res,c
  3729  000B96                     i2l1847:
  3730                           
  3731                           ;user.c: 260: }
  3732                           ;user.c: 262: return res;
  3733  000B96  5001               	movf	get_hour_reg@res,w,c
  3734  000B98  0012               	return	
  3735  000B9A                     __end_of_get_hour_reg:
  3736                           	opt stack 0
  3737                           pclatu	equ	0xFFB
  3738                           pclath	equ	0xFFA
  3739                           tblptru	equ	0xFF8
  3740                           tblptrh	equ	0xFF7
  3741                           tblptrl	equ	0xFF6
  3742                           tablat	equ	0xFF5
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           intcon	equ	0xFF2
  3746                           postinc0	equ	0xFEE
  3747                           fsr0h	equ	0xFEA
  3748                           fsr0l	equ	0xFE9
  3749                           wreg	equ	0xFE8
  3750                           fsr1h	equ	0xFE2
  3751                           fsr1l	equ	0xFE1
  3752                           indf2	equ	0xFDF
  3753                           fsr2h	equ	0xFDA
  3754                           fsr2l	equ	0xFD9
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function _byte_write *****************
  3758 ;; Defined at:
  3759 ;;		line 175 in file "user.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;  address         1    wreg     unsigned char 
  3762 ;;  value           1    5[COMRAM] unsigned char 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  address         1    6[COMRAM] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3774 ;;      Params:         1       0       0       0       0       0       0       0       0
  3775 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3777 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    2
  3781 ;; This function calls:
  3782 ;;		i2_ce_disable
  3783 ;;		i2_ce_enable
  3784 ;;		i2_send_command
  3785 ;; This function is called by:
  3786 ;;		_set_time
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789                           
  3790                           	psect	text24
  3791  000BB4                     __ptext24:
  3792                           	opt stack 0
  3793  000BB4                     _byte_write:
  3794                           	opt stack 21
  3795                           
  3796                           ;incstack = 0
  3797                           ;byte_write@address stored from wreg
  3798  000BB4  6E07               	movwf	byte_write@address,c
  3799                           
  3800                           ;user.c: 177: ce_enable();
  3801  000BB6  EC00  F006         	call	i2_ce_enable	;wreg free
  3802                           
  3803                           ;user.c: 180: send_command(address);
  3804  000BBA  5007               	movf	byte_write@address,w,c
  3805  000BBC  ECDF  F004         	call	i2_send_command
  3806                           
  3807                           ;user.c: 181: send_command(value);
  3808  000BC0  5006               	movf	byte_write@value,w,c
  3809  000BC2  ECDF  F004         	call	i2_send_command
  3810                           
  3811                           ;user.c: 183: ce_disable();
  3812  000BC6  ECF1  F005         	call	i2_ce_disable	;wreg free
  3813  000BCA  0012               	return		;funcret
  3814  000BCC                     __end_of_byte_write:
  3815                           	opt stack 0
  3816                           pclatu	equ	0xFFB
  3817                           pclath	equ	0xFFA
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           postinc0	equ	0xFEE
  3826                           fsr0h	equ	0xFEA
  3827                           fsr0l	equ	0xFE9
  3828                           wreg	equ	0xFE8
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           indf2	equ	0xFDF
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function i2_send_command *****************
  3837 ;; Defined at:
  3838 ;;		line 265 in file "user.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  command         1    wreg     unsigned char 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  command         1    2[COMRAM] unsigned char 
  3843 ;;  send_command    2    3[COMRAM] int 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  1    wreg      void 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3853 ;;      Params:         0       0       0       0       0       0       0       0       0
  3854 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3855 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3856 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3857 ;;Total ram usage:        5 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    1
  3860 ;; This function calls:
  3861 ;;		i2_io_as_output
  3862 ;; This function is called by:
  3863 ;;		_byte_write
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text25
  3868  0009BE                     __ptext25:
  3869                           	opt stack 0
  3870  0009BE                     i2_send_command:
  3871                           	opt stack 21
  3872                           
  3873                           ;incstack = 0
  3874                           ;i2send_command@command stored from wreg
  3875  0009BE  6E03               	movwf	i2send_command@command,c
  3876                           
  3877                           ;user.c: 267: int i;
  3878                           ;user.c: 268: io_as_output();
  3879  0009C0  ECFE  F005         	call	i2_io_as_output	;wreg free
  3880                           
  3881                           ;user.c: 269: for(i=0; i<8; i++)
  3882  0009C4  0E00               	movlw	0
  3883  0009C6  6E05               	movwf	i2send_command@i+1,c
  3884  0009C8  0E00               	movlw	0
  3885  0009CA  6E04               	movwf	i2send_command@i,c
  3886  0009CC                     i2l1755:
  3887  0009CC  BE05               	btfsc	i2send_command@i+1,7,c
  3888  0009CE  D006               	goto	i2l1759
  3889  0009D0  5005               	movf	i2send_command@i+1,w,c
  3890  0009D2  E121               	bnz	i2l241
  3891  0009D4  0E08               	movlw	8
  3892  0009D6  5C04               	subwf	i2send_command@i,w,c
  3893  0009D8  B0D8               	btfsc	status,0,c
  3894  0009DA  0012               	return	
  3895  0009DC                     i2l1759:
  3896                           
  3897                           ;user.c: 270: {
  3898                           ;user.c: 271: RA3 = command>>i & 0x01;
  3899  0009DC  C004  F001         	movff	i2send_command@i,??i2_send_command
  3900  0009E0  C003  F002         	movff	i2send_command@command,??i2_send_command+1
  3901  0009E4  2A01               	incf	??i2_send_command,f,c
  3902  0009E6  D002               	goto	i2u72_44
  3903  0009E8                     i2u72_45:
  3904  0009E8  90D8               	bcf	status,0,c
  3905  0009EA  3202               	rrcf	??i2_send_command+1,f,c
  3906  0009EC                     i2u72_44:
  3907  0009EC  2E01               	decfsz	??i2_send_command,f,c
  3908  0009EE  D7FC               	goto	i2u72_45
  3909  0009F0  3002               	rrcf	??i2_send_command+1,w,c
  3910  0009F2  A0D8               	btfss	status,0,c
  3911  0009F4  D002               	goto	i2u73_40
  3912  0009F6  8680               	bsf	3968,3,c	;volatile
  3913  0009F8  D001               	goto	i2l1761
  3914  0009FA                     i2u73_40:
  3915  0009FA  9680               	bcf	3968,3,c	;volatile
  3916  0009FC                     i2l1761:
  3917                           
  3918                           ;user.c: 272: RA2 = 1;
  3919  0009FC  8480               	bsf	3968,2,c	;volatile
  3920                           
  3921                           ;user.c: 273: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  3922  0009FE  0E10               	movlw	16
  3923  000A00                     i2u156_47:
  3924  000A00  2EE8               	decfsz	wreg,f,c
  3925  000A02  D7FE               	bra	i2u156_47
  3926  000A04  D000               	nop2	
  3927                           
  3928                           ;user.c: 274: RA2 = 0;
  3929  000A06  9480               	bcf	3968,2,c	;volatile
  3930                           
  3931                           ;user.c: 275: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  3932  000A08  0E06               	movlw	6
  3933  000A0A                     i2u157_47:
  3934  000A0A  2EE8               	decfsz	wreg,f,c
  3935  000A0C  D7FE               	bra	i2u157_47
  3936  000A0E  D000               	nop2	
  3937  000A10  4A04               	infsnz	i2send_command@i,f,c
  3938  000A12  2A05               	incf	i2send_command@i+1,f,c
  3939  000A14  D7DB               	goto	i2l1755
  3940  000A16                     i2l241:
  3941  000A16  0012               	return		;funcret
  3942  000A18                     __end_ofi2_send_command:
  3943                           	opt stack 0
  3944                           pclatu	equ	0xFFB
  3945                           pclath	equ	0xFFA
  3946                           tblptru	equ	0xFF8
  3947                           tblptrh	equ	0xFF7
  3948                           tblptrl	equ	0xFF6
  3949                           tablat	equ	0xFF5
  3950                           prodh	equ	0xFF4
  3951                           prodl	equ	0xFF3
  3952                           intcon	equ	0xFF2
  3953                           postinc0	equ	0xFEE
  3954                           fsr0h	equ	0xFEA
  3955                           fsr0l	equ	0xFE9
  3956                           wreg	equ	0xFE8
  3957                           fsr1h	equ	0xFE2
  3958                           fsr1l	equ	0xFE1
  3959                           indf2	equ	0xFDF
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function i2_io_as_output *****************
  3965 ;; Defined at:
  3966 ;;		line 285 in file "user.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;		None
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		None
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3980 ;;      Params:         0       0       0       0       0       0       0       0       0
  3981 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3983 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3984 ;;Total ram usage:        0 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; This function calls:
  3987 ;;		Nothing
  3988 ;; This function is called by:
  3989 ;;		i2_send_command
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text26
  3994  000BFC                     __ptext26:
  3995                           	opt stack 0
  3996  000BFC                     i2_io_as_output:
  3997                           	opt stack 21
  3998                           
  3999                           ;user.c: 287: TRISA3 = 0;
  4000                           
  4001                           ;incstack = 0
  4002  000BFC  9692               	bcf	3986,3,c	;volatile
  4003  000BFE  0012               	return		;funcret
  4004  000C00                     __end_ofi2_io_as_output:
  4005                           	opt stack 0
  4006                           pclatu	equ	0xFFB
  4007                           pclath	equ	0xFFA
  4008                           tblptru	equ	0xFF8
  4009                           tblptrh	equ	0xFF7
  4010                           tblptrl	equ	0xFF6
  4011                           tablat	equ	0xFF5
  4012                           prodh	equ	0xFF4
  4013                           prodl	equ	0xFF3
  4014                           intcon	equ	0xFF2
  4015                           postinc0	equ	0xFEE
  4016                           fsr0h	equ	0xFEA
  4017                           fsr0l	equ	0xFE9
  4018                           wreg	equ	0xFE8
  4019                           fsr1h	equ	0xFE2
  4020                           fsr1l	equ	0xFE1
  4021                           indf2	equ	0xFDF
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function i2_ce_enable *****************
  4027 ;; Defined at:
  4028 ;;		line 142 in file "user.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;		None
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  1    wreg      void 
  4035 ;; Registers used:
  4036 ;;		None
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4042 ;;      Params:         0       0       0       0       0       0       0       0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4045 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4046 ;;Total ram usage:        0 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_byte_write
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text27
  4056  000C00                     __ptext27:
  4057                           	opt stack 0
  4058  000C00                     i2_ce_enable:
  4059                           	opt stack 22
  4060                           
  4061                           ;user.c: 143: RA5 = 1;
  4062                           
  4063                           ;incstack = 0
  4064  000C00  8A80               	bsf	3968,5,c	;volatile
  4065  000C02  0012               	return		;funcret
  4066  000C04                     __end_ofi2_ce_enable:
  4067                           	opt stack 0
  4068                           pclatu	equ	0xFFB
  4069                           pclath	equ	0xFFA
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           postinc0	equ	0xFEE
  4078                           fsr0h	equ	0xFEA
  4079                           fsr0l	equ	0xFE9
  4080                           wreg	equ	0xFE8
  4081                           fsr1h	equ	0xFE2
  4082                           fsr1l	equ	0xFE1
  4083                           indf2	equ	0xFDF
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function i2_ce_disable *****************
  4089 ;; Defined at:
  4090 ;;		line 145 in file "user.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		None
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4107 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4108 ;;Total ram usage:        0 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_byte_write
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text28
  4118  000BE2                     __ptext28:
  4119                           	opt stack 0
  4120  000BE2                     i2_ce_disable:
  4121                           	opt stack 22
  4122                           
  4123                           ;user.c: 146: RA5 = 0;
  4124                           
  4125                           ;incstack = 0
  4126  000BE2  9A80               	bcf	3968,5,c	;volatile
  4127                           
  4128                           ;user.c: 147: RA2 = 0;
  4129  000BE4  9480               	bcf	3968,2,c	;volatile
  4130  000BE6  0012               	return		;funcret
  4131  000BE8                     __end_ofi2_ce_disable:
  4132                           	opt stack 0
  4133  0000                     pclatu	equ	0xFFB
  4134                           pclath	equ	0xFFA
  4135                           tblptru	equ	0xFF8
  4136                           tblptrh	equ	0xFF7
  4137                           tblptrl	equ	0xFF6
  4138                           tablat	equ	0xFF5
  4139                           prodh	equ	0xFF4
  4140                           prodl	equ	0xFF3
  4141                           intcon	equ	0xFF2
  4142                           postinc0	equ	0xFEE
  4143                           fsr0h	equ	0xFEA
  4144                           fsr0l	equ	0xFE9
  4145                           wreg	equ	0xFE8
  4146                           fsr1h	equ	0xFE2
  4147                           fsr1l	equ	0xFE1
  4148                           indf2	equ	0xFDF
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           pclatu	equ	0xFFB
  4153                           pclath	equ	0xFFA
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           postinc0	equ	0xFEE
  4162                           fsr0h	equ	0xFEA
  4163                           fsr0l	equ	0xFE9
  4164                           wreg	equ	0xFE8
  4165                           fsr1h	equ	0xFE2
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           fsr2h	equ	0xFDA
  4169                           fsr2l	equ	0xFD9
  4170                           status	equ	0xFD8
  4171                           
  4172                           	psect	rparam
  4173  0000                     pclatu	equ	0xFFB
  4174                           pclath	equ	0xFFA
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           postinc0	equ	0xFEE
  4183                           fsr0h	equ	0xFEA
  4184                           fsr0l	equ	0xFE9
  4185                           wreg	equ	0xFE8
  4186                           fsr1h	equ	0xFE2
  4187                           fsr1l	equ	0xFE1
  4188                           indf2	equ	0xFDF
  4189                           fsr2h	equ	0xFDA
  4190                           fsr2l	equ	0xFD9
  4191                           status	equ	0xFD8
  4192                           
  4193                           	psect	temp
  4194  00005C                     btemp:
  4195                           	opt stack 0
  4196  00005C                     	ds	1
  4197  0000                     int$flags	set	btemp
  4198                           pclatu	equ	0xFFB
  4199                           pclath	equ	0xFFA
  4200                           tblptru	equ	0xFF8
  4201                           tblptrh	equ	0xFF7
  4202                           tblptrl	equ	0xFF6
  4203                           tablat	equ	0xFF5
  4204                           prodh	equ	0xFF4
  4205                           prodl	equ	0xFF3
  4206                           intcon	equ	0xFF2
  4207                           postinc0	equ	0xFEE
  4208                           fsr0h	equ	0xFEA
  4209                           fsr0l	equ	0xFE9
  4210                           wreg	equ	0xFE8
  4211                           fsr1h	equ	0xFE2
  4212                           fsr1l	equ	0xFE1
  4213                           indf2	equ	0xFDF
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     89      91
    BANK0           160     19      28
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    get_time@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    put_nums@nums	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_get_next_state
    _get_next_state->_set_time
    _set_time->_byte_write
    _byte_write->i2_send_command

Critical Paths under _main in BANK0

    _main->_get_time
    _put_nums_individual->_put_num
    _put_nums->_put_num
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3654
                                             17 BANK0      2     2      0
                _ConfigureOscillator
                            _InitApp
                           _get_time
                  _ir_is_code_number
                       _point_toggle
                           _put_nums
                _put_nums_individual
 ---------------------------------------------------------------------------------
 (1) _put_nums_individual                                  6     1      5    2022
                                              7 BANK0      6     1      5
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (1) _put_nums                                             4     2      2     840
                                              7 BANK0      4     2      2
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (2) _put_num                                             17    17      0     348
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _get_num                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _point_toggle                                         0     0      0       0
                      _point_disable
                       _point_enable
 ---------------------------------------------------------------------------------
 (2) _point_enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _point_disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ir_is_code_number                                    1     1      0     220
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             6     4      2     572
                                             11 BANK0      6     4      2
                          _byte_read
 ---------------------------------------------------------------------------------
 (2) _byte_read                                            6     6      0     204
                                              5 BANK0      6     6      0
                         _ce_disable
                          _ce_enable
                        _io_as_input
                       _send_command
 ---------------------------------------------------------------------------------
 (3) _send_command                                         5     5      0      90
                                              0 BANK0      5     5      0
                       _io_as_output
 ---------------------------------------------------------------------------------
 (4) _io_as_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _io_as_input                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_enable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_disable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            69    69      0    1996
                                             20 COMRAM    69    69      0
                     _get_next_state
                  _ir_get_human_code
 ---------------------------------------------------------------------------------
 (6) _ir_get_human_code                                    5     3      2     115
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _get_next_state                                       7     3      4    1607
                                             13 COMRAM     7     3      4
                           _set_time
 ---------------------------------------------------------------------------------
 (7) _set_time                                             6     4      2    1056
                                              7 COMRAM     6     4      2
                         _byte_write
                       _get_hour_reg
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (8) _get_seconds_reg                                      2     2      0     271
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _get_hour_reg                                         2     2      0     136
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _byte_write                                           2     1      1     362
                                              5 COMRAM     2     1      1
                       i2_ce_disable
                        i2_ce_enable
                     i2_send_command
 ---------------------------------------------------------------------------------
 (9) i2_send_command                                       5     5      0      90
                                              0 COMRAM     5     5      0
                     i2_io_as_output
 ---------------------------------------------------------------------------------
 (10) i2_io_as_output                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _get_time
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
   _ir_is_code_number
   _point_toggle
     _point_disable
     _point_enable
   _put_nums
     _get_num
     _put_num
   _put_nums_individual
     _get_num
     _put_num

 _high_isr (ROOT)
   _get_next_state
     _set_time
       _byte_write
         i2_ce_disable
         i2_ce_enable
         i2_send_command
           i2_io_as_output
       _get_hour_reg
       _get_seconds_reg
   _ir_get_human_code

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      1C       5       17.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     59      5B       1       96.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      77      20        0.0%
DATA                 0      0      77       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun May 21 15:34:17 2017

                              l69 0150                       __CFG_BOR$ON 000000  
                 ??_point_disable 0060                       _put_num$845 0064  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_LVP$ON 000000  
                  i2_send_command 09BE                       __CFG_WDT$ON 000000  
                             l205 0812                               l144 08DE  
                             l241 094E                               l149 0B02  
                    __CFG_CPB$OFF 000000                               _RB0 007C08  
                             _RA2 007C02                               _RB1 007C09  
                             _RA3 007C03                               _RB3 007C0B  
                             _RA5 007C05                               _RB4 007C0C  
                             _RB5 007C0D                   ?_get_next_state 000E  
                    __CFG_CPD$OFF 000000                               u780 0930  
                             u925 08D0                               u774 091C  
                             u950 082C                               u926 08D2  
                             u775 0916                               u974 083C  
                             u894 08AA                               u975 0836  
                             u895 08A4                               u968 0830  
                             wreg 000FE8                      __CFG_FOSC$HS 000000  
                    ?_io_as_input 0001                       high_isr@aux 0055  
           ir_get_human_code@code 0001                  ?_get_seconds_reg 0001  
                            l2301 0220                              l2155 0AC6  
                            l2251 003E                              l2253 0048  
                            l2309 0288                              l2191 09B6  
                            l2159 0ADC                              l2263 00AA  
                            l2169 0BD6                              l2283 0148  
                            l2197 09BA                              l1901 0746  
                            l2293 01BA                              l2285 0154  
                            l2277 012A                              l2269 00C4  
                            l1921 075A                              l1913 0752  
                            l1905 074A                              l1781 08F2  
                            l1941 076E                              l1933 0766  
                            l1925 075E                              l1917 0756  
                            l1909 074E                              l1853 087A  
                            l1785 0908                              l1937 076A  
                            l1929 0762                              l1881 0732  
                            l1865 08C6                              l1857 0890  
                            l1787 0932                              l1963 07FC  
                            l1947 0772                              l1893 073E  
                            l1885 0736                              l1877 072E  
                            l1897 0742                              l1889 073A  
                            l1979 085C                       get_time@aux 0070  
                            u1407 0076                              u1417 0096  
                            u1507 0816                              u1427 00E2  
                            u1517 084E                              u1437 011C  
                            u1527 0936                              u1447 0172  
                            u1537 0940                              u1457 01AC  
                            u1467 01D8                              u1477 0212  
                            u1487 023E                              u1497 0278  
           __size_ofi2_ce_disable 0006                              _RBIF 007F90  
                            i2l31 03E4                       i2_ce_enable 0C00  
                            _aux1 0076                              _main 0012  
                            _next 0073                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 005C                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                    ??_get_hour_reg 0001  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
     __end_of_put_nums_individual 0ABC                      high_isr@code 0026  
                 __end_of_InitApp 0B6E                     ?_io_as_output 0001  
          __end_ofi2_send_command 0A18       ir_is_code_number@human_code 0060  
                   __CFG_PLLDIV$1 000000                    __CFG_CCP2MX$ON 000000  
                           ?_main 0001                      get_time@data 006B  
                           i2l241 0A16                             i2l254 066C  
                   __CFG_USBDIV$1 000000                      i2_ce_disable 0BE2  
             _ConfigureOscillator 0C04                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                   __end_of_get_num 07D8  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                           _state 005A                             pclath 000FFA  
                           tablat 000FF5                   __end_of_put_num 08E0  
                           status 000FD8              ?_ConfigureOscillator 0001  
                ??i2_io_as_output 0001                   __initialization 0B9A  
                    __end_of_main 02BE                    ??_io_as_output 0060  
                 ?i2_send_command 0001                            ??_main 0071  
                   __activetblptr 000002                            _ADCON1 000FC1  
                get_hour_reg@hour 0002                     get_time@hours 006F  
                          i2l2001 0446                            i2l2011 0464  
                          i2l2003 044C                            i2l2101 0600  
                          i2l2021 0482                            i2l2013 046A  
                          i2l2005 0452                            i2l2023 0488  
                          i2l2015 0470                            i2l2007 0458  
                          i2l2017 0476                            i2l2009 045E  
                          i2l2019 047C                            i2l2109 0626  
                          i2l2029 048C                            i2l2213 0320  
                          i2l2231 0378                            i2l2225 0358  
                          i2l2217 0330                            i2l2083 0598  
                          i2l2243 03E0                            i2l2227 0368  
                          i2l2077 0578                            i2l2237 03AA  
                          i2l2095 05DC                            i2l2089 05BA  
                          i2l2099 05F4                            i2l1821 0A46  
                          i2l1813 0A2A                            i2l2541 04EE  
                          i2l1831 0A6A                            i2l2551 053E  
                          i2l2543 0504                            i2l1761 09FC  
                          i2l1841 0B80                            i2l1825 0A54  
                          i2l1817 0A38                            i2l2553 0548  
                          i2l2545 0514                            i2l2537 04D4  
                          i2l1755 09CC                            i2l2555 0558  
                          i2l2547 0524                            i2l2539 04DE  
                          i2l1845 0B8E                            i2l1829 0A62  
                          i2l2549 052E                            i2l1759 09DC  
                          i2l1847 0B96                            i2l1991 0428  
                          i2l1993 042E                            i2l1995 0434  
                          i2l1997 043A                            i2l1989 0422  
                          i2l1999 0440                            _INTCON 000FF2  
                          _TRISA2 007C92                            _TRISB1 007C99  
                          _TRISA3 007C93                            _TRISB3 007C9B  
                          _TRISA5 007C95                            _TRISB4 007C9C  
                       ??_InitApp 0060             ??_ConfigureOscillator 0060  
                  __CFG_XINST$OFF 000000                  __end_of_high_isr 0420  
                __end_of_get_time 0728                   set_time@min_reg 000C  
                  __CFG_STVREN$ON 000000                   set_time@sec_reg 000B  
                 set_time@minutes 0008                   set_time@seconds 000A  
                          clear_0 0BA0                 _ir_get_human_code 0420  
                       ??_get_num 0060                get_seconds_reg@res 0001  
              ?_ir_get_human_code 0001                  __end_of_set_time 0B3E  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8              __end_of_get_hour_reg 0B9A  
                __end_of_put_nums 0B04                         ??_put_num 0060  
             ??_ir_get_human_code 0003              __size_of_io_as_input 0004  
                    put_nums@nums 0067                        __accesstop 0060  
         __end_of__initialization 0BA6                   __CFG_PBADEN$OFF 000000  
                   ___rparam_used 000001                __size_of_ce_enable 0004  
                  __pcstackCOMRAM 0001         __end_of_ir_get_human_code 0562  
                ??_get_next_state 0012                        _ce_disable 0BDC  
            __end_of_io_as_output 0BF4                        __pbssBANK0 0073  
                    ?i2_ce_enable 0001                        __pnvCOMRAM 005A  
              __size_of_byte_read 008E                get_next_state@code 0010  
              get_next_state@hour 0014                     ?_send_command 0001  
                         _CCP2CON 000FBA             __end_of_point_disable 0BF0  
               __end_of_ce_enable 0BFC                           i2u72_44 09EC  
                         i2u72_45 09E8                           i2u73_40 09FA  
                         _SSPCON1 000FC6                         ?_high_isr 0001  
                       ?_get_time 006B                   __CFG_VREGEN$OFF 000000  
                         _InitApp 0B3E          __size_of_get_seconds_reg 0056  
                         __Hparam 0000                  ??i2_send_command 0001  
                         __Lparam 0000                  byte_read@address 0067  
                       ?_set_time 0008                      byte_read@res 0068  
                  ??_send_command 0060        __size_of_ir_get_human_code 0142  
                       ?_put_nums 0067                        _byte_write 0BB4  
                         __pcinit 0B9A                  set_time@hour_reg 000D  
                         __ramtop 0800                           __ptext0 0012  
                         __ptext1 0A6E                           __ptext2 0ABC  
                         __ptext3 0866                           __ptext4 0728  
                         __ptext5 0BCC                           __ptext6 0BE8  
                         __ptext7 0BEC                           __ptext8 0950  
                         __ptext9 0676             __size_of_get_hour_reg 002C  
                         _get_num 0728      __size_of_put_nums_individual 004E  
               __end_of_byte_read 0866                       ?_ce_disable 0001  
                      _human_code 0075                           _put_num 0866  
                      ??_high_isr 0015                        ??_get_time 006D  
                  __pintcode_body 02BE                     ?_point_enable 0001  
            end_of_initialization 0BA6                     __Lmediumconst 0000  
                   ?_point_toggle 0001                           int_func 02BE  
                      ??_set_time 000A                      _get_hour_reg 0B6E  
                         postinc0 000FEE                        ??_put_nums 0069  
                 byte_write@value 0006             __size_of_io_as_output 0004  
ir_get_human_code@human_read_code 0005                    ??_point_enable 0060  
     __end_of_ConfigureOscillator 0C06                     send_command@i 0063  
                  ??_point_toggle 0060                        get_num@num 0060  
            __size_ofi2_ce_enable 0004               __size_of_ce_disable 0006  
              high_isr@final_code 0056                 ??_get_seconds_reg 0001  
         put_nums_individual@num0 006B           put_nums_individual@num1 006A  
         put_nums_individual@num2 0069           put_nums_individual@num3 0068  
         put_nums_individual@num4 0067           put_nums_individual@num5 006C  
                    _io_as_output 0BF0                       ?_byte_write 0006  
          get_seconds_reg@seconds 0002           __size_ofi2_io_as_output 0004  
             start_initialization 0B9A                     ??_io_as_input 0060  
            __end_of_send_command 0950             i2send_command@command 0003  
                 get_hour_reg@res 0001                        byte_read@i 0069  
                __CFG_LPT1OSC$OFF 000000                       put_num@mask 0063  
                   ?i2_ce_disable 0001                     __pcstackBANK0 0060  
                       _ce_enable 0BF8               __size_of_byte_write 0018  
               __size_of_high_isr 0418               __end_of_io_as_input 0BF8  
               __size_of_get_time 00B2               _put_nums_individual 0A6E  
                        ?_InitApp 0001                         __pintcode 0008  
            __end_of_point_enable 0BEC                 __size_of_set_time 003A  
             get_next_state@state 000E              __end_of_point_toggle 0BDC  
            ?_put_nums_individual 0067                          ?_get_num 0001  
               __size_of_put_nums 0048                    ??i2_ce_disable 0001  
                    ??_ce_disable 0060           __size_of_get_next_state 0114  
                       _byte_read 07D8             get_next_state@minutes 0013  
           get_next_state@seconds 0012                          ?_put_num 0001  
                 get_time@minutes 006E                   get_time@seconds 006D  
                      ?_ce_enable 0001            __size_of_point_disable 0004  
                        i2u131_44 0398                          i2u131_45 0392  
                        i2u133_40 03B4                          i2u154_47 030C  
                        i2u155_47 034A                          i2u156_47 0A00  
                        i2u157_47 0A0A                __end_of_ce_disable 0BE2  
                __CFG_WDTPS$32768 000000             ??_put_nums_individual 006C  
                  i2_io_as_output 0BFC                         high_isr@i 0058  
           __size_of_send_command 0070                 _ir_is_code_number 0950  
                     _io_as_input 0BF4                        ?_byte_read 0001  
              ?_ir_is_code_number 0001               send_command@command 0062  
                 _get_seconds_reg 0A18               ??_ir_is_code_number 0060  
                __size_of_InitApp 0030                          __Hrparam 0000  
                        __Lrparam 0000                        put_num@num 0062  
                    _send_command 08E0                      ??_byte_write 0007  
          __end_ofi2_io_as_output 0C00           __size_ofi2_send_command 005A  
       __end_of_ir_is_code_number 09BE                     _point_disable 0BEC  
                __size_of_get_num 00B0                          __ptext10 07D8  
                        __ptext11 08E0                          __ptext20 0562  
                        __ptext12 0BF0                          __ptext21 0B04  
                        __ptext13 0BF4                          __ptext22 0A18  
                        __ptext14 0BF8                          __ptext23 0B6E  
                        __ptext15 0BDC                          __ptext24 0BB4  
                        __ptext16 0B3E                          __ptext25 09BE  
                        __ptext17 0C04                          __ptext26 0BFC  
                        __ptext27 0C00                          __ptext19 0420  
                        __ptext28 0BE2                          _high_isr 0008  
                        _get_time 0676                  __size_of_put_num 007A  
                   ??i2_ce_enable 0001                       ??_ce_enable 0060  
                   __size_of_main 02AC                __end_of_byte_write 0BCC  
            __end_ofi2_ce_disable 0BE8      __size_of_ConfigureOscillator 0002  
           __size_of_point_enable 0004                          _set_time 0B04  
           __size_of_point_toggle 0010                          int$flags 005C  
                        _put_nums 0ABC                   ?i2_io_as_output 0001  
           __CFG_CPUDIV$OSC1_PLL2 000000                    ?_point_disable 0001  
                      _INTCONbits 000FF2                    _get_next_state 0562  
                    set_time@hour 0009           __end_of_get_seconds_reg 0A6E  
                     ??_byte_read 0065                         put_nums@i 0069  
                        intlevel2 0000                      _point_enable 0BE8  
                    _point_toggle 0BCC               __end_ofi2_ce_enable 0C04  
                 i2send_command@i 0004                 byte_write@address 0007  
                        put_num@i 0065            __end_of_get_next_state 0676  
      __size_of_ir_is_code_number 006E                     ?_get_hour_reg 0001  
