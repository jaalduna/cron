

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon May 29 01:34:05 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 1.42
    65                           ; Generated 13/04/2017 GMT
    66                           ; 
    67                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F2550 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	nvCOMRAM
   100  000032                     __pnvCOMRAM:
   101                           	opt stack 0
   102  000032                     _current_type:
   103                           	opt stack 0
   104  000032                     	ds	1
   105  000033                     _timer1_up_limit_min:
   106                           	opt stack 0
   107  000033                     	ds	1
   108  000034                     _timer1_up_limit_sec:
   109                           	opt stack 0
   110  000034                     	ds	1
   111                           
   112                           	psect	nvBANK0
   113  0000D8                     __pnvBANK0:
   114                           	opt stack 0
   115  0000D8                     _state:
   116                           	opt stack 0
   117  0000D8                     	ds	2
   118  0000                     _RA3	set	31747
   119  0000                     _RA2	set	31746
   120  0000                     _RA5	set	31749
   121  0000                     _RB1	set	31753
   122  0000                     _RB4	set	31756
   123  0000                     _RB3	set	31755
   124  0000                     _TRISA3	set	31891
   125  0000                     _TRISA5	set	31893
   126  0000                     _TRISA2	set	31890
   127  0000                     _TRISB1	set	31897
   128  0000                     _TRISB4	set	31900
   129  0000                     _TRISB3	set	31899
   130  0000                     _RB0	set	31752
   131  0000                     _RB5	set	31757
   132  0000                     _PIE1	set	3997
   133  0000                     _T1CON	set	4045
   134  0000                     _ADCON1	set	4033
   135  0000                     _SSPCON1	set	4038
   136  0000                     _CCP2CON	set	4026
   137  0000                     _TMR1IF	set	31984
   138  0000                     _T0CON	set	4053
   139  0000                     _INTCON2	set	4081
   140  0000                     _INTCON	set	4082
   141  0000                     _INTCONbits	set	4082
   142  0000                     _TMR0IF	set	32658
   143  0000                     _RBIF	set	32656
   144                           
   145                           ; #config settings
   146  0000                     
   147                           	psect	cinit
   148  0020D4                     __pcinit:
   149                           	opt stack 0
   150  0020D4                     start_initialization:
   151                           	opt stack 0
   152  0020D4                     __initialization:
   153                           	opt stack 0
   154                           
   155                           ; Clear objects allocated to BANK0 (60 bytes)
   156  0020D4  EE00  F060         	lfsr	0,__pbssBANK0
   157  0020D8  0E3C               	movlw	60
   158  0020DA                     clear_0:
   159  0020DA  6AEE               	clrf	postinc0,c
   160  0020DC  06E8               	decf	wreg,f,c
   161  0020DE  E1FD               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to COMRAM (5 bytes)
   164  0020E0  6A31               	clrf	(__pbssCOMRAM+4)& (0+255),c
   165  0020E2  6A30               	clrf	(__pbssCOMRAM+3)& (0+255),c
   166  0020E4  6A2F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   167  0020E6  6A2E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   168  0020E8  6A2D               	clrf	__pbssCOMRAM& (0+255),c
   169  0020EA                     end_of_initialization:
   170                           	opt stack 0
   171  0020EA                     __end_of__initialization:
   172                           	opt stack 0
   173  0020EA  9035               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   174  0020EC  9235               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   175  0020EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   176  0020F0  6EF8               	movwf	tblptru,c
   177  0020F2  0100               	movlb	0
   178  0020F4  EF30  F004         	goto	_main	;jump to C main() function
   179                           tblptru	equ	0xFF8
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           
   183                           	psect	bssCOMRAM
   184  00002D                     __pbssCOMRAM:
   185                           	opt stack 0
   186  00002D                     _max_program:
   187                           	opt stack 0
   188  00002D                     	ds	1
   189  00002E                     _timer1_speed_cents:
   190                           	opt stack 0
   191  00002E                     	ds	1
   192  00002F                     _timer1_down_init_sec:
   193                           	opt stack 0
   194  00002F                     	ds	1
   195  000030                     _timer1_down_init_min:
   196                           	opt stack 0
   197  000030                     	ds	1
   198  000031                     _timer1_counter_min:
   199                           	opt stack 0
   200  000031                     	ds	1
   201                           tblptru	equ	0xFF8
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           
   205                           	psect	bssBANK0
   206  000060                     __pbssBANK0:
   207                           	opt stack 0
   208  000060                     _intervals:
   209                           	opt stack 0
   210  000060                     	ds	40
   211  000088                     _next:
   212                           	opt stack 0
   213  000088                     	ds	2
   214  00008A                     _counter:
   215                           	opt stack 0
   216  00008A                     	ds	1
   217  00008B                     _current_program:
   218                           	opt stack 0
   219  00008B                     	ds	1
   220  00008C                     _timer1_counter:
   221                           	opt stack 0
   222  00008C                     	ds	1
   223  00008D                     _buzzer_status:
   224                           	opt stack 0
   225  00008D                     	ds	1
   226  00008E                     _human_code:
   227                           	opt stack 0
   228  00008E                     	ds	1
   229  00008F                     _masked_digits:
   230                           	opt stack 0
   231  00008F                     	ds	6
   232  000095                     _aux1:
   233                           	opt stack 0
   234  000095                     	ds	6
   235  00009B                     _timer1_counter_10:
   236                           	opt stack 0
   237  00009B                     	ds	1
   238                           tblptru	equ	0xFF8
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	cstackBANK1
   243  000100                     __pcstackBANK1:
   244                           	opt stack 0
   245  000100                     ??_send_command:
   246  000100                     ?___awdiv:
   247                           	opt stack 0
   248  000100                     ?___awmod:
   249                           	opt stack 0
   250  000100                     get_seconds_reg@res:
   251                           	opt stack 0
   252  000100                     ir_is_code_number@human_code:
   253                           	opt stack 0
   254  000100                     ___awdiv@dividend:
   255                           	opt stack 0
   256  000100                     ___awmod@dividend:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x0
   260  000100                     	ds	1
   261  000101                     get_seconds_reg@seconds:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x1
   265  000101                     	ds	1
   266  000102                     send_command@command:
   267                           	opt stack 0
   268  000102                     get_timer1_counter@data:
   269                           	opt stack 0
   270  000102                     get_timer1_counter_down@data:
   271                           	opt stack 0
   272  000102                     ___awdiv@divisor:
   273                           	opt stack 0
   274  000102                     ___awmod@divisor:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x2
   278  000102                     	ds	1
   279  000103                     send_command@i:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x3
   283  000103                     	ds	1
   284  000104                     ??_get_timer1_counter:
   285  000104                     ??_get_timer1_counter_down:
   286  000104                     ___awdiv@counter:
   287                           	opt stack 0
   288  000104                     ___awmod@counter:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0x4
   292  000104                     	ds	1
   293  000105                     ??_byte_read:
   294  000105                     ___awdiv@sign:
   295                           	opt stack 0
   296  000105                     ___awmod@sign:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x5
   300  000105                     	ds	1
   301  000106                     ___awdiv@quotient:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x6
   305  000106                     	ds	1
   306  000107                     byte_read@address:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x7
   310  000107                     	ds	1
   311  000108                     ??_get_cents_reg:
   312  000108                     byte_read@res:
   313                           	opt stack 0
   314  000108                     get_timer1_counter_interval@data:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x8
   318  000108                     	ds	1
   319  000109                     byte_read@i:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x9
   323  000109                     	ds	1
   324  00010A                     get_cents_reg@res:
   325                           	opt stack 0
   326  00010A                     get_timer1_counter_interval@state:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0xA
   330  00010A                     	ds	1
   331  00010B                     get_cents_reg@cents:
   332                           	opt stack 0
   333  00010B                     get_timer1_counter_interval@current_program:
   334                           	opt stack 0
   335  00010B                     get_time@data:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0xB
   339  00010B                     	ds	1
   340  00010C                     ??_get_timer1_counter_interval:
   341  00010C                     get_timer1_counter_speed@data:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0xC
   345  00010C                     	ds	1
   346  00010D                     get_time@format:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0xD
   350  00010D                     	ds	1
   351  00010E                     ??_get_time:
   352  00010E                     ??_get_timer1_counter_speed:
   353                           
   354                           ; 1 bytes @ 0xE
   355  00010E                     	ds	1
   356  00010F                     get_time@seconds:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0xF
   360  00010F                     	ds	1
   361  000110                     get_time@aux_hour:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x10
   365  000110                     	ds	1
   366  000111                     get_time@minutes:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x11
   370  000111                     	ds	1
   371  000112                     get_time@aux:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x12
   375  000112                     	ds	1
   376  000113                     get_time@hours:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x13
   380  000113                     	ds	1
   381  000114                     ??_main:
   382                           
   383                           ; 1 bytes @ 0x14
   384  000114                     	ds	2
   385  000116                     main@format:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x16
   389  000116                     	ds	1
   390                           tblptru	equ	0xFF8
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           
   394                           	psect	cstackBANK0
   395  00009C                     __pcstackBANK0:
   396                           	opt stack 0
   397  00009C                     high_isr@code:
   398                           	opt stack 0
   399                           
   400                           ; 47 bytes @ 0x0
   401  00009C                     	ds	47
   402  0000CB                     high_isr@digits:
   403                           	opt stack 0
   404                           
   405                           ; 6 bytes @ 0x2F
   406  0000CB                     	ds	6
   407  0000D1                     high_isr@aux:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x35
   411  0000D1                     	ds	1
   412  0000D2                     high_isr@final_code:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x36
   416  0000D2                     	ds	2
   417  0000D4                     high_isr@i:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x38
   421  0000D4                     	ds	2
   422  0000D6                     high_isr@i_166:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x3A
   426  0000D6                     	ds	2
   427                           tblptru	equ	0xFF8
   428                           postinc0	equ	0xFEE
   429                           wreg	equ	0xFE8
   430                           
   431                           	psect	cstackCOMRAM
   432  000001                     __pcstackCOMRAM:
   433                           	opt stack 0
   434  000001                     ??_put_num:
   435  000001                     ??i2_send_command:
   436  000001                     ?i2___awdiv:
   437                           	opt stack 0
   438  000001                     ?i2___awmod:
   439                           	opt stack 0
   440  000001                     get_num@num:
   441                           	opt stack 0
   442  000001                     get_hour_reg@res:
   443                           	opt stack 0
   444  000001                     i2get_seconds_reg@res:
   445                           	opt stack 0
   446  000001                     ir_get_human_code@code:
   447                           	opt stack 0
   448  000001                     update_point@state:
   449                           	opt stack 0
   450  000001                     update_buzzer@state:
   451                           	opt stack 0
   452  000001                     update_timer1_counter_10@counter:
   453                           	opt stack 0
   454  000001                     i2___awdiv@dividend:
   455                           	opt stack 0
   456  000001                     i2___awmod@dividend:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x0
   460  000001                     	ds	1
   461  000002                     get_hour_reg@hour:
   462                           	opt stack 0
   463  000002                     i2get_seconds_reg@seconds:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x1
   467  000002                     	ds	1
   468  000003                     ??_ir_get_human_code:
   469  000003                     put_num@num:
   470                           	opt stack 0
   471  000003                     update_point@counter:
   472                           	opt stack 0
   473  000003                     update_buzzer@counter:
   474                           	opt stack 0
   475  000003                     i2send_command@command:
   476                           	opt stack 0
   477  000003                     i2___awdiv@divisor:
   478                           	opt stack 0
   479  000003                     i2___awmod@divisor:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x2
   483  000003                     	ds	1
   484  000004                     put_num@mask:
   485                           	opt stack 0
   486  000004                     update_timer1_counter_10@state:
   487                           	opt stack 0
   488  000004                     i2send_command@i:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x3
   492  000004                     	ds	1
   493  000005                     ir_get_human_code@human_read_code:
   494                           	opt stack 0
   495  000005                     _put_num$982:
   496                           	opt stack 0
   497  000005                     i2___awdiv@counter:
   498                           	opt stack 0
   499  000005                     i2___awmod@counter:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x4
   503  000005                     	ds	1
   504  000006                     byte_write@value:
   505                           	opt stack 0
   506  000006                     i2___awdiv@sign:
   507                           	opt stack 0
   508  000006                     i2___awmod@sign:
   509                           	opt stack 0
   510  000006                     put_num@i:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x5
   514  000006                     	ds	1
   515  000007                     byte_write@address:
   516                           	opt stack 0
   517  000007                     i2___awdiv@quotient:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x6
   521  000007                     	ds	1
   522  000008                     set_time@minutes:
   523                           	opt stack 0
   524  000008                     put_nums@nums:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x7
   528  000008                     	ds	1
   529  000009                     set_time@hour:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x8
   533  000009                     	ds	1
   534  00000A                     set_time@seconds:
   535                           	opt stack 0
   536  00000A                     put_nums@i:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x9
   540  00000A                     	ds	1
   541  00000B                     set_time@sec_reg:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0xA
   545  00000B                     	ds	1
   546  00000C                     set_time@min_reg:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0xB
   550  00000C                     	ds	1
   551  00000D                     set_time@hour_reg:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0xC
   555  00000D                     	ds	1
   556  00000E                     ?_get_next_state:
   557                           	opt stack 0
   558  00000E                     get_next_state@state:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0xD
   562  00000E                     	ds	2
   563  000010                     get_next_state@code:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0xF
   567  000010                     	ds	2
   568  000012                     ??_get_next_state:
   569                           
   570                           ; 1 bytes @ 0x11
   571  000012                     	ds	7
   572  000019                     get_next_state@seconds:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x18
   576  000019                     	ds	1
   577  00001A                     get_next_state@minutes:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x19
   581  00001A                     	ds	1
   582  00001B                     get_next_state@hour:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x1A
   586  00001B                     	ds	1
   587  00001C                     ??_high_isr:
   588                           
   589                           ; 1 bytes @ 0x1B
   590  00001C                     	ds	17
   591                           tblptru	equ	0xFF8
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           
   595 ;;
   596 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   597 ;;
   598 ;; *************** function _main *****************
   599 ;; Defined at:
   600 ;;		line 37 in file "main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  format          1   22[BANK1 ] unsigned char 
   605 ;;  temp            1    0        unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   615 ;;      Params:         0       0       0       0       0       0       0       0       0
   616 ;;      Locals:         0       0       1       0       0       0       0       0       0
   617 ;;      Temps:          0       0       2       0       0       0       0       0       0
   618 ;;      Totals:         0       0       3       0       0       0       0       0       0
   619 ;;Total ram usage:        3 bytes
   620 ;; Hardware stack levels required when called:   10
   621 ;; This function calls:
   622 ;;		_ConfigureOscillator
   623 ;;		_InitApp
   624 ;;		_buzzer_disable
   625 ;;		_get_time
   626 ;;		_get_timer1_counter
   627 ;;		_get_timer1_counter_down
   628 ;;		_get_timer1_counter_interval
   629 ;;		_get_timer1_counter_speed
   630 ;;		_ir_is_code_number
   631 ;;		_timer1_disable
   632 ;;		_timer1_enable
   633 ;; This function is called by:
   634 ;;		Startup code after reset
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text0
   639  000860                     __ptext0:
   640                           	opt stack 0
   641  000860                     _main:
   642                           	opt stack 21
   643                           
   644                           ;main.c: 40: ConfigureOscillator();
   645                           
   646                           ;incstack = 0
   647  000860  ECAE  F010         	call	_ConfigureOscillator	;wreg free
   648                           
   649                           ;main.c: 43: InitApp();
   650  000864  EC80  F00E         	call	_InitApp	;wreg free
   651                           
   652                           ;main.c: 48: aux1[0] = 1;
   653  000868  0E01               	movlw	1
   654  00086A  0100               	movlb	0	; () banked
   655  00086C  6F95               	movwf	_aux1& (0+255),b
   656                           
   657                           ; BSR set to: 0
   658                           ;main.c: 49: aux1[1] = 2;
   659  00086E  0E02               	movlw	2
   660  000870  0100               	movlb	0	; () banked
   661  000872  6F96               	movwf	(_aux1+1)& (0+255),b
   662                           
   663                           ; BSR set to: 0
   664                           ;main.c: 50: aux1[2] = 3;
   665  000874  0E03               	movlw	3
   666  000876  0100               	movlb	0	; () banked
   667  000878  6F97               	movwf	(_aux1+2)& (0+255),b
   668                           
   669                           ; BSR set to: 0
   670                           ;main.c: 51: aux1[3] = 4;
   671  00087A  0E04               	movlw	4
   672  00087C  0100               	movlb	0	; () banked
   673  00087E  6F98               	movwf	(_aux1+3)& (0+255),b
   674                           
   675                           ; BSR set to: 0
   676                           ;main.c: 52: aux1[4] = 5;
   677  000880  0E05               	movlw	5
   678  000882  0100               	movlb	0	; () banked
   679  000884  6F99               	movwf	(_aux1+4)& (0+255),b
   680                           
   681                           ; BSR set to: 0
   682                           ;main.c: 53: aux1[5] = 6;
   683  000886  0E06               	movlw	6
   684  000888  0100               	movlb	0	; () banked
   685  00088A  6F9A               	movwf	(_aux1+5)& (0+255),b
   686                           
   687                           ; BSR set to: 0
   688                           ;main.c: 55: char temp;
   689                           ;main.c: 56: char format = 1;
   690  00088C  0E01               	movlw	1
   691  00088E  0101               	movlb	1	; () banked
   692  000890  6F16               	movwf	main@format& (0+255),b
   693                           
   694                           ; BSR set to: 1
   695                           ;main.c: 57: buzzer_disable();
   696  000892  EC88  F010         	call	_buzzer_disable	;wreg free
   697  000896                     l5271:
   698                           
   699                           ;main.c: 59: {
   700                           ;main.c: 60: state = next;
   701  000896  C088  F0D8         	movff	_next,_state
   702  00089A  C089  F0D9         	movff	_next+1,_state+1
   703                           
   704                           ;main.c: 62: switch(state){
   705  00089E  D22A               	goto	l5529
   706  0008A0                     l5273:
   707                           
   708                           ;main.c: 65: if(human_code == 13)
   709  0008A0  0E0D               	movlw	13
   710  0008A2  0100               	movlb	0	; () banked
   711  0008A4  198E               	xorwf	_human_code& (0+255),w,b
   712  0008A6  A4D8               	btfss	status,2,c
   713  0008A8  D002               	goto	l5277
   714                           
   715                           ; BSR set to: 0
   716                           ;main.c: 66: format = 1;
   717  0008AA  0E01               	movlw	1
   718  0008AC  D006               	goto	L1
   719  0008AE                     l5277:
   720                           
   721                           ;main.c: 67: else if (human_code == 14)
   722  0008AE  0E0E               	movlw	14
   723  0008B0  0100               	movlb	0	; () banked
   724  0008B2  198E               	xorwf	_human_code& (0+255),w,b
   725  0008B4  A4D8               	btfss	status,2,c
   726  0008B6  D003               	goto	l5281
   727                           
   728                           ; BSR set to: 0
   729                           ;main.c: 68: format = 0;
   730  0008B8  0E00               	movlw	0
   731  0008BA                     L1:
   732  0008BA  0101               	movlb	1	; () banked
   733  0008BC  6F16               	movwf	main@format& (0+255),b
   734  0008BE                     l5281:
   735                           
   736                           ;main.c: 69: get_time(aux1,format);
   737  0008BE  0E95               	movlw	low _aux1
   738  0008C0  0101               	movlb	1	; () banked
   739  0008C2  6F0B               	movwf	get_time@data& (0+255),b
   740  0008C4  0E00               	movlw	high _aux1
   741  0008C6  0101               	movlb	1	; () banked
   742  0008C8  6F0C               	movwf	(get_time@data+1)& (0+255),b
   743  0008CA  C116  F10D         	movff	main@format,get_time@format
   744  0008CE  EC55  F00A         	call	_get_time	;wreg free
   745                           
   746                           ;main.c: 76: break;
   747  0008D2  D7E1               	goto	l5271
   748  0008D4                     l5283:
   749                           
   750                           ;main.c: 80: if(ir_is_code_number(human_code) && human_code <=2)
   751  0008D4  0100               	movlb	0	; () banked
   752  0008D6  518E               	movf	_human_code& (0+255),w,b
   753  0008D8  ECF0  F00E         	call	_ir_is_code_number
   754  0008DC  0900               	iorlw	0
   755  0008DE  B4D8               	btfsc	status,2,c
   756  0008E0  D7DA               	goto	l5271
   757  0008E2  0E03               	movlw	3
   758  0008E4  0100               	movlb	0	; () banked
   759  0008E6  618E               	cpfslt	_human_code& (0+255),b
   760  0008E8  D7D6               	goto	l5271
   761                           
   762                           ; BSR set to: 0
   763                           ;main.c: 81: {
   764                           ;main.c: 82: aux1[3] = human_code;
   765  0008EA  C08E  F098         	movff	_human_code,_aux1+3
   766                           
   767                           ; BSR set to: 0
   768                           ;main.c: 83: next = 2;
   769  0008EE  0E00               	movlw	0
   770  0008F0  0100               	movlb	0	; () banked
   771  0008F2  6F89               	movwf	(_next+1)& (0+255),b
   772  0008F4  0E02               	movlw	2
   773  0008F6  D1FC               	goto	L18
   774  0008F8                     l5291:
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 84: human_code = -1;
   778  0008F8  0100               	movlb	0	; () banked
   779  0008FA  698E               	setf	_human_code& (0+255),b
   780                           
   781                           ; BSR set to: 0
   782                           ;main.c: 85: }
   783                           ;main.c: 86: break;
   784  0008FC  D7CC               	goto	l5271
   785  0008FE                     l5293:
   786                           
   787                           ;main.c: 89: if(ir_is_code_number(human_code) && ((aux1[2]<2 && human_code <=9) || human
      +                          _code <=3))
   788  0008FE  0100               	movlb	0	; () banked
   789  000900  518E               	movf	_human_code& (0+255),w,b
   790  000902  ECF0  F00E         	call	_ir_is_code_number
   791  000906  0900               	iorlw	0
   792  000908  B4D8               	btfsc	status,2,c
   793  00090A  D7C5               	goto	l5271
   794  00090C  0E02               	movlw	2
   795  00090E  0100               	movlb	0	; () banked
   796  000910  6197               	cpfslt	(_aux1+2)& (0+255),b
   797  000912  D004               	goto	l5299
   798                           
   799                           ; BSR set to: 0
   800  000914  0E09               	movlw	9
   801  000916  0100               	movlb	0	; () banked
   802  000918  658E               	cpfsgt	_human_code& (0+255),b
   803  00091A  D004               	goto	l177
   804  00091C                     l5299:
   805                           
   806                           ; BSR set to: 0
   807  00091C  0E04               	movlw	4
   808  00091E  0100               	movlb	0	; () banked
   809  000920  618E               	cpfslt	_human_code& (0+255),b
   810  000922  D7B9               	goto	l5271
   811  000924                     l177:
   812                           
   813                           ; BSR set to: 0
   814                           ;main.c: 90: {
   815                           ;main.c: 91: aux1[2] = human_code;
   816  000924  C08E  F097         	movff	_human_code,_aux1+2
   817                           
   818                           ; BSR set to: 0
   819                           ;main.c: 92: next = 3;
   820  000928  0E00               	movlw	0
   821  00092A  0100               	movlb	0	; () banked
   822  00092C  6F89               	movwf	(_next+1)& (0+255),b
   823  00092E  0E03               	movlw	3
   824  000930  D1DF               	goto	L18
   825  000932                     l5305:
   826                           
   827                           ;main.c: 98: if(ir_is_code_number(human_code) && human_code <=5)
   828  000932  0100               	movlb	0	; () banked
   829  000934  518E               	movf	_human_code& (0+255),w,b
   830  000936  ECF0  F00E         	call	_ir_is_code_number
   831  00093A  0900               	iorlw	0
   832  00093C  B4D8               	btfsc	status,2,c
   833  00093E  D7AB               	goto	l5271
   834  000940  0E06               	movlw	6
   835  000942  0100               	movlb	0	; () banked
   836  000944  618E               	cpfslt	_human_code& (0+255),b
   837  000946  D7A7               	goto	l5271
   838                           
   839                           ; BSR set to: 0
   840                           ;main.c: 99: {
   841                           ;main.c: 100: aux1[1] = human_code;
   842  000948  C08E  F096         	movff	_human_code,_aux1+1
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 101: next = 4;
   846  00094C  0E00               	movlw	0
   847  00094E  0100               	movlb	0	; () banked
   848  000950  6F89               	movwf	(_next+1)& (0+255),b
   849  000952  0E04               	movlw	4
   850  000954  D1CD               	goto	L18
   851  000956                     l5315:
   852                           
   853                           ;main.c: 106: if(ir_is_code_number(human_code) && human_code <=9)
   854  000956  0100               	movlb	0	; () banked
   855  000958  518E               	movf	_human_code& (0+255),w,b
   856  00095A  ECF0  F00E         	call	_ir_is_code_number
   857  00095E  0900               	iorlw	0
   858  000960  B4D8               	btfsc	status,2,c
   859  000962  D799               	goto	l5271
   860  000964  0E0A               	movlw	10
   861  000966  0100               	movlb	0	; () banked
   862  000968  618E               	cpfslt	_human_code& (0+255),b
   863  00096A  D795               	goto	l5271
   864                           
   865                           ; BSR set to: 0
   866                           ;main.c: 107: {
   867                           ;main.c: 108: aux1[0] = human_code;
   868  00096C  C08E  F095         	movff	_human_code,_aux1
   869                           
   870                           ; BSR set to: 0
   871                           ;main.c: 109: next = 1;
   872  000970  0E00               	movlw	0
   873  000972  0100               	movlb	0	; () banked
   874  000974  6F89               	movwf	(_next+1)& (0+255),b
   875  000976  0E01               	movlw	1
   876  000978  D1BB               	goto	L18
   877  00097A                     l5325:
   878                           
   879                           ;main.c: 115: timer1_counter_10 = 10;
   880  00097A  0E0A               	movlw	10
   881  00097C  0100               	movlb	0	; () banked
   882  00097E  6F9B               	movwf	_timer1_counter_10& (0+255),b
   883                           
   884                           ; BSR set to: 0
   885                           ;main.c: 116: get_timer1_counter(aux1);
   886  000980  0E95               	movlw	low _aux1
   887  000982  0101               	movlb	1	; () banked
   888  000984  6F02               	movwf	get_timer1_counter@data& (0+255),b
   889  000986  0E00               	movlw	high _aux1
   890  000988  0101               	movlb	1	; () banked
   891  00098A  6F03               	movwf	(get_timer1_counter@data+1)& (0+255),b
   892  00098C  EC3A  F00D         	call	_get_timer1_counter	;wreg free
   893                           
   894                           ;main.c: 118: break;
   895  000990  D782               	goto	l5271
   896  000992                     l5329:
   897                           
   898                           ;main.c: 120: get_timer1_counter(aux1);
   899  000992  0E95               	movlw	low _aux1
   900  000994  0101               	movlb	1	; () banked
   901  000996  6F02               	movwf	get_timer1_counter@data& (0+255),b
   902  000998  0E00               	movlw	high _aux1
   903  00099A  0101               	movlb	1	; () banked
   904  00099C  6F03               	movwf	(get_timer1_counter@data+1)& (0+255),b
   905  00099E  EC3A  F00D         	call	_get_timer1_counter	;wreg free
   906                           
   907                           ;main.c: 121: break;
   908  0009A2  D779               	goto	l5271
   909  0009A4                     l5331:
   910                           
   911                           ;main.c: 123: get_timer1_counter(aux1);
   912  0009A4  0E95               	movlw	low _aux1
   913  0009A6  0101               	movlb	1	; () banked
   914  0009A8  6F02               	movwf	get_timer1_counter@data& (0+255),b
   915  0009AA  0E00               	movlw	high _aux1
   916  0009AC  0101               	movlb	1	; () banked
   917  0009AE  6F03               	movwf	(get_timer1_counter@data+1)& (0+255),b
   918  0009B0  EC3A  F00D         	call	_get_timer1_counter	;wreg free
   919                           
   920                           ;main.c: 124: break;
   921  0009B4  D770               	goto	l5271
   922  0009B6                     l5333:
   923                           
   924                           ;main.c: 126: get_timer1_counter(aux1);
   925  0009B6  0E95               	movlw	low _aux1
   926  0009B8  0101               	movlb	1	; () banked
   927  0009BA  6F02               	movwf	get_timer1_counter@data& (0+255),b
   928  0009BC  0E00               	movlw	high _aux1
   929  0009BE  0101               	movlb	1	; () banked
   930  0009C0  6F03               	movwf	(get_timer1_counter@data+1)& (0+255),b
   931  0009C2  EC3A  F00D         	call	_get_timer1_counter	;wreg free
   932                           
   933                           ;main.c: 127: break;
   934  0009C6  D767               	goto	l5271
   935  0009C8                     l5335:
   936                           
   937                           ;main.c: 131: if(ir_is_code_number(human_code) && human_code <=5)
   938  0009C8  0100               	movlb	0	; () banked
   939  0009CA  518E               	movf	_human_code& (0+255),w,b
   940  0009CC  ECF0  F00E         	call	_ir_is_code_number
   941  0009D0  0900               	iorlw	0
   942  0009D2  B4D8               	btfsc	status,2,c
   943  0009D4  D760               	goto	l5271
   944  0009D6  0E06               	movlw	6
   945  0009D8  0100               	movlb	0	; () banked
   946  0009DA  618E               	cpfslt	_human_code& (0+255),b
   947  0009DC  D75C               	goto	l5271
   948                           
   949                           ; BSR set to: 0
   950                           ;main.c: 132: {
   951                           ;main.c: 133: aux1[3] = human_code;
   952  0009DE  C08E  F098         	movff	_human_code,_aux1+3
   953                           
   954                           ; BSR set to: 0
   955                           ;main.c: 134: next = 8;
   956  0009E2  0E00               	movlw	0
   957  0009E4  0100               	movlb	0	; () banked
   958  0009E6  6F89               	movwf	(_next+1)& (0+255),b
   959  0009E8  0E08               	movlw	8
   960  0009EA  D182               	goto	L18
   961  0009EC                     l5345:
   962                           
   963                           ;main.c: 141: if(ir_is_code_number(human_code) && human_code <=5)
   964  0009EC  0100               	movlb	0	; () banked
   965  0009EE  518E               	movf	_human_code& (0+255),w,b
   966  0009F0  ECF0  F00E         	call	_ir_is_code_number
   967  0009F4  0900               	iorlw	0
   968  0009F6  B4D8               	btfsc	status,2,c
   969  0009F8  D74E               	goto	l5271
   970  0009FA  0E06               	movlw	6
   971  0009FC  0100               	movlb	0	; () banked
   972  0009FE  618E               	cpfslt	_human_code& (0+255),b
   973  000A00  D74A               	goto	l5271
   974                           
   975                           ; BSR set to: 0
   976                           ;main.c: 142: {
   977                           ;main.c: 143: aux1[2] = human_code;
   978  000A02  C08E  F097         	movff	_human_code,_aux1+2
   979                           
   980                           ; BSR set to: 0
   981                           ;main.c: 144: next = 9;
   982  000A06  0E00               	movlw	0
   983  000A08  0100               	movlb	0	; () banked
   984  000A0A  6F89               	movwf	(_next+1)& (0+255),b
   985  000A0C  0E09               	movlw	9
   986  000A0E  D170               	goto	L18
   987  000A10                     l5355:
   988                           
   989                           ;main.c: 151: if(ir_is_code_number(human_code) && human_code <=5)
   990  000A10  0100               	movlb	0	; () banked
   991  000A12  518E               	movf	_human_code& (0+255),w,b
   992  000A14  ECF0  F00E         	call	_ir_is_code_number
   993  000A18  0900               	iorlw	0
   994  000A1A  B4D8               	btfsc	status,2,c
   995  000A1C  D73C               	goto	l5271
   996  000A1E  0E06               	movlw	6
   997  000A20  0100               	movlb	0	; () banked
   998  000A22  618E               	cpfslt	_human_code& (0+255),b
   999  000A24  D738               	goto	l5271
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;main.c: 152: {
  1003                           ;main.c: 153: aux1[1] = human_code;
  1004  000A26  C08E  F096         	movff	_human_code,_aux1+1
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;main.c: 154: next = 10;
  1008  000A2A  0E00               	movlw	0
  1009  000A2C  0100               	movlb	0	; () banked
  1010  000A2E  6F89               	movwf	(_next+1)& (0+255),b
  1011  000A30  0E0A               	movlw	10
  1012  000A32  D15E               	goto	L18
  1013  000A34                     l5365:
  1014                           
  1015                           ;main.c: 161: if(ir_is_code_number(human_code) && human_code <=5)
  1016  000A34  0100               	movlb	0	; () banked
  1017  000A36  518E               	movf	_human_code& (0+255),w,b
  1018  000A38  ECF0  F00E         	call	_ir_is_code_number
  1019  000A3C  0900               	iorlw	0
  1020  000A3E  B4D8               	btfsc	status,2,c
  1021  000A40  D72A               	goto	l5271
  1022  000A42  0E06               	movlw	6
  1023  000A44  0100               	movlb	0	; () banked
  1024  000A46  618E               	cpfslt	_human_code& (0+255),b
  1025  000A48  D726               	goto	l5271
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;main.c: 162: {
  1029                           ;main.c: 163: aux1[0] = human_code;
  1030  000A4A  C08E  F095         	movff	_human_code,_aux1
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;main.c: 164: next = 7;
  1034  000A4E  0E00               	movlw	0
  1035  000A50  0100               	movlb	0	; () banked
  1036  000A52  6F89               	movwf	(_next+1)& (0+255),b
  1037  000A54  0E07               	movlw	7
  1038  000A56  D14C               	goto	L18
  1039  000A58                     l5375:
  1040                           
  1041                           ;main.c: 169: timer1_counter_10 = 10;
  1042  000A58  0E0A               	movlw	10
  1043  000A5A  0100               	movlb	0	; () banked
  1044  000A5C  6F9B               	movwf	_timer1_counter_10& (0+255),b
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;main.c: 170: get_timer1_counter_down(aux1);
  1048  000A5E  0E95               	movlw	low _aux1
  1049  000A60  0101               	movlb	1	; () banked
  1050  000A62  6F02               	movwf	get_timer1_counter_down@data& (0+255),b
  1051  000A64  0E00               	movlw	high _aux1
  1052  000A66  0101               	movlb	1	; () banked
  1053  000A68  6F03               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
  1054  000A6A  ECEE  F00C         	call	_get_timer1_counter_down	;wreg free
  1055                           
  1056                           ;main.c: 171: break;
  1057  000A6E  D713               	goto	l5271
  1058  000A70                     l5379:
  1059                           
  1060                           ;main.c: 173: get_timer1_counter_down(aux1);
  1061  000A70  0E95               	movlw	low _aux1
  1062  000A72  0101               	movlb	1	; () banked
  1063  000A74  6F02               	movwf	get_timer1_counter_down@data& (0+255),b
  1064  000A76  0E00               	movlw	high _aux1
  1065  000A78  0101               	movlb	1	; () banked
  1066  000A7A  6F03               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
  1067  000A7C  ECEE  F00C         	call	_get_timer1_counter_down	;wreg free
  1068                           
  1069                           ;main.c: 174: break;
  1070  000A80  D70A               	goto	l5271
  1071  000A82                     l5381:
  1072                           
  1073                           ;main.c: 176: get_timer1_counter_down(aux1);
  1074  000A82  0E95               	movlw	low _aux1
  1075  000A84  0101               	movlb	1	; () banked
  1076  000A86  6F02               	movwf	get_timer1_counter_down@data& (0+255),b
  1077  000A88  0E00               	movlw	high _aux1
  1078  000A8A  0101               	movlb	1	; () banked
  1079  000A8C  6F03               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
  1080  000A8E  ECEE  F00C         	call	_get_timer1_counter_down	;wreg free
  1081                           
  1082                           ;main.c: 177: break;
  1083  000A92  D701               	goto	l5271
  1084  000A94                     l5383:
  1085                           
  1086                           ;main.c: 179: get_timer1_counter_down(aux1);
  1087  000A94  0E95               	movlw	low _aux1
  1088  000A96  0101               	movlb	1	; () banked
  1089  000A98  6F02               	movwf	get_timer1_counter_down@data& (0+255),b
  1090  000A9A  0E00               	movlw	high _aux1
  1091  000A9C  0101               	movlb	1	; () banked
  1092  000A9E  6F03               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
  1093  000AA0  ECEE  F00C         	call	_get_timer1_counter_down	;wreg free
  1094                           
  1095                           ;main.c: 180: break;
  1096  000AA4  D6F8               	goto	l5271
  1097  000AA6                     l5385:
  1098                           
  1099                           ;main.c: 183: if(ir_is_code_number(human_code) && human_code <=5)
  1100  000AA6  0100               	movlb	0	; () banked
  1101  000AA8  518E               	movf	_human_code& (0+255),w,b
  1102  000AAA  ECF0  F00E         	call	_ir_is_code_number
  1103  000AAE  0900               	iorlw	0
  1104  000AB0  B4D8               	btfsc	status,2,c
  1105  000AB2  D6F1               	goto	l5271
  1106  000AB4  0E06               	movlw	6
  1107  000AB6  0100               	movlb	0	; () banked
  1108  000AB8  618E               	cpfslt	_human_code& (0+255),b
  1109  000ABA  D6ED               	goto	l5271
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;main.c: 184: {
  1113                           ;main.c: 185: aux1[3] = human_code;
  1114  000ABC  C08E  F098         	movff	_human_code,_aux1+3
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;main.c: 186: next = 15;
  1118  000AC0  0E00               	movlw	0
  1119  000AC2  0100               	movlb	0	; () banked
  1120  000AC4  6F89               	movwf	(_next+1)& (0+255),b
  1121  000AC6  0E0F               	movlw	15
  1122  000AC8  D113               	goto	L18
  1123  000ACA                     l5395:
  1124                           
  1125                           ;main.c: 192: if(ir_is_code_number(human_code) && human_code <=9)
  1126  000ACA  0100               	movlb	0	; () banked
  1127  000ACC  518E               	movf	_human_code& (0+255),w,b
  1128  000ACE  ECF0  F00E         	call	_ir_is_code_number
  1129  000AD2  0900               	iorlw	0
  1130  000AD4  B4D8               	btfsc	status,2,c
  1131  000AD6  D6DF               	goto	l5271
  1132  000AD8  0E0A               	movlw	10
  1133  000ADA  0100               	movlb	0	; () banked
  1134  000ADC  618E               	cpfslt	_human_code& (0+255),b
  1135  000ADE  D6DB               	goto	l5271
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;main.c: 193: {
  1139                           ;main.c: 194: aux1[2] = human_code;
  1140  000AE0  C08E  F097         	movff	_human_code,_aux1+2
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;main.c: 195: next = 16;
  1144  000AE4  0E00               	movlw	0
  1145  000AE6  0100               	movlb	0	; () banked
  1146  000AE8  6F89               	movwf	(_next+1)& (0+255),b
  1147  000AEA  0E10               	movlw	16
  1148  000AEC  D101               	goto	L18
  1149  000AEE                     l5405:
  1150                           
  1151                           ;main.c: 201: if(ir_is_code_number(human_code) && human_code <=5)
  1152  000AEE  0100               	movlb	0	; () banked
  1153  000AF0  518E               	movf	_human_code& (0+255),w,b
  1154  000AF2  ECF0  F00E         	call	_ir_is_code_number
  1155  000AF6  0900               	iorlw	0
  1156  000AF8  B4D8               	btfsc	status,2,c
  1157  000AFA  D6CD               	goto	l5271
  1158  000AFC  0E06               	movlw	6
  1159  000AFE  0100               	movlb	0	; () banked
  1160  000B00  618E               	cpfslt	_human_code& (0+255),b
  1161  000B02  D6C9               	goto	l5271
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;main.c: 202: {
  1165                           ;main.c: 203: aux1[1] = human_code;
  1166  000B04  C08E  F096         	movff	_human_code,_aux1+1
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 204: next = 17;
  1170  000B08  0E00               	movlw	0
  1171  000B0A  0100               	movlb	0	; () banked
  1172  000B0C  6F89               	movwf	(_next+1)& (0+255),b
  1173  000B0E  0E11               	movlw	17
  1174  000B10  D0EF               	goto	L18
  1175  000B12                     l5415:
  1176                           
  1177                           ;main.c: 210: if(ir_is_code_number(human_code) && human_code <=9)
  1178  000B12  0100               	movlb	0	; () banked
  1179  000B14  518E               	movf	_human_code& (0+255),w,b
  1180  000B16  ECF0  F00E         	call	_ir_is_code_number
  1181  000B1A  0900               	iorlw	0
  1182  000B1C  B4D8               	btfsc	status,2,c
  1183  000B1E  D6BB               	goto	l5271
  1184  000B20  0E0A               	movlw	10
  1185  000B22  0100               	movlb	0	; () banked
  1186  000B24  618E               	cpfslt	_human_code& (0+255),b
  1187  000B26  D6B7               	goto	l5271
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;main.c: 211: {
  1191                           ;main.c: 212: aux1[0] = human_code;
  1192  000B28  C08E  F095         	movff	_human_code,_aux1
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 213: next = 14;
  1196  000B2C  0E00               	movlw	0
  1197  000B2E  0100               	movlb	0	; () banked
  1198  000B30  6F89               	movwf	(_next+1)& (0+255),b
  1199  000B32  0E0E               	movlw	14
  1200  000B34  D0DD               	goto	L18
  1201  000B36                     l5425:
  1202                           
  1203                           ;main.c: 218: timer1_disable();
  1204  000B36  EC9C  F010         	call	_timer1_disable	;wreg free
  1205                           
  1206                           ;main.c: 219: timer1_counter_10 = 0;
  1207  000B3A  0E00               	movlw	0
  1208  000B3C  0100               	movlb	0	; () banked
  1209  000B3E  6F9B               	movwf	_timer1_counter_10& (0+255),b
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;main.c: 220: timer1_counter_min = 0;
  1213  000B40  0E00               	movlw	0
  1214  000B42  6E31               	movwf	_timer1_counter_min,c
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;main.c: 221: timer1_counter = 0;
  1218  000B44  0E00               	movlw	0
  1219  000B46  0100               	movlb	0	; () banked
  1220  000B48  6F8C               	movwf	_timer1_counter& (0+255),b
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;main.c: 222: get_timer1_counter_speed(aux1);
  1224  000B4A  0E95               	movlw	low _aux1
  1225  000B4C  0101               	movlb	1	; () banked
  1226  000B4E  6F0C               	movwf	get_timer1_counter_speed@data& (0+255),b
  1227  000B50  0E00               	movlw	high _aux1
  1228  000B52  0101               	movlb	1	; () banked
  1229  000B54  6F0D               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1230  000B56  EC44  F00C         	call	_get_timer1_counter_speed	;wreg free
  1231                           
  1232                           ;main.c: 223: break;
  1233  000B5A  D69D               	goto	l5271
  1234  000B5C                     l5435:
  1235                           
  1236                           ;main.c: 225: timer1_enable();
  1237  000B5C  EC9A  F010         	call	_timer1_enable	;wreg free
  1238                           
  1239                           ;main.c: 226: get_timer1_counter_speed(aux1);
  1240  000B60  0E95               	movlw	low _aux1
  1241  000B62  0101               	movlb	1	; () banked
  1242  000B64  6F0C               	movwf	get_timer1_counter_speed@data& (0+255),b
  1243  000B66  0E00               	movlw	high _aux1
  1244  000B68  0101               	movlb	1	; () banked
  1245  000B6A  6F0D               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1246  000B6C  EC44  F00C         	call	_get_timer1_counter_speed	;wreg free
  1247                           
  1248                           ;main.c: 227: break;
  1249  000B70  D692               	goto	l5271
  1250  000B72                     l5439:
  1251                           
  1252                           ;main.c: 229: timer1_disable();
  1253  000B72  EC9C  F010         	call	_timer1_disable	;wreg free
  1254                           
  1255                           ;main.c: 230: get_timer1_counter_speed(aux1);
  1256  000B76  0E95               	movlw	low _aux1
  1257  000B78  0101               	movlb	1	; () banked
  1258  000B7A  6F0C               	movwf	get_timer1_counter_speed@data& (0+255),b
  1259  000B7C  0E00               	movlw	high _aux1
  1260  000B7E  0101               	movlb	1	; () banked
  1261  000B80  6F0D               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1262  000B82  EC44  F00C         	call	_get_timer1_counter_speed	;wreg free
  1263                           
  1264                           ;main.c: 231: break;
  1265  000B86  D687               	goto	l5271
  1266  000B88                     l5443:
  1267                           
  1268                           ;main.c: 234: timer1_disable();
  1269  000B88  EC9C  F010         	call	_timer1_disable	;wreg free
  1270                           
  1271                           ;main.c: 235: timer1_counter_10 = 0;
  1272  000B8C  0E00               	movlw	0
  1273  000B8E  0100               	movlb	0	; () banked
  1274  000B90  6F9B               	movwf	_timer1_counter_10& (0+255),b
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;main.c: 236: timer1_counter_min = 0;
  1278  000B92  0E00               	movlw	0
  1279  000B94  6E31               	movwf	_timer1_counter_min,c
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;main.c: 237: timer1_counter = 0;
  1283  000B96  0E00               	movlw	0
  1284  000B98  0100               	movlb	0	; () banked
  1285  000B9A  6F8C               	movwf	_timer1_counter& (0+255),b
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;main.c: 238: current_program = 0;
  1289  000B9C  0E00               	movlw	0
  1290  000B9E  0100               	movlb	0	; () banked
  1291  000BA0  6F8B               	movwf	_current_program& (0+255),b
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;main.c: 239: current_type = 'f';
  1295  000BA2  0E66               	movlw	102
  1296  000BA4  6E32               	movwf	_current_type,c
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 240: get_timer1_counter_interval(aux1,state,current_program);
  1300  000BA6  0E95               	movlw	low _aux1
  1301  000BA8  0101               	movlb	1	; () banked
  1302  000BAA  6F08               	movwf	get_timer1_counter_interval@data& (0+255),b
  1303  000BAC  0E00               	movlw	high _aux1
  1304  000BAE  0101               	movlb	1	; () banked
  1305  000BB0  6F09               	movwf	(get_timer1_counter_interval@data+1)& (0+255),b
  1306  000BB2  C0D8  F10A         	movff	_state,get_timer1_counter_interval@state
  1307  000BB6  C08B  F10B         	movff	_current_program,get_timer1_counter_interval@current_program
  1308  000BBA  EC7C  F008         	call	_get_timer1_counter_interval	;wreg free
  1309                           
  1310                           ;main.c: 241: break;
  1311  000BBE  D66B               	goto	l5271
  1312  000BC0                     l5457:
  1313                           
  1314                           ;main.c: 243: timer1_enable();
  1315  000BC0  EC9A  F010         	call	_timer1_enable	;wreg free
  1316                           
  1317                           ;main.c: 244: get_timer1_counter_interval(aux1,state,current_program);
  1318  000BC4  0E95               	movlw	low _aux1
  1319  000BC6  0101               	movlb	1	; () banked
  1320  000BC8  6F08               	movwf	get_timer1_counter_interval@data& (0+255),b
  1321  000BCA  0E00               	movlw	high _aux1
  1322  000BCC  0101               	movlb	1	; () banked
  1323  000BCE  6F09               	movwf	(get_timer1_counter_interval@data+1)& (0+255),b
  1324  000BD0  C0D8  F10A         	movff	_state,get_timer1_counter_interval@state
  1325  000BD4  C08B  F10B         	movff	_current_program,get_timer1_counter_interval@current_program
  1326  000BD8  EC7C  F008         	call	_get_timer1_counter_interval	;wreg free
  1327                           
  1328                           ;main.c: 245: break;
  1329  000BDC  D65C               	goto	l5271
  1330  000BDE                     l5461:
  1331                           
  1332                           ;main.c: 247: timer1_enable();
  1333  000BDE  EC9A  F010         	call	_timer1_enable	;wreg free
  1334                           
  1335                           ;main.c: 248: get_timer1_counter_interval(aux1,state,current_program);
  1336  000BE2  0E95               	movlw	low _aux1
  1337  000BE4  0101               	movlb	1	; () banked
  1338  000BE6  6F08               	movwf	get_timer1_counter_interval@data& (0+255),b
  1339  000BE8  0E00               	movlw	high _aux1
  1340  000BEA  0101               	movlb	1	; () banked
  1341  000BEC  6F09               	movwf	(get_timer1_counter_interval@data+1)& (0+255),b
  1342  000BEE  C0D8  F10A         	movff	_state,get_timer1_counter_interval@state
  1343  000BF2  C08B  F10B         	movff	_current_program,get_timer1_counter_interval@current_program
  1344  000BF6  EC7C  F008         	call	_get_timer1_counter_interval	;wreg free
  1345                           
  1346                           ;main.c: 249: break;
  1347  000BFA  D64D               	goto	l5271
  1348  000BFC                     l5465:
  1349                           
  1350                           ;main.c: 251: timer1_disable();
  1351  000BFC  EC9C  F010         	call	_timer1_disable	;wreg free
  1352                           
  1353                           ;main.c: 252: get_timer1_counter_interval(aux1,state,current_program);
  1354  000C00  0E95               	movlw	low _aux1
  1355  000C02  0101               	movlb	1	; () banked
  1356  000C04  6F08               	movwf	get_timer1_counter_interval@data& (0+255),b
  1357  000C06  0E00               	movlw	high _aux1
  1358  000C08  0101               	movlb	1	; () banked
  1359  000C0A  6F09               	movwf	(get_timer1_counter_interval@data+1)& (0+255),b
  1360  000C0C  C0D8  F10A         	movff	_state,get_timer1_counter_interval@state
  1361  000C10  C08B  F10B         	movff	_current_program,get_timer1_counter_interval@current_program
  1362  000C14  EC7C  F008         	call	_get_timer1_counter_interval	;wreg free
  1363                           
  1364                           ;main.c: 253: break;
  1365  000C18  D63E               	goto	l5271
  1366  000C1A                     l5469:
  1367                           
  1368                           ;main.c: 255: if(ir_is_code_number(human_code) && human_code <=5)
  1369  000C1A  0100               	movlb	0	; () banked
  1370  000C1C  518E               	movf	_human_code& (0+255),w,b
  1371  000C1E  ECF0  F00E         	call	_ir_is_code_number
  1372  000C22  0900               	iorlw	0
  1373  000C24  B4D8               	btfsc	status,2,c
  1374  000C26  D637               	goto	l5271
  1375  000C28  0E06               	movlw	6
  1376  000C2A  0100               	movlb	0	; () banked
  1377  000C2C  618E               	cpfslt	_human_code& (0+255),b
  1378  000C2E  D633               	goto	l5271
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 256: {
  1382                           ;main.c: 257: aux1[3] = human_code;
  1383  000C30  C08E  F098         	movff	_human_code,_aux1+3
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;main.c: 258: next = 30;
  1387  000C34  0E00               	movlw	0
  1388  000C36  0100               	movlb	0	; () banked
  1389  000C38  6F89               	movwf	(_next+1)& (0+255),b
  1390  000C3A  0E1E               	movlw	30
  1391  000C3C  D059               	goto	L18
  1392  000C3E                     l5479:
  1393                           
  1394                           ;main.c: 263: if(ir_is_code_number(human_code) && human_code <=9)
  1395  000C3E  0100               	movlb	0	; () banked
  1396  000C40  518E               	movf	_human_code& (0+255),w,b
  1397  000C42  ECF0  F00E         	call	_ir_is_code_number
  1398  000C46  0900               	iorlw	0
  1399  000C48  B4D8               	btfsc	status,2,c
  1400  000C4A  D625               	goto	l5271
  1401  000C4C  0E0A               	movlw	10
  1402  000C4E  0100               	movlb	0	; () banked
  1403  000C50  618E               	cpfslt	_human_code& (0+255),b
  1404  000C52  D621               	goto	l5271
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 264: {
  1408                           ;main.c: 265: aux1[2] = human_code;
  1409  000C54  C08E  F097         	movff	_human_code,_aux1+2
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;main.c: 266: next = 31;
  1413  000C58  0E00               	movlw	0
  1414  000C5A  0100               	movlb	0	; () banked
  1415  000C5C  6F89               	movwf	(_next+1)& (0+255),b
  1416  000C5E  0E1F               	movlw	31
  1417  000C60  D047               	goto	L18
  1418  000C62                     l5489:
  1419                           
  1420                           ;main.c: 271: if(ir_is_code_number(human_code) && human_code <=5)
  1421  000C62  0100               	movlb	0	; () banked
  1422  000C64  518E               	movf	_human_code& (0+255),w,b
  1423  000C66  ECF0  F00E         	call	_ir_is_code_number
  1424  000C6A  0900               	iorlw	0
  1425  000C6C  B4D8               	btfsc	status,2,c
  1426  000C6E  D613               	goto	l5271
  1427  000C70  0E06               	movlw	6
  1428  000C72  0100               	movlb	0	; () banked
  1429  000C74  618E               	cpfslt	_human_code& (0+255),b
  1430  000C76  D60F               	goto	l5271
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;main.c: 272: {
  1434                           ;main.c: 273: aux1[1] = human_code;
  1435  000C78  C08E  F096         	movff	_human_code,_aux1+1
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;main.c: 274: next = 32;
  1439  000C7C  0E00               	movlw	0
  1440  000C7E  0100               	movlb	0	; () banked
  1441  000C80  6F89               	movwf	(_next+1)& (0+255),b
  1442  000C82  0E20               	movlw	32
  1443  000C84  D035               	goto	L18
  1444  000C86                     l5499:
  1445                           
  1446                           ;main.c: 279: if(ir_is_code_number(human_code) && human_code <=9)
  1447  000C86  0100               	movlb	0	; () banked
  1448  000C88  518E               	movf	_human_code& (0+255),w,b
  1449  000C8A  ECF0  F00E         	call	_ir_is_code_number
  1450  000C8E  0900               	iorlw	0
  1451  000C90  B4D8               	btfsc	status,2,c
  1452  000C92  D601               	goto	l5271
  1453  000C94  0E0A               	movlw	10
  1454  000C96  0100               	movlb	0	; () banked
  1455  000C98  618E               	cpfslt	_human_code& (0+255),b
  1456  000C9A  D5FD               	goto	l5271
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;main.c: 280: {
  1460                           ;main.c: 281: aux1[0] = human_code;
  1461  000C9C  C08E  F095         	movff	_human_code,_aux1
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;main.c: 282: next = 29;
  1465  000CA0  0E00               	movlw	0
  1466  000CA2  0100               	movlb	0	; () banked
  1467  000CA4  6F89               	movwf	(_next+1)& (0+255),b
  1468  000CA6  0E1D               	movlw	29
  1469  000CA8  D023               	goto	L18
  1470  000CAA                     l5509:
  1471                           
  1472                           ;main.c: 287: if(ir_is_code_number(human_code) && human_code <=9)
  1473  000CAA  0100               	movlb	0	; () banked
  1474  000CAC  518E               	movf	_human_code& (0+255),w,b
  1475  000CAE  ECF0  F00E         	call	_ir_is_code_number
  1476  000CB2  0900               	iorlw	0
  1477  000CB4  B4D8               	btfsc	status,2,c
  1478  000CB6  D5EF               	goto	l5271
  1479  000CB8  0E0A               	movlw	10
  1480  000CBA  0100               	movlb	0	; () banked
  1481  000CBC  618E               	cpfslt	_human_code& (0+255),b
  1482  000CBE  D5EB               	goto	l5271
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 288: {
  1486                           ;main.c: 289: aux1[1] = human_code;
  1487  000CC0  C08E  F096         	movff	_human_code,_aux1+1
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;main.c: 290: next = 34;
  1491  000CC4  0E00               	movlw	0
  1492  000CC6  0100               	movlb	0	; () banked
  1493  000CC8  6F89               	movwf	(_next+1)& (0+255),b
  1494  000CCA  0E22               	movlw	34
  1495  000CCC  D011               	goto	L18
  1496  000CCE                     l5519:
  1497                           
  1498                           ;main.c: 295: if(ir_is_code_number(human_code) && human_code <=9)
  1499  000CCE  0100               	movlb	0	; () banked
  1500  000CD0  518E               	movf	_human_code& (0+255),w,b
  1501  000CD2  ECF0  F00E         	call	_ir_is_code_number
  1502  000CD6  0900               	iorlw	0
  1503  000CD8  B4D8               	btfsc	status,2,c
  1504  000CDA  D5DD               	goto	l5271
  1505  000CDC  0E0A               	movlw	10
  1506  000CDE  0100               	movlb	0	; () banked
  1507  000CE0  618E               	cpfslt	_human_code& (0+255),b
  1508  000CE2  D5D9               	goto	l5271
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;main.c: 296: {
  1512                           ;main.c: 297: aux1[0] = human_code;
  1513  000CE4  C08E  F095         	movff	_human_code,_aux1
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 298: next = 33;
  1517  000CE8  0E00               	movlw	0
  1518  000CEA  0100               	movlb	0	; () banked
  1519  000CEC  6F89               	movwf	(_next+1)& (0+255),b
  1520  000CEE  0E21               	movlw	33
  1521  000CF0                     L18:
  1522  000CF0  6F88               	movwf	_next& (0+255),b
  1523  000CF2  D602               	goto	l5291
  1524  000CF4                     l5529:
  1525  000CF4  C0D8  F114         	movff	_state,??_main
  1526  000CF8  C0D9  F115         	movff	_state+1,??_main+1
  1527                           
  1528                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1529                           ; Switch size 1, requested type "space"
  1530                           ; Number of cases is 1, Range of values is 0 to 0
  1531                           ; switch strategies available:
  1532                           ; Name         Instructions Cycles
  1533                           ; simple_byte            4     3 (average)
  1534                           ;	Chosen strategy is simple_byte
  1535  000CFC  0101               	movlb	1	; () banked
  1536  000CFE  5115               	movf	(??_main+1)& (0+255),w,b
  1537  000D00  0A00               	xorlw	0	; case 0
  1538  000D02  A4D8               	btfss	status,2,c
  1539  000D04  D5C8               	goto	l5271
  1540                           
  1541                           ; BSR set to: 1
  1542                           ; Switch size 1, requested type "space"
  1543                           ; Number of cases is 34, Range of values is 0 to 34
  1544                           ; switch strategies available:
  1545                           ; Name         Instructions Cycles
  1546                           ; simple_byte          103    52 (average)
  1547                           ;	Chosen strategy is simple_byte
  1548  000D06  0101               	movlb	1	; () banked
  1549  000D08  5114               	movf	??_main& (0+255),w,b
  1550  000D0A  0A00               	xorlw	0	; case 0
  1551  000D0C  B4D8               	btfsc	status,2,c
  1552  000D0E  D5C8               	goto	l5273
  1553  000D10  0A01               	xorlw	1	; case 1
  1554  000D12  B4D8               	btfsc	status,2,c
  1555  000D14  D5DF               	goto	l5283
  1556  000D16  0A03               	xorlw	3	; case 2
  1557  000D18  B4D8               	btfsc	status,2,c
  1558  000D1A  D5F1               	goto	l5293
  1559  000D1C  0A01               	xorlw	1	; case 3
  1560  000D1E  B4D8               	btfsc	status,2,c
  1561  000D20  D608               	goto	l5305
  1562  000D22  0A07               	xorlw	7	; case 4
  1563  000D24  B4D8               	btfsc	status,2,c
  1564  000D26  D617               	goto	l5315
  1565  000D28  0A01               	xorlw	1	; case 5
  1566  000D2A  B4D8               	btfsc	status,2,c
  1567  000D2C  D626               	goto	l5325
  1568  000D2E  0A03               	xorlw	3	; case 6
  1569  000D30  B4D8               	btfsc	status,2,c
  1570  000D32  D692               	goto	l5375
  1571  000D34  0A01               	xorlw	1	; case 7
  1572  000D36  B4D8               	btfsc	status,2,c
  1573  000D38  D647               	goto	l5335
  1574  000D3A  0A0F               	xorlw	15	; case 8
  1575  000D3C  B4D8               	btfsc	status,2,c
  1576  000D3E  D656               	goto	l5345
  1577  000D40  0A01               	xorlw	1	; case 9
  1578  000D42  B4D8               	btfsc	status,2,c
  1579  000D44  D665               	goto	l5355
  1580  000D46  0A03               	xorlw	3	; case 10
  1581  000D48  B4D8               	btfsc	status,2,c
  1582  000D4A  D674               	goto	l5365
  1583  000D4C  0A01               	xorlw	1	; case 11
  1584  000D4E  B4D8               	btfsc	status,2,c
  1585  000D50  D620               	goto	l5329
  1586  000D52  0A07               	xorlw	7	; case 12
  1587  000D54  B4D8               	btfsc	status,2,c
  1588  000D56  D626               	goto	l5331
  1589  000D58  0A01               	xorlw	1	; case 13
  1590  000D5A  B4D8               	btfsc	status,2,c
  1591  000D5C  D62C               	goto	l5333
  1592  000D5E  0A03               	xorlw	3	; case 14
  1593  000D60  B4D8               	btfsc	status,2,c
  1594  000D62  D6A1               	goto	l5385
  1595  000D64  0A01               	xorlw	1	; case 15
  1596  000D66  B4D8               	btfsc	status,2,c
  1597  000D68  D6B0               	goto	l5395
  1598  000D6A  0A1F               	xorlw	31	; case 16
  1599  000D6C  B4D8               	btfsc	status,2,c
  1600  000D6E  D6BF               	goto	l5405
  1601  000D70  0A01               	xorlw	1	; case 17
  1602  000D72  B4D8               	btfsc	status,2,c
  1603  000D74  D6CE               	goto	l5415
  1604  000D76  0A03               	xorlw	3	; case 18
  1605  000D78  B4D8               	btfsc	status,2,c
  1606  000D7A  D67A               	goto	l5379
  1607  000D7C  0A01               	xorlw	1	; case 19
  1608  000D7E  B4D8               	btfsc	status,2,c
  1609  000D80  D680               	goto	l5381
  1610  000D82  0A07               	xorlw	7	; case 20
  1611  000D84  B4D8               	btfsc	status,2,c
  1612  000D86  D686               	goto	l5383
  1613  000D88  0A01               	xorlw	1	; case 21
  1614  000D8A  B4D8               	btfsc	status,2,c
  1615  000D8C  D6D4               	goto	l5425
  1616  000D8E  0A03               	xorlw	3	; case 22
  1617  000D90  B4D8               	btfsc	status,2,c
  1618  000D92  D6E4               	goto	l5435
  1619  000D94  0A01               	xorlw	1	; case 23
  1620  000D96  B4D8               	btfsc	status,2,c
  1621  000D98  D6EC               	goto	l5439
  1622  000D9A  0A0F               	xorlw	15	; case 24
  1623  000D9C  B4D8               	btfsc	status,2,c
  1624  000D9E  D6F4               	goto	l5443
  1625  000DA0  0A02               	xorlw	2	; case 26
  1626  000DA2  B4D8               	btfsc	status,2,c
  1627  000DA4  D70D               	goto	l5457
  1628  000DA6  0A01               	xorlw	1	; case 27
  1629  000DA8  B4D8               	btfsc	status,2,c
  1630  000DAA  D719               	goto	l5461
  1631  000DAC  0A07               	xorlw	7	; case 28
  1632  000DAE  B4D8               	btfsc	status,2,c
  1633  000DB0  D725               	goto	l5465
  1634  000DB2  0A01               	xorlw	1	; case 29
  1635  000DB4  B4D8               	btfsc	status,2,c
  1636  000DB6  D731               	goto	l5469
  1637  000DB8  0A03               	xorlw	3	; case 30
  1638  000DBA  B4D8               	btfsc	status,2,c
  1639  000DBC  D740               	goto	l5479
  1640  000DBE  0A01               	xorlw	1	; case 31
  1641  000DC0  B4D8               	btfsc	status,2,c
  1642  000DC2  D74F               	goto	l5489
  1643  000DC4  0A3F               	xorlw	63	; case 32
  1644  000DC6  B4D8               	btfsc	status,2,c
  1645  000DC8  D75E               	goto	l5499
  1646  000DCA  0A01               	xorlw	1	; case 33
  1647  000DCC  B4D8               	btfsc	status,2,c
  1648  000DCE  D76D               	goto	l5509
  1649  000DD0  0A03               	xorlw	3	; case 34
  1650  000DD2  B4D8               	btfsc	status,2,c
  1651  000DD4  D77C               	goto	l5519
  1652                           
  1653                           ; BSR set to: 1
  1654                           
  1655                           ; BSR set to: 1
  1656  000DD6  D55F               	goto	l5271
  1657  000DD8                     __end_of_main:
  1658                           	opt stack 0
  1659                           tblptru	equ	0xFF8
  1660                           postinc0	equ	0xFEE
  1661                           wreg	equ	0xFE8
  1662                           status	equ	0xFD8
  1663                           
  1664 ;; *************** function _timer1_enable *****************
  1665 ;; Defined at:
  1666 ;;		line 764 in file "user.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		status,2, status,0
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1680 ;;      Params:         0       0       0       0       0       0       0       0       0
  1681 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1683 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    6
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_main
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text1
  1695  002134                     __ptext1:
  1696                           	opt stack 0
  1697  002134                     _timer1_enable:
  1698                           	opt stack 24
  1699                           
  1700                           ;user.c: 766: T1CON |= 1 << 0;
  1701                           
  1702                           ; BSR set to: 1
  1703                           ;incstack = 0
  1704  002134  80CD               	bsf	4045,0,c	;volatile
  1705  002136  0012               	return		;funcret
  1706  002138                     __end_of_timer1_enable:
  1707                           	opt stack 0
  1708                           tblptru	equ	0xFF8
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _timer1_disable *****************
  1714 ;; Defined at:
  1715 ;;		line 769 in file "user.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;		None
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		status,2, status,0
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1729 ;;      Params:         0       0       0       0       0       0       0       0       0
  1730 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1732 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1733 ;;Total ram usage:        0 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    6
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		_main
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text2
  1744  002138                     __ptext2:
  1745                           	opt stack 0
  1746  002138                     _timer1_disable:
  1747                           	opt stack 24
  1748                           
  1749                           ;user.c: 771: T1CON &= ~(1 << 0);
  1750                           
  1751                           ;incstack = 0
  1752  002138  90CD               	bcf	4045,0,c	;volatile
  1753  00213A  0012               	return		;funcret
  1754  00213C                     __end_of_timer1_disable:
  1755                           	opt stack 0
  1756                           tblptru	equ	0xFF8
  1757                           postinc0	equ	0xFEE
  1758                           wreg	equ	0xFE8
  1759                           status	equ	0xFD8
  1760                           
  1761 ;; *************** function _ir_is_code_number *****************
  1762 ;; Defined at:
  1763 ;;		line 593 in file "user.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  human_code      1    wreg     unsigned char 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;  human_code      1    0[BANK1 ] unsigned char 
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  1    wreg      unsigned char 
  1770 ;; Registers used:
  1771 ;;		wreg, status,2, status,0
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1777 ;;      Params:         0       0       0       0       0       0       0       0       0
  1778 ;;      Locals:         0       0       1       0       0       0       0       0       0
  1779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1780 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1781 ;;Total ram usage:        1 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    6
  1784 ;; This function calls:
  1785 ;;		Nothing
  1786 ;; This function is called by:
  1787 ;;		_main
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           	psect	text3
  1792  001DE0                     __ptext3:
  1793                           	opt stack 0
  1794  001DE0                     _ir_is_code_number:
  1795                           	opt stack 24
  1796                           
  1797                           ;incstack = 0
  1798                           ;ir_is_code_number@human_code stored from wreg
  1799  001DE0  0101               	movlb	1	; () banked
  1800  001DE2  6F00               	movwf	ir_is_code_number@human_code& (0+255),b
  1801                           
  1802                           ;user.c: 595: if(human_code == 0 || human_code == 1 || human_code == 2 || human_code == 
      +                          3 || human_code == 4
  1803                           ;user.c: 596: || human_code == 5 || human_code == 6 || human_code == 7 || human_code == 
      +                          8 || human_code == 9)
  1804  001DE4  0101               	movlb	1	; () banked
  1805  001DE6  5100               	movf	ir_is_code_number@human_code& (0+255),w,b
  1806  001DE8  0101               	movlb	1	; () banked
  1807  001DEA  B4D8               	btfsc	status,2,c
  1808  001DEC  D02C               	goto	l5201
  1809                           
  1810                           ; BSR set to: 1
  1811  001DEE  0101               	movlb	1	; () banked
  1812  001DF0  0500               	decf	ir_is_code_number@human_code& (0+255),w,b
  1813  001DF2  B4D8               	btfsc	status,2,c
  1814  001DF4  D028               	goto	l5201
  1815                           
  1816                           ; BSR set to: 1
  1817  001DF6  0E02               	movlw	2
  1818  001DF8  0101               	movlb	1	; () banked
  1819  001DFA  1900               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1820  001DFC  B4D8               	btfsc	status,2,c
  1821  001DFE  D023               	goto	l5201
  1822                           
  1823                           ; BSR set to: 1
  1824  001E00  0E03               	movlw	3
  1825  001E02  0101               	movlb	1	; () banked
  1826  001E04  1900               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1827  001E06  B4D8               	btfsc	status,2,c
  1828  001E08  D01E               	goto	l5201
  1829                           
  1830                           ; BSR set to: 1
  1831  001E0A  0E04               	movlw	4
  1832  001E0C  0101               	movlb	1	; () banked
  1833  001E0E  1900               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1834  001E10  B4D8               	btfsc	status,2,c
  1835  001E12  D019               	goto	l5201
  1836                           
  1837                           ; BSR set to: 1
  1838  001E14  0E05               	movlw	5
  1839  001E16  0101               	movlb	1	; () banked
  1840  001E18  1900               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1841  001E1A  B4D8               	btfsc	status,2,c
  1842  001E1C  D014               	goto	l5201
  1843                           
  1844                           ; BSR set to: 1
  1845  001E1E  0E06               	movlw	6
  1846  001E20  0101               	movlb	1	; () banked
  1847  001E22  1900               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1848  001E24  B4D8               	btfsc	status,2,c
  1849  001E26  D00F               	goto	l5201
  1850                           
  1851                           ; BSR set to: 1
  1852  001E28  0E07               	movlw	7
  1853  001E2A  0101               	movlb	1	; () banked
  1854  001E2C  1900               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1855  001E2E  B4D8               	btfsc	status,2,c
  1856  001E30  D00A               	goto	l5201
  1857                           
  1858                           ; BSR set to: 1
  1859  001E32  0E08               	movlw	8
  1860  001E34  0101               	movlb	1	; () banked
  1861  001E36  1900               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1862  001E38  B4D8               	btfsc	status,2,c
  1863  001E3A  D005               	goto	l5201
  1864                           
  1865                           ; BSR set to: 1
  1866  001E3C  0E09               	movlw	9
  1867  001E3E  0101               	movlb	1	; () banked
  1868  001E40  1900               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1869  001E42  A4D8               	btfss	status,2,c
  1870  001E44  D002               	goto	l5207
  1871  001E46                     l5201:
  1872                           
  1873                           ; BSR set to: 1
  1874                           ;user.c: 597: return 1;
  1875  001E46  0E01               	movlw	1
  1876                           
  1877                           ; BSR set to: 1
  1878                           
  1879                           ; BSR set to: 1
  1880  001E48  0012               	return	
  1881  001E4A                     l5207:
  1882                           
  1883                           ; BSR set to: 1
  1884                           ;user.c: 598: else
  1885                           ;user.c: 599: return 0;
  1886  001E4A  0E00               	movlw	0
  1887                           
  1888                           ; BSR set to: 1
  1889  001E4C  0012               	return	
  1890  001E4E                     __end_of_ir_is_code_number:
  1891                           	opt stack 0
  1892                           tblptru	equ	0xFF8
  1893                           postinc0	equ	0xFEE
  1894                           wreg	equ	0xFE8
  1895                           status	equ	0xFD8
  1896                           
  1897 ;; *************** function _get_timer1_counter_speed *****************
  1898 ;; Defined at:
  1899 ;;		line 713 in file "user.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  data            2   12[BANK1 ] PTR unsigned char 
  1902 ;;		 -> aux1(6), 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1914 ;;      Params:         0       0       2       0       0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1916 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1917 ;;      Totals:         0       0       3       0       0       0       0       0       0
  1918 ;;Total ram usage:        3 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    8
  1921 ;; This function calls:
  1922 ;;		_get_cents_reg
  1923 ;;		_get_seconds_reg
  1924 ;; This function is called by:
  1925 ;;		_main
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text4
  1930  001888                     __ptext4:
  1931                           	opt stack 0
  1932  001888                     _get_timer1_counter_speed:
  1933                           	opt stack 22
  1934                           
  1935                           ;user.c: 715: data[0] = get_cents_reg(timer1_counter) & 0x0f;
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;incstack = 0
  1939  001888  0100               	movlb	0	; () banked
  1940  00188A  518C               	movf	_timer1_counter& (0+255),w,b
  1941  00188C  ECAB  F00F         	call	_get_cents_reg
  1942  001890  0B0F               	andlw	15
  1943  001892  C10C  FFD9         	movff	get_timer1_counter_speed@data,fsr2l
  1944  001896  C10D  FFDA         	movff	get_timer1_counter_speed@data+1,fsr2h
  1945  00189A  6EDF               	movwf	indf2,c
  1946                           
  1947                           ;user.c: 716: data[1] = (get_cents_reg(timer1_counter) & 0xf0)>>4;
  1948  00189C  0101               	movlb	1	; () banked
  1949  00189E  EE20 F001          	lfsr	2,1
  1950  0018A2  510C               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1951  0018A4  26D9               	addwf	fsr2l,f,c
  1952  0018A6  510D               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1953  0018A8  22DA               	addwfc	fsr2h,f,c
  1954  0018AA  0100               	movlb	0	; () banked
  1955  0018AC  518C               	movf	_timer1_counter& (0+255),w,b
  1956  0018AE  ECAB  F00F         	call	_get_cents_reg
  1957  0018B2  0101               	movlb	1	; () banked
  1958  0018B4  6F0E               	movwf	??_get_timer1_counter_speed& (0+255),b
  1959  0018B6  0101               	movlb	1	; () banked
  1960  0018B8  390E               	swapf	??_get_timer1_counter_speed& (0+255),w,b
  1961  0018BA  0B0F               	andlw	15
  1962  0018BC  0B0F               	andlw	15
  1963  0018BE  6EDF               	movwf	indf2,c
  1964                           
  1965                           ;user.c: 717: data[2] = get_seconds_reg(timer1_counter_10) & 0x0f;
  1966  0018C0  0101               	movlb	1	; () banked
  1967  0018C2  EE20 F002          	lfsr	2,2
  1968  0018C6  510C               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1969  0018C8  26D9               	addwf	fsr2l,f,c
  1970  0018CA  510D               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1971  0018CC  22DA               	addwfc	fsr2h,f,c
  1972  0018CE  0100               	movlb	0	; () banked
  1973  0018D0  519B               	movf	_timer1_counter_10& (0+255),w,b
  1974  0018D2  EC0F  F00E         	call	_get_seconds_reg
  1975  0018D6  0B0F               	andlw	15
  1976  0018D8  6EDF               	movwf	indf2,c
  1977                           
  1978                           ;user.c: 718: data[3] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  1979  0018DA  0101               	movlb	1	; () banked
  1980  0018DC  EE20 F003          	lfsr	2,3
  1981  0018E0  510C               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1982  0018E2  26D9               	addwf	fsr2l,f,c
  1983  0018E4  510D               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1984  0018E6  22DA               	addwfc	fsr2h,f,c
  1985  0018E8  0100               	movlb	0	; () banked
  1986  0018EA  519B               	movf	_timer1_counter_10& (0+255),w,b
  1987  0018EC  EC0F  F00E         	call	_get_seconds_reg
  1988  0018F0  0101               	movlb	1	; () banked
  1989  0018F2  6F0E               	movwf	??_get_timer1_counter_speed& (0+255),b
  1990  0018F4  0101               	movlb	1	; () banked
  1991  0018F6  390E               	swapf	??_get_timer1_counter_speed& (0+255),w,b
  1992  0018F8  0B0F               	andlw	15
  1993  0018FA  0B0F               	andlw	15
  1994  0018FC  6EDF               	movwf	indf2,c
  1995                           
  1996                           ;user.c: 719: data[4] = get_seconds_reg(timer1_counter_min) & 0x0f;
  1997  0018FE  0101               	movlb	1	; () banked
  1998  001900  EE20 F004          	lfsr	2,4
  1999  001904  510C               	movf	get_timer1_counter_speed@data& (0+255),w,b
  2000  001906  26D9               	addwf	fsr2l,f,c
  2001  001908  510D               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  2002  00190A  22DA               	addwfc	fsr2h,f,c
  2003  00190C  5031               	movf	_timer1_counter_min,w,c
  2004  00190E  EC0F  F00E         	call	_get_seconds_reg
  2005  001912  0B0F               	andlw	15
  2006  001914  6EDF               	movwf	indf2,c
  2007                           
  2008                           ;user.c: 720: data[5] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  2009  001916  0101               	movlb	1	; () banked
  2010  001918  EE20 F005          	lfsr	2,5
  2011  00191C  510C               	movf	get_timer1_counter_speed@data& (0+255),w,b
  2012  00191E  26D9               	addwf	fsr2l,f,c
  2013  001920  510D               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  2014  001922  22DA               	addwfc	fsr2h,f,c
  2015  001924  5031               	movf	_timer1_counter_min,w,c
  2016  001926  EC0F  F00E         	call	_get_seconds_reg
  2017  00192A  0101               	movlb	1	; () banked
  2018  00192C  6F0E               	movwf	??_get_timer1_counter_speed& (0+255),b
  2019  00192E  0101               	movlb	1	; () banked
  2020  001930  390E               	swapf	??_get_timer1_counter_speed& (0+255),w,b
  2021  001932  0B0F               	andlw	15
  2022  001934  0B0F               	andlw	15
  2023  001936  6EDF               	movwf	indf2,c
  2024                           
  2025                           ; BSR set to: 1
  2026  001938  0012               	return		;funcret
  2027  00193A                     __end_of_get_timer1_counter_speed:
  2028                           	opt stack 0
  2029                           tblptru	equ	0xFF8
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           indf2	equ	0xFDF
  2033                           fsr2h	equ	0xFDA
  2034                           fsr2l	equ	0xFD9
  2035                           status	equ	0xFD8
  2036                           
  2037 ;; *************** function _get_cents_reg *****************
  2038 ;; Defined at:
  2039 ;;		line 329 in file "user.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  cents           1    wreg     unsigned char 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  cents           1   11[BANK1 ] unsigned char 
  2044 ;;  res             1   10[BANK1 ] unsigned char 
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      unsigned char 
  2047 ;; Registers used:
  2048 ;;		wreg, status,2, status,0, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2054 ;;      Params:         0       0       0       0       0       0       0       0       0
  2055 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2056 ;;      Temps:          0       0       2       0       0       0       0       0       0
  2057 ;;      Totals:         0       0       4       0       0       0       0       0       0
  2058 ;;Total ram usage:        4 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    7
  2061 ;; This function calls:
  2062 ;;		___awdiv
  2063 ;;		___awmod
  2064 ;; This function is called by:
  2065 ;;		_get_timer1_counter_speed
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text5
  2070  001F56                     __ptext5:
  2071                           	opt stack 0
  2072  001F56                     _get_cents_reg:
  2073                           	opt stack 22
  2074                           
  2075                           ; BSR set to: 1
  2076                           ;incstack = 0
  2077                           ;get_cents_reg@cents stored from wreg
  2078  001F56  0101               	movlb	1	; () banked
  2079  001F58  6F0B               	movwf	get_cents_reg@cents& (0+255),b
  2080                           
  2081                           ;user.c: 331: char res = 0;
  2082  001F5A  0E00               	movlw	0
  2083  001F5C  0101               	movlb	1	; () banked
  2084  001F5E  6F0A               	movwf	get_cents_reg@res& (0+255),b
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;user.c: 332: res = (cents/10)<<4 | (cents % 10);
  2088  001F60  C10B  F100         	movff	get_cents_reg@cents,___awmod@dividend
  2089  001F64  0101               	movlb	1	; () banked
  2090  001F66  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  2091  001F68  0E00               	movlw	0
  2092  001F6A  0101               	movlb	1	; () banked
  2093  001F6C  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  2094  001F6E  0E0A               	movlw	10
  2095  001F70  6F02               	movwf	___awmod@divisor& (0+255),b
  2096  001F72  EC9D  F00C         	call	___awmod	;wreg free
  2097  001F76  C100  F108         	movff	?___awmod,??_get_cents_reg
  2098  001F7A  C101  F109         	movff	?___awmod+1,??_get_cents_reg+1
  2099  001F7E  C10B  F100         	movff	get_cents_reg@cents,___awdiv@dividend
  2100  001F82  0101               	movlb	1	; () banked
  2101  001F84  6B01               	clrf	(___awdiv@dividend+1)& (0+255),b
  2102  001F86  0E00               	movlw	0
  2103  001F88  0101               	movlb	1	; () banked
  2104  001F8A  6F03               	movwf	(___awdiv@divisor+1)& (0+255),b
  2105  001F8C  0E0A               	movlw	10
  2106  001F8E  6F02               	movwf	___awdiv@divisor& (0+255),b
  2107  001F90  ECE5  F00B         	call	___awdiv	;wreg free
  2108  001F94  0101               	movlb	1	; () banked
  2109  001F96  3900               	swapf	?___awdiv& (0+255),w,b
  2110  001F98  0BF0               	andlw	240
  2111  001F9A  0101               	movlb	1	; () banked
  2112  001F9C  1108               	iorwf	??_get_cents_reg& (0+255),w,b
  2113  001F9E  0101               	movlb	1	; () banked
  2114  001FA0  6F0A               	movwf	get_cents_reg@res& (0+255),b
  2115                           
  2116                           ; BSR set to: 1
  2117                           ;user.c: 333: return res;
  2118  001FA2  0101               	movlb	1	; () banked
  2119  001FA4  510A               	movf	get_cents_reg@res& (0+255),w,b
  2120  001FA6  0012               	return	
  2121  001FA8                     __end_of_get_cents_reg:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf2	equ	0xFDF
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _get_timer1_counter_interval *****************
  2132 ;; Defined at:
  2133 ;;		line 723 in file "user.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  data            2    8[BANK1 ] PTR unsigned char 
  2136 ;;		 -> aux1(6), 
  2137 ;;  state           1   10[BANK1 ] unsigned char 
  2138 ;;  current_prog    1   11[BANK1 ] unsigned char 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      void 
  2143 ;; Registers used:
  2144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2150 ;;      Params:         0       0       4       0       0       0       0       0       0
  2151 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2152 ;;      Temps:          0       0       2       0       0       0       0       0       0
  2153 ;;      Totals:         0       0       6       0       0       0       0       0       0
  2154 ;;Total ram usage:        6 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    7
  2157 ;; This function calls:
  2158 ;;		___awdiv
  2159 ;;		___awmod
  2160 ;;		_get_seconds_reg
  2161 ;; This function is called by:
  2162 ;;		_main
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text6
  2167  0010F8                     __ptext6:
  2168                           	opt stack 0
  2169  0010F8                     _get_timer1_counter_interval:
  2170                           	opt stack 23
  2171                           
  2172                           ;user.c: 725: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  2173                           
  2174                           ; BSR set to: 1
  2175                           ;incstack = 0
  2176  0010F8  0100               	movlb	0	; () banked
  2177  0010FA  519B               	movf	_timer1_counter_10& (0+255),w,b
  2178  0010FC  EC0F  F00E         	call	_get_seconds_reg
  2179  001100  0B0F               	andlw	15
  2180  001102  C108  FFD9         	movff	get_timer1_counter_interval@data,fsr2l
  2181  001106  C109  FFDA         	movff	get_timer1_counter_interval@data+1,fsr2h
  2182  00110A  6EDF               	movwf	indf2,c
  2183                           
  2184                           ;user.c: 726: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  2185  00110C  0101               	movlb	1	; () banked
  2186  00110E  EE20 F001          	lfsr	2,1
  2187  001112  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2188  001114  26D9               	addwf	fsr2l,f,c
  2189  001116  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2190  001118  22DA               	addwfc	fsr2h,f,c
  2191  00111A  0100               	movlb	0	; () banked
  2192  00111C  519B               	movf	_timer1_counter_10& (0+255),w,b
  2193  00111E  EC0F  F00E         	call	_get_seconds_reg
  2194  001122  0101               	movlb	1	; () banked
  2195  001124  6F0C               	movwf	??_get_timer1_counter_interval& (0+255),b
  2196  001126  0101               	movlb	1	; () banked
  2197  001128  390C               	swapf	??_get_timer1_counter_interval& (0+255),w,b
  2198  00112A  0B0F               	andlw	15
  2199  00112C  0B0F               	andlw	15
  2200  00112E  6EDF               	movwf	indf2,c
  2201                           
  2202                           ;user.c: 727: data[2] = get_seconds_reg(timer1_counter_min) & 0x0f;
  2203  001130  0101               	movlb	1	; () banked
  2204  001132  EE20 F002          	lfsr	2,2
  2205  001136  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2206  001138  26D9               	addwf	fsr2l,f,c
  2207  00113A  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2208  00113C  22DA               	addwfc	fsr2h,f,c
  2209  00113E  5031               	movf	_timer1_counter_min,w,c
  2210  001140  EC0F  F00E         	call	_get_seconds_reg
  2211  001144  0B0F               	andlw	15
  2212  001146  6EDF               	movwf	indf2,c
  2213                           
  2214                           ;user.c: 728: data[3] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  2215  001148  0101               	movlb	1	; () banked
  2216  00114A  EE20 F003          	lfsr	2,3
  2217  00114E  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2218  001150  26D9               	addwf	fsr2l,f,c
  2219  001152  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2220  001154  22DA               	addwfc	fsr2h,f,c
  2221  001156  5031               	movf	_timer1_counter_min,w,c
  2222  001158  EC0F  F00E         	call	_get_seconds_reg
  2223  00115C  0101               	movlb	1	; () banked
  2224  00115E  6F0C               	movwf	??_get_timer1_counter_interval& (0+255),b
  2225  001160  0101               	movlb	1	; () banked
  2226  001162  390C               	swapf	??_get_timer1_counter_interval& (0+255),w,b
  2227  001164  0B0F               	andlw	15
  2228  001166  0B0F               	andlw	15
  2229  001168  6EDF               	movwf	indf2,c
  2230                           
  2231                           ; BSR set to: 1
  2232                           ;user.c: 731: if(state == 33 || state == 34)
  2233  00116A  0E21               	movlw	33
  2234  00116C  0101               	movlb	1	; () banked
  2235  00116E  190A               	xorwf	get_timer1_counter_interval@state& (0+255),w,b
  2236  001170  B4D8               	btfsc	status,2,c
  2237  001172  D005               	goto	l5235
  2238                           
  2239                           ; BSR set to: 1
  2240  001174  0E22               	movlw	34
  2241  001176  0101               	movlb	1	; () banked
  2242  001178  190A               	xorwf	get_timer1_counter_interval@state& (0+255),w,b
  2243  00117A  A4D8               	btfss	status,2,c
  2244  00117C  D013               	goto	l5237
  2245  00117E                     l5235:
  2246                           
  2247                           ; BSR set to: 1
  2248                           ;user.c: 732: {
  2249                           ;user.c: 733: data[4] = 'V';
  2250  00117E  0101               	movlb	1	; () banked
  2251  001180  EE20 F004          	lfsr	2,4
  2252  001184  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2253  001186  26D9               	addwf	fsr2l,f,c
  2254  001188  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2255  00118A  22DA               	addwfc	fsr2h,f,c
  2256  00118C  0E56               	movlw	86
  2257  00118E  6EDF               	movwf	indf2,c
  2258                           
  2259                           ;user.c: 734: data[5] = 'P';
  2260  001190  0101               	movlb	1	; () banked
  2261  001192  EE20 F005          	lfsr	2,5
  2262  001196  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2263  001198  26D9               	addwf	fsr2l,f,c
  2264  00119A  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2265  00119C  22DA               	addwfc	fsr2h,f,c
  2266  00119E  0E50               	movlw	80
  2267  0011A0  6EDF               	movwf	indf2,c
  2268                           
  2269                           ;user.c: 735: }
  2270  0011A2  0012               	return	
  2271  0011A4                     l5237:
  2272                           
  2273                           ; BSR set to: 1
  2274                           ;user.c: 736: else if(current_type == 'f')
  2275  0011A4  0E66               	movlw	102
  2276  0011A6  1832               	xorwf	_current_type,w,c
  2277  0011A8  A4D8               	btfss	status,2,c
  2278  0011AA  D053               	goto	l5245
  2279                           
  2280                           ; BSR set to: 1
  2281                           ;user.c: 737: {
  2282                           ;user.c: 738: if(current_program + 1 < 10)
  2283  0011AC  0101               	movlb	1	; () banked
  2284  0011AE  510B               	movf	get_timer1_counter_interval@current_program& (0+255),w,b
  2285  0011B0  0101               	movlb	1	; () banked
  2286  0011B2  6F0C               	movwf	??_get_timer1_counter_interval& (0+255),b
  2287  0011B4  6B0D               	clrf	(??_get_timer1_counter_interval+1)& (0+255),b
  2288  0011B6  0E01               	movlw	1
  2289  0011B8  0101               	movlb	1	; () banked
  2290  0011BA  270C               	addwf	??_get_timer1_counter_interval& (0+255),f,b
  2291  0011BC  0E00               	movlw	0
  2292  0011BE  230D               	addwfc	(??_get_timer1_counter_interval+1)& (0+255),f,b
  2293  0011C0  0101               	movlb	1	; () banked
  2294  0011C2  BF0D               	btfsc	(??_get_timer1_counter_interval+1)& (0+255),7,b
  2295  0011C4  D008               	goto	l5241
  2296  0011C6  0101               	movlb	1	; () banked
  2297  0011C8  510D               	movf	(??_get_timer1_counter_interval+1)& (0+255),w,b
  2298  0011CA  E10E               	bnz	l5243
  2299  0011CC  0E0A               	movlw	10
  2300  0011CE  0101               	movlb	1	; () banked
  2301  0011D0  5D0C               	subwf	??_get_timer1_counter_interval& (0+255),w,b
  2302  0011D2  B0D8               	btfsc	status,0,c
  2303  0011D4  D009               	goto	l5243
  2304  0011D6                     l5241:
  2305                           
  2306                           ; BSR set to: 1
  2307                           ;user.c: 739: {
  2308                           ;user.c: 740: data[5] = 'F';
  2309  0011D6  0101               	movlb	1	; () banked
  2310  0011D8  EE20 F005          	lfsr	2,5
  2311  0011DC  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2312  0011DE  26D9               	addwf	fsr2l,f,c
  2313  0011E0  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2314  0011E2  22DA               	addwfc	fsr2h,f,c
  2315  0011E4  0E46               	movlw	70
  2316  0011E6  D019               	goto	L19
  2317  0011E8                     l5243:
  2318                           
  2319                           ; BSR set to: 1
  2320                           ;user.c: 742: else
  2321                           ;user.c: 743: {
  2322                           ;user.c: 744: data[5] = (current_program +1)/10;
  2323  0011E8  0101               	movlb	1	; () banked
  2324  0011EA  EE20 F005          	lfsr	2,5
  2325  0011EE  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2326  0011F0  26D9               	addwf	fsr2l,f,c
  2327  0011F2  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2328  0011F4  22DA               	addwfc	fsr2h,f,c
  2329  0011F6  0E01               	movlw	1
  2330  0011F8  0101               	movlb	1	; () banked
  2331  0011FA  250B               	addwf	get_timer1_counter_interval@current_program& (0+255),w,b
  2332  0011FC  0101               	movlb	1	; () banked
  2333  0011FE  6F00               	movwf	___awdiv@dividend& (0+255),b
  2334  001200  0101               	movlb	1	; () banked
  2335  001202  6B01               	clrf	(___awdiv@dividend+1)& (0+255),b
  2336  001204  0E00               	movlw	0
  2337  001206  2301               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  2338  001208  0E00               	movlw	0
  2339  00120A  0101               	movlb	1	; () banked
  2340  00120C  6F03               	movwf	(___awdiv@divisor+1)& (0+255),b
  2341  00120E  0E0A               	movlw	10
  2342  001210  6F02               	movwf	___awdiv@divisor& (0+255),b
  2343  001212  ECE5  F00B         	call	___awdiv	;wreg free
  2344  001216  0101               	movlb	1	; () banked
  2345  001218  5100               	movf	?___awdiv& (0+255),w,b
  2346  00121A                     L19:
  2347  00121A  6EDF               	movwf	indf2,c
  2348                           
  2349                           ; BSR set to: 1
  2350                           ;user.c: 745: }
  2351                           ;user.c: 746: data[4] = (current_program +1) % 10;
  2352  00121C  0101               	movlb	1	; () banked
  2353  00121E  EE20 F004          	lfsr	2,4
  2354  001222  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2355  001224  26D9               	addwf	fsr2l,f,c
  2356  001226  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2357  001228  22DA               	addwfc	fsr2h,f,c
  2358  00122A  0E01               	movlw	1
  2359  00122C  0101               	movlb	1	; () banked
  2360  00122E  250B               	addwf	get_timer1_counter_interval@current_program& (0+255),w,b
  2361  001230  0101               	movlb	1	; () banked
  2362  001232  6F00               	movwf	___awmod@dividend& (0+255),b
  2363  001234  0101               	movlb	1	; () banked
  2364  001236  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  2365  001238  0E00               	movlw	0
  2366  00123A  2301               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  2367  00123C  0E00               	movlw	0
  2368  00123E  0101               	movlb	1	; () banked
  2369  001240  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  2370  001242  0E0A               	movlw	10
  2371  001244  6F02               	movwf	___awmod@divisor& (0+255),b
  2372  001246  EC9D  F00C         	call	___awmod	;wreg free
  2373  00124A  0101               	movlb	1	; () banked
  2374  00124C  5100               	movf	?___awmod& (0+255),w,b
  2375  00124E  6EDF               	movwf	indf2,c
  2376                           
  2377                           ;user.c: 747: }
  2378  001250  0012               	return	
  2379  001252                     l5245:
  2380                           
  2381                           ; BSR set to: 1
  2382                           ;user.c: 748: else
  2383                           ;user.c: 749: {
  2384                           ;user.c: 750: if(current_program + 1 < 10)
  2385  001252  0101               	movlb	1	; () banked
  2386  001254  510B               	movf	get_timer1_counter_interval@current_program& (0+255),w,b
  2387  001256  0101               	movlb	1	; () banked
  2388  001258  6F0C               	movwf	??_get_timer1_counter_interval& (0+255),b
  2389  00125A  6B0D               	clrf	(??_get_timer1_counter_interval+1)& (0+255),b
  2390  00125C  0E01               	movlw	1
  2391  00125E  0101               	movlb	1	; () banked
  2392  001260  270C               	addwf	??_get_timer1_counter_interval& (0+255),f,b
  2393  001262  0E00               	movlw	0
  2394  001264  230D               	addwfc	(??_get_timer1_counter_interval+1)& (0+255),f,b
  2395  001266  0101               	movlb	1	; () banked
  2396  001268  BF0D               	btfsc	(??_get_timer1_counter_interval+1)& (0+255),7,b
  2397  00126A  D008               	goto	l5247
  2398  00126C  0101               	movlb	1	; () banked
  2399  00126E  510D               	movf	(??_get_timer1_counter_interval+1)& (0+255),w,b
  2400  001270  E10E               	bnz	l5249
  2401  001272  0E0A               	movlw	10
  2402  001274  0101               	movlb	1	; () banked
  2403  001276  5D0C               	subwf	??_get_timer1_counter_interval& (0+255),w,b
  2404  001278  B0D8               	btfsc	status,0,c
  2405  00127A  D009               	goto	l5249
  2406  00127C                     l5247:
  2407                           
  2408                           ; BSR set to: 1
  2409                           ;user.c: 751: {
  2410                           ;user.c: 752: data[5] = 'C';
  2411  00127C  0101               	movlb	1	; () banked
  2412  00127E  EE20 F005          	lfsr	2,5
  2413  001282  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2414  001284  26D9               	addwf	fsr2l,f,c
  2415  001286  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2416  001288  22DA               	addwfc	fsr2h,f,c
  2417  00128A  0E43               	movlw	67
  2418  00128C  D019               	goto	L20
  2419  00128E                     l5249:
  2420                           
  2421                           ; BSR set to: 1
  2422                           ;user.c: 754: else
  2423                           ;user.c: 755: {
  2424                           ;user.c: 756: data[5] = (current_program +1)/10;
  2425  00128E  0101               	movlb	1	; () banked
  2426  001290  EE20 F005          	lfsr	2,5
  2427  001294  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2428  001296  26D9               	addwf	fsr2l,f,c
  2429  001298  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2430  00129A  22DA               	addwfc	fsr2h,f,c
  2431  00129C  0E01               	movlw	1
  2432  00129E  0101               	movlb	1	; () banked
  2433  0012A0  250B               	addwf	get_timer1_counter_interval@current_program& (0+255),w,b
  2434  0012A2  0101               	movlb	1	; () banked
  2435  0012A4  6F00               	movwf	___awdiv@dividend& (0+255),b
  2436  0012A6  0101               	movlb	1	; () banked
  2437  0012A8  6B01               	clrf	(___awdiv@dividend+1)& (0+255),b
  2438  0012AA  0E00               	movlw	0
  2439  0012AC  2301               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  2440  0012AE  0E00               	movlw	0
  2441  0012B0  0101               	movlb	1	; () banked
  2442  0012B2  6F03               	movwf	(___awdiv@divisor+1)& (0+255),b
  2443  0012B4  0E0A               	movlw	10
  2444  0012B6  6F02               	movwf	___awdiv@divisor& (0+255),b
  2445  0012B8  ECE5  F00B         	call	___awdiv	;wreg free
  2446  0012BC  0101               	movlb	1	; () banked
  2447  0012BE  5100               	movf	?___awdiv& (0+255),w,b
  2448  0012C0                     L20:
  2449  0012C0  6EDF               	movwf	indf2,c
  2450                           
  2451                           ; BSR set to: 1
  2452                           ;user.c: 757: }
  2453                           ;user.c: 758: data[4] = (current_program +1) % 10;
  2454  0012C2  0101               	movlb	1	; () banked
  2455  0012C4  EE20 F004          	lfsr	2,4
  2456  0012C8  5108               	movf	get_timer1_counter_interval@data& (0+255),w,b
  2457  0012CA  26D9               	addwf	fsr2l,f,c
  2458  0012CC  5109               	movf	(get_timer1_counter_interval@data+1)& (0+255),w,b
  2459  0012CE  22DA               	addwfc	fsr2h,f,c
  2460  0012D0  0E01               	movlw	1
  2461  0012D2  0101               	movlb	1	; () banked
  2462  0012D4  250B               	addwf	get_timer1_counter_interval@current_program& (0+255),w,b
  2463  0012D6  0101               	movlb	1	; () banked
  2464  0012D8  6F00               	movwf	___awmod@dividend& (0+255),b
  2465  0012DA  0101               	movlb	1	; () banked
  2466  0012DC  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  2467  0012DE  0E00               	movlw	0
  2468  0012E0  2301               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  2469  0012E2  0E00               	movlw	0
  2470  0012E4  0101               	movlb	1	; () banked
  2471  0012E6  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  2472  0012E8  0E0A               	movlw	10
  2473  0012EA  6F02               	movwf	___awmod@divisor& (0+255),b
  2474  0012EC  EC9D  F00C         	call	___awmod	;wreg free
  2475  0012F0  0101               	movlb	1	; () banked
  2476  0012F2  5100               	movf	?___awmod& (0+255),w,b
  2477  0012F4  6EDF               	movwf	indf2,c
  2478                           
  2479                           ; BSR set to: 1
  2480  0012F6  0012               	return	
  2481  0012F8                     __end_of_get_timer1_counter_interval:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           postinc0	equ	0xFEE
  2485                           wreg	equ	0xFE8
  2486                           indf2	equ	0xFDF
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function ___awmod *****************
  2492 ;; Defined at:
  2493 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awmod.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  dividend        2    0[BANK1 ] int 
  2496 ;;  divisor         2    2[BANK1 ] int 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  sign            1    5[BANK1 ] unsigned char 
  2499 ;;  counter         1    4[BANK1 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  2    0[BANK1 ] int 
  2502 ;; Registers used:
  2503 ;;		wreg, status,2, status,0
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2509 ;;      Params:         0       0       4       0       0       0       0       0       0
  2510 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2512 ;;      Totals:         0       0       6       0       0       0       0       0       0
  2513 ;;Total ram usage:        6 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    6
  2516 ;; This function calls:
  2517 ;;		Nothing
  2518 ;; This function is called by:
  2519 ;;		_get_cents_reg
  2520 ;;		_get_timer1_counter_interval
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text7
  2525  00193A                     __ptext7:
  2526                           	opt stack 0
  2527  00193A                     ___awmod:
  2528                           	opt stack 22
  2529                           
  2530                           ; BSR set to: 1
  2531                           ;incstack = 0
  2532  00193A  0E00               	movlw	0
  2533  00193C  0101               	movlb	1	; () banked
  2534  00193E  6F05               	movwf	___awmod@sign& (0+255),b
  2535                           
  2536                           ; BSR set to: 1
  2537  001940  0101               	movlb	1	; () banked
  2538  001942  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
  2539  001944  D008               	goto	l5001
  2540                           
  2541                           ; BSR set to: 1
  2542  001946  0101               	movlb	1	; () banked
  2543  001948  6D00               	negf	___awmod@dividend& (0+255),b
  2544  00194A  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  2545  00194C  B0D8               	btfsc	status,0,c
  2546  00194E  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  2547                           
  2548                           ; BSR set to: 1
  2549  001950  0E01               	movlw	1
  2550  001952  0101               	movlb	1	; () banked
  2551  001954  6F05               	movwf	___awmod@sign& (0+255),b
  2552  001956                     l5001:
  2553                           
  2554                           ; BSR set to: 1
  2555  001956  0101               	movlb	1	; () banked
  2556  001958  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2557  00195A  D005               	goto	l5005
  2558                           
  2559                           ; BSR set to: 1
  2560  00195C  0101               	movlb	1	; () banked
  2561  00195E  6D02               	negf	___awmod@divisor& (0+255),b
  2562  001960  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
  2563  001962  B0D8               	btfsc	status,0,c
  2564  001964  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
  2565  001966                     l5005:
  2566                           
  2567                           ; BSR set to: 1
  2568  001966  0101               	movlb	1	; () banked
  2569  001968  5102               	movf	___awmod@divisor& (0+255),w,b
  2570  00196A  0101               	movlb	1	; () banked
  2571  00196C  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  2572  00196E  B4D8               	btfsc	status,2,c
  2573  001970  D026               	goto	l5021
  2574                           
  2575                           ; BSR set to: 1
  2576  001972  0E01               	movlw	1
  2577  001974  0101               	movlb	1	; () banked
  2578  001976  6F04               	movwf	___awmod@counter& (0+255),b
  2579  001978  D006               	goto	l5011
  2580  00197A                     l5009:
  2581                           
  2582                           ; BSR set to: 1
  2583  00197A  0101               	movlb	1	; () banked
  2584  00197C  90D8               	bcf	status,0,c
  2585  00197E  3702               	rlcf	___awmod@divisor& (0+255),f,b
  2586  001980  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  2587  001982  0101               	movlb	1	; () banked
  2588  001984  2B04               	incf	___awmod@counter& (0+255),f,b
  2589  001986                     l5011:
  2590                           
  2591                           ; BSR set to: 1
  2592  001986  0101               	movlb	1	; () banked
  2593  001988  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2594  00198A  D7F7               	goto	l5009
  2595  00198C                     l5013:
  2596                           
  2597                           ; BSR set to: 1
  2598  00198C  0101               	movlb	1	; () banked
  2599  00198E  5102               	movf	___awmod@divisor& (0+255),w,b
  2600  001990  0101               	movlb	1	; () banked
  2601  001992  5D00               	subwf	___awmod@dividend& (0+255),w,b
  2602  001994  0101               	movlb	1	; () banked
  2603  001996  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  2604  001998  0101               	movlb	1	; () banked
  2605  00199A  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  2606  00199C  A0D8               	btfss	status,0,c
  2607  00199E  D008               	goto	l5017
  2608                           
  2609                           ; BSR set to: 1
  2610  0019A0  0101               	movlb	1	; () banked
  2611  0019A2  5102               	movf	___awmod@divisor& (0+255),w,b
  2612  0019A4  0101               	movlb	1	; () banked
  2613  0019A6  5F00               	subwf	___awmod@dividend& (0+255),f,b
  2614  0019A8  0101               	movlb	1	; () banked
  2615  0019AA  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  2616  0019AC  0101               	movlb	1	; () banked
  2617  0019AE  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  2618  0019B0                     l5017:
  2619                           
  2620                           ; BSR set to: 1
  2621  0019B0  0101               	movlb	1	; () banked
  2622  0019B2  90D8               	bcf	status,0,c
  2623  0019B4  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  2624  0019B6  3302               	rrcf	___awmod@divisor& (0+255),f,b
  2625                           
  2626                           ; BSR set to: 1
  2627  0019B8  0101               	movlb	1	; () banked
  2628  0019BA  2F04               	decfsz	___awmod@counter& (0+255),f,b
  2629  0019BC  D7E7               	goto	l5013
  2630  0019BE                     l5021:
  2631                           
  2632                           ; BSR set to: 1
  2633  0019BE  0101               	movlb	1	; () banked
  2634  0019C0  5105               	movf	___awmod@sign& (0+255),w,b
  2635  0019C2  0101               	movlb	1	; () banked
  2636  0019C4  B4D8               	btfsc	status,2,c
  2637  0019C6  D005               	goto	l5025
  2638                           
  2639                           ; BSR set to: 1
  2640  0019C8  0101               	movlb	1	; () banked
  2641  0019CA  6D00               	negf	___awmod@dividend& (0+255),b
  2642  0019CC  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  2643  0019CE  B0D8               	btfsc	status,0,c
  2644  0019D0  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  2645  0019D2                     l5025:
  2646                           
  2647                           ; BSR set to: 1
  2648  0019D2  C100  F100         	movff	___awmod@dividend,?___awmod
  2649  0019D6  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
  2650  0019DA  0012               	return	
  2651  0019DC                     __end_of___awmod:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           postinc0	equ	0xFEE
  2655                           wreg	equ	0xFE8
  2656                           indf2	equ	0xFDF
  2657                           fsr2h	equ	0xFDA
  2658                           fsr2l	equ	0xFD9
  2659                           status	equ	0xFD8
  2660                           
  2661 ;; *************** function ___awdiv *****************
  2662 ;; Defined at:
  2663 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awdiv.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  dividend        2    0[BANK1 ] int 
  2666 ;;  divisor         2    2[BANK1 ] int 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  quotient        2    6[BANK1 ] int 
  2669 ;;  sign            1    5[BANK1 ] unsigned char 
  2670 ;;  counter         1    4[BANK1 ] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  2    0[BANK1 ] int 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2, status,0
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2680 ;;      Params:         0       0       4       0       0       0       0       0       0
  2681 ;;      Locals:         0       0       4       0       0       0       0       0       0
  2682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2683 ;;      Totals:         0       0       8       0       0       0       0       0       0
  2684 ;;Total ram usage:        8 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    6
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_get_cents_reg
  2691 ;;		_get_timer1_counter_interval
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text8
  2696  0017CA                     __ptext8:
  2697                           	opt stack 0
  2698  0017CA                     ___awdiv:
  2699                           	opt stack 22
  2700                           
  2701                           ; BSR set to: 1
  2702                           ;incstack = 0
  2703  0017CA  0E00               	movlw	0
  2704  0017CC  0101               	movlb	1	; () banked
  2705  0017CE  6F05               	movwf	___awdiv@sign& (0+255),b
  2706                           
  2707                           ; BSR set to: 1
  2708  0017D0  0101               	movlb	1	; () banked
  2709  0017D2  AF03               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2710  0017D4  D008               	goto	l4957
  2711                           
  2712                           ; BSR set to: 1
  2713  0017D6  0101               	movlb	1	; () banked
  2714  0017D8  6D02               	negf	___awdiv@divisor& (0+255),b
  2715  0017DA  1F03               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2716  0017DC  B0D8               	btfsc	status,0,c
  2717  0017DE  2B03               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2718                           
  2719                           ; BSR set to: 1
  2720  0017E0  0E01               	movlw	1
  2721  0017E2  0101               	movlb	1	; () banked
  2722  0017E4  6F05               	movwf	___awdiv@sign& (0+255),b
  2723  0017E6                     l4957:
  2724                           
  2725                           ; BSR set to: 1
  2726  0017E6  0101               	movlb	1	; () banked
  2727  0017E8  AF01               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2728  0017EA  D008               	goto	l4963
  2729                           
  2730                           ; BSR set to: 1
  2731  0017EC  0101               	movlb	1	; () banked
  2732  0017EE  6D00               	negf	___awdiv@dividend& (0+255),b
  2733  0017F0  1F01               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2734  0017F2  B0D8               	btfsc	status,0,c
  2735  0017F4  2B01               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2736                           
  2737                           ; BSR set to: 1
  2738  0017F6  0E01               	movlw	1
  2739  0017F8  0101               	movlb	1	; () banked
  2740  0017FA  1B05               	xorwf	___awdiv@sign& (0+255),f,b
  2741  0017FC                     l4963:
  2742                           
  2743                           ; BSR set to: 1
  2744  0017FC  0E00               	movlw	0
  2745  0017FE  0101               	movlb	1	; () banked
  2746  001800  6F07               	movwf	(___awdiv@quotient+1)& (0+255),b
  2747  001802  0E00               	movlw	0
  2748  001804  6F06               	movwf	___awdiv@quotient& (0+255),b
  2749                           
  2750                           ; BSR set to: 1
  2751  001806  0101               	movlb	1	; () banked
  2752  001808  5102               	movf	___awdiv@divisor& (0+255),w,b
  2753  00180A  0101               	movlb	1	; () banked
  2754  00180C  1103               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2755  00180E  B4D8               	btfsc	status,2,c
  2756  001810  D02C               	goto	l4985
  2757                           
  2758                           ; BSR set to: 1
  2759  001812  0E01               	movlw	1
  2760  001814  0101               	movlb	1	; () banked
  2761  001816  6F04               	movwf	___awdiv@counter& (0+255),b
  2762  001818  D006               	goto	l4971
  2763  00181A                     l4969:
  2764                           
  2765                           ; BSR set to: 1
  2766  00181A  0101               	movlb	1	; () banked
  2767  00181C  90D8               	bcf	status,0,c
  2768  00181E  3702               	rlcf	___awdiv@divisor& (0+255),f,b
  2769  001820  3703               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2770  001822  0101               	movlb	1	; () banked
  2771  001824  2B04               	incf	___awdiv@counter& (0+255),f,b
  2772  001826                     l4971:
  2773                           
  2774                           ; BSR set to: 1
  2775  001826  0101               	movlb	1	; () banked
  2776  001828  AF03               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2777  00182A  D7F7               	goto	l4969
  2778  00182C                     l4973:
  2779                           
  2780                           ; BSR set to: 1
  2781  00182C  0101               	movlb	1	; () banked
  2782  00182E  90D8               	bcf	status,0,c
  2783  001830  3706               	rlcf	___awdiv@quotient& (0+255),f,b
  2784  001832  3707               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2785                           
  2786                           ; BSR set to: 1
  2787  001834  0101               	movlb	1	; () banked
  2788  001836  5102               	movf	___awdiv@divisor& (0+255),w,b
  2789  001838  0101               	movlb	1	; () banked
  2790  00183A  5D00               	subwf	___awdiv@dividend& (0+255),w,b
  2791  00183C  0101               	movlb	1	; () banked
  2792  00183E  5103               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2793  001840  0101               	movlb	1	; () banked
  2794  001842  5901               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2795  001844  A0D8               	btfss	status,0,c
  2796  001846  D00A               	goto	l4981
  2797                           
  2798                           ; BSR set to: 1
  2799  001848  0101               	movlb	1	; () banked
  2800  00184A  5102               	movf	___awdiv@divisor& (0+255),w,b
  2801  00184C  0101               	movlb	1	; () banked
  2802  00184E  5F00               	subwf	___awdiv@dividend& (0+255),f,b
  2803  001850  0101               	movlb	1	; () banked
  2804  001852  5103               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2805  001854  0101               	movlb	1	; () banked
  2806  001856  5B01               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2807                           
  2808                           ; BSR set to: 1
  2809  001858  0101               	movlb	1	; () banked
  2810  00185A  8106               	bsf	___awdiv@quotient& (0+255),0,b
  2811  00185C                     l4981:
  2812                           
  2813                           ; BSR set to: 1
  2814  00185C  0101               	movlb	1	; () banked
  2815  00185E  90D8               	bcf	status,0,c
  2816  001860  3303               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2817  001862  3302               	rrcf	___awdiv@divisor& (0+255),f,b
  2818                           
  2819                           ; BSR set to: 1
  2820  001864  0101               	movlb	1	; () banked
  2821  001866  2F04               	decfsz	___awdiv@counter& (0+255),f,b
  2822  001868  D7E1               	goto	l4973
  2823  00186A                     l4985:
  2824                           
  2825                           ; BSR set to: 1
  2826  00186A  0101               	movlb	1	; () banked
  2827  00186C  5105               	movf	___awdiv@sign& (0+255),w,b
  2828  00186E  0101               	movlb	1	; () banked
  2829  001870  B4D8               	btfsc	status,2,c
  2830  001872  D005               	goto	l4989
  2831                           
  2832                           ; BSR set to: 1
  2833  001874  0101               	movlb	1	; () banked
  2834  001876  6D06               	negf	___awdiv@quotient& (0+255),b
  2835  001878  1F07               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2836  00187A  B0D8               	btfsc	status,0,c
  2837  00187C  2B07               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2838  00187E                     l4989:
  2839                           
  2840                           ; BSR set to: 1
  2841  00187E  C106  F100         	movff	___awdiv@quotient,?___awdiv
  2842  001882  C107  F101         	movff	___awdiv@quotient+1,?___awdiv+1
  2843  001886  0012               	return	
  2844  001888                     __end_of___awdiv:
  2845                           	opt stack 0
  2846                           tblptru	equ	0xFF8
  2847                           postinc0	equ	0xFEE
  2848                           wreg	equ	0xFE8
  2849                           indf2	equ	0xFDF
  2850                           fsr2h	equ	0xFDA
  2851                           fsr2l	equ	0xFD9
  2852                           status	equ	0xFD8
  2853                           
  2854 ;; *************** function _get_timer1_counter_down *****************
  2855 ;; Defined at:
  2856 ;;		line 703 in file "user.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;  data            2    2[BANK1 ] PTR unsigned char 
  2859 ;;		 -> aux1(6), 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;		None
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  1    wreg      void 
  2864 ;; Registers used:
  2865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2871 ;;      Params:         0       0       2       0       0       0       0       0       0
  2872 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2873 ;;      Temps:          0       0       1       0       0       0       0       0       0
  2874 ;;      Totals:         0       0       3       0       0       0       0       0       0
  2875 ;;Total ram usage:        3 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    7
  2878 ;; This function calls:
  2879 ;;		_get_seconds_reg
  2880 ;; This function is called by:
  2881 ;;		_main
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text9
  2886  0019DC                     __ptext9:
  2887                           	opt stack 0
  2888  0019DC                     _get_timer1_counter_down:
  2889                           	opt stack 23
  2890                           
  2891                           ;user.c: 705: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  2892                           
  2893                           ; BSR set to: 1
  2894                           ;incstack = 0
  2895  0019DC  0100               	movlb	0	; () banked
  2896  0019DE  519B               	movf	_timer1_counter_10& (0+255),w,b
  2897  0019E0  EC0F  F00E         	call	_get_seconds_reg
  2898  0019E4  0B0F               	andlw	15
  2899  0019E6  C102  FFD9         	movff	get_timer1_counter_down@data,fsr2l
  2900  0019EA  C103  FFDA         	movff	get_timer1_counter_down@data+1,fsr2h
  2901  0019EE  6EDF               	movwf	indf2,c
  2902                           
  2903                           ;user.c: 706: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  2904  0019F0  0101               	movlb	1	; () banked
  2905  0019F2  EE20 F001          	lfsr	2,1
  2906  0019F6  5102               	movf	get_timer1_counter_down@data& (0+255),w,b
  2907  0019F8  26D9               	addwf	fsr2l,f,c
  2908  0019FA  5103               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2909  0019FC  22DA               	addwfc	fsr2h,f,c
  2910  0019FE  0100               	movlb	0	; () banked
  2911  001A00  519B               	movf	_timer1_counter_10& (0+255),w,b
  2912  001A02  EC0F  F00E         	call	_get_seconds_reg
  2913  001A06  0101               	movlb	1	; () banked
  2914  001A08  6F04               	movwf	??_get_timer1_counter_down& (0+255),b
  2915  001A0A  0101               	movlb	1	; () banked
  2916  001A0C  3904               	swapf	??_get_timer1_counter_down& (0+255),w,b
  2917  001A0E  0B0F               	andlw	15
  2918  001A10  0B0F               	andlw	15
  2919  001A12  6EDF               	movwf	indf2,c
  2920                           
  2921                           ;user.c: 707: data[2] = get_seconds_reg(timer1_counter_min) & 0x0f;
  2922  001A14  0101               	movlb	1	; () banked
  2923  001A16  EE20 F002          	lfsr	2,2
  2924  001A1A  5102               	movf	get_timer1_counter_down@data& (0+255),w,b
  2925  001A1C  26D9               	addwf	fsr2l,f,c
  2926  001A1E  5103               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2927  001A20  22DA               	addwfc	fsr2h,f,c
  2928  001A22  5031               	movf	_timer1_counter_min,w,c
  2929  001A24  EC0F  F00E         	call	_get_seconds_reg
  2930  001A28  0B0F               	andlw	15
  2931  001A2A  6EDF               	movwf	indf2,c
  2932                           
  2933                           ;user.c: 708: data[3] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  2934  001A2C  0101               	movlb	1	; () banked
  2935  001A2E  EE20 F003          	lfsr	2,3
  2936  001A32  5102               	movf	get_timer1_counter_down@data& (0+255),w,b
  2937  001A34  26D9               	addwf	fsr2l,f,c
  2938  001A36  5103               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2939  001A38  22DA               	addwfc	fsr2h,f,c
  2940  001A3A  5031               	movf	_timer1_counter_min,w,c
  2941  001A3C  EC0F  F00E         	call	_get_seconds_reg
  2942  001A40  0101               	movlb	1	; () banked
  2943  001A42  6F04               	movwf	??_get_timer1_counter_down& (0+255),b
  2944  001A44  0101               	movlb	1	; () banked
  2945  001A46  3904               	swapf	??_get_timer1_counter_down& (0+255),w,b
  2946  001A48  0B0F               	andlw	15
  2947  001A4A  0B0F               	andlw	15
  2948  001A4C  6EDF               	movwf	indf2,c
  2949                           
  2950                           ; BSR set to: 1
  2951                           ;user.c: 709: data[4] = 'N';
  2952  001A4E  0101               	movlb	1	; () banked
  2953  001A50  EE20 F004          	lfsr	2,4
  2954  001A54  5102               	movf	get_timer1_counter_down@data& (0+255),w,b
  2955  001A56  26D9               	addwf	fsr2l,f,c
  2956  001A58  5103               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2957  001A5A  22DA               	addwfc	fsr2h,f,c
  2958  001A5C  0E4E               	movlw	78
  2959  001A5E  6EDF               	movwf	indf2,c
  2960                           
  2961                           ; BSR set to: 1
  2962                           ;user.c: 710: data[5] = 'D';
  2963  001A60  0101               	movlb	1	; () banked
  2964  001A62  EE20 F005          	lfsr	2,5
  2965  001A66  5102               	movf	get_timer1_counter_down@data& (0+255),w,b
  2966  001A68  26D9               	addwf	fsr2l,f,c
  2967  001A6A  5103               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2968  001A6C  22DA               	addwfc	fsr2h,f,c
  2969  001A6E  0E44               	movlw	68
  2970  001A70  6EDF               	movwf	indf2,c
  2971                           
  2972                           ; BSR set to: 1
  2973  001A72  0012               	return		;funcret
  2974  001A74                     __end_of_get_timer1_counter_down:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           indf2	equ	0xFDF
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _get_timer1_counter *****************
  2985 ;; Defined at:
  2986 ;;		line 692 in file "user.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  data            2    2[BANK1 ] PTR unsigned char 
  2989 ;;		 -> aux1(6), 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;		None
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3001 ;;      Params:         0       0       2       0       0       0       0       0       0
  3002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3003 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3004 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3005 ;;Total ram usage:        3 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    7
  3008 ;; This function calls:
  3009 ;;		_get_seconds_reg
  3010 ;; This function is called by:
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text10
  3016  001A74                     __ptext10:
  3017                           	opt stack 0
  3018  001A74                     _get_timer1_counter:
  3019                           	opt stack 23
  3020                           
  3021                           ;user.c: 694: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  3022                           
  3023                           ; BSR set to: 1
  3024                           ;incstack = 0
  3025  001A74  0100               	movlb	0	; () banked
  3026  001A76  519B               	movf	_timer1_counter_10& (0+255),w,b
  3027  001A78  EC0F  F00E         	call	_get_seconds_reg
  3028  001A7C  0B0F               	andlw	15
  3029  001A7E  C102  FFD9         	movff	get_timer1_counter@data,fsr2l
  3030  001A82  C103  FFDA         	movff	get_timer1_counter@data+1,fsr2h
  3031  001A86  6EDF               	movwf	indf2,c
  3032                           
  3033                           ;user.c: 695: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  3034  001A88  0101               	movlb	1	; () banked
  3035  001A8A  EE20 F001          	lfsr	2,1
  3036  001A8E  5102               	movf	get_timer1_counter@data& (0+255),w,b
  3037  001A90  26D9               	addwf	fsr2l,f,c
  3038  001A92  5103               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  3039  001A94  22DA               	addwfc	fsr2h,f,c
  3040  001A96  0100               	movlb	0	; () banked
  3041  001A98  519B               	movf	_timer1_counter_10& (0+255),w,b
  3042  001A9A  EC0F  F00E         	call	_get_seconds_reg
  3043  001A9E  0101               	movlb	1	; () banked
  3044  001AA0  6F04               	movwf	??_get_timer1_counter& (0+255),b
  3045  001AA2  0101               	movlb	1	; () banked
  3046  001AA4  3904               	swapf	??_get_timer1_counter& (0+255),w,b
  3047  001AA6  0B0F               	andlw	15
  3048  001AA8  0B0F               	andlw	15
  3049  001AAA  6EDF               	movwf	indf2,c
  3050                           
  3051                           ;user.c: 696: data[2] = get_seconds_reg(timer1_counter_min) & 0x0f;
  3052  001AAC  0101               	movlb	1	; () banked
  3053  001AAE  EE20 F002          	lfsr	2,2
  3054  001AB2  5102               	movf	get_timer1_counter@data& (0+255),w,b
  3055  001AB4  26D9               	addwf	fsr2l,f,c
  3056  001AB6  5103               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  3057  001AB8  22DA               	addwfc	fsr2h,f,c
  3058  001ABA  5031               	movf	_timer1_counter_min,w,c
  3059  001ABC  EC0F  F00E         	call	_get_seconds_reg
  3060  001AC0  0B0F               	andlw	15
  3061  001AC2  6EDF               	movwf	indf2,c
  3062                           
  3063                           ;user.c: 697: data[3] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  3064  001AC4  0101               	movlb	1	; () banked
  3065  001AC6  EE20 F003          	lfsr	2,3
  3066  001ACA  5102               	movf	get_timer1_counter@data& (0+255),w,b
  3067  001ACC  26D9               	addwf	fsr2l,f,c
  3068  001ACE  5103               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  3069  001AD0  22DA               	addwfc	fsr2h,f,c
  3070  001AD2  5031               	movf	_timer1_counter_min,w,c
  3071  001AD4  EC0F  F00E         	call	_get_seconds_reg
  3072  001AD8  0101               	movlb	1	; () banked
  3073  001ADA  6F04               	movwf	??_get_timer1_counter& (0+255),b
  3074  001ADC  0101               	movlb	1	; () banked
  3075  001ADE  3904               	swapf	??_get_timer1_counter& (0+255),w,b
  3076  001AE0  0B0F               	andlw	15
  3077  001AE2  0B0F               	andlw	15
  3078  001AE4  6EDF               	movwf	indf2,c
  3079                           
  3080                           ; BSR set to: 1
  3081                           ;user.c: 698: data[4] = 'P';
  3082  001AE6  0101               	movlb	1	; () banked
  3083  001AE8  EE20 F004          	lfsr	2,4
  3084  001AEC  5102               	movf	get_timer1_counter@data& (0+255),w,b
  3085  001AEE  26D9               	addwf	fsr2l,f,c
  3086  001AF0  5103               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  3087  001AF2  22DA               	addwfc	fsr2h,f,c
  3088  001AF4  0E50               	movlw	80
  3089  001AF6  6EDF               	movwf	indf2,c
  3090                           
  3091                           ; BSR set to: 1
  3092                           ;user.c: 699: data[5] = 'U';
  3093  001AF8  0101               	movlb	1	; () banked
  3094  001AFA  EE20 F005          	lfsr	2,5
  3095  001AFE  5102               	movf	get_timer1_counter@data& (0+255),w,b
  3096  001B00  26D9               	addwf	fsr2l,f,c
  3097  001B02  5103               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  3098  001B04  22DA               	addwfc	fsr2h,f,c
  3099  001B06  0E55               	movlw	85
  3100  001B08  6EDF               	movwf	indf2,c
  3101                           
  3102                           ; BSR set to: 1
  3103  001B0A  0012               	return		;funcret
  3104  001B0C                     __end_of_get_timer1_counter:
  3105                           	opt stack 0
  3106                           tblptru	equ	0xFF8
  3107                           postinc0	equ	0xFEE
  3108                           wreg	equ	0xFE8
  3109                           indf2	equ	0xFDF
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function _get_seconds_reg *****************
  3115 ;; Defined at:
  3116 ;;		line 298 in file "user.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  seconds         1    wreg     unsigned char 
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  seconds         1    1[BANK1 ] unsigned char 
  3121 ;;  res             1    0[BANK1 ] unsigned char 
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      unsigned char 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3131 ;;      Params:         0       0       0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       2       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3134 ;;      Totals:         0       0       2       0       0       0       0       0       0
  3135 ;;Total ram usage:        2 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    6
  3138 ;; This function calls:
  3139 ;;		Nothing
  3140 ;; This function is called by:
  3141 ;;		_get_timer1_counter
  3142 ;;		_get_timer1_counter_down
  3143 ;;		_get_timer1_counter_speed
  3144 ;;		_get_timer1_counter_interval
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text11
  3149  001C1E                     __ptext11:
  3150                           	opt stack 0
  3151  001C1E                     _get_seconds_reg:
  3152                           	opt stack 23
  3153                           
  3154                           ; BSR set to: 1
  3155                           ;incstack = 0
  3156                           ;get_seconds_reg@seconds stored from wreg
  3157  001C1E  0101               	movlb	1	; () banked
  3158  001C20  6F01               	movwf	get_seconds_reg@seconds& (0+255),b
  3159                           
  3160                           ;user.c: 300: char res = 0;
  3161  001C22  0E00               	movlw	0
  3162  001C24  0101               	movlb	1	; () banked
  3163  001C26  6F00               	movwf	get_seconds_reg@res& (0+255),b
  3164                           
  3165                           ; BSR set to: 1
  3166                           ;user.c: 301: if(seconds<10)
  3167  001C28  0E0A               	movlw	10
  3168  001C2A  0101               	movlb	1	; () banked
  3169  001C2C  6101               	cpfslt	get_seconds_reg@seconds& (0+255),b
  3170  001C2E  D003               	goto	l5067
  3171                           
  3172                           ; BSR set to: 1
  3173                           ;user.c: 302: {
  3174                           ;user.c: 303: res = seconds;
  3175  001C30  C101  F100         	movff	get_seconds_reg@seconds,get_seconds_reg@res
  3176                           
  3177                           ;user.c: 304: }
  3178  001C34  D02A               	goto	l5085
  3179  001C36                     l5067:
  3180                           
  3181                           ; BSR set to: 1
  3182                           ;user.c: 305: else if(seconds <20)
  3183  001C36  0E14               	movlw	20
  3184  001C38  0101               	movlb	1	; () banked
  3185  001C3A  6101               	cpfslt	get_seconds_reg@seconds& (0+255),b
  3186  001C3C  D005               	goto	l5071
  3187                           
  3188                           ; BSR set to: 1
  3189                           ;user.c: 306: {
  3190                           ;user.c: 307: res = 1<<4 | (seconds - 10);
  3191  001C3E  0101               	movlb	1	; () banked
  3192  001C40  5101               	movf	get_seconds_reg@seconds& (0+255),w,b
  3193  001C42  0FF6               	addlw	246
  3194  001C44  0910               	iorlw	16
  3195  001C46  D01F               	goto	L24
  3196  001C48                     l5071:
  3197                           
  3198                           ; BSR set to: 1
  3199                           ;user.c: 309: else if(seconds <30)
  3200  001C48  0E1E               	movlw	30
  3201  001C4A  0101               	movlb	1	; () banked
  3202  001C4C  6101               	cpfslt	get_seconds_reg@seconds& (0+255),b
  3203  001C4E  D005               	goto	l5075
  3204                           
  3205                           ; BSR set to: 1
  3206                           ;user.c: 310: {
  3207                           ;user.c: 311: res = 2<<4 | (seconds -20);
  3208  001C50  0101               	movlb	1	; () banked
  3209  001C52  5101               	movf	get_seconds_reg@seconds& (0+255),w,b
  3210  001C54  0FEC               	addlw	236
  3211  001C56  0920               	iorlw	32
  3212  001C58  D016               	goto	L24
  3213  001C5A                     l5075:
  3214                           
  3215                           ; BSR set to: 1
  3216                           ;user.c: 313: else if(seconds <40)
  3217  001C5A  0E28               	movlw	40
  3218  001C5C  0101               	movlb	1	; () banked
  3219  001C5E  6101               	cpfslt	get_seconds_reg@seconds& (0+255),b
  3220  001C60  D005               	goto	l5079
  3221                           
  3222                           ; BSR set to: 1
  3223                           ;user.c: 314: {
  3224                           ;user.c: 315: res = 3<<4 | (seconds - 30);
  3225  001C62  0101               	movlb	1	; () banked
  3226  001C64  5101               	movf	get_seconds_reg@seconds& (0+255),w,b
  3227  001C66  0FE2               	addlw	226
  3228  001C68  0930               	iorlw	48
  3229  001C6A  D00D               	goto	L24
  3230  001C6C                     l5079:
  3231                           
  3232                           ; BSR set to: 1
  3233                           ;user.c: 317: else if(seconds <50)
  3234  001C6C  0E32               	movlw	50
  3235  001C6E  0101               	movlb	1	; () banked
  3236  001C70  6101               	cpfslt	get_seconds_reg@seconds& (0+255),b
  3237  001C72  D005               	goto	l5083
  3238                           
  3239                           ; BSR set to: 1
  3240                           ;user.c: 318: {
  3241                           ;user.c: 319: res = 4<<4 | (seconds - 40);
  3242  001C74  0101               	movlb	1	; () banked
  3243  001C76  5101               	movf	get_seconds_reg@seconds& (0+255),w,b
  3244  001C78  0FD8               	addlw	216
  3245  001C7A  0940               	iorlw	64
  3246  001C7C  D004               	goto	L24
  3247  001C7E                     l5083:
  3248                           
  3249                           ; BSR set to: 1
  3250                           ;user.c: 321: else
  3251                           ;user.c: 322: {
  3252                           ;user.c: 323: res = 5<<4 | (seconds -50);
  3253  001C7E  0101               	movlb	1	; () banked
  3254  001C80  5101               	movf	get_seconds_reg@seconds& (0+255),w,b
  3255  001C82  0FCE               	addlw	206
  3256  001C84  0950               	iorlw	80
  3257  001C86                     L24:
  3258  001C86  0101               	movlb	1	; () banked
  3259  001C88  6F00               	movwf	get_seconds_reg@res& (0+255),b
  3260  001C8A                     l5085:
  3261                           
  3262                           ; BSR set to: 1
  3263                           ;user.c: 324: }
  3264                           ;user.c: 326: return res;
  3265  001C8A  0101               	movlb	1	; () banked
  3266  001C8C  5100               	movf	get_seconds_reg@res& (0+255),w,b
  3267  001C8E  0012               	return	
  3268  001C90                     __end_of_get_seconds_reg:
  3269                           	opt stack 0
  3270                           tblptru	equ	0xFF8
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           indf2	equ	0xFDF
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _get_time *****************
  3279 ;; Defined at:
  3280 ;;		line 254 in file "user.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  data            2   11[BANK1 ] PTR unsigned char 
  3283 ;;		 -> aux1(6), 
  3284 ;;  format          1   13[BANK1 ] unsigned char 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  aux_hour        1   16[BANK1 ] unsigned char 
  3287 ;;  hours           1   19[BANK1 ] unsigned char 
  3288 ;;  aux             1   18[BANK1 ] unsigned char 
  3289 ;;  minutes         1   17[BANK1 ] unsigned char 
  3290 ;;  seconds         1   15[BANK1 ] unsigned char 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3300 ;;      Params:         0       0       3       0       0       0       0       0       0
  3301 ;;      Locals:         0       0       5       0       0       0       0       0       0
  3302 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3303 ;;      Totals:         0       0       9       0       0       0       0       0       0
  3304 ;;Total ram usage:        9 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    9
  3307 ;; This function calls:
  3308 ;;		_byte_read
  3309 ;; This function is called by:
  3310 ;;		_main
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text12
  3315  0014AA                     __ptext12:
  3316                           	opt stack 0
  3317  0014AA                     _get_time:
  3318                           	opt stack 21
  3319                           
  3320                           ;user.c: 256: char aux = 0x81;
  3321                           
  3322                           ; BSR set to: 1
  3323                           ;incstack = 0
  3324  0014AA  0E81               	movlw	129
  3325  0014AC  0101               	movlb	1	; () banked
  3326  0014AE  6F12               	movwf	get_time@aux& (0+255),b
  3327                           
  3328                           ; BSR set to: 1
  3329                           ;user.c: 257: char seconds = byte_read(aux);
  3330  0014B0  0101               	movlb	1	; () banked
  3331  0014B2  5112               	movf	get_time@aux& (0+255),w,b
  3332  0014B4  EC86  F00D         	call	_byte_read
  3333  0014B8  0101               	movlb	1	; () banked
  3334  0014BA  6F0F               	movwf	get_time@seconds& (0+255),b
  3335                           
  3336                           ; BSR set to: 1
  3337                           ;user.c: 258: aux = 0x83;
  3338  0014BC  0E83               	movlw	131
  3339  0014BE  0101               	movlb	1	; () banked
  3340  0014C0  6F12               	movwf	get_time@aux& (0+255),b
  3341                           
  3342                           ;user.c: 259: char minutes = byte_read(aux);
  3343  0014C2  0101               	movlb	1	; () banked
  3344  0014C4  5112               	movf	get_time@aux& (0+255),w,b
  3345  0014C6  EC86  F00D         	call	_byte_read
  3346  0014CA  0101               	movlb	1	; () banked
  3347  0014CC  6F11               	movwf	get_time@minutes& (0+255),b
  3348                           
  3349                           ; BSR set to: 1
  3350                           ;user.c: 260: aux = 0x85;
  3351  0014CE  0E85               	movlw	133
  3352  0014D0  0101               	movlb	1	; () banked
  3353  0014D2  6F12               	movwf	get_time@aux& (0+255),b
  3354                           
  3355                           ; BSR set to: 1
  3356                           ;user.c: 261: char hours = byte_read(aux);
  3357  0014D4  0101               	movlb	1	; () banked
  3358  0014D6  5112               	movf	get_time@aux& (0+255),w,b
  3359  0014D8  EC86  F00D         	call	_byte_read
  3360  0014DC  0101               	movlb	1	; () banked
  3361  0014DE  6F13               	movwf	get_time@hours& (0+255),b
  3362                           
  3363                           ; BSR set to: 1
  3364                           ;user.c: 264: data[0] = minutes & 0x0f;
  3365  0014E0  0101               	movlb	1	; () banked
  3366  0014E2  5111               	movf	get_time@minutes& (0+255),w,b
  3367  0014E4  0B0F               	andlw	15
  3368  0014E6  C10B  FFD9         	movff	get_time@data,fsr2l
  3369  0014EA  C10C  FFDA         	movff	get_time@data+1,fsr2h
  3370  0014EE  6EDF               	movwf	indf2,c
  3371                           
  3372                           ; BSR set to: 1
  3373                           ;user.c: 265: data[1] = (minutes & 0xf0)>>4;
  3374  0014F0  0101               	movlb	1	; () banked
  3375  0014F2  EE20 F001          	lfsr	2,1
  3376  0014F6  510B               	movf	get_time@data& (0+255),w,b
  3377  0014F8  26D9               	addwf	fsr2l,f,c
  3378  0014FA  510C               	movf	(get_time@data+1)& (0+255),w,b
  3379  0014FC  22DA               	addwfc	fsr2h,f,c
  3380  0014FE  0101               	movlb	1	; () banked
  3381  001500  3911               	swapf	get_time@minutes& (0+255),w,b
  3382  001502  0B0F               	andlw	15
  3383  001504  0B0F               	andlw	15
  3384  001506  6EDF               	movwf	indf2,c
  3385                           
  3386                           ; BSR set to: 1
  3387                           ;user.c: 267: if(format == 1)
  3388  001508  0101               	movlb	1	; () banked
  3389  00150A  050D               	decf	get_time@format& (0+255),w,b
  3390  00150C  A4D8               	btfss	status,2,c
  3391  00150E  D00A               	goto	l5171
  3392                           
  3393                           ; BSR set to: 1
  3394                           ;user.c: 268: {
  3395                           ;user.c: 270: data[4] = 1;
  3396  001510  0101               	movlb	1	; () banked
  3397  001512  EE20 F004          	lfsr	2,4
  3398  001516  510B               	movf	get_time@data& (0+255),w,b
  3399  001518  26D9               	addwf	fsr2l,f,c
  3400  00151A  510C               	movf	(get_time@data+1)& (0+255),w,b
  3401  00151C  22DA               	addwfc	fsr2h,f,c
  3402  00151E  0E01               	movlw	1
  3403  001520  6EDF               	movwf	indf2,c
  3404  001522  D01C               	goto	l5177
  3405  001524                     l5171:
  3406                           
  3407                           ; BSR set to: 1
  3408                           ;user.c: 275: else
  3409                           ;user.c: 276: {
  3410                           ;user.c: 277: data[4] = 2;
  3411  001524  0101               	movlb	1	; () banked
  3412  001526  EE20 F004          	lfsr	2,4
  3413  00152A  510B               	movf	get_time@data& (0+255),w,b
  3414  00152C  26D9               	addwf	fsr2l,f,c
  3415  00152E  510C               	movf	(get_time@data+1)& (0+255),w,b
  3416  001530  22DA               	addwfc	fsr2h,f,c
  3417  001532  0E02               	movlw	2
  3418  001534  6EDF               	movwf	indf2,c
  3419                           
  3420                           ; BSR set to: 1
  3421                           ;user.c: 278: char aux_hour = (hours>>4 & 0x0f)*10 + (hours & 0x0f);
  3422  001536  C113  F10E         	movff	get_time@hours,??_get_time
  3423  00153A  0E0F               	movlw	15
  3424  00153C  0101               	movlb	1	; () banked
  3425  00153E  170E               	andwf	??_get_time& (0+255),f,b
  3426  001540  0101               	movlb	1	; () banked
  3427  001542  3913               	swapf	get_time@hours& (0+255),w,b
  3428  001544  0B0F               	andlw	15
  3429  001546  0B0F               	andlw	15
  3430  001548  0D0A               	mullw	10
  3431  00154A  50F3               	movf	prodl,w,c
  3432  00154C  0101               	movlb	1	; () banked
  3433  00154E  250E               	addwf	??_get_time& (0+255),w,b
  3434  001550  0101               	movlb	1	; () banked
  3435  001552  6F10               	movwf	get_time@aux_hour& (0+255),b
  3436                           
  3437                           ; BSR set to: 1
  3438                           ;user.c: 279: if(aux_hour<=12)
  3439  001554  0E0D               	movlw	13
  3440  001556  0101               	movlb	1	; () banked
  3441  001558  6110               	cpfslt	get_time@aux_hour& (0+255),b
  3442  00155A  D017               	goto	l5179
  3443  00155C                     l5177:
  3444                           
  3445                           ; BSR set to: 1
  3446                           ;user.c: 280: {
  3447                           ;user.c: 281: data[2] = hours & 0x0f;
  3448  00155C  0101               	movlb	1	; () banked
  3449  00155E  EE20 F002          	lfsr	2,2
  3450  001562  510B               	movf	get_time@data& (0+255),w,b
  3451  001564  26D9               	addwf	fsr2l,f,c
  3452  001566  510C               	movf	(get_time@data+1)& (0+255),w,b
  3453  001568  22DA               	addwfc	fsr2h,f,c
  3454  00156A  0101               	movlb	1	; () banked
  3455  00156C  5113               	movf	get_time@hours& (0+255),w,b
  3456  00156E  0B0F               	andlw	15
  3457  001570  6EDF               	movwf	indf2,c
  3458                           
  3459                           ;user.c: 282: data[3] = (hours & 0xf0)>>4;
  3460  001572  0101               	movlb	1	; () banked
  3461  001574  EE20 F003          	lfsr	2,3
  3462  001578  510B               	movf	get_time@data& (0+255),w,b
  3463  00157A  26D9               	addwf	fsr2l,f,c
  3464  00157C  510C               	movf	(get_time@data+1)& (0+255),w,b
  3465  00157E  22DA               	addwfc	fsr2h,f,c
  3466  001580  0101               	movlb	1	; () banked
  3467  001582  3913               	swapf	get_time@hours& (0+255),w,b
  3468  001584  0B0F               	andlw	15
  3469  001586  0B0F               	andlw	15
  3470  001588  D01E               	goto	L25
  3471  00158A                     l5179:
  3472                           
  3473                           ; BSR set to: 1
  3474                           ;user.c: 284: else
  3475                           ;user.c: 285: {
  3476                           ;user.c: 286: data[2] = (hours & 0x0f) - 2;
  3477  00158A  0101               	movlb	1	; () banked
  3478  00158C  EE20 F002          	lfsr	2,2
  3479  001590  510B               	movf	get_time@data& (0+255),w,b
  3480  001592  26D9               	addwf	fsr2l,f,c
  3481  001594  510C               	movf	(get_time@data+1)& (0+255),w,b
  3482  001596  22DA               	addwfc	fsr2h,f,c
  3483  001598  0101               	movlb	1	; () banked
  3484  00159A  5113               	movf	get_time@hours& (0+255),w,b
  3485  00159C  0B0F               	andlw	15
  3486  00159E  0FFE               	addlw	254
  3487  0015A0  6EDF               	movwf	indf2,c
  3488                           
  3489                           ;user.c: 287: data[3] = (hours>>4 & 0x0f)-1;
  3490  0015A2  0101               	movlb	1	; () banked
  3491  0015A4  EE20 F003          	lfsr	2,3
  3492  0015A8  510B               	movf	get_time@data& (0+255),w,b
  3493  0015AA  26D9               	addwf	fsr2l,f,c
  3494  0015AC  510C               	movf	(get_time@data+1)& (0+255),w,b
  3495  0015AE  22DA               	addwfc	fsr2h,f,c
  3496  0015B0  C113  F10E         	movff	get_time@hours,??_get_time
  3497  0015B4  0101               	movlb	1	; () banked
  3498  0015B6  3B0E               	swapf	??_get_time& (0+255),f,b
  3499  0015B8  0E0F               	movlw	15
  3500  0015BA  170E               	andwf	??_get_time& (0+255),f,b
  3501  0015BC  0E0F               	movlw	15
  3502  0015BE  0101               	movlb	1	; () banked
  3503  0015C0  170E               	andwf	??_get_time& (0+255),f,b
  3504  0015C2  0101               	movlb	1	; () banked
  3505  0015C4  050E               	decf	??_get_time& (0+255),w,b
  3506  0015C6                     L25:
  3507  0015C6  6EDF               	movwf	indf2,c
  3508                           
  3509                           ; BSR set to: 1
  3510                           ;user.c: 288: }
  3511                           ;user.c: 290: }
  3512                           ;user.c: 293: data[5] = 'H';
  3513                           
  3514                           ; BSR set to: 1
  3515  0015C8  0101               	movlb	1	; () banked
  3516  0015CA  EE20 F005          	lfsr	2,5
  3517  0015CE  510B               	movf	get_time@data& (0+255),w,b
  3518  0015D0  26D9               	addwf	fsr2l,f,c
  3519  0015D2  510C               	movf	(get_time@data+1)& (0+255),w,b
  3520  0015D4  22DA               	addwfc	fsr2h,f,c
  3521  0015D6  0E48               	movlw	72
  3522  0015D8  6EDF               	movwf	indf2,c
  3523                           
  3524                           ; BSR set to: 1
  3525  0015DA  0012               	return		;funcret
  3526  0015DC                     __end_of_get_time:
  3527                           	opt stack 0
  3528                           tblptru	equ	0xFF8
  3529                           prodl	equ	0xFF3
  3530                           postinc0	equ	0xFEE
  3531                           wreg	equ	0xFE8
  3532                           indf2	equ	0xFDF
  3533                           fsr2h	equ	0xFDA
  3534                           fsr2l	equ	0xFD9
  3535                           status	equ	0xFD8
  3536                           
  3537 ;; *************** function _byte_read *****************
  3538 ;; Defined at:
  3539 ;;		line 198 in file "user.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  address         1    wreg     unsigned char 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  address         1    7[BANK1 ] unsigned char 
  3544 ;;  i               2    9[BANK1 ] int 
  3545 ;;  res             1    8[BANK1 ] unsigned char 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      unsigned char 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3555 ;;      Params:         0       0       0       0       0       0       0       0       0
  3556 ;;      Locals:         0       0       4       0       0       0       0       0       0
  3557 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3558 ;;      Totals:         0       0       6       0       0       0       0       0       0
  3559 ;;Total ram usage:        6 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    8
  3562 ;; This function calls:
  3563 ;;		_ce_disable
  3564 ;;		_ce_enable
  3565 ;;		_io_as_input
  3566 ;;		_send_command
  3567 ;; This function is called by:
  3568 ;;		_get_time
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text13
  3573  001B0C                     __ptext13:
  3574                           	opt stack 0
  3575  001B0C                     _byte_read:
  3576                           	opt stack 21
  3577                           
  3578                           ; BSR set to: 1
  3579                           ;incstack = 0
  3580                           ;byte_read@address stored from wreg
  3581  001B0C  0101               	movlb	1	; () banked
  3582  001B0E  6F07               	movwf	byte_read@address& (0+255),b
  3583                           
  3584                           ;user.c: 200: char res = 0;
  3585  001B10  0E00               	movlw	0
  3586  001B12  0101               	movlb	1	; () banked
  3587  001B14  6F08               	movwf	byte_read@res& (0+255),b
  3588                           
  3589                           ; BSR set to: 1
  3590                           ;user.c: 203: ce_enable();
  3591  001B16  ECA2  F010         	call	_ce_enable	;wreg free
  3592                           
  3593                           ;user.c: 205: send_command(address);
  3594  001B1A  0101               	movlb	1	; () banked
  3595  001B1C  5107               	movf	byte_read@address& (0+255),w,b
  3596  001B1E  EC48  F00E         	call	_send_command
  3597                           
  3598                           ;user.c: 206: io_as_input();
  3599  001B22  ECA0  F010         	call	_io_as_input	;wreg free
  3600                           
  3601                           ;user.c: 207: int i;
  3602                           ;user.c: 208: for(i=0;i<8;i++)
  3603  001B26  0E00               	movlw	0
  3604  001B28  0101               	movlb	1	; () banked
  3605  001B2A  6F0A               	movwf	(byte_read@i+1)& (0+255),b
  3606  001B2C  0E00               	movlw	0
  3607  001B2E  6F09               	movwf	byte_read@i& (0+255),b
  3608  001B30                     l5039:
  3609                           
  3610                           ; BSR set to: 1
  3611  001B30  0101               	movlb	1	; () banked
  3612  001B32  BF0A               	btfsc	(byte_read@i+1)& (0+255),7,b
  3613  001B34  D008               	goto	l394
  3614  001B36  0101               	movlb	1	; () banked
  3615  001B38  510A               	movf	(byte_read@i+1)& (0+255),w,b
  3616  001B3A  E12A               	bnz	l5055
  3617  001B3C  0E08               	movlw	8
  3618  001B3E  0101               	movlb	1	; () banked
  3619  001B40  5D09               	subwf	byte_read@i& (0+255),w,b
  3620  001B42  B0D8               	btfsc	status,0,c
  3621  001B44  D025               	goto	l5055
  3622  001B46                     l394:
  3623                           
  3624                           ; BSR set to: 1
  3625                           ;user.c: 209: {
  3626                           ;user.c: 210: RA2 = 0;
  3627  001B46  9480               	bcf	3968,2,c	;volatile
  3628                           
  3629                           ; BSR set to: 1
  3630                           ;user.c: 211: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  3631  001B48  0E06               	movlw	6
  3632  001B4A                     u6587:
  3633  001B4A  2EE8               	decfsz	wreg,f,c
  3634  001B4C  D7FE               	bra	u6587
  3635  001B4E  D000               	nop2	
  3636                           
  3637                           ;user.c: 212: res |= RA3<<i;
  3638  001B50  C109  F105         	movff	byte_read@i,??_byte_read
  3639  001B54  A680               	btfss	3968,3,c	;volatile
  3640  001B56  D004               	goto	u5910
  3641  001B58  0101               	movlb	1	; () banked
  3642  001B5A  6B06               	clrf	(??_byte_read+1)& (0+255),b
  3643  001B5C  2B06               	incf	(??_byte_read+1)& (0+255),f,b
  3644  001B5E  D002               	goto	u5928
  3645  001B60                     u5910:
  3646  001B60  0101               	movlb	1	; () banked
  3647  001B62  6B06               	clrf	(??_byte_read+1)& (0+255),b
  3648  001B64                     u5928:
  3649  001B64  0101               	movlb	1	; () banked
  3650  001B66  2B05               	incf	??_byte_read& (0+255),f,b
  3651  001B68  D003               	goto	u5934
  3652  001B6A                     u5935:
  3653  001B6A  0101               	movlb	1	; () banked
  3654  001B6C  90D8               	bcf	status,0,c
  3655  001B6E  3706               	rlcf	(??_byte_read+1)& (0+255),f,b
  3656  001B70                     u5934:
  3657  001B70  0101               	movlb	1	; () banked
  3658  001B72  2F05               	decfsz	??_byte_read& (0+255),f,b
  3659  001B74  D7FA               	goto	u5935
  3660  001B76  0101               	movlb	1	; () banked
  3661  001B78  5106               	movf	(??_byte_read+1)& (0+255),w,b
  3662  001B7A  0101               	movlb	1	; () banked
  3663  001B7C  1308               	iorwf	byte_read@res& (0+255),f,b
  3664                           
  3665                           ; BSR set to: 1
  3666                           ;user.c: 213: RA2 = 1;
  3667  001B7E  8480               	bsf	3968,2,c	;volatile
  3668                           
  3669                           ; BSR set to: 1
  3670                           ;user.c: 214: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  3671  001B80  0E10               	movlw	16
  3672  001B82                     u6597:
  3673  001B82  2EE8               	decfsz	wreg,f,c
  3674  001B84  D7FE               	bra	u6597
  3675  001B86  D000               	nop2	
  3676  001B88  0101               	movlb	1	; () banked
  3677  001B8A  4B09               	infsnz	byte_read@i& (0+255),f,b
  3678  001B8C  2B0A               	incf	(byte_read@i+1)& (0+255),f,b
  3679  001B8E  D7D0               	goto	l5039
  3680  001B90                     l5055:
  3681                           
  3682                           ; BSR set to: 1
  3683                           ;user.c: 216: }
  3684                           ;user.c: 218: ce_disable();
  3685  001B90  EC94  F010         	call	_ce_disable	;wreg free
  3686                           
  3687                           ;user.c: 221: return res;
  3688  001B94  0101               	movlb	1	; () banked
  3689  001B96  5108               	movf	byte_read@res& (0+255),w,b
  3690  001B98  0012               	return	
  3691  001B9A                     __end_of_byte_read:
  3692                           	opt stack 0
  3693                           tblptru	equ	0xFF8
  3694                           prodl	equ	0xFF3
  3695                           postinc0	equ	0xFEE
  3696                           wreg	equ	0xFE8
  3697                           indf2	equ	0xFDF
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _send_command *****************
  3703 ;; Defined at:
  3704 ;;		line 358 in file "user.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  command         1    wreg     unsigned char 
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  command         1    2[BANK1 ] unsigned char 
  3709 ;;  i               2    3[BANK1 ] int 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0, cstack
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3719 ;;      Params:         0       0       0       0       0       0       0       0       0
  3720 ;;      Locals:         0       0       3       0       0       0       0       0       0
  3721 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3722 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3723 ;;Total ram usage:        5 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    7
  3726 ;; This function calls:
  3727 ;;		_io_as_output
  3728 ;; This function is called by:
  3729 ;;		_byte_read
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text14
  3734  001C90                     __ptext14:
  3735                           	opt stack 0
  3736  001C90                     _send_command:
  3737                           	opt stack 21
  3738                           
  3739                           ; BSR set to: 1
  3740                           ;incstack = 0
  3741                           ;send_command@command stored from wreg
  3742  001C90  0101               	movlb	1	; () banked
  3743  001C92  6F02               	movwf	send_command@command& (0+255),b
  3744                           
  3745                           ;user.c: 360: int i;
  3746                           ;user.c: 361: io_as_output();
  3747  001C94  EC9E  F010         	call	_io_as_output	;wreg free
  3748                           
  3749                           ;user.c: 362: for(i=0; i<8; i++)
  3750  001C98  0E00               	movlw	0
  3751  001C9A  0101               	movlb	1	; () banked
  3752  001C9C  6F04               	movwf	(send_command@i+1)& (0+255),b
  3753  001C9E  0E00               	movlw	0
  3754  001CA0  6F03               	movwf	send_command@i& (0+255),b
  3755  001CA2                     l4929:
  3756                           
  3757                           ; BSR set to: 1
  3758  001CA2  0101               	movlb	1	; () banked
  3759  001CA4  BF04               	btfsc	(send_command@i+1)& (0+255),7,b
  3760  001CA6  D008               	goto	l4933
  3761  001CA8  0101               	movlb	1	; () banked
  3762  001CAA  5104               	movf	(send_command@i+1)& (0+255),w,b
  3763  001CAC  E128               	bnz	l437
  3764  001CAE  0E08               	movlw	8
  3765  001CB0  0101               	movlb	1	; () banked
  3766  001CB2  5D03               	subwf	send_command@i& (0+255),w,b
  3767  001CB4  B0D8               	btfsc	status,0,c
  3768  001CB6  0012               	return	
  3769  001CB8                     l4933:
  3770                           
  3771                           ; BSR set to: 1
  3772                           ;user.c: 363: {
  3773                           ;user.c: 364: RA3 = command>>i & 0x01;
  3774  001CB8  C103  F100         	movff	send_command@i,??_send_command
  3775  001CBC  C102  F101         	movff	send_command@command,??_send_command+1
  3776  001CC0  0101               	movlb	1	; () banked
  3777  001CC2  2B00               	incf	??_send_command& (0+255),f,b
  3778  001CC4  D003               	goto	u5744
  3779  001CC6                     u5745:
  3780  001CC6  0101               	movlb	1	; () banked
  3781  001CC8  90D8               	bcf	status,0,c
  3782  001CCA  3301               	rrcf	(??_send_command+1)& (0+255),f,b
  3783  001CCC                     u5744:
  3784  001CCC  0101               	movlb	1	; () banked
  3785  001CCE  2F00               	decfsz	??_send_command& (0+255),f,b
  3786  001CD0  D7FA               	goto	u5745
  3787  001CD2  0101               	movlb	1	; () banked
  3788  001CD4  3101               	rrcf	(??_send_command+1)& (0+255),w,b
  3789  001CD6  0101               	movlb	1	; () banked
  3790  001CD8  A0D8               	btfss	status,0,c
  3791  001CDA  D002               	goto	u5750
  3792  001CDC  8680               	bsf	3968,3,c	;volatile
  3793  001CDE  D001               	goto	l4935
  3794  001CE0                     u5750:
  3795  001CE0  9680               	bcf	3968,3,c	;volatile
  3796  001CE2                     l4935:
  3797                           
  3798                           ;user.c: 365: RA2 = 1;
  3799  001CE2  8480               	bsf	3968,2,c	;volatile
  3800                           
  3801                           ;user.c: 366: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  3802  001CE4  0E10               	movlw	16
  3803  001CE6                     u6607:
  3804  001CE6  2EE8               	decfsz	wreg,f,c
  3805  001CE8  D7FE               	bra	u6607
  3806  001CEA  D000               	nop2	
  3807                           
  3808                           ;user.c: 367: RA2 = 0;
  3809  001CEC  9480               	bcf	3968,2,c	;volatile
  3810                           
  3811                           ;user.c: 368: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  3812  001CEE  0E06               	movlw	6
  3813  001CF0                     u6617:
  3814  001CF0  2EE8               	decfsz	wreg,f,c
  3815  001CF2  D7FE               	bra	u6617
  3816  001CF4  D000               	nop2	
  3817  001CF6  0101               	movlb	1	; () banked
  3818  001CF8  4B03               	infsnz	send_command@i& (0+255),f,b
  3819  001CFA  2B04               	incf	(send_command@i+1)& (0+255),f,b
  3820  001CFC  D7D2               	goto	l4929
  3821  001CFE                     l437:
  3822                           
  3823                           ; BSR set to: 1
  3824  001CFE  0012               	return		;funcret
  3825  001D00                     __end_of_send_command:
  3826                           	opt stack 0
  3827                           tblptru	equ	0xFF8
  3828                           prodl	equ	0xFF3
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           indf2	equ	0xFDF
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _io_as_output *****************
  3837 ;; Defined at:
  3838 ;;		line 380 in file "user.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		None
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3855 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3856 ;;Total ram usage:        0 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    6
  3859 ;; This function calls:
  3860 ;;		Nothing
  3861 ;; This function is called by:
  3862 ;;		_send_command
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text15
  3867  00213C                     __ptext15:
  3868                           	opt stack 0
  3869  00213C                     _io_as_output:
  3870                           	opt stack 21
  3871                           
  3872                           ;user.c: 382: TRISA3 = 0;
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;incstack = 0
  3876  00213C  9692               	bcf	3986,3,c	;volatile
  3877  00213E  0012               	return		;funcret
  3878  002140                     __end_of_io_as_output:
  3879                           	opt stack 0
  3880                           tblptru	equ	0xFF8
  3881                           prodl	equ	0xFF3
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           indf2	equ	0xFDF
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           status	equ	0xFD8
  3888                           
  3889 ;; *************** function _io_as_input *****************
  3890 ;; Defined at:
  3891 ;;		line 374 in file "user.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		None
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3905 ;;      Params:         0       0       0       0       0       0       0       0       0
  3906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3908 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3909 ;;Total ram usage:        0 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    6
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		_byte_read
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text16
  3920  002140                     __ptext16:
  3921                           	opt stack 0
  3922  002140                     _io_as_input:
  3923                           	opt stack 22
  3924                           
  3925                           ;user.c: 376: TRISA3 = 1;
  3926                           
  3927                           ;incstack = 0
  3928  002140  8692               	bsf	3986,3,c	;volatile
  3929  002142  0012               	return		;funcret
  3930  002144                     __end_of_io_as_input:
  3931                           	opt stack 0
  3932                           tblptru	equ	0xFF8
  3933                           prodl	equ	0xFF3
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           indf2	equ	0xFDF
  3937                           fsr2h	equ	0xFDA
  3938                           fsr2l	equ	0xFD9
  3939                           status	equ	0xFD8
  3940                           
  3941 ;; *************** function _ce_enable *****************
  3942 ;; Defined at:
  3943 ;;		line 184 in file "user.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      void 
  3950 ;; Registers used:
  3951 ;;		None
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3957 ;;      Params:         0       0       0       0       0       0       0       0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3960 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3961 ;;Total ram usage:        0 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    6
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_byte_read
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text17
  3972  002144                     __ptext17:
  3973                           	opt stack 0
  3974  002144                     _ce_enable:
  3975                           	opt stack 22
  3976                           
  3977                           ;user.c: 187: RA5 = 1;
  3978                           
  3979                           ;incstack = 0
  3980  002144  8A80               	bsf	3968,5,c	;volatile
  3981  002146  0012               	return		;funcret
  3982  002148                     __end_of_ce_enable:
  3983                           	opt stack 0
  3984                           tblptru	equ	0xFF8
  3985                           prodl	equ	0xFF3
  3986                           postinc0	equ	0xFEE
  3987                           wreg	equ	0xFE8
  3988                           indf2	equ	0xFDF
  3989                           fsr2h	equ	0xFDA
  3990                           fsr2l	equ	0xFD9
  3991                           status	equ	0xFD8
  3992                           
  3993 ;; *************** function _ce_disable *****************
  3994 ;; Defined at:
  3995 ;;		line 191 in file "user.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;		None
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;		None
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      void 
  4002 ;; Registers used:
  4003 ;;		None
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4009 ;;      Params:         0       0       0       0       0       0       0       0       0
  4010 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4011 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4012 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4013 ;;Total ram usage:        0 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    6
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_byte_read
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text18
  4024  002128                     __ptext18:
  4025                           	opt stack 0
  4026  002128                     _ce_disable:
  4027                           	opt stack 22
  4028                           
  4029                           ;user.c: 193: RA5 = 0;
  4030                           
  4031                           ;incstack = 0
  4032  002128  9A80               	bcf	3968,5,c	;volatile
  4033                           
  4034                           ;user.c: 194: RA2 = 0;
  4035  00212A  9480               	bcf	3968,2,c	;volatile
  4036  00212C  0012               	return		;funcret
  4037  00212E                     __end_of_ce_disable:
  4038                           	opt stack 0
  4039                           tblptru	equ	0xFF8
  4040                           prodl	equ	0xFF3
  4041                           postinc0	equ	0xFEE
  4042                           wreg	equ	0xFE8
  4043                           indf2	equ	0xFDF
  4044                           fsr2h	equ	0xFDA
  4045                           fsr2l	equ	0xFD9
  4046                           status	equ	0xFD8
  4047                           
  4048 ;; *************** function _buzzer_disable *****************
  4049 ;; Defined at:
  4050 ;;		line 170 in file "user.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;		None
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;		None
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      void 
  4057 ;; Registers used:
  4058 ;;		wreg, status,2
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4064 ;;      Params:         0       0       0       0       0       0       0       0       0
  4065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4067 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4068 ;;Total ram usage:        0 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    6
  4071 ;; This function calls:
  4072 ;;		Nothing
  4073 ;; This function is called by:
  4074 ;;		_main
  4075 ;;		_buzzer_toggle
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text19
  4080  002110                     __ptext19:
  4081                           	opt stack 0
  4082  002110                     _buzzer_disable:
  4083                           	opt stack 24
  4084                           
  4085                           ;user.c: 172: buzzer_status= 0;
  4086                           
  4087                           ;incstack = 0
  4088  002110  0E00               	movlw	0
  4089  002112  0100               	movlb	0	; () banked
  4090  002114  6F8D               	movwf	_buzzer_status& (0+255),b
  4091                           
  4092                           ; BSR set to: 0
  4093  002116  0012               	return		;funcret
  4094  002118                     __end_of_buzzer_disable:
  4095                           	opt stack 0
  4096                           tblptru	equ	0xFF8
  4097                           prodl	equ	0xFF3
  4098                           postinc0	equ	0xFEE
  4099                           wreg	equ	0xFE8
  4100                           indf2	equ	0xFDF
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function _InitApp *****************
  4106 ;; Defined at:
  4107 ;;		line 28 in file "user.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;		None
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;		None
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      void 
  4114 ;; Registers used:
  4115 ;;		wreg, status,2, status,0
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4121 ;;      Params:         0       0       0       0       0       0       0       0       0
  4122 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4124 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4125 ;;Total ram usage:        0 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    6
  4128 ;; This function calls:
  4129 ;;		Nothing
  4130 ;; This function is called by:
  4131 ;;		_main
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text20
  4136  001D00                     __ptext20:
  4137                           	opt stack 0
  4138  001D00                     _InitApp:
  4139                           	opt stack 24
  4140                           
  4141                           ;user.c: 32: TRISB3 = 0;
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;incstack = 0
  4145  001D00  9693               	bcf	3987,3,c	;volatile
  4146                           
  4147                           ;user.c: 33: TRISB4 = 0;
  4148  001D02  9893               	bcf	3987,4,c	;volatile
  4149                           
  4150                           ;user.c: 35: CCP2CON = 0x00;
  4151  001D04  0E00               	movlw	0
  4152  001D06  6EBA               	movwf	4026,c	;volatile
  4153                           
  4154                           ;user.c: 36: SSPCON1 = 0X00;
  4155  001D08  0E00               	movlw	0
  4156  001D0A  6EC6               	movwf	4038,c	;volatile
  4157                           
  4158                           ;user.c: 37: ADCON1 = 0X0F;
  4159  001D0C  0E0F               	movlw	15
  4160  001D0E  6EC1               	movwf	4033,c	;volatile
  4161                           
  4162                           ;user.c: 38: INTCON = 0b10001000;
  4163  001D10  0E88               	movlw	136
  4164  001D12  6EF2               	movwf	intcon,c	;volatile
  4165                           
  4166                           ;user.c: 39: INTCON = 0b0;
  4167  001D14  0E00               	movlw	0
  4168  001D16  6EF2               	movwf	intcon,c	;volatile
  4169                           
  4170                           ;user.c: 40: INTCON |= 1<<7;
  4171  001D18  8EF2               	bsf	intcon,7,c	;volatile
  4172                           
  4173                           ;user.c: 41: INTCON |= 1<<6;
  4174  001D1A  8CF2               	bsf	intcon,6,c	;volatile
  4175                           
  4176                           ;user.c: 42: INTCON |= 1<<3;
  4177  001D1C  86F2               	bsf	intcon,3,c	;volatile
  4178                           
  4179                           ;user.c: 43: INTCON |= 1<<5;
  4180  001D1E  8AF2               	bsf	intcon,5,c	;volatile
  4181                           
  4182                           ;user.c: 44: INTCON2 = 0b10000101;
  4183  001D20  0E85               	movlw	133
  4184  001D22  6EF1               	movwf	intcon2,c	;volatile
  4185                           
  4186                           ;user.c: 45: INTCON2 |= 1<2;
  4187  001D24  80F1               	bsf	intcon2,0,c	;volatile
  4188                           
  4189                           ;user.c: 47: T0CON = 0b10000010;
  4190  001D26  0E82               	movlw	130
  4191  001D28  6ED5               	movwf	4053,c	;volatile
  4192                           
  4193                           ;user.c: 50: T1CON = 0x00;
  4194  001D2A  0E00               	movlw	0
  4195  001D2C  6ECD               	movwf	4045,c	;volatile
  4196                           
  4197                           ;user.c: 51: T1CON |= 1<<7;
  4198  001D2E  8ECD               	bsf	4045,7,c	;volatile
  4199                           
  4200                           ;user.c: 52: T1CON |= 0<<5;
  4201  001D30  50CD               	movf	4045,w,c	;volatile
  4202                           
  4203                           ;user.c: 53: T1CON |= 0<<4;
  4204  001D32  50CD               	movf	4045,w,c	;volatile
  4205                           
  4206                           ;user.c: 54: T1CON |= 0<<3;
  4207  001D34  50CD               	movf	4045,w,c	;volatile
  4208                           
  4209                           ;user.c: 55: T1CON |= 0 << 1;
  4210  001D36  50CD               	movf	4045,w,c	;volatile
  4211                           
  4212                           ;user.c: 56: T1CON |= 0 << 0;
  4213  001D38  50CD               	movf	4045,w,c	;volatile
  4214                           
  4215                           ;user.c: 58: PIE1 = 0x00;
  4216  001D3A  0E00               	movlw	0
  4217  001D3C  6E9D               	movwf	3997,c	;volatile
  4218                           
  4219                           ;user.c: 59: PIE1 |= 1 << 0;
  4220  001D3E  809D               	bsf	3997,0,c	;volatile
  4221                           
  4222                           ;user.c: 61: TRISB1 = 0;
  4223  001D40  9293               	bcf	3987,1,c	;volatile
  4224                           
  4225                           ;user.c: 62: TRISA2 = 0;
  4226  001D42  9492               	bcf	3986,2,c	;volatile
  4227                           
  4228                           ;user.c: 63: TRISA5 = 0;
  4229  001D44  9A92               	bcf	3986,5,c	;volatile
  4230                           
  4231                           ;user.c: 64: TRISA3 = 0;
  4232  001D46  9692               	bcf	3986,3,c	;volatile
  4233                           
  4234                           ;user.c: 68: state = 0;
  4235  001D48  0E00               	movlw	0
  4236  001D4A  0100               	movlb	0	; () banked
  4237  001D4C  6FD9               	movwf	(_state+1)& (0+255),b
  4238  001D4E  0E00               	movlw	0
  4239  001D50  6FD8               	movwf	_state& (0+255),b
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;user.c: 69: next = 0;
  4243  001D52  0E00               	movlw	0
  4244  001D54  0100               	movlb	0	; () banked
  4245  001D56  6F89               	movwf	(_next+1)& (0+255),b
  4246  001D58  0E00               	movlw	0
  4247  001D5A  6F88               	movwf	_next& (0+255),b
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;user.c: 73: timer1_up_limit_sec = 59;
  4251  001D5C  0E3B               	movlw	59
  4252  001D5E  6E34               	movwf	_timer1_up_limit_sec,c
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;user.c: 74: timer1_up_limit_min = 59;
  4256  001D60  0E3B               	movlw	59
  4257  001D62  6E33               	movwf	_timer1_up_limit_min,c
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;user.c: 78: current_type = 'f';
  4261  001D64  0E66               	movlw	102
  4262  001D66  6E32               	movwf	_current_type,c
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;user.c: 79: current_program = 0;
  4266  001D68  0E00               	movlw	0
  4267  001D6A  0100               	movlb	0	; () banked
  4268  001D6C  6F8B               	movwf	_current_program& (0+255),b
  4269                           
  4270                           ; BSR set to: 0
  4271  001D6E  0012               	return		;funcret
  4272  001D70                     __end_of_InitApp:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           prodl	equ	0xFF3
  4276                           intcon	equ	0xFF2
  4277                           intcon2	equ	0xFF1
  4278                           postinc0	equ	0xFEE
  4279                           wreg	equ	0xFE8
  4280                           indf2	equ	0xFDF
  4281                           fsr2h	equ	0xFDA
  4282                           fsr2l	equ	0xFD9
  4283                           status	equ	0xFD8
  4284                           
  4285 ;; *************** function _ConfigureOscillator *****************
  4286 ;; Defined at:
  4287 ;;		line 24 in file "system.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;		None
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;		None
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  1    wreg      void 
  4294 ;; Registers used:
  4295 ;;		None
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4301 ;;      Params:         0       0       0       0       0       0       0       0       0
  4302 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4304 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4305 ;;Total ram usage:        0 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; Hardware stack levels required when called:    6
  4308 ;; This function calls:
  4309 ;;		Nothing
  4310 ;; This function is called by:
  4311 ;;		_main
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           	psect	text21
  4316  00215C                     __ptext21:
  4317                           	opt stack 0
  4318  00215C                     _ConfigureOscillator:
  4319                           	opt stack 24
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;incstack = 0
  4323  00215C  0012               	return		;funcret
  4324  00215E                     __end_of_ConfigureOscillator:
  4325                           	opt stack 0
  4326                           tblptru	equ	0xFF8
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           intcon2	equ	0xFF1
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           indf2	equ	0xFDF
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function _high_isr *****************
  4338 ;; Defined at:
  4339 ;;		line 32 in file "interrupts.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  digits          6   47[BANK0 ] unsigned char [6]
  4344 ;;  i               2   58[BANK0 ] int 
  4345 ;;  code           47    0[BANK0 ] unsigned char [47]
  4346 ;;  i               2   56[BANK0 ] int 
  4347 ;;  final_code      2   54[BANK0 ] int 
  4348 ;;  aux             1   53[BANK0 ] unsigned char 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4358 ;;      Params:         0       0       0       0       0       0       0       0       0
  4359 ;;      Locals:         0      60       0       0       0       0       0       0       0
  4360 ;;      Temps:         17       0       0       0       0       0       0       0       0
  4361 ;;      Totals:        17      60       0       0       0       0       0       0       0
  4362 ;;Total ram usage:       77 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    5
  4365 ;; This function calls:
  4366 ;;		_get_next_state
  4367 ;;		_ir_get_human_code
  4368 ;;		_point_disable
  4369 ;;		_point_enable
  4370 ;;		_put_nums
  4371 ;;		_update_buzzer
  4372 ;;		_update_point
  4373 ;;		_update_timer1_counter_10
  4374 ;; This function is called by:
  4375 ;;		Interrupt level 2
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	intcode
  4380  000008                     __pintcode:
  4381                           	opt stack 0
  4382  000008                     _high_isr:
  4383                           	opt stack 21
  4384                           
  4385                           ;incstack = 0
  4386  000008  8235               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4387  00000A  EDEC  F006         	call	int_func,f	;refresh shadow registers
  4388                           tblptru	equ	0xFF8
  4389                           prodl	equ	0xFF3
  4390                           intcon	equ	0xFF2
  4391                           intcon2	equ	0xFF1
  4392                           postinc0	equ	0xFEE
  4393                           wreg	equ	0xFE8
  4394                           indf2	equ	0xFDF
  4395                           fsr2h	equ	0xFDA
  4396                           fsr2l	equ	0xFD9
  4397                           status	equ	0xFD8
  4398                           
  4399                           	psect	intcode_body
  4400  000DD8                     __pintcode_body:
  4401                           	opt stack 21
  4402  000DD8                     int_func:
  4403                           	opt stack 21
  4404  000DD8  0006               	pop		; remove dummy address from shadow register refresh
  4405  000DDA  CFFA F01F          	movff	pclath,??_high_isr+3
  4406  000DDE  CFFB F020          	movff	pclatu,??_high_isr+4
  4407  000DE2  CFE9 F021          	movff	fsr0l,??_high_isr+5
  4408  000DE6  CFEA F022          	movff	fsr0h,??_high_isr+6
  4409  000DEA  CFE1 F023          	movff	fsr1l,??_high_isr+7
  4410  000DEE  CFE2 F024          	movff	fsr1h,??_high_isr+8
  4411  000DF2  CFD9 F025          	movff	fsr2l,??_high_isr+9
  4412  000DF6  CFDA F026          	movff	fsr2h,??_high_isr+10
  4413  000DFA  CFF3 F027          	movff	prodl,??_high_isr+11
  4414  000DFE  CFF4 F028          	movff	prodh,??_high_isr+12
  4415  000E02  CFF6 F029          	movff	tblptrl,??_high_isr+13
  4416  000E06  CFF7 F02A          	movff	tblptrh,??_high_isr+14
  4417  000E0A  CFF8 F02B          	movff	tblptru,??_high_isr+15
  4418  000E0E  CFF5 F02C          	movff	tablat,??_high_isr+16
  4419                           
  4420                           ;interrupts.c: 68: if (RBIF == 1)
  4421  000E12  A0F2               	btfss	intcon,0,c	;volatile
  4422  000E14  D08A               	goto	i2l73
  4423                           
  4424                           ;interrupts.c: 69: {
  4425                           ;interrupts.c: 71: INTCONbits.GIE = 0;
  4426  000E16  9EF2               	bcf	intcon,7,c	;volatile
  4427                           
  4428                           ;interrupts.c: 72: char aux = 0;
  4429  000E18  0E00               	movlw	0
  4430  000E1A  0100               	movlb	0	; () banked
  4431  000E1C  6FD1               	movwf	high_isr@aux& (0+255),b
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;interrupts.c: 74: int i;
  4435                           ;interrupts.c: 75: char code[47];
  4436                           ;interrupts.c: 77: _delay((unsigned long)((40.63)*(20000000L/4000.0)));
  4437  000E1E  0E02               	movlw	2
  4438  000E20  6E1D               	movwf	(??_high_isr+1)& (0+255),c
  4439  000E22  0E08               	movlw	8
  4440  000E24  6E1C               	movwf	??_high_isr& (0+255),c
  4441  000E26  0ED2               	movlw	210
  4442  000E28                     i2u662_47:
  4443  000E28  2EE8               	decfsz	wreg,f,c
  4444  000E2A  D7FE               	bra	i2u662_47
  4445  000E2C  2E1C               	decfsz	??_high_isr& (0+255),f,c
  4446  000E2E  D7FC               	bra	i2u662_47
  4447  000E30  2E1D               	decfsz	(??_high_isr+1)& (0+255),f,c
  4448  000E32  D7FA               	bra	i2u662_47
  4449                           
  4450                           ;interrupts.c: 78: for(i = 0; i < 47 ; i ++)
  4451  000E34  0E00               	movlw	0
  4452  000E36  0100               	movlb	0	; () banked
  4453  000E38  6FD5               	movwf	(high_isr@i+1)& (0+255),b
  4454  000E3A  0E00               	movlw	0
  4455  000E3C  6FD4               	movwf	high_isr@i& (0+255),b
  4456  000E3E                     i2l4295:
  4457                           
  4458                           ; BSR set to: 0
  4459  000E3E  0100               	movlb	0	; () banked
  4460  000E40  BFD5               	btfsc	(high_isr@i+1)& (0+255),7,b
  4461  000E42  D008               	goto	i2l4299
  4462  000E44  0100               	movlb	0	; () banked
  4463  000E46  51D5               	movf	(high_isr@i+1)& (0+255),w,b
  4464  000E48  E11D               	bnz	i2l4307
  4465  000E4A  0E2F               	movlw	47
  4466  000E4C  0100               	movlb	0	; () banked
  4467  000E4E  5DD4               	subwf	high_isr@i& (0+255),w,b
  4468  000E50  B0D8               	btfsc	status,0,c
  4469  000E52  D018               	goto	i2l4307
  4470  000E54                     i2l4299:
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;interrupts.c: 79: {
  4474                           ;interrupts.c: 80: code[i] = RB5;
  4475  000E54  0E9C               	movlw	low high_isr@code
  4476  000E56  0100               	movlb	0	; () banked
  4477  000E58  25D4               	addwf	high_isr@i& (0+255),w,b
  4478  000E5A  6ED9               	movwf	fsr2l,c
  4479  000E5C  0E00               	movlw	high high_isr@code
  4480  000E5E  0100               	movlb	0	; () banked
  4481  000E60  21D5               	addwfc	(high_isr@i+1)& (0+255),w,b
  4482  000E62  6EDA               	movwf	fsr2h,c
  4483  000E64  0E00               	movlw	0
  4484  000E66  BA81               	btfsc	3969,5,c	;volatile
  4485  000E68  0E01               	movlw	1
  4486  000E6A  6EDF               	movwf	indf2,c
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;interrupts.c: 81: _delay((unsigned long)((580)*(20000000L/4000000.0)));
  4490  000E6C  0E04               	movlw	4
  4491  000E6E  6E1C               	movwf	??_high_isr& (0+255),c
  4492  000E70  0EC3               	movlw	195
  4493  000E72                     i2u663_47:
  4494  000E72  2EE8               	decfsz	wreg,f,c
  4495  000E74  D7FE               	bra	i2u663_47
  4496  000E76  2E1C               	decfsz	??_high_isr& (0+255),f,c
  4497  000E78  D7FC               	bra	i2u663_47
  4498  000E7A  F000               	nop	
  4499  000E7C  0100               	movlb	0	; () banked
  4500  000E7E  4BD4               	infsnz	high_isr@i& (0+255),f,b
  4501  000E80  2BD5               	incf	(high_isr@i+1)& (0+255),f,b
  4502  000E82  D7DD               	goto	i2l4295
  4503  000E84                     i2l4307:
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;interrupts.c: 82: }
  4507                           ;interrupts.c: 83: int final_code = 0;
  4508  000E84  0E00               	movlw	0
  4509  000E86  0100               	movlb	0	; () banked
  4510  000E88  6FD3               	movwf	(high_isr@final_code+1)& (0+255),b
  4511  000E8A  0E00               	movlw	0
  4512  000E8C  6FD2               	movwf	high_isr@final_code& (0+255),b
  4513                           
  4514                           ;interrupts.c: 84: for(i = 0; i<16;i++)
  4515  000E8E  0E00               	movlw	0
  4516  000E90  0100               	movlb	0	; () banked
  4517  000E92  6FD5               	movwf	(high_isr@i+1)& (0+255),b
  4518  000E94  0E00               	movlw	0
  4519  000E96  6FD4               	movwf	high_isr@i& (0+255),b
  4520  000E98                     i2l4309:
  4521                           
  4522                           ; BSR set to: 0
  4523  000E98  0100               	movlb	0	; () banked
  4524  000E9A  BFD5               	btfsc	(high_isr@i+1)& (0+255),7,b
  4525  000E9C  D008               	goto	i2l4313
  4526  000E9E  0100               	movlb	0	; () banked
  4527  000EA0  51D5               	movf	(high_isr@i+1)& (0+255),w,b
  4528  000EA2  E123               	bnz	i2l4319
  4529  000EA4  0E10               	movlw	16
  4530  000EA6  0100               	movlb	0	; () banked
  4531  000EA8  5DD4               	subwf	high_isr@i& (0+255),w,b
  4532  000EAA  B0D8               	btfsc	status,0,c
  4533  000EAC  D01E               	goto	i2l4319
  4534  000EAE                     i2l4313:
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;interrupts.c: 85: {
  4538                           ;interrupts.c: 86: final_code |= code[i]<<i;
  4539  000EAE  C0D4  F01C         	movff	high_isr@i,??_high_isr
  4540  000EB2  0E9C               	movlw	low high_isr@code
  4541  000EB4  0100               	movlb	0	; () banked
  4542  000EB6  25D4               	addwf	high_isr@i& (0+255),w,b
  4543  000EB8  6ED9               	movwf	fsr2l,c
  4544  000EBA  0E00               	movlw	high high_isr@code
  4545  000EBC  0100               	movlb	0	; () banked
  4546  000EBE  21D5               	addwfc	(high_isr@i+1)& (0+255),w,b
  4547  000EC0  6EDA               	movwf	fsr2h,c
  4548  000EC2  50DF               	movf	indf2,w,c
  4549  000EC4  6E1D               	movwf	(??_high_isr+1)& (0+255),c
  4550  000EC6  6A1E               	clrf	(??_high_isr+2)& (0+255),c
  4551  000EC8  2A1C               	incf	??_high_isr,f,c
  4552  000ECA  D003               	goto	i2u514_44
  4553  000ECC                     i2u514_45:
  4554  000ECC  90D8               	bcf	status,0,c
  4555  000ECE  361D               	rlcf	??_high_isr+1,f,c
  4556  000ED0  361E               	rlcf	??_high_isr+2,f,c
  4557  000ED2                     i2u514_44:
  4558  000ED2  2E1C               	decfsz	??_high_isr,f,c
  4559  000ED4  D7FB               	goto	i2u514_45
  4560  000ED6  501D               	movf	??_high_isr+1,w,c
  4561  000ED8  0100               	movlb	0	; () banked
  4562  000EDA  13D2               	iorwf	high_isr@final_code& (0+255),f,b
  4563  000EDC  501E               	movf	??_high_isr+2,w,c
  4564  000EDE  0100               	movlb	0	; () banked
  4565  000EE0  13D3               	iorwf	(high_isr@final_code+1)& (0+255),f,b
  4566                           
  4567                           ; BSR set to: 0
  4568  000EE2  0100               	movlb	0	; () banked
  4569  000EE4  4BD4               	infsnz	high_isr@i& (0+255),f,b
  4570  000EE6  2BD5               	incf	(high_isr@i+1)& (0+255),f,b
  4571  000EE8  D7D7               	goto	i2l4309
  4572  000EEA                     i2l4319:
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;interrupts.c: 87: }
  4576                           ;interrupts.c: 92: if(final_code !=0xffff)
  4577  000EEA  0100               	movlb	0	; () banked
  4578  000EEC  29D2               	incf	high_isr@final_code& (0+255),w,b
  4579  000EEE  E104               	bnz	i2u516_40
  4580  000EF0  0100               	movlb	0	; () banked
  4581  000EF2  29D3               	incf	(high_isr@final_code+1)& (0+255),w,b
  4582  000EF4  B4D8               	btfsc	status,2,c
  4583  000EF6  D016               	goto	i2l4325
  4584  000EF8                     i2u516_40:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;interrupts.c: 93: {
  4588                           ;interrupts.c: 94: human_code = ir_get_human_code(final_code);
  4589  000EF8  C0D2  F001         	movff	high_isr@final_code,ir_get_human_code@code
  4590  000EFC  C0D3  F002         	movff	high_isr@final_code+1,ir_get_human_code@code+1
  4591  000F00  ECEE  F00A         	call	_ir_get_human_code	;wreg free
  4592  000F04  0100               	movlb	0	; () banked
  4593  000F06  6F8E               	movwf	_human_code& (0+255),b
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;interrupts.c: 95: next = get_next_state(state,final_code);
  4597  000F08  C0D8  F00E         	movff	_state,get_next_state@state
  4598  000F0C  C0D9  F00F         	movff	_state+1,get_next_state@state+1
  4599  000F10  C0D2  F010         	movff	high_isr@final_code,get_next_state@code
  4600  000F14  C0D3  F011         	movff	high_isr@final_code+1,get_next_state@code+1
  4601  000F18  EC09  F000         	call	_get_next_state	;wreg free
  4602  000F1C  C00E  F088         	movff	?_get_next_state,_next
  4603  000F20  C00F  F089         	movff	?_get_next_state+1,_next+1
  4604  000F24                     i2l4325:
  4605                           
  4606                           ;interrupts.c: 96: }
  4607                           ;interrupts.c: 98: RBIF = 0;
  4608  000F24  90F2               	bcf	intcon,0,c	;volatile
  4609                           
  4610                           ;interrupts.c: 99: INTCONbits.GIE = 1;
  4611  000F26  8EF2               	bsf	intcon,7,c	;volatile
  4612                           
  4613                           ;interrupts.c: 100: }
  4614  000F28  D0C9               	goto	i2l104
  4615  000F2A                     i2l73:
  4616                           
  4617                           ;interrupts.c: 101: else if (TMR0IF == 1)
  4618  000F2A  A4F2               	btfss	intcon,2,c	;volatile
  4619  000F2C  D0A4               	goto	i2l80
  4620                           
  4621                           ;interrupts.c: 102: {
  4622                           ;interrupts.c: 104: int i;
  4623                           ;interrupts.c: 105: for(i=0; i<6;i++)
  4624  000F2E  0E00               	movlw	0
  4625  000F30  0100               	movlb	0	; () banked
  4626  000F32  6FD7               	movwf	(high_isr@i_166+1)& (0+255),b
  4627  000F34  0E00               	movlw	0
  4628  000F36  6FD6               	movwf	high_isr@i_166& (0+255),b
  4629  000F38                     i2l4331:
  4630                           
  4631                           ; BSR set to: 0
  4632  000F38  0100               	movlb	0	; () banked
  4633  000F3A  BFD7               	btfsc	(high_isr@i_166+1)& (0+255),7,b
  4634  000F3C  D008               	goto	i2l4335
  4635  000F3E  0100               	movlb	0	; () banked
  4636  000F40  51D7               	movf	(high_isr@i_166+1)& (0+255),w,b
  4637  000F42  E11B               	bnz	i2l4341
  4638  000F44  0E06               	movlw	6
  4639  000F46  0100               	movlb	0	; () banked
  4640  000F48  5DD6               	subwf	high_isr@i_166& (0+255),w,b
  4641  000F4A  B0D8               	btfsc	status,0,c
  4642  000F4C  D016               	goto	i2l4341
  4643  000F4E                     i2l4335:
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;interrupts.c: 106: {
  4647                           ;interrupts.c: 107: masked_digits[i] = aux1[i];
  4648  000F4E  0E95               	movlw	low _aux1
  4649  000F50  0100               	movlb	0	; () banked
  4650  000F52  25D6               	addwf	high_isr@i_166& (0+255),w,b
  4651  000F54  6ED9               	movwf	fsr2l,c
  4652  000F56  0E00               	movlw	high _aux1
  4653  000F58  0100               	movlb	0	; () banked
  4654  000F5A  21D7               	addwfc	(high_isr@i_166+1)& (0+255),w,b
  4655  000F5C  6EDA               	movwf	fsr2h,c
  4656  000F5E  0E8F               	movlw	low _masked_digits
  4657  000F60  0100               	movlb	0	; () banked
  4658  000F62  25D6               	addwf	high_isr@i_166& (0+255),w,b
  4659  000F64  6EE1               	movwf	fsr1l,c
  4660  000F66  0E00               	movlw	high _masked_digits
  4661  000F68  0100               	movlb	0	; () banked
  4662  000F6A  21D7               	addwfc	(high_isr@i_166+1)& (0+255),w,b
  4663  000F6C  6EE2               	movwf	fsr1h,c
  4664  000F6E  CFDF FFE7          	movff	indf2,indf1
  4665                           
  4666                           ; BSR set to: 0
  4667  000F72  0100               	movlb	0	; () banked
  4668  000F74  4BD6               	infsnz	high_isr@i_166& (0+255),f,b
  4669  000F76  2BD7               	incf	(high_isr@i_166+1)& (0+255),f,b
  4670  000F78  D7DF               	goto	i2l4331
  4671  000F7A                     i2l4341:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;interrupts.c: 108: }
  4675                           ;interrupts.c: 111: if(counter < 10 - 1)
  4676  000F7A  0E09               	movlw	9
  4677  000F7C  0100               	movlb	0	; () banked
  4678  000F7E  618A               	cpfslt	_counter& (0+255),b
  4679  000F80  D003               	goto	i2l4345
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;interrupts.c: 112: {
  4683                           ;interrupts.c: 113: counter = counter + 1;
  4684  000F82  0100               	movlb	0	; () banked
  4685  000F84  298A               	incf	_counter& (0+255),w,b
  4686  000F86  D001               	goto	L26
  4687  000F88                     i2l4345:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;interrupts.c: 115: else
  4691                           ;interrupts.c: 116: {
  4692                           ;interrupts.c: 117: counter = 0;
  4693  000F88  0E00               	movlw	0
  4694  000F8A                     L26:
  4695  000F8A  0100               	movlb	0	; () banked
  4696  000F8C  6F8A               	movwf	_counter& (0+255),b
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;interrupts.c: 118: }
  4700                           ;interrupts.c: 120: char digits[6];
  4701                           ;interrupts.c: 121: int i;
  4702                           ;interrupts.c: 123: for (i=0; i<6;i++)
  4703  000F8E  0E00               	movlw	0
  4704  000F90  0100               	movlb	0	; () banked
  4705  000F92  6FD7               	movwf	(high_isr@i_166+1)& (0+255),b
  4706  000F94  0E00               	movlw	0
  4707  000F96  6FD6               	movwf	high_isr@i_166& (0+255),b
  4708  000F98                     i2l4347:
  4709                           
  4710                           ; BSR set to: 0
  4711  000F98  0100               	movlb	0	; () banked
  4712  000F9A  BFD7               	btfsc	(high_isr@i_166+1)& (0+255),7,b
  4713  000F9C  D008               	goto	i2l85
  4714  000F9E  0100               	movlb	0	; () banked
  4715  000FA0  51D7               	movf	(high_isr@i_166+1)& (0+255),w,b
  4716  000FA2  E10B               	bnz	i2l4355
  4717  000FA4  0E06               	movlw	6
  4718  000FA6  0100               	movlb	0	; () banked
  4719  000FA8  5DD6               	subwf	high_isr@i_166& (0+255),w,b
  4720  000FAA  B0D8               	btfsc	status,0,c
  4721  000FAC  D006               	goto	i2l4355
  4722  000FAE                     i2l85:
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;interrupts.c: 124: digits[6] = i;
  4726  000FAE  C0D6  F0D1         	movff	high_isr@i_166,high_isr@digits+6
  4727                           
  4728                           ; BSR set to: 0
  4729  000FB2  0100               	movlb	0	; () banked
  4730  000FB4  4BD6               	infsnz	high_isr@i_166& (0+255),f,b
  4731  000FB6  2BD7               	incf	(high_isr@i_166+1)& (0+255),f,b
  4732  000FB8  D7EF               	goto	i2l4347
  4733  000FBA                     i2l4355:
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;interrupts.c: 127: update_point(state,counter);
  4737  000FBA  C0D8  F001         	movff	_state,update_point@state
  4738  000FBE  C0D9  F002         	movff	_state+1,update_point@state+1
  4739  000FC2  C08A  F003         	movff	_counter,update_point@counter
  4740  000FC6  ECD4  F00F         	call	_update_point	;wreg free
  4741                           
  4742                           ;interrupts.c: 128: update_buzzer(state,counter);
  4743  000FCA  C0D8  F001         	movff	_state,update_buzzer@state
  4744  000FCE  C0D9  F002         	movff	_state+1,update_buzzer@state+1
  4745  000FD2  C08A  F003         	movff	_counter,update_buzzer@counter
  4746  000FD6  ECF8  F00F         	call	_update_buzzer	;wreg free
  4747                           
  4748                           ;interrupts.c: 130: if(counter == 0 )
  4749  000FDA  0100               	movlb	0	; () banked
  4750  000FDC  518A               	movf	_counter& (0+255),w,b
  4751  000FDE  A4D8               	btfss	status,2,c
  4752  000FE0  D003               	goto	i2l4361
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;interrupts.c: 131: {
  4756                           ;interrupts.c: 132: point_enable();
  4757  000FE2  ECA4  F010         	call	_point_enable	;wreg free
  4758                           
  4759                           ;interrupts.c: 133: }
  4760  000FE6  D00C               	goto	i2l4367
  4761  000FE8                     i2l4361:
  4762                           
  4763                           ;interrupts.c: 134: else if(counter == 5 && state == 0)
  4764  000FE8  0E05               	movlw	5
  4765  000FEA  0100               	movlb	0	; () banked
  4766  000FEC  198A               	xorwf	_counter& (0+255),w,b
  4767  000FEE  A4D8               	btfss	status,2,c
  4768  000FF0  D007               	goto	i2l4367
  4769                           
  4770                           ; BSR set to: 0
  4771  000FF2  0100               	movlb	0	; () banked
  4772  000FF4  51D8               	movf	_state& (0+255),w,b
  4773  000FF6  0100               	movlb	0	; () banked
  4774  000FF8  11D9               	iorwf	(_state+1)& (0+255),w,b
  4775  000FFA  B4D8               	btfsc	status,2,c
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;interrupts.c: 135: {
  4779                           ;interrupts.c: 136: point_disable();
  4780  000FFC  ECA6  F010         	call	_point_disable	;wreg free
  4781  001000                     i2l4367:
  4782                           
  4783                           ;interrupts.c: 137: }
  4784                           ;interrupts.c: 140: if(buzzer_status)
  4785  001000  0100               	movlb	0	; () banked
  4786  001002  518D               	movf	_buzzer_status& (0+255),w,b
  4787  001004  B4D8               	btfsc	status,2,c
  4788  001006  D005               	goto	i2l4373
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;interrupts.c: 141: {
  4792                           ;interrupts.c: 142: if(RB0 == 1)
  4793  001008  A081               	btfss	3969,0,c	;volatile
  4794  00100A  D002               	goto	i2l91
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;interrupts.c: 143: RB0 = 0;
  4798  00100C  9081               	bcf	3969,0,c	;volatile
  4799  00100E  D001               	goto	i2l4373
  4800  001010                     i2l91:
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;interrupts.c: 144: else
  4804                           ;interrupts.c: 145: RB0 = 1;
  4805  001010  8081               	bsf	3969,0,c	;volatile
  4806  001012                     i2l4373:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;interrupts.c: 146: }
  4810                           ;interrupts.c: 147: if(counter >= 5)
  4811  001012  0E04               	movlw	4
  4812  001014  0100               	movlb	0	; () banked
  4813  001016  658A               	cpfsgt	_counter& (0+255),b
  4814  001018  D026               	goto	i2l4389
  4815  00101A  D010               	goto	i2l4387
  4816  00101C                     i2l4377:
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;interrupts.c: 152: masked_digits[3] = 'V';
  4820  00101C  0E56               	movlw	86
  4821  00101E  0100               	movlb	0	; () banked
  4822  001020  6F92               	movwf	(_masked_digits+3)& (0+255),b
  4823                           
  4824                           ;interrupts.c: 153: break;
  4825  001022  D021               	goto	i2l4389
  4826  001024                     i2l4379:
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;interrupts.c: 155: masked_digits[2] = 'V';
  4830  001024  0E56               	movlw	86
  4831  001026  0100               	movlb	0	; () banked
  4832  001028  6F91               	movwf	(_masked_digits+2)& (0+255),b
  4833                           
  4834                           ;interrupts.c: 156: break;
  4835  00102A  D01D               	goto	i2l4389
  4836  00102C                     i2l4381:
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;interrupts.c: 158: masked_digits[1] = 'V';
  4840  00102C  0E56               	movlw	86
  4841  00102E  0100               	movlb	0	; () banked
  4842  001030  6F90               	movwf	(_masked_digits+1)& (0+255),b
  4843                           
  4844                           ;interrupts.c: 159: break;
  4845  001032  D019               	goto	i2l4389
  4846  001034                     i2l4383:
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;interrupts.c: 161: masked_digits[0] = 'V';
  4850  001034  0E56               	movlw	86
  4851  001036  0100               	movlb	0	; () banked
  4852  001038  6F8F               	movwf	_masked_digits& (0+255),b
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;interrupts.c: 163: }
  4856                           
  4857                           ;interrupts.c: 162: break;
  4858  00103A  D015               	goto	i2l4389
  4859  00103C                     i2l4387:
  4860                           
  4861                           ; BSR set to: 0
  4862  00103C  C0D8  F01C         	movff	_state,??_high_isr
  4863  001040  C0D9  F01D         	movff	_state+1,??_high_isr+1
  4864                           
  4865                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4866                           ; Switch size 1, requested type "space"
  4867                           ; Number of cases is 1, Range of values is 0 to 0
  4868                           ; switch strategies available:
  4869                           ; Name         Instructions Cycles
  4870                           ; simple_byte            4     3 (average)
  4871                           ;	Chosen strategy is simple_byte
  4872  001044  501D               	movf	??_high_isr+1,w,c
  4873  001046  0A00               	xorlw	0	; case 0
  4874  001048  A4D8               	btfss	status,2,c
  4875  00104A  D00D               	goto	i2l4389
  4876                           
  4877                           ; BSR set to: 0
  4878                           ; Switch size 1, requested type "space"
  4879                           ; Number of cases is 4, Range of values is 1 to 4
  4880                           ; switch strategies available:
  4881                           ; Name         Instructions Cycles
  4882                           ; simple_byte           13     7 (average)
  4883                           ;	Chosen strategy is simple_byte
  4884  00104C  501C               	movf	??_high_isr,w,c
  4885  00104E  0A01               	xorlw	1	; case 1
  4886  001050  B4D8               	btfsc	status,2,c
  4887  001052  D7E4               	goto	i2l4377
  4888  001054  0A03               	xorlw	3	; case 2
  4889  001056  B4D8               	btfsc	status,2,c
  4890  001058  D7E5               	goto	i2l4379
  4891  00105A  0A01               	xorlw	1	; case 3
  4892  00105C  B4D8               	btfsc	status,2,c
  4893  00105E  D7E6               	goto	i2l4381
  4894  001060  0A07               	xorlw	7	; case 4
  4895  001062  B4D8               	btfsc	status,2,c
  4896  001064  D7E7               	goto	i2l4383
  4897  001066                     i2l4389:
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;interrupts.c: 164: }
  4901                           ;interrupts.c: 167: put_nums(masked_digits);
  4902  001066  0E8F               	movlw	low _masked_digits
  4903  001068  6E08               	movwf	put_nums@nums,c
  4904  00106A  0E00               	movlw	high _masked_digits
  4905  00106C  6E09               	movwf	put_nums@nums+1,c
  4906  00106E  EC39  F010         	call	_put_nums	;wreg free
  4907                           
  4908                           ;interrupts.c: 168: TMR0IF = 0;
  4909  001072  94F2               	bcf	intcon,2,c	;volatile
  4910                           
  4911                           ;interrupts.c: 169: }
  4912  001074  D023               	goto	i2l104
  4913  001076                     i2l80:
  4914                           
  4915                           ;interrupts.c: 171: else if (TMR1IF == 1)
  4916  001076  A09E               	btfss	3998,0,c	;volatile
  4917  001078  D021               	goto	i2l104
  4918                           
  4919                           ;interrupts.c: 172: {
  4920                           ;interrupts.c: 174: if(timer1_counter <99)
  4921  00107A  0E63               	movlw	99
  4922  00107C  0100               	movlb	0	; () banked
  4923  00107E  618C               	cpfslt	_timer1_counter& (0+255),b
  4924  001080  D003               	goto	i2l4397
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;interrupts.c: 175: {
  4928                           ;interrupts.c: 176: timer1_counter += 1;
  4929  001082  0100               	movlb	0	; () banked
  4930  001084  2B8C               	incf	_timer1_counter& (0+255),f,b
  4931                           
  4932                           ;interrupts.c: 179: }
  4933  001086  D019               	goto	i2l4403
  4934  001088                     i2l4397:
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;interrupts.c: 181: else
  4938                           ;interrupts.c: 182: {
  4939                           ;interrupts.c: 183: timer1_counter = 0;
  4940  001088  0E00               	movlw	0
  4941  00108A  0100               	movlb	0	; () banked
  4942  00108C  6F8C               	movwf	_timer1_counter& (0+255),b
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;interrupts.c: 184: update_timer1_counter_10(state,&timer1_counter_10);
  4946  00108E  0E9B               	movlw	low _timer1_counter_10
  4947  001090  6E01               	movwf	update_timer1_counter_10@counter,c
  4948  001092  0E00               	movlw	high _timer1_counter_10
  4949  001094  6E02               	movwf	update_timer1_counter_10@counter+1,c
  4950  001096  0100               	movlb	0	; () banked
  4951  001098  51D8               	movf	_state& (0+255),w,b
  4952  00109A  EC7C  F009         	call	_update_timer1_counter_10
  4953                           
  4954                           ;interrupts.c: 187: next = get_next_state(state,0);
  4955  00109E  C0D8  F00E         	movff	_state,get_next_state@state
  4956  0010A2  C0D9  F00F         	movff	_state+1,get_next_state@state+1
  4957  0010A6  0E00               	movlw	0
  4958  0010A8  6E11               	movwf	get_next_state@code+1,c
  4959  0010AA  0E00               	movlw	0
  4960  0010AC  6E10               	movwf	get_next_state@code,c
  4961  0010AE  EC09  F000         	call	_get_next_state	;wreg free
  4962  0010B2  C00E  F088         	movff	?_get_next_state,_next
  4963  0010B6  C00F  F089         	movff	?_get_next_state+1,_next+1
  4964  0010BA                     i2l4403:
  4965                           
  4966                           ;interrupts.c: 188: }
  4967                           ;interrupts.c: 190: TMR1IF = 0;
  4968  0010BA  909E               	bcf	3998,0,c	;volatile
  4969  0010BC                     i2l104:
  4970  0010BC  C02C  FFF5         	movff	??_high_isr+16,tablat
  4971  0010C0  C02B  FFF8         	movff	??_high_isr+15,tblptru
  4972  0010C4  C02A  FFF7         	movff	??_high_isr+14,tblptrh
  4973  0010C8  C029  FFF6         	movff	??_high_isr+13,tblptrl
  4974  0010CC  C028  FFF4         	movff	??_high_isr+12,prodh
  4975  0010D0  C027  FFF3         	movff	??_high_isr+11,prodl
  4976  0010D4  C026  FFDA         	movff	??_high_isr+10,fsr2h
  4977  0010D8  C025  FFD9         	movff	??_high_isr+9,fsr2l
  4978  0010DC  C024  FFE2         	movff	??_high_isr+8,fsr1h
  4979  0010E0  C023  FFE1         	movff	??_high_isr+7,fsr1l
  4980  0010E4  C022  FFEA         	movff	??_high_isr+6,fsr0h
  4981  0010E8  C021  FFE9         	movff	??_high_isr+5,fsr0l
  4982  0010EC  C020  FFFB         	movff	??_high_isr+4,pclatu
  4983  0010F0  C01F  FFFA         	movff	??_high_isr+3,pclath
  4984  0010F4  9235               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4985  0010F6  0011               	retfie		f
  4986  0010F8                     __end_of_high_isr:
  4987                           	opt stack 0
  4988                           pclatu	equ	0xFFB
  4989                           pclath	equ	0xFFA
  4990                           tblptru	equ	0xFF8
  4991                           tblptrh	equ	0xFF7
  4992                           tblptrl	equ	0xFF6
  4993                           tablat	equ	0xFF5
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           intcon2	equ	0xFF1
  4998                           postinc0	equ	0xFEE
  4999                           fsr0h	equ	0xFEA
  5000                           fsr0l	equ	0xFE9
  5001                           wreg	equ	0xFE8
  5002                           indf1	equ	0xFE7
  5003                           fsr1h	equ	0xFE2
  5004                           fsr1l	equ	0xFE1
  5005                           indf2	equ	0xFDF
  5006                           fsr2h	equ	0xFDA
  5007                           fsr2l	equ	0xFD9
  5008                           status	equ	0xFD8
  5009                           
  5010 ;; *************** function _update_timer1_counter_10 *****************
  5011 ;; Defined at:
  5012 ;;		line 774 in file "user.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  state           1    wreg     unsigned char 
  5015 ;;  counter         2    0[COMRAM] PTR unsigned char 
  5016 ;;		 -> timer1_counter_10(1), 
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;  state           1    3[COMRAM] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;                  1    wreg      void 
  5021 ;; Registers used:
  5022 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5028 ;;      Params:         2       0       0       0       0       0       0       0       0
  5029 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5030 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5031 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5032 ;;Total ram usage:        4 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_high_isr
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           	psect	text23
  5042  0012F8                     __ptext23:
  5043                           	opt stack 0
  5044  0012F8                     _update_timer1_counter_10:
  5045                           	opt stack 25
  5046                           
  5047                           ;incstack = 0
  5048                           ;update_timer1_counter_10@state stored from wreg
  5049  0012F8  6E04               	movwf	update_timer1_counter_10@state,c
  5050                           
  5051                           ;user.c: 776: if(state == 5)
  5052  0012FA  0E05               	movlw	5
  5053  0012FC  1804               	xorwf	update_timer1_counter_10@state,w,c
  5054  0012FE  A4D8               	btfss	status,2,c
  5055  001300  D007               	goto	i2l4047
  5056                           
  5057                           ;user.c: 777: *counter = 10;
  5058  001302  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5059  001306  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5060  00130A  0E0A               	movlw	10
  5061  00130C  6EDF               	movwf	indf2,c
  5062  00130E  0012               	return	
  5063  001310                     i2l4047:
  5064                           
  5065                           ;user.c: 778: else if(state == 11)
  5066  001310  0E0B               	movlw	11
  5067  001312  1804               	xorwf	update_timer1_counter_10@state,w,c
  5068  001314  A4D8               	btfss	status,2,c
  5069  001316  D01A               	goto	i2l4057
  5070                           
  5071                           ;user.c: 779: {
  5072                           ;user.c: 780: if(*counter>0)
  5073  001318  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5074  00131C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5075  001320  50DF               	movf	indf2,w,c
  5076  001322  B4D8               	btfsc	status,2,c
  5077  001324  0012               	return	
  5078                           
  5079                           ;user.c: 781: {
  5080                           ;user.c: 782: if (*counter>3)
  5081  001326  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5082  00132A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5083  00132E  0E03               	movlw	3
  5084  001330  64DF               	cpfsgt	indf2,c
  5085  001332  D006               	goto	i2l4055
  5086                           
  5087                           ;user.c: 783: {
  5088                           ;user.c: 784: *counter-=1;
  5089  001334  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5090  001338  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5091  00133C  06DF               	decf	indf2,f,c
  5092                           
  5093                           ;user.c: 785: }
  5094  00133E  0012               	return	
  5095  001340                     i2l4055:
  5096                           
  5097                           ;user.c: 786: else
  5098                           ;user.c: 787: {
  5099                           ;user.c: 788: *counter-=1;
  5100  001340  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5101  001344  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5102  001348  06DF               	decf	indf2,f,c
  5103                           
  5104                           ;user.c: 790: }
  5105                           ;user.c: 791: }
  5106                           ;user.c: 794: }
  5107  00134A  0012               	return	
  5108  00134C                     i2l4057:
  5109                           
  5110                           ;user.c: 795: else if(state == 12)
  5111  00134C  0E0C               	movlw	12
  5112  00134E  1804               	xorwf	update_timer1_counter_10@state,w,c
  5113  001350  A4D8               	btfss	status,2,c
  5114  001352  D01B               	goto	i2l4071
  5115                           
  5116                           ;user.c: 796: if(*counter<59)
  5117  001354  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5118  001358  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5119  00135C  0E3B               	movlw	59
  5120  00135E  60DF               	cpfslt	indf2,c
  5121  001360  D006               	goto	i2l4063
  5122                           
  5123                           ;user.c: 797: {
  5124                           ;user.c: 798: *counter+=1;
  5125  001362  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5126  001366  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5127  00136A  2ADF               	incf	indf2,f,c
  5128                           
  5129                           ;user.c: 799: }
  5130  00136C  0012               	return	
  5131  00136E                     i2l4063:
  5132                           
  5133                           ;user.c: 800: else
  5134                           ;user.c: 801: {
  5135                           ;user.c: 802: *counter= 0;
  5136  00136E  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5137  001372  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5138  001376  0E00               	movlw	0
  5139  001378  6EDF               	movwf	indf2,c
  5140                           
  5141                           ;user.c: 804: if(timer1_counter_min < 59)
  5142  00137A  0E3B               	movlw	59
  5143  00137C  6031               	cpfslt	_timer1_counter_min,c
  5144  00137E  D002               	goto	i2l4069
  5145                           
  5146                           ;user.c: 805: timer1_counter_min +=1;
  5147  001380  2A31               	incf	_timer1_counter_min,f,c
  5148  001382  0012               	return	
  5149  001384                     i2l4069:
  5150                           
  5151                           ;user.c: 806: else
  5152                           ;user.c: 807: timer1_counter_min = 0;
  5153  001384  0E00               	movlw	0
  5154  001386  6E31               	movwf	_timer1_counter_min,c
  5155                           
  5156                           ;user.c: 808: }
  5157  001388  0012               	return	
  5158  00138A                     i2l4071:
  5159                           
  5160                           ;user.c: 809: else if(state == 6)
  5161  00138A  0E06               	movlw	6
  5162  00138C  1804               	xorwf	update_timer1_counter_10@state,w,c
  5163  00138E  A4D8               	btfss	status,2,c
  5164  001390  D007               	goto	i2l4075
  5165                           
  5166                           ;user.c: 810: *counter = 10;
  5167  001392  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5168  001396  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5169  00139A  0E0A               	movlw	10
  5170  00139C  6EDF               	movwf	indf2,c
  5171  00139E  0012               	return	
  5172  0013A0                     i2l4075:
  5173                           
  5174                           ;user.c: 811: else if(state == 18)
  5175  0013A0  0E12               	movlw	18
  5176  0013A2  1804               	xorwf	update_timer1_counter_10@state,w,c
  5177  0013A4  A4D8               	btfss	status,2,c
  5178  0013A6  D01A               	goto	i2l4085
  5179                           
  5180                           ;user.c: 812: {
  5181                           ;user.c: 813: if(*counter >0)
  5182  0013A8  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5183  0013AC  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5184  0013B0  50DF               	movf	indf2,w,c
  5185  0013B2  B4D8               	btfsc	status,2,c
  5186  0013B4  0012               	return	
  5187                           
  5188                           ;user.c: 814: {
  5189                           ;user.c: 815: if(*counter>3)
  5190  0013B6  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5191  0013BA  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5192  0013BE  0E03               	movlw	3
  5193  0013C0  64DF               	cpfsgt	indf2,c
  5194  0013C2  D006               	goto	i2l4083
  5195                           
  5196                           ;user.c: 816: {
  5197                           ;user.c: 817: *counter -=1;
  5198  0013C4  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5199  0013C8  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5200  0013CC  06DF               	decf	indf2,f,c
  5201                           
  5202                           ;user.c: 818: }
  5203  0013CE  0012               	return	
  5204  0013D0                     i2l4083:
  5205                           
  5206                           ;user.c: 819: else
  5207                           ;user.c: 820: {
  5208                           ;user.c: 821: *counter -=1;
  5209  0013D0  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5210  0013D4  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5211  0013D8  06DF               	decf	indf2,f,c
  5212                           
  5213                           ;user.c: 823: }
  5214                           ;user.c: 824: }
  5215                           ;user.c: 825: }
  5216  0013DA  0012               	return	
  5217  0013DC                     i2l4085:
  5218                           
  5219                           ;user.c: 826: else if(state == 19)
  5220  0013DC  0E13               	movlw	19
  5221  0013DE  1804               	xorwf	update_timer1_counter_10@state,w,c
  5222  0013E0  A4D8               	btfss	status,2,c
  5223  0013E2  D018               	goto	i2l4097
  5224                           
  5225                           ;user.c: 827: {
  5226                           ;user.c: 828: if(*counter>0)
  5227  0013E4  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5228  0013E8  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5229  0013EC  50DF               	movf	indf2,w,c
  5230  0013EE  B4D8               	btfsc	status,2,c
  5231  0013F0  D006               	goto	i2l4091
  5232                           
  5233                           ;user.c: 829: {
  5234                           ;user.c: 830: *counter -=1;
  5235  0013F2  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5236  0013F6  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5237  0013FA  06DF               	decf	indf2,f,c
  5238                           
  5239                           ;user.c: 831: }
  5240  0013FC  0012               	return	
  5241  0013FE                     i2l4091:
  5242                           
  5243                           ;user.c: 832: else
  5244                           ;user.c: 833: {
  5245                           ;user.c: 834: if(timer1_counter_min > 0)
  5246  0013FE  5031               	movf	_timer1_counter_min,w,c
  5247  001400  B4D8               	btfsc	status,2,c
  5248  001402  0012               	return	
  5249                           
  5250                           ;user.c: 835: {
  5251                           ;user.c: 836: timer1_counter_min -=1;
  5252  001404  0631               	decf	_timer1_counter_min,f,c
  5253                           
  5254                           ;user.c: 837: *counter = 59;
  5255  001406  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5256  00140A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5257  00140E  0E3B               	movlw	59
  5258  001410  6EDF               	movwf	indf2,c
  5259                           
  5260                           ;user.c: 838: }
  5261                           ;user.c: 840: }
  5262                           ;user.c: 841: }
  5263  001412  0012               	return	
  5264  001414                     i2l4097:
  5265                           
  5266                           ;user.c: 842: else if(state == 21)
  5267  001414  0E15               	movlw	21
  5268  001416  1804               	xorwf	update_timer1_counter_10@state,w,c
  5269  001418  A4D8               	btfss	status,2,c
  5270  00141A  D00B               	goto	i2l4105
  5271                           
  5272                           ;user.c: 843: {
  5273                           ;user.c: 844: *counter = 0;
  5274  00141C  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5275  001420  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5276  001424  0E00               	movlw	0
  5277  001426  6EDF               	movwf	indf2,c
  5278                           
  5279                           ;user.c: 845: timer1_speed_cents = 0;
  5280  001428  0E00               	movlw	0
  5281  00142A  6E2E               	movwf	_timer1_speed_cents,c
  5282                           
  5283                           ;user.c: 846: timer1_counter_min = 0;
  5284  00142C  0E00               	movlw	0
  5285  00142E  6E31               	movwf	_timer1_counter_min,c
  5286                           
  5287                           ;user.c: 847: }
  5288  001430  0012               	return	
  5289  001432                     i2l4105:
  5290                           
  5291                           ;user.c: 848: else if(state == 22)
  5292  001432  0E16               	movlw	22
  5293  001434  1804               	xorwf	update_timer1_counter_10@state,w,c
  5294  001436  A4D8               	btfss	status,2,c
  5295  001438  D018               	goto	i2l4117
  5296                           
  5297                           ;user.c: 849: {
  5298                           ;user.c: 850: if(*counter<59)
  5299  00143A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5300  00143E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5301  001442  0E3B               	movlw	59
  5302  001444  60DF               	cpfslt	indf2,c
  5303  001446  D006               	goto	i2l4111
  5304                           
  5305                           ;user.c: 851: {
  5306                           ;user.c: 852: *counter +=1;
  5307  001448  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5308  00144C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5309  001450  2ADF               	incf	indf2,f,c
  5310                           
  5311                           ;user.c: 853: }
  5312  001452  0012               	return	
  5313  001454                     i2l4111:
  5314                           
  5315                           ;user.c: 854: else
  5316                           ;user.c: 855: {
  5317                           ;user.c: 856: *counter = 0;
  5318  001454  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5319  001458  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5320  00145C  0E00               	movlw	0
  5321  00145E  6EDF               	movwf	indf2,c
  5322                           
  5323                           ;user.c: 857: if(timer1_counter_min<59)
  5324  001460  0E3B               	movlw	59
  5325  001462  6031               	cpfslt	_timer1_counter_min,c
  5326  001464  0012               	return	
  5327                           
  5328                           ;user.c: 858: {
  5329                           ;user.c: 859: timer1_counter_min +=1;
  5330  001466  2A31               	incf	_timer1_counter_min,f,c
  5331                           
  5332                           ;user.c: 860: }
  5333                           ;user.c: 861: }
  5334                           ;user.c: 862: }
  5335  001468  0012               	return	
  5336  00146A                     i2l4117:
  5337                           
  5338                           ;user.c: 863: else if(state == 26 || state == 27)
  5339  00146A  0E1A               	movlw	26
  5340  00146C  1804               	xorwf	update_timer1_counter_10@state,w,c
  5341  00146E  B4D8               	btfsc	status,2,c
  5342  001470  D004               	goto	i2l4121
  5343  001472  0E1B               	movlw	27
  5344  001474  1804               	xorwf	update_timer1_counter_10@state,w,c
  5345  001476  A4D8               	btfss	status,2,c
  5346  001478  0012               	return	
  5347  00147A                     i2l4121:
  5348                           
  5349                           ;user.c: 864: {
  5350                           ;user.c: 865: if(*counter >0)
  5351  00147A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5352  00147E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5353  001482  50DF               	movf	indf2,w,c
  5354  001484  B4D8               	btfsc	status,2,c
  5355  001486  D006               	goto	i2l4125
  5356                           
  5357                           ;user.c: 866: {
  5358                           ;user.c: 867: *counter -=1;
  5359  001488  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5360  00148C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5361  001490  06DF               	decf	indf2,f,c
  5362                           
  5363                           ;user.c: 868: }
  5364  001492  0012               	return	
  5365  001494                     i2l4125:
  5366                           
  5367                           ;user.c: 869: else
  5368                           ;user.c: 870: {
  5369                           ;user.c: 871: if(timer1_counter_min >0)
  5370  001494  5031               	movf	_timer1_counter_min,w,c
  5371  001496  B4D8               	btfsc	status,2,c
  5372  001498  0012               	return	
  5373                           
  5374                           ;user.c: 872: {
  5375                           ;user.c: 873: timer1_counter_min -=1;
  5376  00149A  0631               	decf	_timer1_counter_min,f,c
  5377                           
  5378                           ;user.c: 874: *counter = 59;
  5379  00149C  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  5380  0014A0  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  5381  0014A4  0E3B               	movlw	59
  5382  0014A6  6EDF               	movwf	indf2,c
  5383  0014A8  0012               	return	
  5384  0014AA                     __end_of_update_timer1_counter_10:
  5385                           	opt stack 0
  5386                           pclatu	equ	0xFFB
  5387                           pclath	equ	0xFFA
  5388                           tblptru	equ	0xFF8
  5389                           tblptrh	equ	0xFF7
  5390                           tblptrl	equ	0xFF6
  5391                           tablat	equ	0xFF5
  5392                           prodh	equ	0xFF4
  5393                           prodl	equ	0xFF3
  5394                           intcon	equ	0xFF2
  5395                           intcon2	equ	0xFF1
  5396                           postinc0	equ	0xFEE
  5397                           fsr0h	equ	0xFEA
  5398                           fsr0l	equ	0xFE9
  5399                           wreg	equ	0xFE8
  5400                           indf1	equ	0xFE7
  5401                           fsr1h	equ	0xFE2
  5402                           fsr1l	equ	0xFE1
  5403                           indf2	equ	0xFDF
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408 ;; *************** function _update_point *****************
  5409 ;; Defined at:
  5410 ;;		line 667 in file "user.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  state           2    0[COMRAM] int 
  5413 ;;  counter         1    2[COMRAM] unsigned char 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;		None
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      void 
  5418 ;; Registers used:
  5419 ;;		wreg, status,2, status,0, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5425 ;;      Params:         3       0       0       0       0       0       0       0       0
  5426 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5428 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5429 ;;Total ram usage:        3 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:    1
  5432 ;; This function calls:
  5433 ;;		_point_disable
  5434 ;;		_point_enable
  5435 ;; This function is called by:
  5436 ;;		_high_isr
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text24
  5441  001FA8                     __ptext24:
  5442                           	opt stack 0
  5443  001FA8                     _update_point:
  5444                           	opt stack 24
  5445                           
  5446                           ;user.c: 669: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  5447                           
  5448                           ;incstack = 0
  5449  001FA8  5003               	movf	update_point@counter,w,c
  5450  001FAA  A4D8               	btfss	status,2,c
  5451  001FAC  D011               	goto	i2l4005
  5452  001FAE  5001               	movf	update_point@state,w,c
  5453  001FB0  1002               	iorwf	update_point@state+1,w,c
  5454  001FB2  B4D8               	btfsc	status,2,c
  5455  001FB4  D00A               	goto	i2l4003
  5456  001FB6  0E05               	movlw	5
  5457  001FB8  1801               	xorwf	update_point@state,w,c
  5458  001FBA  1002               	iorwf	update_point@state+1,w,c
  5459  001FBC  B4D8               	btfsc	status,2,c
  5460  001FBE  D005               	goto	i2l4003
  5461  001FC0  0E0C               	movlw	12
  5462  001FC2  1801               	xorwf	update_point@state,w,c
  5463  001FC4  1002               	iorwf	update_point@state+1,w,c
  5464  001FC6  A4D8               	btfss	status,2,c
  5465  001FC8  D003               	goto	i2l4005
  5466  001FCA                     i2l4003:
  5467                           
  5468                           ;user.c: 670: {
  5469                           ;user.c: 671: point_enable();
  5470  001FCA  ECA4  F010         	call	_point_enable	;wreg free
  5471                           
  5472                           ;user.c: 672: }
  5473  001FCE  0012               	return	
  5474  001FD0                     i2l4005:
  5475                           
  5476                           ;user.c: 673: else if(counter == 5 && state == 0 && state != 5)
  5477  001FD0  0E05               	movlw	5
  5478  001FD2  1803               	xorwf	update_point@counter,w,c
  5479  001FD4  A4D8               	btfss	status,2,c
  5480  001FD6  0012               	return	
  5481  001FD8  5001               	movf	update_point@state,w,c
  5482  001FDA  1002               	iorwf	update_point@state+1,w,c
  5483  001FDC  A4D8               	btfss	status,2,c
  5484  001FDE  0012               	return	
  5485  001FE0  0E05               	movlw	5
  5486  001FE2  1801               	xorwf	update_point@state,w,c
  5487  001FE4  1002               	iorwf	update_point@state+1,w,c
  5488  001FE6  B4D8               	btfsc	status,2,c
  5489  001FE8  0012               	return	
  5490                           
  5491                           ;user.c: 674: {
  5492                           ;user.c: 675: point_disable();
  5493  001FEA  ECA6  F010         	call	_point_disable	;wreg free
  5494  001FEE  0012               	return	
  5495  001FF0                     __end_of_update_point:
  5496                           	opt stack 0
  5497                           pclatu	equ	0xFFB
  5498                           pclath	equ	0xFFA
  5499                           tblptru	equ	0xFF8
  5500                           tblptrh	equ	0xFF7
  5501                           tblptrl	equ	0xFF6
  5502                           tablat	equ	0xFF5
  5503                           prodh	equ	0xFF4
  5504                           prodl	equ	0xFF3
  5505                           intcon	equ	0xFF2
  5506                           intcon2	equ	0xFF1
  5507                           postinc0	equ	0xFEE
  5508                           fsr0h	equ	0xFEA
  5509                           fsr0l	equ	0xFE9
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           fsr1h	equ	0xFE2
  5513                           fsr1l	equ	0xFE1
  5514                           indf2	equ	0xFDF
  5515                           fsr2h	equ	0xFDA
  5516                           fsr2l	equ	0xFD9
  5517                           status	equ	0xFD8
  5518                           
  5519 ;; *************** function _point_enable *****************
  5520 ;; Defined at:
  5521 ;;		line 144 in file "user.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;		None
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      void 
  5528 ;; Registers used:
  5529 ;;		None
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5535 ;;      Params:         0       0       0       0       0       0       0       0       0
  5536 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5537 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5538 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5539 ;;Total ram usage:        0 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; This function calls:
  5542 ;;		Nothing
  5543 ;; This function is called by:
  5544 ;;		_high_isr
  5545 ;;		_update_point
  5546 ;;		_point_toggle
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text25
  5551  002148                     __ptext25:
  5552                           	opt stack 0
  5553  002148                     _point_enable:
  5554                           	opt stack 24
  5555                           
  5556                           ;user.c: 146: RB1 = 1;
  5557                           
  5558                           ;incstack = 0
  5559  002148  8281               	bsf	3969,1,c	;volatile
  5560  00214A  0012               	return		;funcret
  5561  00214C                     __end_of_point_enable:
  5562                           	opt stack 0
  5563                           pclatu	equ	0xFFB
  5564                           pclath	equ	0xFFA
  5565                           tblptru	equ	0xFF8
  5566                           tblptrh	equ	0xFF7
  5567                           tblptrl	equ	0xFF6
  5568                           tablat	equ	0xFF5
  5569                           prodh	equ	0xFF4
  5570                           prodl	equ	0xFF3
  5571                           intcon	equ	0xFF2
  5572                           intcon2	equ	0xFF1
  5573                           postinc0	equ	0xFEE
  5574                           fsr0h	equ	0xFEA
  5575                           fsr0l	equ	0xFE9
  5576                           wreg	equ	0xFE8
  5577                           indf1	equ	0xFE7
  5578                           fsr1h	equ	0xFE2
  5579                           fsr1l	equ	0xFE1
  5580                           indf2	equ	0xFDF
  5581                           fsr2h	equ	0xFDA
  5582                           fsr2l	equ	0xFD9
  5583                           status	equ	0xFD8
  5584                           
  5585 ;; *************** function _point_disable *****************
  5586 ;; Defined at:
  5587 ;;		line 150 in file "user.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      void 
  5594 ;; Registers used:
  5595 ;;		None
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5601 ;;      Params:         0       0       0       0       0       0       0       0       0
  5602 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5604 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5605 ;;Total ram usage:        0 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_high_isr
  5611 ;;		_update_point
  5612 ;;		_point_toggle
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text26
  5617  00214C                     __ptext26:
  5618                           	opt stack 0
  5619  00214C                     _point_disable:
  5620                           	opt stack 24
  5621                           
  5622                           ;user.c: 152: RB1 = 0;
  5623                           
  5624                           ;incstack = 0
  5625  00214C  9281               	bcf	3969,1,c	;volatile
  5626  00214E  0012               	return		;funcret
  5627  002150                     __end_of_point_disable:
  5628                           	opt stack 0
  5629                           pclatu	equ	0xFFB
  5630                           pclath	equ	0xFFA
  5631                           tblptru	equ	0xFF8
  5632                           tblptrh	equ	0xFF7
  5633                           tblptrl	equ	0xFF6
  5634                           tablat	equ	0xFF5
  5635                           prodh	equ	0xFF4
  5636                           prodl	equ	0xFF3
  5637                           intcon	equ	0xFF2
  5638                           intcon2	equ	0xFF1
  5639                           postinc0	equ	0xFEE
  5640                           fsr0h	equ	0xFEA
  5641                           fsr0l	equ	0xFE9
  5642                           wreg	equ	0xFE8
  5643                           indf1	equ	0xFE7
  5644                           fsr1h	equ	0xFE2
  5645                           fsr1l	equ	0xFE1
  5646                           indf2	equ	0xFDF
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function _update_buzzer *****************
  5652 ;; Defined at:
  5653 ;;		line 680 in file "user.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  state           2    0[COMRAM] int 
  5656 ;;  counter         1    2[COMRAM] unsigned char 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, status,2, status,0, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5668 ;;      Params:         3       0       0       0       0       0       0       0       0
  5669 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5671 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5672 ;;Total ram usage:        3 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    1
  5675 ;; This function calls:
  5676 ;;		_buzzer_enable
  5677 ;;		i2_buzzer_disable
  5678 ;; This function is called by:
  5679 ;;		_high_isr
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text27
  5684  001FF0                     __ptext27:
  5685                           	opt stack 0
  5686  001FF0                     _update_buzzer:
  5687                           	opt stack 24
  5688                           
  5689                           ;user.c: 682: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  5690                           
  5691                           ;incstack = 0
  5692  001FF0  5003               	movf	update_buzzer@counter,w,c
  5693  001FF2  A4D8               	btfss	status,2,c
  5694  001FF4  D011               	goto	i2l4023
  5695  001FF6  5001               	movf	update_buzzer@state,w,c
  5696  001FF8  1002               	iorwf	update_buzzer@state+1,w,c
  5697  001FFA  B4D8               	btfsc	status,2,c
  5698  001FFC  D00A               	goto	i2l4021
  5699  001FFE  0E05               	movlw	5
  5700  002000  1801               	xorwf	update_buzzer@state,w,c
  5701  002002  1002               	iorwf	update_buzzer@state+1,w,c
  5702  002004  B4D8               	btfsc	status,2,c
  5703  002006  D005               	goto	i2l4021
  5704  002008  0E0C               	movlw	12
  5705  00200A  1801               	xorwf	update_buzzer@state,w,c
  5706  00200C  1002               	iorwf	update_buzzer@state+1,w,c
  5707  00200E  A4D8               	btfss	status,2,c
  5708  002010  D003               	goto	i2l4023
  5709  002012                     i2l4021:
  5710                           
  5711                           ;user.c: 683: {
  5712                           ;user.c: 684: buzzer_enable();
  5713  002012  EC90  F010         	call	_buzzer_enable	;wreg free
  5714                           
  5715                           ;user.c: 685: }
  5716  002016  0012               	return	
  5717  002018                     i2l4023:
  5718                           
  5719                           ;user.c: 686: else if(counter == 5 && state == 0 && state != 5)
  5720  002018  0E05               	movlw	5
  5721  00201A  1803               	xorwf	update_buzzer@counter,w,c
  5722  00201C  A4D8               	btfss	status,2,c
  5723  00201E  0012               	return	
  5724  002020  5001               	movf	update_buzzer@state,w,c
  5725  002022  1002               	iorwf	update_buzzer@state+1,w,c
  5726  002024  A4D8               	btfss	status,2,c
  5727  002026  0012               	return	
  5728  002028  0E05               	movlw	5
  5729  00202A  1801               	xorwf	update_buzzer@state,w,c
  5730  00202C  1002               	iorwf	update_buzzer@state+1,w,c
  5731  00202E  B4D8               	btfsc	status,2,c
  5732  002030  0012               	return	
  5733                           
  5734                           ;user.c: 687: {
  5735                           ;user.c: 688: buzzer_disable();
  5736  002032  EC8C  F010         	call	i2_buzzer_disable	;wreg free
  5737  002036  0012               	return	
  5738  002038                     __end_of_update_buzzer:
  5739                           	opt stack 0
  5740                           pclatu	equ	0xFFB
  5741                           pclath	equ	0xFFA
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           intcon	equ	0xFF2
  5749                           intcon2	equ	0xFF1
  5750                           postinc0	equ	0xFEE
  5751                           fsr0h	equ	0xFEA
  5752                           fsr0l	equ	0xFE9
  5753                           wreg	equ	0xFE8
  5754                           indf1	equ	0xFE7
  5755                           fsr1h	equ	0xFE2
  5756                           fsr1l	equ	0xFE1
  5757                           indf2	equ	0xFDF
  5758                           fsr2h	equ	0xFDA
  5759                           fsr2l	equ	0xFD9
  5760                           status	equ	0xFD8
  5761                           
  5762 ;; *************** function i2_buzzer_disable *****************
  5763 ;; Defined at:
  5764 ;;		line 170 in file "user.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;		None
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;		None
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		wreg, status,2
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5778 ;;      Params:         0       0       0       0       0       0       0       0       0
  5779 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5780 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5781 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5782 ;;Total ram usage:        0 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_update_buzzer
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text28
  5792  002118                     __ptext28:
  5793                           	opt stack 0
  5794  002118                     i2_buzzer_disable:
  5795                           	opt stack 24
  5796                           
  5797                           ;user.c: 172: buzzer_status= 0;
  5798                           
  5799                           ;incstack = 0
  5800  002118  0E00               	movlw	0
  5801  00211A  0100               	movlb	0	; () banked
  5802  00211C  6F8D               	movwf	_buzzer_status& (0+255),b
  5803                           
  5804                           ; BSR set to: 0
  5805  00211E  0012               	return		;funcret
  5806  002120                     __end_ofi2_buzzer_disable:
  5807                           	opt stack 0
  5808                           pclatu	equ	0xFFB
  5809                           pclath	equ	0xFFA
  5810                           tblptru	equ	0xFF8
  5811                           tblptrh	equ	0xFF7
  5812                           tblptrl	equ	0xFF6
  5813                           tablat	equ	0xFF5
  5814                           prodh	equ	0xFF4
  5815                           prodl	equ	0xFF3
  5816                           intcon	equ	0xFF2
  5817                           intcon2	equ	0xFF1
  5818                           postinc0	equ	0xFEE
  5819                           fsr0h	equ	0xFEA
  5820                           fsr0l	equ	0xFE9
  5821                           wreg	equ	0xFE8
  5822                           indf1	equ	0xFE7
  5823                           fsr1h	equ	0xFE2
  5824                           fsr1l	equ	0xFE1
  5825                           indf2	equ	0xFDF
  5826                           fsr2h	equ	0xFDA
  5827                           fsr2l	equ	0xFD9
  5828                           status	equ	0xFD8
  5829                           
  5830 ;; *************** function _buzzer_enable *****************
  5831 ;; Defined at:
  5832 ;;		line 165 in file "user.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;		None
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;		None
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  1    wreg      void 
  5839 ;; Registers used:
  5840 ;;		wreg, status,2
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5846 ;;      Params:         0       0       0       0       0       0       0       0       0
  5847 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5849 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5850 ;;Total ram usage:        0 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_update_buzzer
  5856 ;;		_buzzer_toggle
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           	psect	text29
  5861  002120                     __ptext29:
  5862                           	opt stack 0
  5863  002120                     _buzzer_enable:
  5864                           	opt stack 24
  5865                           
  5866                           ;user.c: 167: buzzer_status= 1;
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;incstack = 0
  5870  002120  0E01               	movlw	1
  5871  002122  0100               	movlb	0	; () banked
  5872  002124  6F8D               	movwf	_buzzer_status& (0+255),b
  5873                           
  5874                           ; BSR set to: 0
  5875  002126  0012               	return		;funcret
  5876  002128                     __end_of_buzzer_enable:
  5877                           	opt stack 0
  5878                           pclatu	equ	0xFFB
  5879                           pclath	equ	0xFFA
  5880                           tblptru	equ	0xFF8
  5881                           tblptrh	equ	0xFF7
  5882                           tblptrl	equ	0xFF6
  5883                           tablat	equ	0xFF5
  5884                           prodh	equ	0xFF4
  5885                           prodl	equ	0xFF3
  5886                           intcon	equ	0xFF2
  5887                           intcon2	equ	0xFF1
  5888                           postinc0	equ	0xFEE
  5889                           fsr0h	equ	0xFEA
  5890                           fsr0l	equ	0xFE9
  5891                           wreg	equ	0xFE8
  5892                           indf1	equ	0xFE7
  5893                           fsr1h	equ	0xFE2
  5894                           fsr1l	equ	0xFE1
  5895                           indf2	equ	0xFDF
  5896                           fsr2h	equ	0xFDA
  5897                           fsr2l	equ	0xFD9
  5898                           status	equ	0xFD8
  5899                           
  5900 ;; *************** function _put_nums *****************
  5901 ;; Defined at:
  5902 ;;		line 97 in file "user.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  nums            2    7[COMRAM] PTR unsigned char 
  5905 ;;		 -> masked_digits(6), 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  i               2    9[COMRAM] int 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  1    wreg      void 
  5910 ;; Registers used:
  5911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5917 ;;      Params:         2       0       0       0       0       0       0       0       0
  5918 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5920 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5921 ;;Total ram usage:        4 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    1
  5924 ;; This function calls:
  5925 ;;		_get_num
  5926 ;;		_put_num
  5927 ;; This function is called by:
  5928 ;;		_high_isr
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text30
  5933  002072                     __ptext30:
  5934                           	opt stack 0
  5935  002072                     _put_nums:
  5936                           	opt stack 24
  5937                           
  5938                           ;user.c: 99: int i;
  5939                           ;user.c: 100: for(i=0;i<6;i++)
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;incstack = 0
  5943  002072  0E00               	movlw	0
  5944  002074  6E0B               	movwf	put_nums@i+1,c
  5945  002076  0E00               	movlw	0
  5946  002078  6E0A               	movwf	put_nums@i,c
  5947  00207A                     i2l4033:
  5948  00207A  BE0B               	btfsc	put_nums@i+1,7,c
  5949  00207C  D006               	goto	i2l4037
  5950  00207E  500B               	movf	put_nums@i+1,w,c
  5951  002080  E112               	bnz	i2l336
  5952  002082  0E06               	movlw	6
  5953  002084  5C0A               	subwf	put_nums@i,w,c
  5954  002086  B0D8               	btfsc	status,0,c
  5955  002088  0012               	return	
  5956  00208A                     i2l4037:
  5957                           
  5958                           ;user.c: 101: {
  5959                           ;user.c: 102: put_num(get_num(nums[i]));
  5960  00208A  500A               	movf	put_nums@i,w,c
  5961  00208C  2408               	addwf	put_nums@nums,w,c
  5962  00208E  6ED9               	movwf	fsr2l,c
  5963  002090  500B               	movf	put_nums@i+1,w,c
  5964  002092  2009               	addwfc	put_nums@nums+1,w,c
  5965  002094  6EDA               	movwf	fsr2h,c
  5966  002096  50DF               	movf	indf2,w,c
  5967  002098  EC85  F00B         	call	_get_num
  5968  00209C  EC54  F00F         	call	_put_num
  5969  0020A0  4A0A               	infsnz	put_nums@i,f,c
  5970  0020A2  2A0B               	incf	put_nums@i+1,f,c
  5971  0020A4  D7EA               	goto	i2l4033
  5972  0020A6                     i2l336:
  5973  0020A6  0012               	return		;funcret
  5974  0020A8                     __end_of_put_nums:
  5975                           	opt stack 0
  5976                           pclatu	equ	0xFFB
  5977                           pclath	equ	0xFFA
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           intcon	equ	0xFF2
  5985                           intcon2	equ	0xFF1
  5986                           postinc0	equ	0xFEE
  5987                           fsr0h	equ	0xFEA
  5988                           fsr0l	equ	0xFE9
  5989                           wreg	equ	0xFE8
  5990                           indf1	equ	0xFE7
  5991                           fsr1h	equ	0xFE2
  5992                           fsr1l	equ	0xFE1
  5993                           indf2	equ	0xFDF
  5994                           fsr2h	equ	0xFDA
  5995                           fsr2l	equ	0xFD9
  5996                           status	equ	0xFD8
  5997                           
  5998 ;; *************** function _put_num *****************
  5999 ;; Defined at:
  6000 ;;		line 84 in file "user.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;  num             1    wreg     unsigned char 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  num             1    2[COMRAM] unsigned char 
  6005 ;;  i               2    5[COMRAM] int 
  6006 ;;  mask            1    3[COMRAM] unsigned char 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      void 
  6009 ;; Registers used:
  6010 ;;		wreg, status,2, status,0
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6016 ;;      Params:         0       0       0       0       0       0       0       0       0
  6017 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6018 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6019 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6020 ;;Total ram usage:        7 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; This function calls:
  6023 ;;		Nothing
  6024 ;; This function is called by:
  6025 ;;		_put_nums
  6026 ;;		_put_nums_individual
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text31
  6031  001EA8                     __ptext31:
  6032                           	opt stack 0
  6033  001EA8                     _put_num:
  6034                           	opt stack 24
  6035                           
  6036                           ;incstack = 0
  6037                           ;put_num@num stored from wreg
  6038  001EA8  6E03               	movwf	put_num@num,c
  6039                           
  6040                           ;user.c: 86: char mask = 0x01;
  6041  001EAA  0E01               	movlw	1
  6042  001EAC  6E04               	movwf	put_num@mask,c
  6043                           
  6044                           ;user.c: 87: int i;
  6045                           ;user.c: 88: for(i= 0; i<8; i++)
  6046  001EAE  0E00               	movlw	0
  6047  001EB0  6E07               	movwf	put_num@i+1,c
  6048  001EB2  0E00               	movlw	0
  6049  001EB4  6E06               	movwf	put_num@i,c
  6050  001EB6                     i2l3303:
  6051  001EB6  BE07               	btfsc	put_num@i+1,7,c
  6052  001EB8  D006               	goto	i2l3307
  6053  001EBA  5007               	movf	put_num@i+1,w,c
  6054  001EBC  E120               	bnz	i2l331
  6055  001EBE  0E08               	movlw	8
  6056  001EC0  5C06               	subwf	put_num@i,w,c
  6057  001EC2  B0D8               	btfsc	status,0,c
  6058  001EC4  0012               	return	
  6059  001EC6                     i2l3307:
  6060                           
  6061                           ;user.c: 89: {
  6062                           ;user.c: 90: RB3 = num>>i & mask;
  6063  001EC6  0E00               	movlw	0
  6064  001EC8  6E05               	movwf	_put_num$982,c
  6065  001ECA  C006  F001         	movff	put_num@i,??_put_num
  6066  001ECE  C003  F002         	movff	put_num@num,??_put_num+1
  6067  001ED2  2A01               	incf	??_put_num,f,c
  6068  001ED4  D002               	goto	i2u317_44
  6069  001ED6                     i2u317_45:
  6070  001ED6  90D8               	bcf	status,0,c
  6071  001ED8  3202               	rrcf	??_put_num+1,f,c
  6072  001EDA                     i2u317_44:
  6073  001EDA  2E01               	decfsz	??_put_num,f,c
  6074  001EDC  D7FC               	goto	i2u317_45
  6075  001EDE  3002               	rrcf	??_put_num+1,w,c
  6076  001EE0  B0D8               	btfsc	status,0,c
  6077  001EE2  A004               	btfss	put_num@mask,0,c
  6078  001EE4  D002               	goto	i2l3315
  6079  001EE6  0E01               	movlw	1
  6080  001EE8  6E05               	movwf	_put_num$982,c
  6081  001EEA                     i2l3315:
  6082  001EEA  B005               	btfsc	_put_num$982,0,c
  6083  001EEC  D002               	bra	i2u320_45
  6084  001EEE  9681               	bcf	3969,3,c	;volatile
  6085  001EF0  D001               	bra	i2u320_46
  6086  001EF2                     i2u320_45:
  6087  001EF2  8681               	bsf	3969,3,c	;volatile
  6088  001EF4                     i2u320_46:
  6089                           
  6090                           ;user.c: 91: RB4 = 0;
  6091  001EF4  9881               	bcf	3969,4,c	;volatile
  6092                           
  6093                           ;user.c: 92: RB4 = 1;
  6094  001EF6  8881               	bsf	3969,4,c	;volatile
  6095  001EF8  4A06               	infsnz	put_num@i,f,c
  6096  001EFA  2A07               	incf	put_num@i+1,f,c
  6097  001EFC  D7DC               	goto	i2l3303
  6098  001EFE                     i2l331:
  6099  001EFE  0012               	return		;funcret
  6100  001F00                     __end_of_put_num:
  6101                           	opt stack 0
  6102                           pclatu	equ	0xFFB
  6103                           pclath	equ	0xFFA
  6104                           tblptru	equ	0xFF8
  6105                           tblptrh	equ	0xFF7
  6106                           tblptrl	equ	0xFF6
  6107                           tablat	equ	0xFF5
  6108                           prodh	equ	0xFF4
  6109                           prodl	equ	0xFF3
  6110                           intcon	equ	0xFF2
  6111                           intcon2	equ	0xFF1
  6112                           postinc0	equ	0xFEE
  6113                           fsr0h	equ	0xFEA
  6114                           fsr0l	equ	0xFE9
  6115                           wreg	equ	0xFE8
  6116                           indf1	equ	0xFE7
  6117                           fsr1h	equ	0xFE2
  6118                           fsr1l	equ	0xFE1
  6119                           indf2	equ	0xFDF
  6120                           fsr2h	equ	0xFDA
  6121                           fsr2l	equ	0xFD9
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function _get_num *****************
  6125 ;; Defined at:
  6126 ;;		line 117 in file "user.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  num             1    wreg     unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  num             1    0[COMRAM] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      unsigned char 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0
  6141 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6143 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6144 ;;Total ram usage:        1 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_put_nums
  6150 ;;		_put_nums_individual
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text32
  6155  00170A                     __ptext32:
  6156                           	opt stack 0
  6157  00170A                     _get_num:
  6158                           	opt stack 24
  6159                           
  6160                           ;incstack = 0
  6161                           ;get_num@num stored from wreg
  6162  00170A  6E01               	movwf	get_num@num,c
  6163                           
  6164                           ;user.c: 119: switch(num)
  6165  00170C  D026               	goto	i2l3405
  6166  00170E                     i2l3327:
  6167  00170E  0E30               	movlw	48
  6168  001710  0012               	return	
  6169  001712                     i2l3331:
  6170  001712  0E6D               	movlw	109
  6171  001714  0012               	return	
  6172  001716                     i2l3335:
  6173  001716  0E79               	movlw	121
  6174  001718  0012               	return	
  6175  00171A                     i2l3339:
  6176  00171A  0E33               	movlw	51
  6177  00171C  0012               	return	
  6178  00171E                     i2l3343:
  6179  00171E  0E5B               	movlw	91
  6180  001720  0012               	return	
  6181  001722                     i2l3347:
  6182  001722  0E5F               	movlw	95
  6183  001724  0012               	return	
  6184  001726                     i2l3351:
  6185  001726  0E70               	movlw	112
  6186  001728  0012               	return	
  6187  00172A                     i2l3355:
  6188  00172A  0E7F               	movlw	127
  6189  00172C  0012               	return	
  6190  00172E                     i2l3359:
  6191  00172E  0E73               	movlw	115
  6192  001730  0012               	return	
  6193  001732                     i2l3363:
  6194  001732  0E7E               	movlw	126
  6195  001734  0012               	return	
  6196  001736                     i2l3367:
  6197  001736  0E3E               	movlw	62
  6198  001738  0012               	return	
  6199  00173A                     i2l3371:
  6200  00173A  0E67               	movlw	103
  6201  00173C  0012               	return	
  6202  00173E                     i2l3375:
  6203  00173E  0E37               	movlw	55
  6204  001740  0012               	return	
  6205  001742                     i2l3379:
  6206  001742  0E3D               	movlw	61
  6207  001744  0012               	return	
  6208  001746                     i2l3383:
  6209  001746  0E15               	movlw	21
  6210  001748  0012               	return	
  6211  00174A                     i2l3387:
  6212  00174A  0E00               	movlw	0
  6213  00174C  0012               	return	
  6214  00174E                     i2l3391:
  6215  00174E  0E47               	movlw	71
  6216  001750  0012               	return	
  6217  001752                     i2l3395:
  6218  001752  0E4E               	movlw	78
  6219  001754  0012               	return	
  6220  001756                     i2l3399:
  6221  001756  0E7F               	movlw	127
  6222                           
  6223                           ;user.c: 140: }
  6224  001758  0012               	return	
  6225  00175A                     i2l3405:
  6226  00175A  5001               	movf	get_num@num,w,c
  6227                           
  6228                           ; Switch size 1, requested type "space"
  6229                           ; Number of cases is 18, Range of values is 0 to 86
  6230                           ; switch strategies available:
  6231                           ; Name         Instructions Cycles
  6232                           ; simple_byte           55    28 (average)
  6233                           ;	Chosen strategy is simple_byte
  6234  00175C  0A00               	xorlw	0	; case 0
  6235  00175E  B4D8               	btfsc	status,2,c
  6236  001760  D7E8               	goto	i2l3363
  6237  001762  0A01               	xorlw	1	; case 1
  6238  001764  B4D8               	btfsc	status,2,c
  6239  001766  D7D3               	goto	i2l3327
  6240  001768  0A03               	xorlw	3	; case 2
  6241  00176A  B4D8               	btfsc	status,2,c
  6242  00176C  D7D2               	goto	i2l3331
  6243  00176E  0A01               	xorlw	1	; case 3
  6244  001770  B4D8               	btfsc	status,2,c
  6245  001772  D7D1               	goto	i2l3335
  6246  001774  0A07               	xorlw	7	; case 4
  6247  001776  B4D8               	btfsc	status,2,c
  6248  001778  D7D0               	goto	i2l3339
  6249  00177A  0A01               	xorlw	1	; case 5
  6250  00177C  B4D8               	btfsc	status,2,c
  6251  00177E  D7CF               	goto	i2l3343
  6252  001780  0A03               	xorlw	3	; case 6
  6253  001782  B4D8               	btfsc	status,2,c
  6254  001784  D7CE               	goto	i2l3347
  6255  001786  0A01               	xorlw	1	; case 7
  6256  001788  B4D8               	btfsc	status,2,c
  6257  00178A  D7CD               	goto	i2l3351
  6258  00178C  0A0F               	xorlw	15	; case 8
  6259  00178E  B4D8               	btfsc	status,2,c
  6260  001790  D7CC               	goto	i2l3355
  6261  001792  0A01               	xorlw	1	; case 9
  6262  001794  B4D8               	btfsc	status,2,c
  6263  001796  D7CB               	goto	i2l3359
  6264  001798  0A4A               	xorlw	74	; case 67
  6265  00179A  B4D8               	btfsc	status,2,c
  6266  00179C  D7DA               	goto	i2l3395
  6267  00179E  0A07               	xorlw	7	; case 68
  6268  0017A0  B4D8               	btfsc	status,2,c
  6269  0017A2  D7CF               	goto	i2l3379
  6270  0017A4  0A02               	xorlw	2	; case 70
  6271  0017A6  B4D8               	btfsc	status,2,c
  6272  0017A8  D7D2               	goto	i2l3391
  6273  0017AA  0A0E               	xorlw	14	; case 72
  6274  0017AC  B4D8               	btfsc	status,2,c
  6275  0017AE  D7C7               	goto	i2l3375
  6276  0017B0  0A06               	xorlw	6	; case 78
  6277  0017B2  B4D8               	btfsc	status,2,c
  6278  0017B4  D7C8               	goto	i2l3383
  6279  0017B6  0A1E               	xorlw	30	; case 80
  6280  0017B8  B4D8               	btfsc	status,2,c
  6281  0017BA  D7BF               	goto	i2l3371
  6282  0017BC  0A05               	xorlw	5	; case 85
  6283  0017BE  B4D8               	btfsc	status,2,c
  6284  0017C0  D7BA               	goto	i2l3367
  6285  0017C2  0A03               	xorlw	3	; case 86
  6286  0017C4  B4D8               	btfsc	status,2,c
  6287  0017C6  D7C1               	goto	i2l3387
  6288  0017C8  D7C6               	goto	i2l3399
  6289  0017CA                     __end_of_get_num:
  6290                           	opt stack 0
  6291                           pclatu	equ	0xFFB
  6292                           pclath	equ	0xFFA
  6293                           tblptru	equ	0xFF8
  6294                           tblptrh	equ	0xFF7
  6295                           tblptrl	equ	0xFF6
  6296                           tablat	equ	0xFF5
  6297                           prodh	equ	0xFF4
  6298                           prodl	equ	0xFF3
  6299                           intcon	equ	0xFF2
  6300                           intcon2	equ	0xFF1
  6301                           postinc0	equ	0xFEE
  6302                           fsr0h	equ	0xFEA
  6303                           fsr0l	equ	0xFE9
  6304                           wreg	equ	0xFE8
  6305                           indf1	equ	0xFE7
  6306                           fsr1h	equ	0xFE2
  6307                           fsr1l	equ	0xFE1
  6308                           indf2	equ	0xFDF
  6309                           fsr2h	equ	0xFDA
  6310                           fsr2l	equ	0xFD9
  6311                           status	equ	0xFD8
  6312                           
  6313 ;; *************** function _ir_get_human_code *****************
  6314 ;; Defined at:
  6315 ;;		line 603 in file "user.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  code            2    0[COMRAM] int 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  human_read_c    1    4[COMRAM] unsigned char 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  1    wreg      unsigned char 
  6322 ;; Registers used:
  6323 ;;		wreg, status,2, status,0
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6329 ;;      Params:         2       0       0       0       0       0       0       0       0
  6330 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6331 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6332 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6333 ;;Total ram usage:        5 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; This function calls:
  6336 ;;		Nothing
  6337 ;; This function is called by:
  6338 ;;		_high_isr
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           	psect	text33
  6343  0015DC                     __ptext33:
  6344                           	opt stack 0
  6345  0015DC                     _ir_get_human_code:
  6346                           	opt stack 25
  6347                           
  6348                           ;user.c: 605: char human_read_code;
  6349                           ;user.c: 606: switch(code)
  6350                           
  6351                           ;incstack = 0
  6352  0015DC  D035               	goto	i2l3605
  6353  0015DE                     i2l3565:
  6354                           
  6355                           ;user.c: 609: human_read_code = 10;
  6356  0015DE  0E0A               	movlw	10
  6357  0015E0  6E05               	movwf	ir_get_human_code@human_read_code,c
  6358                           
  6359                           ;user.c: 610: break;
  6360  0015E2  0012               	return	
  6361  0015E4                     i2l3567:
  6362                           
  6363                           ;user.c: 612: human_read_code = 11;
  6364  0015E4  0E0B               	movlw	11
  6365  0015E6  6E05               	movwf	ir_get_human_code@human_read_code,c
  6366                           
  6367                           ;user.c: 613: break;
  6368  0015E8  0012               	return	
  6369  0015EA                     i2l3569:
  6370                           
  6371                           ;user.c: 615: human_read_code = 12;
  6372  0015EA  0E0C               	movlw	12
  6373  0015EC  6E05               	movwf	ir_get_human_code@human_read_code,c
  6374                           
  6375                           ;user.c: 616: break;
  6376  0015EE  0012               	return	
  6377  0015F0                     i2l3571:
  6378                           
  6379                           ;user.c: 618: human_read_code = 13;
  6380  0015F0  0E0D               	movlw	13
  6381  0015F2  6E05               	movwf	ir_get_human_code@human_read_code,c
  6382                           
  6383                           ;user.c: 619: break;
  6384  0015F4  0012               	return	
  6385  0015F6                     i2l3573:
  6386                           
  6387                           ;user.c: 621: human_read_code = 14;
  6388  0015F6  0E0E               	movlw	14
  6389  0015F8  6E05               	movwf	ir_get_human_code@human_read_code,c
  6390                           
  6391                           ;user.c: 622: break;
  6392  0015FA  0012               	return	
  6393  0015FC                     i2l3575:
  6394                           
  6395                           ;user.c: 624: human_read_code = 1;
  6396  0015FC  0E01               	movlw	1
  6397  0015FE  6E05               	movwf	ir_get_human_code@human_read_code,c
  6398                           
  6399                           ;user.c: 625: break;
  6400  001600  0012               	return	
  6401  001602                     i2l3577:
  6402                           
  6403                           ;user.c: 627: human_read_code = 2;
  6404  001602  0E02               	movlw	2
  6405  001604  6E05               	movwf	ir_get_human_code@human_read_code,c
  6406                           
  6407                           ;user.c: 628: break;
  6408  001606  0012               	return	
  6409  001608                     i2l3579:
  6410                           
  6411                           ;user.c: 630: human_read_code = 3;
  6412  001608  0E03               	movlw	3
  6413  00160A  6E05               	movwf	ir_get_human_code@human_read_code,c
  6414                           
  6415                           ;user.c: 631: break;
  6416  00160C  0012               	return	
  6417  00160E                     i2l3581:
  6418                           
  6419                           ;user.c: 633: human_read_code = 4;
  6420  00160E  0E04               	movlw	4
  6421  001610  6E05               	movwf	ir_get_human_code@human_read_code,c
  6422                           
  6423                           ;user.c: 634: break;
  6424  001612  0012               	return	
  6425  001614                     i2l3583:
  6426                           
  6427                           ;user.c: 636: human_read_code = 5;
  6428  001614  0E05               	movlw	5
  6429  001616  6E05               	movwf	ir_get_human_code@human_read_code,c
  6430                           
  6431                           ;user.c: 637: break;
  6432  001618  0012               	return	
  6433  00161A                     i2l3585:
  6434                           
  6435                           ;user.c: 639: human_read_code = 6;
  6436  00161A  0E06               	movlw	6
  6437  00161C  6E05               	movwf	ir_get_human_code@human_read_code,c
  6438                           
  6439                           ;user.c: 640: break;
  6440  00161E  0012               	return	
  6441  001620                     i2l3587:
  6442                           
  6443                           ;user.c: 642: human_read_code = 7;
  6444  001620  0E07               	movlw	7
  6445  001622  6E05               	movwf	ir_get_human_code@human_read_code,c
  6446                           
  6447                           ;user.c: 643: break;
  6448  001624  0012               	return	
  6449  001626                     i2l3589:
  6450                           
  6451                           ;user.c: 645: human_read_code = 8;
  6452  001626  0E08               	movlw	8
  6453  001628  6E05               	movwf	ir_get_human_code@human_read_code,c
  6454                           
  6455                           ;user.c: 646: break;
  6456  00162A  0012               	return	
  6457  00162C                     i2l3591:
  6458                           
  6459                           ;user.c: 648: human_read_code = 9;
  6460  00162C  0E09               	movlw	9
  6461  00162E  6E05               	movwf	ir_get_human_code@human_read_code,c
  6462                           
  6463                           ;user.c: 649: break;
  6464  001630  0012               	return	
  6465  001632                     i2l3593:
  6466                           
  6467                           ;user.c: 651: human_read_code = 0;
  6468  001632  0E00               	movlw	0
  6469  001634  6E05               	movwf	ir_get_human_code@human_read_code,c
  6470                           
  6471                           ;user.c: 652: break;
  6472  001636  0012               	return	
  6473  001638                     i2l3595:
  6474                           
  6475                           ;user.c: 654: human_read_code = 15;
  6476  001638  0E0F               	movlw	15
  6477  00163A  6E05               	movwf	ir_get_human_code@human_read_code,c
  6478                           
  6479                           ;user.c: 655: break;
  6480  00163C  0012               	return	
  6481  00163E                     i2l3597:
  6482                           
  6483                           ;user.c: 657: human_read_code = 16;
  6484  00163E  0E10               	movlw	16
  6485  001640  6E05               	movwf	ir_get_human_code@human_read_code,c
  6486                           
  6487                           ;user.c: 658: break;
  6488  001642  0012               	return	
  6489  001644                     i2l3599:
  6490                           
  6491                           ;user.c: 660: return -1;
  6492  001644  0EFF               	movlw	255
  6493                           
  6494                           ;user.c: 661: }
  6495  001646  0012               	return	
  6496  001648                     i2l3605:
  6497  001648  C001  F003         	movff	ir_get_human_code@code,??_ir_get_human_code
  6498  00164C  C002  F004         	movff	ir_get_human_code@code+1,??_ir_get_human_code+1
  6499                           
  6500                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 8 sub-sw
      +                          itches
  6501                           ; Switch size 1, requested type "space"
  6502                           ; Number of cases is 8, Range of values is 170 to 238
  6503                           ; switch strategies available:
  6504                           ; Name         Instructions Cycles
  6505                           ; simple_byte           25    13 (average)
  6506                           ;	Chosen strategy is simple_byte
  6507  001650  5004               	movf	??_ir_get_human_code+1,w,c
  6508  001652  0AAA               	xorlw	170	; case 170
  6509  001654  B4D8               	btfsc	status,2,c
  6510  001656  D016               	goto	i2l5755
  6511  001658  0A01               	xorlw	1	; case 171
  6512  00165A  B4D8               	btfsc	status,2,c
  6513  00165C  D01E               	goto	i2l5757
  6514  00165E  0A05               	xorlw	5	; case 174
  6515  001660  B4D8               	btfsc	status,2,c
  6516  001662  D023               	goto	i2l5759
  6517  001664  0A14               	xorlw	20	; case 186
  6518  001666  B4D8               	btfsc	status,2,c
  6519  001668  D028               	goto	i2l5761
  6520  00166A  0A01               	xorlw	1	; case 187
  6521  00166C  B4D8               	btfsc	status,2,c
  6522  00166E  D02A               	goto	i2l5763
  6523  001670  0A51               	xorlw	81	; case 234
  6524  001672  B4D8               	btfsc	status,2,c
  6525  001674  D032               	goto	i2l5765
  6526  001676  0A01               	xorlw	1	; case 235
  6527  001678  B4D8               	btfsc	status,2,c
  6528  00167A  D034               	goto	i2l5767
  6529  00167C  0A05               	xorlw	5	; case 238
  6530  00167E  B4D8               	btfsc	status,2,c
  6531  001680  D039               	goto	i2l5769
  6532  001682  D7E0               	goto	i2l3599
  6533  001684                     i2l5755:
  6534                           
  6535                           ; Switch size 1, requested type "space"
  6536                           ; Number of cases is 3, Range of values is 186 to 238
  6537                           ; switch strategies available:
  6538                           ; Name         Instructions Cycles
  6539                           ; simple_byte           10     6 (average)
  6540                           ;	Chosen strategy is simple_byte
  6541  001684  5003               	movf	??_ir_get_human_code,w,c
  6542  001686  0ABA               	xorlw	186	; case 186
  6543  001688  B4D8               	btfsc	status,2,c
  6544  00168A  D7D6               	goto	i2l3595
  6545  00168C  0A50               	xorlw	80	; case 234
  6546  00168E  B4D8               	btfsc	status,2,c
  6547  001690  D7AF               	goto	i2l3571
  6548  001692  0A04               	xorlw	4	; case 238
  6549  001694  B4D8               	btfsc	status,2,c
  6550  001696  D7AF               	goto	i2l3573
  6551  001698  D7D5               	goto	i2l3599
  6552  00169A                     i2l5757:
  6553                           
  6554                           ; Switch size 1, requested type "space"
  6555                           ; Number of cases is 2, Range of values is 170 to 186
  6556                           ; switch strategies available:
  6557                           ; Name         Instructions Cycles
  6558                           ; simple_byte            7     4 (average)
  6559                           ;	Chosen strategy is simple_byte
  6560  00169A  5003               	movf	??_ir_get_human_code,w,c
  6561  00169C  0AAA               	xorlw	170	; case 170
  6562  00169E  B4D8               	btfsc	status,2,c
  6563  0016A0  D7BF               	goto	i2l3587
  6564  0016A2  0A10               	xorlw	16	; case 186
  6565  0016A4  B4D8               	btfsc	status,2,c
  6566  0016A6  D79B               	goto	i2l3565
  6567  0016A8  D7CD               	goto	i2l3599
  6568  0016AA                     i2l5759:
  6569                           
  6570                           ; Switch size 1, requested type "space"
  6571                           ; Number of cases is 2, Range of values is 186 to 234
  6572                           ; switch strategies available:
  6573                           ; Name         Instructions Cycles
  6574                           ; simple_byte            7     4 (average)
  6575                           ;	Chosen strategy is simple_byte
  6576  0016AA  5003               	movf	??_ir_get_human_code,w,c
  6577  0016AC  0ABA               	xorlw	186	; case 186
  6578  0016AE  B4D8               	btfsc	status,2,c
  6579  0016B0  D7C6               	goto	i2l3597
  6580  0016B2  0A50               	xorlw	80	; case 234
  6581  0016B4  B4D8               	btfsc	status,2,c
  6582  0016B6  D7AB               	goto	i2l3581
  6583  0016B8  D7C5               	goto	i2l3599
  6584  0016BA                     i2l5761:
  6585                           
  6586                           ; Switch size 1, requested type "space"
  6587                           ; Number of cases is 1, Range of values is 186 to 186
  6588                           ; switch strategies available:
  6589                           ; Name         Instructions Cycles
  6590                           ; simple_byte            4     3 (average)
  6591                           ;	Chosen strategy is simple_byte
  6592  0016BA  5003               	movf	??_ir_get_human_code,w,c
  6593  0016BC  0ABA               	xorlw	186	; case 186
  6594  0016BE  B4D8               	btfsc	status,2,c
  6595  0016C0  D7B8               	goto	i2l3593
  6596  0016C2  D7C0               	goto	i2l3599
  6597  0016C4                     i2l5763:
  6598                           
  6599                           ; Switch size 1, requested type "space"
  6600                           ; Number of cases is 3, Range of values is 170 to 186
  6601                           ; switch strategies available:
  6602                           ; Name         Instructions Cycles
  6603                           ; simple_byte           10     6 (average)
  6604                           ;	Chosen strategy is simple_byte
  6605  0016C4  5003               	movf	??_ir_get_human_code,w,c
  6606  0016C6  0AAA               	xorlw	170	; case 170
  6607  0016C8  B4D8               	btfsc	status,2,c
  6608  0016CA  D7A4               	goto	i2l3583
  6609  0016CC  0A04               	xorlw	4	; case 174
  6610  0016CE  B4D8               	btfsc	status,2,c
  6611  0016D0  D79B               	goto	i2l3579
  6612  0016D2  0A14               	xorlw	20	; case 186
  6613  0016D4  B4D8               	btfsc	status,2,c
  6614  0016D6  D7A1               	goto	i2l3585
  6615  0016D8  D7B5               	goto	i2l3599
  6616  0016DA                     i2l5765:
  6617                           
  6618                           ; Switch size 1, requested type "space"
  6619                           ; Number of cases is 1, Range of values is 170 to 170
  6620                           ; switch strategies available:
  6621                           ; Name         Instructions Cycles
  6622                           ; simple_byte            4     3 (average)
  6623                           ;	Chosen strategy is simple_byte
  6624  0016DA  5003               	movf	??_ir_get_human_code,w,c
  6625  0016DC  0AAA               	xorlw	170	; case 170
  6626  0016DE  B4D8               	btfsc	status,2,c
  6627  0016E0  D781               	goto	i2l3567
  6628  0016E2  D7B0               	goto	i2l3599
  6629  0016E4                     i2l5767:
  6630                           
  6631                           ; Switch size 1, requested type "space"
  6632                           ; Number of cases is 2, Range of values is 174 to 186
  6633                           ; switch strategies available:
  6634                           ; Name         Instructions Cycles
  6635                           ; simple_byte            7     4 (average)
  6636                           ;	Chosen strategy is simple_byte
  6637  0016E4  5003               	movf	??_ir_get_human_code,w,c
  6638  0016E6  0AAE               	xorlw	174	; case 174
  6639  0016E8  B4D8               	btfsc	status,2,c
  6640  0016EA  D77F               	goto	i2l3569
  6641  0016EC  0A14               	xorlw	20	; case 186
  6642  0016EE  B4D8               	btfsc	status,2,c
  6643  0016F0  D785               	goto	i2l3575
  6644  0016F2  D7A8               	goto	i2l3599
  6645  0016F4                     i2l5769:
  6646                           
  6647                           ; Switch size 1, requested type "space"
  6648                           ; Number of cases is 3, Range of values is 174 to 234
  6649                           ; switch strategies available:
  6650                           ; Name         Instructions Cycles
  6651                           ; simple_byte           10     6 (average)
  6652                           ;	Chosen strategy is simple_byte
  6653  0016F4  5003               	movf	??_ir_get_human_code,w,c
  6654  0016F6  0AAE               	xorlw	174	; case 174
  6655  0016F8  B4D8               	btfsc	status,2,c
  6656  0016FA  D783               	goto	i2l3577
  6657  0016FC  0A14               	xorlw	20	; case 186
  6658  0016FE  B4D8               	btfsc	status,2,c
  6659  001700  D795               	goto	i2l3591
  6660  001702  0A50               	xorlw	80	; case 234
  6661  001704  B4D8               	btfsc	status,2,c
  6662  001706  D78F               	goto	i2l3589
  6663  001708  D79D               	goto	i2l3599
  6664  00170A                     __end_of_ir_get_human_code:
  6665                           	opt stack 0
  6666                           pclatu	equ	0xFFB
  6667                           pclath	equ	0xFFA
  6668                           tblptru	equ	0xFF8
  6669                           tblptrh	equ	0xFF7
  6670                           tblptrl	equ	0xFF6
  6671                           tablat	equ	0xFF5
  6672                           prodh	equ	0xFF4
  6673                           prodl	equ	0xFF3
  6674                           intcon	equ	0xFF2
  6675                           intcon2	equ	0xFF1
  6676                           postinc0	equ	0xFEE
  6677                           fsr0h	equ	0xFEA
  6678                           fsr0l	equ	0xFE9
  6679                           wreg	equ	0xFE8
  6680                           indf1	equ	0xFE7
  6681                           fsr1h	equ	0xFE2
  6682                           fsr1l	equ	0xFE1
  6683                           indf2	equ	0xFDF
  6684                           fsr2h	equ	0xFDA
  6685                           fsr2l	equ	0xFD9
  6686                           status	equ	0xFD8
  6687                           
  6688 ;; *************** function _get_next_state *****************
  6689 ;; Defined at:
  6690 ;;		line 387 in file "user.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;  state           2   13[COMRAM] int 
  6693 ;;  code            2   15[COMRAM] int 
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  hour            1   26[COMRAM] unsigned char 
  6696 ;;  minutes         1   25[COMRAM] unsigned char 
  6697 ;;  seconds         1   24[COMRAM] unsigned char 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  2   13[COMRAM] int 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6707 ;;      Params:         4       0       0       0       0       0       0       0       0
  6708 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6709 ;;      Temps:          7       0       0       0       0       0       0       0       0
  6710 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6711 ;;Total ram usage:       14 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    4
  6714 ;; This function calls:
  6715 ;;		_set_time
  6716 ;;		i2___awdiv
  6717 ;;		i2___awmod
  6718 ;;		i2_timer1_enable
  6719 ;; This function is called by:
  6720 ;;		_high_isr
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text34
  6725  000012                     __ptext34:
  6726                           	opt stack 0
  6727  000012                     _get_next_state:
  6728                           	opt stack 21
  6729                           
  6730                           ;user.c: 389: if(state == 0 && code == 0xAABA)
  6731                           
  6732                           ;incstack = 0
  6733  000012  500E               	movf	get_next_state@state,w,c
  6734  000014  100F               	iorwf	get_next_state@state+1,w,c
  6735  000016  A4D8               	btfss	status,2,c
  6736  000018  D00C               	goto	i2l3645
  6737  00001A  0EBA               	movlw	186
  6738  00001C  1810               	xorwf	get_next_state@code,w,c
  6739  00001E  E109               	bnz	i2l3645
  6740  000020  0EAA               	movlw	170
  6741  000022  1811               	xorwf	get_next_state@code+1,w,c
  6742  000024  A4D8               	btfss	status,2,c
  6743  000026  D005               	goto	i2l3645
  6744  000028                     i2l3643:
  6745                           
  6746                           ;user.c: 390: next = 1;
  6747  000028  0E00               	movlw	0
  6748  00002A  0100               	movlb	0	; () banked
  6749  00002C  6F89               	movwf	(_next+1)& (0+255),b
  6750  00002E  0E01               	movlw	1
  6751  000030  D2EE               	goto	L48
  6752  000032                     i2l3645:
  6753                           
  6754                           ;user.c: 391: else if((state == 0 || state == 6 || state == 21 || state == 24) && code =
      +                          = 0xABBa)
  6755  000032  500E               	movf	get_next_state@state,w,c
  6756  000034  100F               	iorwf	get_next_state@state+1,w,c
  6757  000036  B4D8               	btfsc	status,2,c
  6758  000038  D00F               	goto	i2l3653
  6759  00003A  0E06               	movlw	6
  6760  00003C  180E               	xorwf	get_next_state@state,w,c
  6761  00003E  100F               	iorwf	get_next_state@state+1,w,c
  6762  000040  B4D8               	btfsc	status,2,c
  6763  000042  D00A               	goto	i2l3653
  6764  000044  0E15               	movlw	21
  6765  000046  180E               	xorwf	get_next_state@state,w,c
  6766  000048  100F               	iorwf	get_next_state@state+1,w,c
  6767  00004A  B4D8               	btfsc	status,2,c
  6768  00004C  D005               	goto	i2l3653
  6769  00004E  0E18               	movlw	24
  6770  000050  180E               	xorwf	get_next_state@state,w,c
  6771  000052  100F               	iorwf	get_next_state@state+1,w,c
  6772  000054  A4D8               	btfss	status,2,c
  6773  000056  D00C               	goto	i2l3657
  6774  000058                     i2l3653:
  6775  000058  0EBA               	movlw	186
  6776  00005A  1810               	xorwf	get_next_state@code,w,c
  6777  00005C  E109               	bnz	i2l3657
  6778  00005E  0EAB               	movlw	171
  6779  000060  1811               	xorwf	get_next_state@code+1,w,c
  6780  000062  A4D8               	btfss	status,2,c
  6781  000064  D005               	goto	i2l3657
  6782  000066                     i2l3655:
  6783                           
  6784                           ;user.c: 392: next = 5;
  6785  000066  0E00               	movlw	0
  6786  000068  0100               	movlb	0	; () banked
  6787  00006A  6F89               	movwf	(_next+1)& (0+255),b
  6788  00006C  0E05               	movlw	5
  6789  00006E  D2CF               	goto	L48
  6790  000070                     i2l3657:
  6791                           
  6792                           ;user.c: 393: else if((state == 0 || state == 5 || state == 21 || state == 24) && code =
      +                          = 0xEBAE)
  6793  000070  500E               	movf	get_next_state@state,w,c
  6794  000072  100F               	iorwf	get_next_state@state+1,w,c
  6795  000074  B4D8               	btfsc	status,2,c
  6796  000076  D00F               	goto	i2l3665
  6797  000078  0E05               	movlw	5
  6798  00007A  180E               	xorwf	get_next_state@state,w,c
  6799  00007C  100F               	iorwf	get_next_state@state+1,w,c
  6800  00007E  B4D8               	btfsc	status,2,c
  6801  000080  D00A               	goto	i2l3665
  6802  000082  0E15               	movlw	21
  6803  000084  180E               	xorwf	get_next_state@state,w,c
  6804  000086  100F               	iorwf	get_next_state@state+1,w,c
  6805  000088  B4D8               	btfsc	status,2,c
  6806  00008A  D005               	goto	i2l3665
  6807  00008C  0E18               	movlw	24
  6808  00008E  180E               	xorwf	get_next_state@state,w,c
  6809  000090  100F               	iorwf	get_next_state@state+1,w,c
  6810  000092  A4D8               	btfss	status,2,c
  6811  000094  D00C               	goto	i2l3669
  6812  000096                     i2l3665:
  6813  000096  0EAE               	movlw	174
  6814  000098  1810               	xorwf	get_next_state@code,w,c
  6815  00009A  E109               	bnz	i2l3669
  6816  00009C  0EEB               	movlw	235
  6817  00009E  1811               	xorwf	get_next_state@code+1,w,c
  6818  0000A0  A4D8               	btfss	status,2,c
  6819  0000A2  D005               	goto	i2l3669
  6820  0000A4                     i2l3667:
  6821                           
  6822                           ;user.c: 394: next = 6;
  6823  0000A4  0E00               	movlw	0
  6824  0000A6  0100               	movlb	0	; () banked
  6825  0000A8  6F89               	movwf	(_next+1)& (0+255),b
  6826  0000AA  0E06               	movlw	6
  6827  0000AC  D2B0               	goto	L48
  6828  0000AE                     i2l3669:
  6829                           
  6830                           ;user.c: 395: else if((state == 0 || state == 5 || state == 6 || state == 21) && code ==
      +                           0xAAEE)
  6831  0000AE  500E               	movf	get_next_state@state,w,c
  6832  0000B0  100F               	iorwf	get_next_state@state+1,w,c
  6833  0000B2  B4D8               	btfsc	status,2,c
  6834  0000B4  D00F               	goto	i2l3677
  6835  0000B6  0E05               	movlw	5
  6836  0000B8  180E               	xorwf	get_next_state@state,w,c
  6837  0000BA  100F               	iorwf	get_next_state@state+1,w,c
  6838  0000BC  B4D8               	btfsc	status,2,c
  6839  0000BE  D00A               	goto	i2l3677
  6840  0000C0  0E06               	movlw	6
  6841  0000C2  180E               	xorwf	get_next_state@state,w,c
  6842  0000C4  100F               	iorwf	get_next_state@state+1,w,c
  6843  0000C6  B4D8               	btfsc	status,2,c
  6844  0000C8  D005               	goto	i2l3677
  6845  0000CA  0E15               	movlw	21
  6846  0000CC  180E               	xorwf	get_next_state@state,w,c
  6847  0000CE  100F               	iorwf	get_next_state@state+1,w,c
  6848  0000D0  A4D8               	btfss	status,2,c
  6849  0000D2  D007               	goto	i2l3681
  6850  0000D4                     i2l3677:
  6851  0000D4  0EEE               	movlw	238
  6852  0000D6  1810               	xorwf	get_next_state@code,w,c
  6853  0000D8  E104               	bnz	i2l3681
  6854  0000DA  0EAA               	movlw	170
  6855  0000DC  1811               	xorwf	get_next_state@code+1,w,c
  6856  0000DE  B4D8               	btfsc	status,2,c
  6857  0000E0  D292               	goto	L58
  6858  0000E2                     i2l3681:
  6859                           
  6860                           ;user.c: 397: else if(state == 1 && code == 0xAAEE)
  6861  0000E2  040E               	decf	get_next_state@state,w,c
  6862  0000E4  100F               	iorwf	get_next_state@state+1,w,c
  6863  0000E6  A4D8               	btfss	status,2,c
  6864  0000E8  D00C               	goto	i2l3687
  6865  0000EA  0EEE               	movlw	238
  6866  0000EC  1810               	xorwf	get_next_state@code,w,c
  6867  0000EE  E109               	bnz	i2l3687
  6868  0000F0  0EAA               	movlw	170
  6869  0000F2  1811               	xorwf	get_next_state@code+1,w,c
  6870  0000F4  A4D8               	btfss	status,2,c
  6871  0000F6  D005               	goto	i2l3687
  6872                           
  6873                           ;user.c: 398: next = 2;
  6874  0000F8  0E00               	movlw	0
  6875  0000FA  0100               	movlb	0	; () banked
  6876  0000FC  6F89               	movwf	(_next+1)& (0+255),b
  6877  0000FE  0E02               	movlw	2
  6878  000100  D286               	goto	L48
  6879  000102                     i2l3687:
  6880                           
  6881                           ;user.c: 399: else if(state == 2 && code == 0xAAEE)
  6882  000102  0E02               	movlw	2
  6883  000104  180E               	xorwf	get_next_state@state,w,c
  6884  000106  100F               	iorwf	get_next_state@state+1,w,c
  6885  000108  A4D8               	btfss	status,2,c
  6886  00010A  D00C               	goto	i2l3693
  6887  00010C  0EEE               	movlw	238
  6888  00010E  1810               	xorwf	get_next_state@code,w,c
  6889  000110  E109               	bnz	i2l3693
  6890  000112  0EAA               	movlw	170
  6891  000114  1811               	xorwf	get_next_state@code+1,w,c
  6892  000116  A4D8               	btfss	status,2,c
  6893  000118  D005               	goto	i2l3693
  6894                           
  6895                           ;user.c: 400: next = 3;
  6896  00011A  0E00               	movlw	0
  6897  00011C  0100               	movlb	0	; () banked
  6898  00011E  6F89               	movwf	(_next+1)& (0+255),b
  6899  000120  0E03               	movlw	3
  6900  000122  D275               	goto	L48
  6901  000124                     i2l3693:
  6902                           
  6903                           ;user.c: 401: else if(state == 3 && code == 0xAAEE)
  6904  000124  0E03               	movlw	3
  6905  000126  180E               	xorwf	get_next_state@state,w,c
  6906  000128  100F               	iorwf	get_next_state@state+1,w,c
  6907  00012A  A4D8               	btfss	status,2,c
  6908  00012C  D00C               	goto	i2l3699
  6909  00012E  0EEE               	movlw	238
  6910  000130  1810               	xorwf	get_next_state@code,w,c
  6911  000132  E109               	bnz	i2l3699
  6912  000134  0EAA               	movlw	170
  6913  000136  1811               	xorwf	get_next_state@code+1,w,c
  6914  000138  A4D8               	btfss	status,2,c
  6915  00013A  D005               	goto	i2l3699
  6916                           
  6917                           ;user.c: 402: next = 4;
  6918  00013C  0E00               	movlw	0
  6919  00013E  0100               	movlb	0	; () banked
  6920  000140  6F89               	movwf	(_next+1)& (0+255),b
  6921  000142  0E04               	movlw	4
  6922  000144  D264               	goto	L48
  6923  000146                     i2l3699:
  6924                           
  6925                           ;user.c: 403: else if(state == 4 && code == 0xAAEE)
  6926  000146  0E04               	movlw	4
  6927  000148  180E               	xorwf	get_next_state@state,w,c
  6928  00014A  100F               	iorwf	get_next_state@state+1,w,c
  6929  00014C  A4D8               	btfss	status,2,c
  6930  00014E  D007               	goto	i2l3705
  6931  000150  0EEE               	movlw	238
  6932  000152  1810               	xorwf	get_next_state@code,w,c
  6933  000154  E104               	bnz	i2l3705
  6934  000156  0EAA               	movlw	170
  6935  000158  1811               	xorwf	get_next_state@code+1,w,c
  6936  00015A  B4D8               	btfsc	status,2,c
  6937  00015C  D765               	goto	i2l3643
  6938  00015E                     i2l3705:
  6939                           
  6940                           ;user.c: 405: else if((state == 5 || state == 6 || state == 21 || state == 24) && code =
      +                          = 0xBABA)
  6941  00015E  0E05               	movlw	5
  6942  000160  180E               	xorwf	get_next_state@state,w,c
  6943  000162  100F               	iorwf	get_next_state@state+1,w,c
  6944  000164  B4D8               	btfsc	status,2,c
  6945  000166  D00F               	goto	i2l3713
  6946  000168  0E06               	movlw	6
  6947  00016A  180E               	xorwf	get_next_state@state,w,c
  6948  00016C  100F               	iorwf	get_next_state@state+1,w,c
  6949  00016E  B4D8               	btfsc	status,2,c
  6950  000170  D00A               	goto	i2l3713
  6951  000172  0E15               	movlw	21
  6952  000174  180E               	xorwf	get_next_state@state,w,c
  6953  000176  100F               	iorwf	get_next_state@state+1,w,c
  6954  000178  B4D8               	btfsc	status,2,c
  6955  00017A  D005               	goto	i2l3713
  6956  00017C  0E18               	movlw	24
  6957  00017E  180E               	xorwf	get_next_state@state,w,c
  6958  000180  100F               	iorwf	get_next_state@state+1,w,c
  6959  000182  A4D8               	btfss	status,2,c
  6960  000184  D00C               	goto	i2l3717
  6961  000186                     i2l3713:
  6962  000186  0EBA               	movlw	186
  6963  000188  1810               	xorwf	get_next_state@code,w,c
  6964  00018A  E109               	bnz	i2l3717
  6965  00018C  0EBA               	movlw	186
  6966  00018E  1811               	xorwf	get_next_state@code+1,w,c
  6967  000190  A4D8               	btfss	status,2,c
  6968  000192  D005               	goto	i2l3717
  6969                           
  6970                           ;user.c: 406: next = 0;
  6971  000194  0E00               	movlw	0
  6972  000196  0100               	movlb	0	; () banked
  6973  000198  6F89               	movwf	(_next+1)& (0+255),b
  6974  00019A  0E00               	movlw	0
  6975  00019C  D238               	goto	L48
  6976  00019E                     i2l3717:
  6977                           
  6978                           ;user.c: 407: else if((state == 1 || state == 2 || state == 3 || state == 4) && code == 
      +                          0xAEBA)
  6979  00019E  040E               	decf	get_next_state@state,w,c
  6980  0001A0  100F               	iorwf	get_next_state@state+1,w,c
  6981  0001A2  B4D8               	btfsc	status,2,c
  6982  0001A4  D00F               	goto	i2l3725
  6983  0001A6  0E02               	movlw	2
  6984  0001A8  180E               	xorwf	get_next_state@state,w,c
  6985  0001AA  100F               	iorwf	get_next_state@state+1,w,c
  6986  0001AC  B4D8               	btfsc	status,2,c
  6987  0001AE  D00A               	goto	i2l3725
  6988  0001B0  0E03               	movlw	3
  6989  0001B2  180E               	xorwf	get_next_state@state,w,c
  6990  0001B4  100F               	iorwf	get_next_state@state+1,w,c
  6991  0001B6  B4D8               	btfsc	status,2,c
  6992  0001B8  D005               	goto	i2l3725
  6993  0001BA  0E04               	movlw	4
  6994  0001BC  180E               	xorwf	get_next_state@state,w,c
  6995  0001BE  100F               	iorwf	get_next_state@state+1,w,c
  6996  0001C0  A4D8               	btfss	status,2,c
  6997  0001C2  D024               	goto	i2l3735
  6998  0001C4                     i2l3725:
  6999  0001C4  0EBA               	movlw	186
  7000  0001C6  1810               	xorwf	get_next_state@code,w,c
  7001  0001C8  E121               	bnz	i2l3735
  7002  0001CA  0EAE               	movlw	174
  7003  0001CC  1811               	xorwf	get_next_state@code+1,w,c
  7004  0001CE  A4D8               	btfss	status,2,c
  7005  0001D0  D01D               	goto	i2l3735
  7006                           
  7007                           ;user.c: 408: {
  7008                           ;user.c: 409: next = 0;
  7009  0001D2  0E00               	movlw	0
  7010  0001D4  0100               	movlb	0	; () banked
  7011  0001D6  6F89               	movwf	(_next+1)& (0+255),b
  7012  0001D8  0E00               	movlw	0
  7013  0001DA  6F88               	movwf	_next& (0+255),b
  7014                           
  7015                           ;user.c: 410: char seconds = 0;
  7016  0001DC  0E00               	movlw	0
  7017  0001DE  6E19               	movwf	get_next_state@seconds,c
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;user.c: 411: char minutes = aux1[0] + aux1[1]*10;
  7021  0001E0  0100               	movlb	0	; () banked
  7022  0001E2  5196               	movf	(_aux1+1)& (0+255),w,b
  7023  0001E4  0D0A               	mullw	10
  7024  0001E6  50F3               	movf	prodl,w,c
  7025  0001E8  0100               	movlb	0	; () banked
  7026  0001EA  2595               	addwf	_aux1& (0+255),w,b
  7027  0001EC  6E1A               	movwf	get_next_state@minutes,c
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;user.c: 412: char hour = aux1[2] + aux1[3]*10;
  7031  0001EE  0100               	movlb	0	; () banked
  7032  0001F0  5198               	movf	(_aux1+3)& (0+255),w,b
  7033  0001F2  0D0A               	mullw	10
  7034  0001F4  50F3               	movf	prodl,w,c
  7035  0001F6  0100               	movlb	0	; () banked
  7036  0001F8  2597               	addwf	(_aux1+2)& (0+255),w,b
  7037  0001FA  6E1B               	movwf	get_next_state@hour,c
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;user.c: 413: set_time(seconds,minutes,hour);
  7041  0001FC  C01A  F008         	movff	get_next_state@minutes,set_time@minutes
  7042  000200  C01B  F009         	movff	get_next_state@hour,set_time@hour
  7043  000204  5019               	movf	get_next_state@seconds,w,c
  7044  000206  EC1C  F010         	call	_set_time
  7045                           
  7046                           ;user.c: 414: }
  7047  00020A  D325               	goto	i2l447
  7048  00020C                     i2l3735:
  7049                           
  7050                           ;user.c: 415: else if(state == 5 && code == 0xEAAA)
  7051  00020C  0E05               	movlw	5
  7052  00020E  180E               	xorwf	get_next_state@state,w,c
  7053  000210  100F               	iorwf	get_next_state@state+1,w,c
  7054  000212  A4D8               	btfss	status,2,c
  7055  000214  D00F               	goto	i2l3743
  7056  000216  0EAA               	movlw	170
  7057  000218  1810               	xorwf	get_next_state@code,w,c
  7058  00021A  E10C               	bnz	i2l3743
  7059  00021C  0EEA               	movlw	234
  7060  00021E  1811               	xorwf	get_next_state@code+1,w,c
  7061  000220  A4D8               	btfss	status,2,c
  7062  000222  D008               	goto	i2l3743
  7063                           
  7064                           ;user.c: 416: {
  7065                           ;user.c: 417: next = 11;
  7066  000224  0E00               	movlw	0
  7067  000226  0100               	movlb	0	; () banked
  7068  000228  6F89               	movwf	(_next+1)& (0+255),b
  7069  00022A  0E0B               	movlw	11
  7070  00022C  6F88               	movwf	_next& (0+255),b
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;user.c: 419: timer1_enable();
  7074  00022E  ECA8  F010         	call	i2_timer1_enable	;wreg free
  7075                           
  7076                           ;user.c: 420: }
  7077  000232  D311               	goto	i2l447
  7078  000234                     i2l3743:
  7079                           
  7080                           ;user.c: 421: else if(state == 11 && timer1_counter_10 == 0)
  7081  000234  0E0B               	movlw	11
  7082  000236  180E               	xorwf	get_next_state@state,w,c
  7083  000238  100F               	iorwf	get_next_state@state+1,w,c
  7084  00023A  A4D8               	btfss	status,2,c
  7085  00023C  D009               	goto	i2l3749
  7086  00023E  0100               	movlb	0	; () banked
  7087  000240  519B               	movf	_timer1_counter_10& (0+255),w,b
  7088  000242  A4D8               	btfss	status,2,c
  7089  000244  D005               	goto	i2l3749
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;user.c: 422: next = 12;
  7093  000246  0E00               	movlw	0
  7094  000248  0100               	movlb	0	; () banked
  7095  00024A  6F89               	movwf	(_next+1)& (0+255),b
  7096  00024C  0E0C               	movlw	12
  7097  00024E  D1DF               	goto	L48
  7098  000250                     i2l3749:
  7099                           
  7100                           ;user.c: 423: else if(state == 12 && timer1_counter_min == timer1_up_limit_min && timer1
      +                          _counter_10 == timer1_up_limit_sec)
  7101  000250  0E0C               	movlw	12
  7102  000252  180E               	xorwf	get_next_state@state,w,c
  7103  000254  100F               	iorwf	get_next_state@state+1,w,c
  7104  000256  A4D8               	btfss	status,2,c
  7105  000258  D00E               	goto	i2l3757
  7106  00025A  5033               	movf	_timer1_up_limit_min,w,c
  7107  00025C  1831               	xorwf	_timer1_counter_min,w,c
  7108  00025E  A4D8               	btfss	status,2,c
  7109  000260  D00A               	goto	i2l3757
  7110  000262  5034               	movf	_timer1_up_limit_sec,w,c
  7111  000264  0100               	movlb	0	; () banked
  7112  000266  199B               	xorwf	_timer1_counter_10& (0+255),w,b
  7113  000268  A4D8               	btfss	status,2,c
  7114  00026A  D005               	goto	i2l3757
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;user.c: 424: {
  7118                           ;user.c: 425: next = 13;
  7119  00026C  0E00               	movlw	0
  7120  00026E  0100               	movlb	0	; () banked
  7121  000270  6F89               	movwf	(_next+1)& (0+255),b
  7122  000272  0E0D               	movlw	13
  7123  000274  D1CC               	goto	L48
  7124  000276                     i2l3757:
  7125                           
  7126                           ;user.c: 427: else if((state == 13 || state == 12 ) && code == 0xAEBA)
  7127  000276  0E0D               	movlw	13
  7128  000278  180E               	xorwf	get_next_state@state,w,c
  7129  00027A  100F               	iorwf	get_next_state@state+1,w,c
  7130  00027C  B4D8               	btfsc	status,2,c
  7131  00027E  D005               	goto	i2l3761
  7132  000280  0E0C               	movlw	12
  7133  000282  180E               	xorwf	get_next_state@state,w,c
  7134  000284  100F               	iorwf	get_next_state@state+1,w,c
  7135  000286  A4D8               	btfss	status,2,c
  7136  000288  D007               	goto	i2l3765
  7137  00028A                     i2l3761:
  7138  00028A  0EBA               	movlw	186
  7139  00028C  1810               	xorwf	get_next_state@code,w,c
  7140  00028E  E104               	bnz	i2l3765
  7141  000290  0EAE               	movlw	174
  7142  000292  1811               	xorwf	get_next_state@code+1,w,c
  7143  000294  B4D8               	btfsc	status,2,c
  7144  000296  D6E7               	goto	i2l3655
  7145  000298                     i2l3765:
  7146                           
  7147                           ;user.c: 429: else if(state == 5 && code == 0xAABA)
  7148  000298  0E05               	movlw	5
  7149  00029A  180E               	xorwf	get_next_state@state,w,c
  7150  00029C  100F               	iorwf	get_next_state@state+1,w,c
  7151  00029E  A4D8               	btfss	status,2,c
  7152  0002A0  D00C               	goto	i2l3771
  7153  0002A2  0EBA               	movlw	186
  7154  0002A4  1810               	xorwf	get_next_state@code,w,c
  7155  0002A6  E109               	bnz	i2l3771
  7156  0002A8  0EAA               	movlw	170
  7157  0002AA  1811               	xorwf	get_next_state@code+1,w,c
  7158  0002AC  A4D8               	btfss	status,2,c
  7159  0002AE  D005               	goto	i2l3771
  7160                           
  7161                           ;user.c: 430: {
  7162                           ;user.c: 431: next = 7;
  7163  0002B0  0E00               	movlw	0
  7164  0002B2  0100               	movlb	0	; () banked
  7165  0002B4  6F89               	movwf	(_next+1)& (0+255),b
  7166  0002B6  0E07               	movlw	7
  7167  0002B8  D1AA               	goto	L48
  7168  0002BA                     i2l3771:
  7169                           
  7170                           ;user.c: 433: else if((state == 7 || state == 8 || state == 9 || state == 10) && code ==
      +                           0xAEBA)
  7171  0002BA  0E07               	movlw	7
  7172  0002BC  180E               	xorwf	get_next_state@state,w,c
  7173  0002BE  100F               	iorwf	get_next_state@state+1,w,c
  7174  0002C0  B4D8               	btfsc	status,2,c
  7175  0002C2  D00F               	goto	i2l3779
  7176  0002C4  0E08               	movlw	8
  7177  0002C6  180E               	xorwf	get_next_state@state,w,c
  7178  0002C8  100F               	iorwf	get_next_state@state+1,w,c
  7179  0002CA  B4D8               	btfsc	status,2,c
  7180  0002CC  D00A               	goto	i2l3779
  7181  0002CE  0E09               	movlw	9
  7182  0002D0  180E               	xorwf	get_next_state@state,w,c
  7183  0002D2  100F               	iorwf	get_next_state@state+1,w,c
  7184  0002D4  B4D8               	btfsc	status,2,c
  7185  0002D6  D005               	goto	i2l3779
  7186  0002D8  0E0A               	movlw	10
  7187  0002DA  180E               	xorwf	get_next_state@state,w,c
  7188  0002DC  100F               	iorwf	get_next_state@state+1,w,c
  7189  0002DE  A4D8               	btfss	status,2,c
  7190  0002E0  D01B               	goto	i2l3787
  7191  0002E2                     i2l3779:
  7192  0002E2  0EBA               	movlw	186
  7193  0002E4  1810               	xorwf	get_next_state@code,w,c
  7194  0002E6  E118               	bnz	i2l3787
  7195  0002E8  0EAE               	movlw	174
  7196  0002EA  1811               	xorwf	get_next_state@code+1,w,c
  7197  0002EC  A4D8               	btfss	status,2,c
  7198  0002EE  D014               	goto	i2l3787
  7199                           
  7200                           ;user.c: 434: {
  7201                           ;user.c: 435: next = 5;
  7202  0002F0  0E00               	movlw	0
  7203  0002F2  0100               	movlb	0	; () banked
  7204  0002F4  6F89               	movwf	(_next+1)& (0+255),b
  7205  0002F6  0E05               	movlw	5
  7206  0002F8  6F88               	movwf	_next& (0+255),b
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;user.c: 437: timer1_up_limit_sec = aux1[1]*10+aux1[0];
  7210  0002FA  0100               	movlb	0	; () banked
  7211  0002FC  5196               	movf	(_aux1+1)& (0+255),w,b
  7212  0002FE  0D0A               	mullw	10
  7213  000300  50F3               	movf	prodl,w,c
  7214  000302  0100               	movlb	0	; () banked
  7215  000304  2595               	addwf	_aux1& (0+255),w,b
  7216  000306  6E34               	movwf	_timer1_up_limit_sec,c
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;user.c: 438: timer1_up_limit_min = aux1[3]*10 + aux1[2];
  7220  000308  0100               	movlb	0	; () banked
  7221  00030A  5198               	movf	(_aux1+3)& (0+255),w,b
  7222  00030C  0D0A               	mullw	10
  7223  00030E  50F3               	movf	prodl,w,c
  7224  000310  0100               	movlb	0	; () banked
  7225  000312  2597               	addwf	(_aux1+2)& (0+255),w,b
  7226  000314  6E33               	movwf	_timer1_up_limit_min,c
  7227                           
  7228                           ;user.c: 439: }
  7229  000316  D29F               	goto	i2l447
  7230  000318                     i2l3787:
  7231                           
  7232                           ;user.c: 440: else if(state == 6 && code == 0xEAAA)
  7233  000318  0E06               	movlw	6
  7234  00031A  180E               	xorwf	get_next_state@state,w,c
  7235  00031C  100F               	iorwf	get_next_state@state+1,w,c
  7236  00031E  A4D8               	btfss	status,2,c
  7237  000320  D00F               	goto	i2l3795
  7238  000322  0EAA               	movlw	170
  7239  000324  1810               	xorwf	get_next_state@code,w,c
  7240  000326  E10C               	bnz	i2l3795
  7241  000328  0EEA               	movlw	234
  7242  00032A  1811               	xorwf	get_next_state@code+1,w,c
  7243  00032C  A4D8               	btfss	status,2,c
  7244  00032E  D008               	goto	i2l3795
  7245                           
  7246                           ;user.c: 441: {
  7247                           ;user.c: 442: next = 18;
  7248  000330  0E00               	movlw	0
  7249  000332  0100               	movlb	0	; () banked
  7250  000334  6F89               	movwf	(_next+1)& (0+255),b
  7251  000336  0E12               	movlw	18
  7252  000338  6F88               	movwf	_next& (0+255),b
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;user.c: 444: timer1_enable();
  7256  00033A  ECA8  F010         	call	i2_timer1_enable	;wreg free
  7257                           
  7258                           ;user.c: 445: }
  7259  00033E  D28B               	goto	i2l447
  7260  000340                     i2l3795:
  7261                           
  7262                           ;user.c: 446: else if(state == 18 && timer1_counter_10 == 0)
  7263  000340  0E12               	movlw	18
  7264  000342  180E               	xorwf	get_next_state@state,w,c
  7265  000344  100F               	iorwf	get_next_state@state+1,w,c
  7266  000346  A4D8               	btfss	status,2,c
  7267  000348  D00E               	goto	i2l3805
  7268  00034A  0100               	movlb	0	; () banked
  7269  00034C  519B               	movf	_timer1_counter_10& (0+255),w,b
  7270  00034E  A4D8               	btfss	status,2,c
  7271  000350  D00A               	goto	i2l3805
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;user.c: 447: {
  7275                           ;user.c: 448: next = 19;
  7276  000352  0E00               	movlw	0
  7277  000354  0100               	movlb	0	; () banked
  7278  000356  6F89               	movwf	(_next+1)& (0+255),b
  7279  000358  0E13               	movlw	19
  7280  00035A  6F88               	movwf	_next& (0+255),b
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;user.c: 450: timer1_counter_min = timer1_down_init_min;
  7284  00035C  C030  F031         	movff	_timer1_down_init_min,_timer1_counter_min
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;user.c: 451: timer1_counter_10 = timer1_down_init_sec;
  7288  000360  C02F  F09B         	movff	_timer1_down_init_sec,_timer1_counter_10
  7289                           
  7290                           ;user.c: 452: }
  7291  000364  D278               	goto	i2l447
  7292  000366                     i2l3805:
  7293                           
  7294                           ;user.c: 453: else if(state == 19 && timer1_counter_min == 0 && timer1_counter_10 == 0)
  7295  000366  0E13               	movlw	19
  7296  000368  180E               	xorwf	get_next_state@state,w,c
  7297  00036A  100F               	iorwf	get_next_state@state+1,w,c
  7298  00036C  A4D8               	btfss	status,2,c
  7299  00036E  D00C               	goto	i2l3813
  7300  000370  5031               	movf	_timer1_counter_min,w,c
  7301  000372  A4D8               	btfss	status,2,c
  7302  000374  D009               	goto	i2l3813
  7303  000376  0100               	movlb	0	; () banked
  7304  000378  519B               	movf	_timer1_counter_10& (0+255),w,b
  7305  00037A  A4D8               	btfss	status,2,c
  7306  00037C  D005               	goto	i2l3813
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;user.c: 454: {
  7310                           ;user.c: 455: next = 20;
  7311  00037E  0E00               	movlw	0
  7312  000380  0100               	movlb	0	; () banked
  7313  000382  6F89               	movwf	(_next+1)& (0+255),b
  7314  000384  0E14               	movlw	20
  7315  000386  D143               	goto	L48
  7316  000388                     i2l3813:
  7317                           
  7318                           ;user.c: 457: else if(state == 20 && code == 0xAEBA)
  7319  000388  0E14               	movlw	20
  7320  00038A  180E               	xorwf	get_next_state@state,w,c
  7321  00038C  100F               	iorwf	get_next_state@state+1,w,c
  7322  00038E  A4D8               	btfss	status,2,c
  7323  000390  D007               	goto	i2l3819
  7324  000392  0EBA               	movlw	186
  7325  000394  1810               	xorwf	get_next_state@code,w,c
  7326  000396  E104               	bnz	i2l3819
  7327  000398  0EAE               	movlw	174
  7328  00039A  1811               	xorwf	get_next_state@code+1,w,c
  7329  00039C  B4D8               	btfsc	status,2,c
  7330  00039E  D682               	goto	i2l3667
  7331  0003A0                     i2l3819:
  7332                           
  7333                           ;user.c: 461: else if(state == 6 && code == 0xAABA)
  7334  0003A0  0E06               	movlw	6
  7335  0003A2  180E               	xorwf	get_next_state@state,w,c
  7336  0003A4  100F               	iorwf	get_next_state@state+1,w,c
  7337  0003A6  A4D8               	btfss	status,2,c
  7338  0003A8  D00C               	goto	i2l3825
  7339  0003AA  0EBA               	movlw	186
  7340  0003AC  1810               	xorwf	get_next_state@code,w,c
  7341  0003AE  E109               	bnz	i2l3825
  7342  0003B0  0EAA               	movlw	170
  7343  0003B2  1811               	xorwf	get_next_state@code+1,w,c
  7344  0003B4  A4D8               	btfss	status,2,c
  7345  0003B6  D005               	goto	i2l3825
  7346                           
  7347                           ;user.c: 462: {
  7348                           ;user.c: 463: next = 14;
  7349  0003B8  0E00               	movlw	0
  7350  0003BA  0100               	movlb	0	; () banked
  7351  0003BC  6F89               	movwf	(_next+1)& (0+255),b
  7352  0003BE  0E0E               	movlw	14
  7353  0003C0  D126               	goto	L48
  7354  0003C2                     i2l3825:
  7355                           
  7356                           ;user.c: 465: else if((state == 14 || state == 15 || state == 16 || state == 17) && code
      +                           == 0xAEBA)
  7357  0003C2  0E0E               	movlw	14
  7358  0003C4  180E               	xorwf	get_next_state@state,w,c
  7359  0003C6  100F               	iorwf	get_next_state@state+1,w,c
  7360  0003C8  B4D8               	btfsc	status,2,c
  7361  0003CA  D00F               	goto	i2l3833
  7362  0003CC  0E0F               	movlw	15
  7363  0003CE  180E               	xorwf	get_next_state@state,w,c
  7364  0003D0  100F               	iorwf	get_next_state@state+1,w,c
  7365  0003D2  B4D8               	btfsc	status,2,c
  7366  0003D4  D00A               	goto	i2l3833
  7367  0003D6  0E10               	movlw	16
  7368  0003D8  180E               	xorwf	get_next_state@state,w,c
  7369  0003DA  100F               	iorwf	get_next_state@state+1,w,c
  7370  0003DC  B4D8               	btfsc	status,2,c
  7371  0003DE  D005               	goto	i2l3833
  7372  0003E0  0E11               	movlw	17
  7373  0003E2  180E               	xorwf	get_next_state@state,w,c
  7374  0003E4  100F               	iorwf	get_next_state@state+1,w,c
  7375  0003E6  A4D8               	btfss	status,2,c
  7376  0003E8  D01B               	goto	i2l3841
  7377  0003EA                     i2l3833:
  7378  0003EA  0EBA               	movlw	186
  7379  0003EC  1810               	xorwf	get_next_state@code,w,c
  7380  0003EE  E118               	bnz	i2l3841
  7381  0003F0  0EAE               	movlw	174
  7382  0003F2  1811               	xorwf	get_next_state@code+1,w,c
  7383  0003F4  A4D8               	btfss	status,2,c
  7384  0003F6  D014               	goto	i2l3841
  7385                           
  7386                           ;user.c: 466: {
  7387                           ;user.c: 467: next = 6;
  7388  0003F8  0E00               	movlw	0
  7389  0003FA  0100               	movlb	0	; () banked
  7390  0003FC  6F89               	movwf	(_next+1)& (0+255),b
  7391  0003FE  0E06               	movlw	6
  7392  000400  6F88               	movwf	_next& (0+255),b
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;user.c: 468: timer1_down_init_min = aux1[3]*10 + aux1[2];
  7396  000402  0100               	movlb	0	; () banked
  7397  000404  5198               	movf	(_aux1+3)& (0+255),w,b
  7398  000406  0D0A               	mullw	10
  7399  000408  50F3               	movf	prodl,w,c
  7400  00040A  0100               	movlb	0	; () banked
  7401  00040C  2597               	addwf	(_aux1+2)& (0+255),w,b
  7402  00040E  6E30               	movwf	_timer1_down_init_min,c
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;user.c: 469: timer1_down_init_sec = aux1[1]*10 + aux1[0];
  7406  000410  0100               	movlb	0	; () banked
  7407  000412  5196               	movf	(_aux1+1)& (0+255),w,b
  7408  000414  0D0A               	mullw	10
  7409  000416  50F3               	movf	prodl,w,c
  7410  000418  0100               	movlb	0	; () banked
  7411  00041A  2595               	addwf	_aux1& (0+255),w,b
  7412  00041C  6E2F               	movwf	_timer1_down_init_sec,c
  7413                           
  7414                           ;user.c: 470: }
  7415  00041E  D21B               	goto	i2l447
  7416  000420                     i2l3841:
  7417                           
  7418                           ;user.c: 471: else if((state == 6 || state == 5 || state == 0) && code == 0xAAEA)
  7419  000420  0E06               	movlw	6
  7420  000422  180E               	xorwf	get_next_state@state,w,c
  7421  000424  100F               	iorwf	get_next_state@state+1,w,c
  7422  000426  B4D8               	btfsc	status,2,c
  7423  000428  D009               	goto	i2l3847
  7424  00042A  0E05               	movlw	5
  7425  00042C  180E               	xorwf	get_next_state@state,w,c
  7426  00042E  100F               	iorwf	get_next_state@state+1,w,c
  7427  000430  B4D8               	btfsc	status,2,c
  7428  000432  D004               	goto	i2l3847
  7429  000434  500E               	movf	get_next_state@state,w,c
  7430  000436  100F               	iorwf	get_next_state@state+1,w,c
  7431  000438  A4D8               	btfss	status,2,c
  7432  00043A  D00C               	goto	i2l3851
  7433  00043C                     i2l3847:
  7434  00043C  0EEA               	movlw	234
  7435  00043E  1810               	xorwf	get_next_state@code,w,c
  7436  000440  E109               	bnz	i2l3851
  7437  000442  0EAA               	movlw	170
  7438  000444  1811               	xorwf	get_next_state@code+1,w,c
  7439  000446  A4D8               	btfss	status,2,c
  7440  000448  D005               	goto	i2l3851
  7441  00044A                     i2l3849:
  7442                           
  7443                           ;user.c: 472: {
  7444                           ;user.c: 473: next = 21;
  7445  00044A  0E00               	movlw	0
  7446  00044C  0100               	movlb	0	; () banked
  7447  00044E  6F89               	movwf	(_next+1)& (0+255),b
  7448  000450  0E15               	movlw	21
  7449  000452  D0DD               	goto	L48
  7450  000454                     i2l3851:
  7451                           
  7452                           ;user.c: 475: else if(state == 21 && code == 0xEAAA)
  7453  000454  0E15               	movlw	21
  7454  000456  180E               	xorwf	get_next_state@state,w,c
  7455  000458  100F               	iorwf	get_next_state@state+1,w,c
  7456  00045A  A4D8               	btfss	status,2,c
  7457  00045C  D00C               	goto	i2l3857
  7458  00045E  0EAA               	movlw	170
  7459  000460  1810               	xorwf	get_next_state@code,w,c
  7460  000462  E109               	bnz	i2l3857
  7461  000464  0EEA               	movlw	234
  7462  000466  1811               	xorwf	get_next_state@code+1,w,c
  7463  000468  A4D8               	btfss	status,2,c
  7464  00046A  D005               	goto	i2l3857
  7465  00046C                     i2l3855:
  7466                           
  7467                           ;user.c: 476: {
  7468                           ;user.c: 477: next = 22;
  7469  00046C  0E00               	movlw	0
  7470  00046E  0100               	movlb	0	; () banked
  7471  000470  6F89               	movwf	(_next+1)& (0+255),b
  7472  000472  0E16               	movlw	22
  7473  000474  D0CC               	goto	L48
  7474  000476                     i2l3857:
  7475                           
  7476                           ;user.c: 479: else if(state == 22 && code == 0xAABA)
  7477  000476  0E16               	movlw	22
  7478  000478  180E               	xorwf	get_next_state@state,w,c
  7479  00047A  100F               	iorwf	get_next_state@state+1,w,c
  7480  00047C  A4D8               	btfss	status,2,c
  7481  00047E  D00C               	goto	i2l3863
  7482  000480  0EBA               	movlw	186
  7483  000482  1810               	xorwf	get_next_state@code,w,c
  7484  000484  E109               	bnz	i2l3863
  7485  000486  0EAA               	movlw	170
  7486  000488  1811               	xorwf	get_next_state@code+1,w,c
  7487  00048A  A4D8               	btfss	status,2,c
  7488  00048C  D005               	goto	i2l3863
  7489                           
  7490                           ;user.c: 480: {
  7491                           ;user.c: 481: next = 23;
  7492  00048E  0E00               	movlw	0
  7493  000490  0100               	movlb	0	; () banked
  7494  000492  6F89               	movwf	(_next+1)& (0+255),b
  7495  000494  0E17               	movlw	23
  7496  000496  D0BB               	goto	L48
  7497  000498                     i2l3863:
  7498                           
  7499                           ;user.c: 483: else if(state == 23 && code == 0xEAAA)
  7500  000498  0E17               	movlw	23
  7501  00049A  180E               	xorwf	get_next_state@state,w,c
  7502  00049C  100F               	iorwf	get_next_state@state+1,w,c
  7503  00049E  A4D8               	btfss	status,2,c
  7504  0004A0  D007               	goto	i2l3869
  7505  0004A2  0EAA               	movlw	170
  7506  0004A4  1810               	xorwf	get_next_state@code,w,c
  7507  0004A6  E104               	bnz	i2l3869
  7508  0004A8  0EEA               	movlw	234
  7509  0004AA  1811               	xorwf	get_next_state@code+1,w,c
  7510  0004AC  B4D8               	btfsc	status,2,c
  7511  0004AE  D7DE               	goto	i2l3855
  7512  0004B0                     i2l3869:
  7513                           
  7514                           ;user.c: 487: else if((state == 22 || state == 23) && code == 0xAEBA)
  7515  0004B0  0E16               	movlw	22
  7516  0004B2  180E               	xorwf	get_next_state@state,w,c
  7517  0004B4  100F               	iorwf	get_next_state@state+1,w,c
  7518  0004B6  B4D8               	btfsc	status,2,c
  7519  0004B8  D005               	goto	i2l3873
  7520  0004BA  0E17               	movlw	23
  7521  0004BC  180E               	xorwf	get_next_state@state,w,c
  7522  0004BE  100F               	iorwf	get_next_state@state+1,w,c
  7523  0004C0  A4D8               	btfss	status,2,c
  7524  0004C2  D007               	goto	i2l3877
  7525  0004C4                     i2l3873:
  7526  0004C4  0EBA               	movlw	186
  7527  0004C6  1810               	xorwf	get_next_state@code,w,c
  7528  0004C8  E104               	bnz	i2l3877
  7529  0004CA  0EAE               	movlw	174
  7530  0004CC  1811               	xorwf	get_next_state@code+1,w,c
  7531  0004CE  B4D8               	btfsc	status,2,c
  7532  0004D0  D7BC               	goto	i2l3849
  7533  0004D2                     i2l3877:
  7534                           
  7535                           ;user.c: 491: else if(state == 24 && code == 0xEAAA)
  7536  0004D2  0E18               	movlw	24
  7537  0004D4  180E               	xorwf	get_next_state@state,w,c
  7538  0004D6  100F               	iorwf	get_next_state@state+1,w,c
  7539  0004D8  A4D8               	btfss	status,2,c
  7540  0004DA  D01D               	goto	i2l3887
  7541  0004DC  0EAA               	movlw	170
  7542  0004DE  1810               	xorwf	get_next_state@code,w,c
  7543  0004E0  E11A               	bnz	i2l3887
  7544  0004E2  0EEA               	movlw	234
  7545  0004E4  1811               	xorwf	get_next_state@code+1,w,c
  7546  0004E6  A4D8               	btfss	status,2,c
  7547  0004E8  D016               	goto	i2l3887
  7548                           
  7549                           ;user.c: 492: {
  7550                           ;user.c: 493: next = 26;
  7551  0004EA  0E00               	movlw	0
  7552  0004EC  0100               	movlb	0	; () banked
  7553  0004EE  6F89               	movwf	(_next+1)& (0+255),b
  7554  0004F0  0E1A               	movlw	26
  7555  0004F2  6F88               	movwf	_next& (0+255),b
  7556                           
  7557                           ;user.c: 495: current_program = 0;
  7558  0004F4  0E00               	movlw	0
  7559  0004F6  0100               	movlb	0	; () banked
  7560  0004F8  6F8B               	movwf	_current_program& (0+255),b
  7561  0004FA  D035               	goto	i2l3901
  7562  0004FC                     i2l3885:
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;user.c: 497: timer1_counter_10 = intervals[current_program].force.seconds;
  7566  0004FC  0100               	movlb	0	; () banked
  7567  0004FE  518B               	movf	_current_program& (0+255),w,b
  7568  000500  0D02               	mullw	2
  7569  000502  0E60               	movlw	low _intervals
  7570  000504  24F3               	addwf	prodl,w,c
  7571  000506  6ED9               	movwf	fsr2l,c
  7572  000508  0E00               	movlw	high _intervals
  7573  00050A  20F4               	addwfc	prodh,w,c
  7574  00050C  6EDA               	movwf	fsr2h,c
  7575  00050E  50DF               	movf	indf2,w,c
  7576  000510  0100               	movlb	0	; () banked
  7577  000512  6F9B               	movwf	_timer1_counter_10& (0+255),b
  7578                           
  7579                           ;user.c: 500: }
  7580  000514  D1A0               	goto	i2l447
  7581  000516                     i2l3887:
  7582                           
  7583                           ;user.c: 501: else if(state == 24 && code == 0xAABA)
  7584  000516  0E18               	movlw	24
  7585  000518  180E               	xorwf	get_next_state@state,w,c
  7586  00051A  100F               	iorwf	get_next_state@state+1,w,c
  7587  00051C  A4D8               	btfss	status,2,c
  7588  00051E  D010               	goto	i2l3893
  7589  000520  0EBA               	movlw	186
  7590  000522  1810               	xorwf	get_next_state@code,w,c
  7591  000524  E10D               	bnz	i2l3893
  7592  000526  0EAA               	movlw	170
  7593  000528  1811               	xorwf	get_next_state@code+1,w,c
  7594  00052A  A4D8               	btfss	status,2,c
  7595  00052C  D009               	goto	i2l3893
  7596                           
  7597                           ;user.c: 502: {
  7598                           ;user.c: 503: next = 29;
  7599  00052E  0E00               	movlw	0
  7600  000530  0100               	movlb	0	; () banked
  7601  000532  6F89               	movwf	(_next+1)& (0+255),b
  7602  000534  0E1D               	movlw	29
  7603  000536  6F88               	movwf	_next& (0+255),b
  7604                           
  7605                           ;user.c: 504: current_program = 0;
  7606  000538  0E00               	movlw	0
  7607  00053A  0100               	movlb	0	; () banked
  7608  00053C  6F8B               	movwf	_current_program& (0+255),b
  7609                           
  7610                           ;user.c: 505: }
  7611  00053E  D18B               	goto	i2l447
  7612  000540                     i2l3893:
  7613                           
  7614                           ;user.c: 506: else if(state == 26 && timer1_counter_min == 0 && timer1_counter_10 == 0)
  7615  000540  0E1A               	movlw	26
  7616  000542  180E               	xorwf	get_next_state@state,w,c
  7617  000544  100F               	iorwf	get_next_state@state+1,w,c
  7618  000546  A4D8               	btfss	status,2,c
  7619  000548  D01E               	goto	i2l3905
  7620  00054A  5031               	movf	_timer1_counter_min,w,c
  7621  00054C  A4D8               	btfss	status,2,c
  7622  00054E  D01B               	goto	i2l3905
  7623  000550  0100               	movlb	0	; () banked
  7624  000552  519B               	movf	_timer1_counter_10& (0+255),w,b
  7625  000554  A4D8               	btfss	status,2,c
  7626  000556  D017               	goto	i2l3905
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;user.c: 507: {
  7630                           ;user.c: 508: next = 27;
  7631  000558  0E00               	movlw	0
  7632  00055A  0100               	movlb	0	; () banked
  7633  00055C  6F89               	movwf	(_next+1)& (0+255),b
  7634  00055E  0E1B               	movlw	27
  7635  000560  6F88               	movwf	_next& (0+255),b
  7636                           
  7637                           ;user.c: 509: current_type = 'c';
  7638  000562  0E63               	movlw	99
  7639  000564  D03D               	goto	L52
  7640  000566                     i2l3901:
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;user.c: 510: timer1_counter_min = intervals[current_program].cold.minutes;
  7644  000566  0100               	movlb	0	; () banked
  7645  000568  518B               	movf	_current_program& (0+255),w,b
  7646  00056A  0D02               	mullw	2
  7647  00056C  0E01               	movlw	1
  7648  00056E  26F3               	addwf	prodl,f,c
  7649  000570  0E00               	movlw	0
  7650  000572  22F4               	addwfc	prodh,f,c
  7651  000574  0E60               	movlw	low _intervals
  7652  000576  24F3               	addwf	prodl,w,c
  7653  000578  6ED9               	movwf	fsr2l,c
  7654  00057A  0E00               	movlw	high _intervals
  7655  00057C  20F4               	addwfc	prodh,w,c
  7656  00057E  6EDA               	movwf	fsr2h,c
  7657  000580  50DF               	movf	indf2,w,c
  7658  000582  6E31               	movwf	_timer1_counter_min,c
  7659  000584  D7BB               	goto	i2l3885
  7660  000586                     i2l3905:
  7661                           
  7662                           ;user.c: 513: else if(state == 27 && timer1_counter_min == 0 && timer1_counter_10 == 0)
  7663  000586  0E1B               	movlw	27
  7664  000588  180E               	xorwf	get_next_state@state,w,c
  7665  00058A  100F               	iorwf	get_next_state@state+1,w,c
  7666  00058C  A4D8               	btfss	status,2,c
  7667  00058E  D02F               	goto	i2l3925
  7668  000590  5031               	movf	_timer1_counter_min,w,c
  7669  000592  A4D8               	btfss	status,2,c
  7670  000594  D02C               	goto	i2l3925
  7671  000596  0100               	movlb	0	; () banked
  7672  000598  519B               	movf	_timer1_counter_10& (0+255),w,b
  7673  00059A  A4D8               	btfss	status,2,c
  7674  00059C  D028               	goto	i2l3925
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;user.c: 514: {
  7678                           ;user.c: 515: if(current_program < max_program -1)
  7679  00059E  0EFF               	movlw	255
  7680  0005A0  6E12               	movwf	??_get_next_state& (0+255),c
  7681  0005A2  0EFF               	movlw	255
  7682  0005A4  6E13               	movwf	(??_get_next_state+1)& (0+255),c
  7683  0005A6  502D               	movf	_max_program,w,c
  7684  0005A8  6E14               	movwf	(??_get_next_state+2)& (0+255),c
  7685  0005AA  6A15               	clrf	(??_get_next_state+3)& (0+255),c
  7686  0005AC  5012               	movf	??_get_next_state,w,c
  7687  0005AE  2614               	addwf	??_get_next_state+2,f,c
  7688  0005B0  5013               	movf	??_get_next_state+1,w,c
  7689  0005B2  2215               	addwfc	??_get_next_state+3,f,c
  7690  0005B4  0100               	movlb	0	; () banked
  7691  0005B6  518B               	movf	_current_program& (0+255),w,b
  7692  0005B8  6E16               	movwf	(??_get_next_state+4)& (0+255),c
  7693  0005BA  6A17               	clrf	(??_get_next_state+5)& (0+255),c
  7694  0005BC  5014               	movf	??_get_next_state+2,w,c
  7695  0005BE  5C16               	subwf	??_get_next_state+4,w,c
  7696  0005C0  5017               	movf	??_get_next_state+5,w,c
  7697  0005C2  0A80               	xorlw	128
  7698  0005C4  6E18               	movwf	(??_get_next_state+6)& (0+255),c
  7699  0005C6  5015               	movf	??_get_next_state+3,w,c
  7700  0005C8  0A80               	xorlw	128
  7701  0005CA  5818               	subwfb	(??_get_next_state+6)& (0+255),w,c
  7702  0005CC  B0D8               	btfsc	status,0,c
  7703  0005CE  D00A               	goto	i2l3923
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;user.c: 516: {
  7707                           ;user.c: 517: next = 26;
  7708  0005D0  0E00               	movlw	0
  7709  0005D2  0100               	movlb	0	; () banked
  7710  0005D4  6F89               	movwf	(_next+1)& (0+255),b
  7711  0005D6  0E1A               	movlw	26
  7712  0005D8  6F88               	movwf	_next& (0+255),b
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;user.c: 518: current_program +=1;
  7716  0005DA  0100               	movlb	0	; () banked
  7717  0005DC  2B8B               	incf	_current_program& (0+255),f,b
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;user.c: 519: current_type = 'f';
  7721  0005DE  0E66               	movlw	102
  7722  0005E0                     L52:
  7723  0005E0  6E32               	movwf	_current_type,c
  7724  0005E2  D7C1               	goto	i2l3901
  7725  0005E4                     i2l3923:
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;user.c: 524: else
  7729                           ;user.c: 525: {
  7730                           ;user.c: 526: next = 28;
  7731  0005E4  0E00               	movlw	0
  7732  0005E6  0100               	movlb	0	; () banked
  7733  0005E8  6F89               	movwf	(_next+1)& (0+255),b
  7734  0005EA  0E1C               	movlw	28
  7735  0005EC  D010               	goto	L48
  7736  0005EE                     i2l3925:
  7737                           
  7738                           ;user.c: 529: else if(state == 28 && code == 0xAEBA)
  7739  0005EE  0E1C               	movlw	28
  7740  0005F0  180E               	xorwf	get_next_state@state,w,c
  7741  0005F2  100F               	iorwf	get_next_state@state+1,w,c
  7742  0005F4  A4D8               	btfss	status,2,c
  7743  0005F6  D00D               	goto	i2l3931
  7744  0005F8  0EBA               	movlw	186
  7745  0005FA  1810               	xorwf	get_next_state@code,w,c
  7746  0005FC  E10A               	bnz	i2l3931
  7747  0005FE  0EAE               	movlw	174
  7748  000600  1811               	xorwf	get_next_state@code+1,w,c
  7749  000602  A4D8               	btfss	status,2,c
  7750  000604  D006               	goto	i2l3931
  7751  000606                     L58:
  7752                           
  7753                           ;user.c: 530: next = 24;
  7754  000606  0E00               	movlw	0
  7755  000608  0100               	movlb	0	; () banked
  7756  00060A  6F89               	movwf	(_next+1)& (0+255),b
  7757  00060C  0E18               	movlw	24
  7758  00060E                     L48:
  7759  00060E  6F88               	movwf	_next& (0+255),b
  7760  000610  D122               	goto	i2l447
  7761  000612                     i2l3931:
  7762                           
  7763                           ;user.c: 531: else if((state == 29 || state == 30 || state == 31 || state == 32) && code
      +                           == 0xAEBA)
  7764  000612  0E1D               	movlw	29
  7765  000614  180E               	xorwf	get_next_state@state,w,c
  7766  000616  100F               	iorwf	get_next_state@state+1,w,c
  7767  000618  B4D8               	btfsc	status,2,c
  7768  00061A  D00F               	goto	i2l3939
  7769  00061C  0E1E               	movlw	30
  7770  00061E  180E               	xorwf	get_next_state@state,w,c
  7771  000620  100F               	iorwf	get_next_state@state+1,w,c
  7772  000622  B4D8               	btfsc	status,2,c
  7773  000624  D00A               	goto	i2l3939
  7774  000626  0E1F               	movlw	31
  7775  000628  180E               	xorwf	get_next_state@state,w,c
  7776  00062A  100F               	iorwf	get_next_state@state+1,w,c
  7777  00062C  B4D8               	btfsc	status,2,c
  7778  00062E  D005               	goto	i2l3939
  7779  000630  0E20               	movlw	32
  7780  000632  180E               	xorwf	get_next_state@state,w,c
  7781  000634  100F               	iorwf	get_next_state@state+1,w,c
  7782  000636  A4D8               	btfss	status,2,c
  7783  000638  D011               	goto	i2l3943
  7784  00063A                     i2l3939:
  7785  00063A  0EBA               	movlw	186
  7786  00063C  1810               	xorwf	get_next_state@code,w,c
  7787  00063E  E10E               	bnz	i2l3943
  7788  000640  0EAE               	movlw	174
  7789  000642  1811               	xorwf	get_next_state@code+1,w,c
  7790  000644  A4D8               	btfss	status,2,c
  7791  000646  D00A               	goto	i2l3943
  7792                           
  7793                           ;user.c: 532: {
  7794                           ;user.c: 533: next = 33;
  7795  000648  0E00               	movlw	0
  7796  00064A  0100               	movlb	0	; () banked
  7797  00064C  6F89               	movwf	(_next+1)& (0+255),b
  7798  00064E  0E21               	movlw	33
  7799  000650  6F88               	movwf	_next& (0+255),b
  7800                           
  7801                           ;user.c: 534: aux1[4] = 'V';
  7802  000652  0E56               	movlw	86
  7803  000654  0100               	movlb	0	; () banked
  7804  000656  6F99               	movwf	(_aux1+4)& (0+255),b
  7805                           
  7806                           ;user.c: 535: aux1[5] = 'P';
  7807  000658  0E50               	movlw	80
  7808  00065A  D0DD               	goto	L51
  7809  00065C                     i2l3943:
  7810                           
  7811                           ;user.c: 539: else if((state == 29 || state == 30 || state == 31 || state == 32) && code
      +                           == 0xAABA)
  7812  00065C  0E1D               	movlw	29
  7813  00065E  180E               	xorwf	get_next_state@state,w,c
  7814  000660  100F               	iorwf	get_next_state@state+1,w,c
  7815  000662  B4D8               	btfsc	status,2,c
  7816  000664  D00F               	goto	i2l3951
  7817  000666  0E1E               	movlw	30
  7818  000668  180E               	xorwf	get_next_state@state,w,c
  7819  00066A  100F               	iorwf	get_next_state@state+1,w,c
  7820  00066C  B4D8               	btfsc	status,2,c
  7821  00066E  D00A               	goto	i2l3951
  7822  000670  0E1F               	movlw	31
  7823  000672  180E               	xorwf	get_next_state@state,w,c
  7824  000674  100F               	iorwf	get_next_state@state+1,w,c
  7825  000676  B4D8               	btfsc	status,2,c
  7826  000678  D005               	goto	i2l3951
  7827  00067A  0E20               	movlw	32
  7828  00067C  180E               	xorwf	get_next_state@state,w,c
  7829  00067E  100F               	iorwf	get_next_state@state+1,w,c
  7830  000680  A4D8               	btfss	status,2,c
  7831  000682  D0CC               	goto	i2l3985
  7832  000684                     i2l3951:
  7833  000684  0EBA               	movlw	186
  7834  000686  1810               	xorwf	get_next_state@code,w,c
  7835  000688  E103               	bnz	i2u447_41
  7836  00068A  0EAA               	movlw	170
  7837  00068C  1811               	xorwf	get_next_state@code+1,w,c
  7838  00068E  A4D8               	btfss	status,2,c
  7839  000690                     i2u447_41:
  7840  000690  D0C5               	goto	i2l3985
  7841                           
  7842                           ;user.c: 540: {
  7843                           ;user.c: 542: next = 29;
  7844  000692  0E00               	movlw	0
  7845  000694  0100               	movlb	0	; () banked
  7846  000696  6F89               	movwf	(_next+1)& (0+255),b
  7847  000698  0E1D               	movlw	29
  7848  00069A  6F88               	movwf	_next& (0+255),b
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;user.c: 543: if(current_type == 'f')
  7852  00069C  0E66               	movlw	102
  7853  00069E  1832               	xorwf	_current_type,w,c
  7854  0006A0  A4D8               	btfss	status,2,c
  7855  0006A2  D059               	goto	i2l3967
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;user.c: 544: {
  7859                           ;user.c: 545: intervals[current_program].force.seconds = aux1[1]*10 + aux1[0];
  7860  0006A4  0100               	movlb	0	; () banked
  7861  0006A6  518B               	movf	_current_program& (0+255),w,b
  7862  0006A8  0D02               	mullw	2
  7863  0006AA  0E60               	movlw	low _intervals
  7864  0006AC  24F3               	addwf	prodl,w,c
  7865  0006AE  6ED9               	movwf	fsr2l,c
  7866  0006B0  0E00               	movlw	high _intervals
  7867  0006B2  20F4               	addwfc	prodh,w,c
  7868  0006B4  6EDA               	movwf	fsr2h,c
  7869  0006B6  0100               	movlb	0	; () banked
  7870  0006B8  5196               	movf	(_aux1+1)& (0+255),w,b
  7871  0006BA  0D0A               	mullw	10
  7872  0006BC  50F3               	movf	prodl,w,c
  7873  0006BE  0100               	movlb	0	; () banked
  7874  0006C0  2595               	addwf	_aux1& (0+255),w,b
  7875  0006C2  6EDF               	movwf	indf2,c
  7876                           
  7877                           ;user.c: 546: intervals[current_program].force.minutes = aux1[3]*10 + aux1[2];
  7878  0006C4  0100               	movlb	0	; () banked
  7879  0006C6  518B               	movf	_current_program& (0+255),w,b
  7880  0006C8  0D02               	mullw	2
  7881  0006CA  0E01               	movlw	1
  7882  0006CC  26F3               	addwf	prodl,f,c
  7883  0006CE  0E00               	movlw	0
  7884  0006D0  22F4               	addwfc	prodh,f,c
  7885  0006D2  0E60               	movlw	low _intervals
  7886  0006D4  24F3               	addwf	prodl,w,c
  7887  0006D6  6ED9               	movwf	fsr2l,c
  7888  0006D8  0E00               	movlw	high _intervals
  7889  0006DA  20F4               	addwfc	prodh,w,c
  7890  0006DC  6EDA               	movwf	fsr2h,c
  7891  0006DE  0100               	movlb	0	; () banked
  7892  0006E0  5198               	movf	(_aux1+3)& (0+255),w,b
  7893  0006E2  0D0A               	mullw	10
  7894  0006E4  50F3               	movf	prodl,w,c
  7895  0006E6  0100               	movlb	0	; () banked
  7896  0006E8  2597               	addwf	(_aux1+2)& (0+255),w,b
  7897  0006EA  6EDF               	movwf	indf2,c
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;user.c: 548: current_type = 'c';
  7901  0006EC  0E63               	movlw	99
  7902  0006EE  6E32               	movwf	_current_type,c
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;user.c: 549: if(current_program +1 <10)
  7906  0006F0  0100               	movlb	0	; () banked
  7907  0006F2  518B               	movf	_current_program& (0+255),w,b
  7908  0006F4  6E12               	movwf	??_get_next_state& (0+255),c
  7909  0006F6  6A13               	clrf	(??_get_next_state+1)& (0+255),c
  7910  0006F8  0E01               	movlw	1
  7911  0006FA  2612               	addwf	??_get_next_state,f,c
  7912  0006FC  0E00               	movlw	0
  7913  0006FE  2213               	addwfc	??_get_next_state+1,f,c
  7914  000700  BE13               	btfsc	??_get_next_state+1,7,c
  7915  000702  D006               	goto	i2l3963
  7916  000704  5013               	movf	??_get_next_state+1,w,c
  7917  000706  E106               	bnz	i2l3965
  7918  000708  0E0A               	movlw	10
  7919  00070A  5C12               	subwf	??_get_next_state,w,c
  7920  00070C  B0D8               	btfsc	status,0,c
  7921  00070E  D002               	goto	i2l3965
  7922  000710                     i2l3963:
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;user.c: 550: aux1[5] = 'C';
  7926  000710  0E43               	movlw	67
  7927  000712  D00E               	goto	L50
  7928  000714                     i2l3965:
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;user.c: 551: else
  7932                           ;user.c: 552: aux1[5] = (current_program + 1)/10;
  7933  000714  0E01               	movlw	1
  7934  000716  0100               	movlb	0	; () banked
  7935  000718  258B               	addwf	_current_program& (0+255),w,b
  7936  00071A  6E01               	movwf	i2___awdiv@dividend,c
  7937  00071C  6A02               	clrf	i2___awdiv@dividend+1,c
  7938  00071E  0E00               	movlw	0
  7939  000720  2202               	addwfc	i2___awdiv@dividend+1,f,c
  7940  000722  0E00               	movlw	0
  7941  000724  6E04               	movwf	i2___awdiv@divisor+1,c
  7942  000726  0E0A               	movlw	10
  7943  000728  6E03               	movwf	i2___awdiv@divisor,c
  7944  00072A  ECCD  F00D         	call	i2___awdiv	;wreg free
  7945  00072E  5001               	movf	?i2___awdiv,w,c
  7946  000730                     L50:
  7947  000730  0100               	movlb	0	; () banked
  7948  000732  6F9A               	movwf	(_aux1+5)& (0+255),b
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;user.c: 554: aux1[4] = (current_program +1) % 10;
  7952  000734  0E01               	movlw	1
  7953  000736  0100               	movlb	0	; () banked
  7954  000738  258B               	addwf	_current_program& (0+255),w,b
  7955  00073A  6E01               	movwf	i2___awmod@dividend,c
  7956  00073C  6A02               	clrf	i2___awmod@dividend+1,c
  7957  00073E  0E00               	movlw	0
  7958  000740  2202               	addwfc	i2___awmod@dividend+1,f,c
  7959  000742  0E00               	movlw	0
  7960  000744  6E04               	movwf	i2___awmod@divisor+1,c
  7961  000746  0E0A               	movlw	10
  7962  000748  6E03               	movwf	i2___awmod@divisor,c
  7963  00074A  ECB8  F00E         	call	i2___awmod	;wreg free
  7964  00074E  5001               	movf	?i2___awmod,w,c
  7965  000750  0100               	movlb	0	; () banked
  7966  000752  6F99               	movwf	(_aux1+4)& (0+255),b
  7967                           
  7968                           ;user.c: 555: }
  7969  000754  D080               	goto	i2l447
  7970  000756                     i2l3967:
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;user.c: 556: else
  7974                           ;user.c: 557: {
  7975                           ;user.c: 559: intervals[current_program].cold.seconds = aux1[1]*10 + aux1[0];
  7976  000756  0100               	movlb	0	; () banked
  7977  000758  518B               	movf	_current_program& (0+255),w,b
  7978  00075A  0D02               	mullw	2
  7979  00075C  0E60               	movlw	low _intervals
  7980  00075E  24F3               	addwf	prodl,w,c
  7981  000760  6ED9               	movwf	fsr2l,c
  7982  000762  0E00               	movlw	high _intervals
  7983  000764  20F4               	addwfc	prodh,w,c
  7984  000766  6EDA               	movwf	fsr2h,c
  7985  000768  0100               	movlb	0	; () banked
  7986  00076A  5196               	movf	(_aux1+1)& (0+255),w,b
  7987  00076C  0D0A               	mullw	10
  7988  00076E  50F3               	movf	prodl,w,c
  7989  000770  0100               	movlb	0	; () banked
  7990  000772  2595               	addwf	_aux1& (0+255),w,b
  7991  000774  6EDF               	movwf	indf2,c
  7992                           
  7993                           ;user.c: 560: intervals[current_program].cold.minutes = aux1[3]*10 + aux1[2];
  7994  000776  0100               	movlb	0	; () banked
  7995  000778  518B               	movf	_current_program& (0+255),w,b
  7996  00077A  0D02               	mullw	2
  7997  00077C  0E01               	movlw	1
  7998  00077E  26F3               	addwf	prodl,f,c
  7999  000780  0E00               	movlw	0
  8000  000782  22F4               	addwfc	prodh,f,c
  8001  000784  0E60               	movlw	low _intervals
  8002  000786  24F3               	addwf	prodl,w,c
  8003  000788  6ED9               	movwf	fsr2l,c
  8004  00078A  0E00               	movlw	high _intervals
  8005  00078C  20F4               	addwfc	prodh,w,c
  8006  00078E  6EDA               	movwf	fsr2h,c
  8007  000790  0100               	movlb	0	; () banked
  8008  000792  5198               	movf	(_aux1+3)& (0+255),w,b
  8009  000794  0D0A               	mullw	10
  8010  000796  50F3               	movf	prodl,w,c
  8011  000798  0100               	movlb	0	; () banked
  8012  00079A  2597               	addwf	(_aux1+2)& (0+255),w,b
  8013  00079C  6EDF               	movwf	indf2,c
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;user.c: 563: if(current_program < 20)
  8017  00079E  0E14               	movlw	20
  8018  0007A0  0100               	movlb	0	; () banked
  8019  0007A2  618B               	cpfslt	_current_program& (0+255),b
  8020  0007A4  D003               	goto	i2l3973
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;user.c: 564: {
  8024                           ;user.c: 565: current_program +=1;
  8025  0007A6  0100               	movlb	0	; () banked
  8026  0007A8  2B8B               	incf	_current_program& (0+255),f,b
  8027                           
  8028                           ;user.c: 566: }
  8029  0007AA  D003               	goto	i2l3975
  8030  0007AC                     i2l3973:
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;user.c: 567: else
  8034                           ;user.c: 568: {
  8035                           ;user.c: 569: current_program = 0;
  8036  0007AC  0E00               	movlw	0
  8037  0007AE  0100               	movlb	0	; () banked
  8038  0007B0  6F8B               	movwf	_current_program& (0+255),b
  8039  0007B2                     i2l3975:
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;user.c: 570: }
  8043                           ;user.c: 571: aux1[4] = (current_program +1) % 10;
  8044  0007B2  0E01               	movlw	1
  8045  0007B4  0100               	movlb	0	; () banked
  8046  0007B6  258B               	addwf	_current_program& (0+255),w,b
  8047  0007B8  6E01               	movwf	i2___awmod@dividend,c
  8048  0007BA  6A02               	clrf	i2___awmod@dividend+1,c
  8049  0007BC  0E00               	movlw	0
  8050  0007BE  2202               	addwfc	i2___awmod@dividend+1,f,c
  8051  0007C0  0E00               	movlw	0
  8052  0007C2  6E04               	movwf	i2___awmod@divisor+1,c
  8053  0007C4  0E0A               	movlw	10
  8054  0007C6  6E03               	movwf	i2___awmod@divisor,c
  8055  0007C8  ECB8  F00E         	call	i2___awmod	;wreg free
  8056  0007CC  5001               	movf	?i2___awmod,w,c
  8057  0007CE  0100               	movlb	0	; () banked
  8058  0007D0  6F99               	movwf	(_aux1+4)& (0+255),b
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;user.c: 573: current_type = 'f';
  8062  0007D2  0E66               	movlw	102
  8063  0007D4  6E32               	movwf	_current_type,c
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;user.c: 574: if(current_program +1 < 10)
  8067  0007D6  0100               	movlb	0	; () banked
  8068  0007D8  518B               	movf	_current_program& (0+255),w,b
  8069  0007DA  6E12               	movwf	??_get_next_state& (0+255),c
  8070  0007DC  6A13               	clrf	(??_get_next_state+1)& (0+255),c
  8071  0007DE  0E01               	movlw	1
  8072  0007E0  2612               	addwf	??_get_next_state,f,c
  8073  0007E2  0E00               	movlw	0
  8074  0007E4  2213               	addwfc	??_get_next_state+1,f,c
  8075  0007E6  BE13               	btfsc	??_get_next_state+1,7,c
  8076  0007E8  D006               	goto	i2l3981
  8077  0007EA  5013               	movf	??_get_next_state+1,w,c
  8078  0007EC  E106               	bnz	i2l3983
  8079  0007EE  0E0A               	movlw	10
  8080  0007F0  5C12               	subwf	??_get_next_state,w,c
  8081  0007F2  B0D8               	btfsc	status,0,c
  8082  0007F4  D002               	goto	i2l3983
  8083  0007F6                     i2l3981:
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;user.c: 575: aux1[5] = 'F';
  8087  0007F6  0E46               	movlw	70
  8088  0007F8  D00E               	goto	L51
  8089  0007FA                     i2l3983:
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;user.c: 576: else
  8093                           ;user.c: 577: aux1[5] = (current_program +1)/10;
  8094  0007FA  0E01               	movlw	1
  8095  0007FC  0100               	movlb	0	; () banked
  8096  0007FE  258B               	addwf	_current_program& (0+255),w,b
  8097  000800  6E01               	movwf	i2___awdiv@dividend,c
  8098  000802  6A02               	clrf	i2___awdiv@dividend+1,c
  8099  000804  0E00               	movlw	0
  8100  000806  2202               	addwfc	i2___awdiv@dividend+1,f,c
  8101  000808  0E00               	movlw	0
  8102  00080A  6E04               	movwf	i2___awdiv@divisor+1,c
  8103  00080C  0E0A               	movlw	10
  8104  00080E  6E03               	movwf	i2___awdiv@divisor,c
  8105  000810  ECCD  F00D         	call	i2___awdiv	;wreg free
  8106  000814  5001               	movf	?i2___awdiv,w,c
  8107  000816                     L51:
  8108  000816  0100               	movlb	0	; () banked
  8109  000818  6F9A               	movwf	(_aux1+5)& (0+255),b
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;user.c: 580: }
  8113                           ;user.c: 581: }
  8114                           
  8115                           ; BSR set to: 0
  8116  00081A  D01D               	goto	i2l447
  8117  00081C                     i2l3985:
  8118                           
  8119                           ;user.c: 582: else if((state == 33 || state == 34) && code == 0xAEBA)
  8120  00081C  0E21               	movlw	33
  8121  00081E  180E               	xorwf	get_next_state@state,w,c
  8122  000820  100F               	iorwf	get_next_state@state+1,w,c
  8123  000822  B4D8               	btfsc	status,2,c
  8124  000824  D005               	goto	i2l3989
  8125  000826  0E22               	movlw	34
  8126  000828  180E               	xorwf	get_next_state@state,w,c
  8127  00082A  100F               	iorwf	get_next_state@state+1,w,c
  8128  00082C  A4D8               	btfss	status,2,c
  8129  00082E  D013               	goto	i2l447
  8130  000830                     i2l3989:
  8131  000830  0EBA               	movlw	186
  8132  000832  1810               	xorwf	get_next_state@code,w,c
  8133  000834  E110               	bnz	i2l447
  8134  000836  0EAE               	movlw	174
  8135  000838  1811               	xorwf	get_next_state@code+1,w,c
  8136  00083A  A4D8               	btfss	status,2,c
  8137  00083C  D00C               	goto	i2l447
  8138                           
  8139                           ;user.c: 583: {
  8140                           ;user.c: 584: next = 24;
  8141  00083E  0E00               	movlw	0
  8142  000840  0100               	movlb	0	; () banked
  8143  000842  6F89               	movwf	(_next+1)& (0+255),b
  8144  000844  0E18               	movlw	24
  8145  000846  6F88               	movwf	_next& (0+255),b
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;user.c: 585: max_program = aux1[1]*10+ aux1[0];
  8149  000848  0100               	movlb	0	; () banked
  8150  00084A  5196               	movf	(_aux1+1)& (0+255),w,b
  8151  00084C  0D0A               	mullw	10
  8152  00084E  50F3               	movf	prodl,w,c
  8153  000850  0100               	movlb	0	; () banked
  8154  000852  2595               	addwf	_aux1& (0+255),w,b
  8155  000854  6E2D               	movwf	_max_program,c
  8156  000856                     i2l447:
  8157                           
  8158                           ;user.c: 589: return next;
  8159  000856  C088  F00E         	movff	_next,?_get_next_state
  8160  00085A  C089  F00F         	movff	_next+1,?_get_next_state+1
  8161  00085E  0012               	return		;funcret
  8162  000860                     __end_of_get_next_state:
  8163                           	opt stack 0
  8164                           pclatu	equ	0xFFB
  8165                           pclath	equ	0xFFA
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           intcon2	equ	0xFF1
  8174                           postinc0	equ	0xFEE
  8175                           fsr0h	equ	0xFEA
  8176                           fsr0l	equ	0xFE9
  8177                           wreg	equ	0xFE8
  8178                           indf1	equ	0xFE7
  8179                           fsr1h	equ	0xFE2
  8180                           fsr1l	equ	0xFE1
  8181                           indf2	equ	0xFDF
  8182                           fsr2h	equ	0xFDA
  8183                           fsr2l	equ	0xFD9
  8184                           status	equ	0xFD8
  8185                           
  8186 ;; *************** function i2_timer1_enable *****************
  8187 ;; Defined at:
  8188 ;;		line 764 in file "user.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;		None
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      void 
  8195 ;; Registers used:
  8196 ;;		status,2, status,0
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8202 ;;      Params:         0       0       0       0       0       0       0       0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8205 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8206 ;;Total ram usage:        0 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; This function calls:
  8209 ;;		Nothing
  8210 ;; This function is called by:
  8211 ;;		_get_next_state
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           	psect	text35
  8216  002150                     __ptext35:
  8217                           	opt stack 0
  8218  002150                     i2_timer1_enable:
  8219                           	opt stack 24
  8220                           
  8221                           ;user.c: 766: T1CON |= 1 << 0;
  8222                           
  8223                           ;incstack = 0
  8224  002150  80CD               	bsf	4045,0,c	;volatile
  8225  002152  0012               	return		;funcret
  8226  002154                     __end_ofi2_timer1_enable:
  8227                           	opt stack 0
  8228                           pclatu	equ	0xFFB
  8229                           pclath	equ	0xFFA
  8230                           tblptru	equ	0xFF8
  8231                           tblptrh	equ	0xFF7
  8232                           tblptrl	equ	0xFF6
  8233                           tablat	equ	0xFF5
  8234                           prodh	equ	0xFF4
  8235                           prodl	equ	0xFF3
  8236                           intcon	equ	0xFF2
  8237                           intcon2	equ	0xFF1
  8238                           postinc0	equ	0xFEE
  8239                           fsr0h	equ	0xFEA
  8240                           fsr0l	equ	0xFE9
  8241                           wreg	equ	0xFE8
  8242                           indf1	equ	0xFE7
  8243                           fsr1h	equ	0xFE2
  8244                           fsr1l	equ	0xFE1
  8245                           indf2	equ	0xFDF
  8246                           fsr2h	equ	0xFDA
  8247                           fsr2l	equ	0xFD9
  8248                           status	equ	0xFD8
  8249                           
  8250 ;; *************** function i2___awmod *****************
  8251 ;; Defined at:
  8252 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awmod.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  dividend        2    0[COMRAM] int 
  8255 ;;  divisor         2    2[COMRAM] int 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  __awmod         1    5[COMRAM] unsigned char 
  8258 ;;  __awmod         1    4[COMRAM] unsigned char 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  2    0[COMRAM] int 
  8261 ;; Registers used:
  8262 ;;		wreg, status,2, status,0
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/0
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8268 ;;      Params:         4       0       0       0       0       0       0       0       0
  8269 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8271 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8272 ;;Total ram usage:        6 bytes
  8273 ;; Hardware stack levels used:    1
  8274 ;; This function calls:
  8275 ;;		Nothing
  8276 ;; This function is called by:
  8277 ;;		_get_next_state
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           	psect	text36
  8282  001D70                     __ptext36:
  8283                           	opt stack 0
  8284  001D70                     i2___awmod:
  8285                           	opt stack 24
  8286                           
  8287                           ;incstack = 0
  8288  001D70  0E00               	movlw	0
  8289  001D72  6E06               	movwf	i2___awmod@sign,c
  8290  001D74  AE02               	btfss	i2___awmod@dividend+1,7,c
  8291  001D76  D006               	goto	i2l3535
  8292  001D78  6C01               	negf	i2___awmod@dividend,c
  8293  001D7A  1E02               	comf	i2___awmod@dividend+1,f,c
  8294  001D7C  B0D8               	btfsc	status,0,c
  8295  001D7E  2A02               	incf	i2___awmod@dividend+1,f,c
  8296  001D80  0E01               	movlw	1
  8297  001D82  6E06               	movwf	i2___awmod@sign,c
  8298  001D84                     i2l3535:
  8299  001D84  AE04               	btfss	i2___awmod@divisor+1,7,c
  8300  001D86  D004               	goto	i2l3539
  8301  001D88  6C03               	negf	i2___awmod@divisor,c
  8302  001D8A  1E04               	comf	i2___awmod@divisor+1,f,c
  8303  001D8C  B0D8               	btfsc	status,0,c
  8304  001D8E  2A04               	incf	i2___awmod@divisor+1,f,c
  8305  001D90                     i2l3539:
  8306  001D90  5003               	movf	i2___awmod@divisor,w,c
  8307  001D92  1004               	iorwf	i2___awmod@divisor+1,w,c
  8308  001D94  B4D8               	btfsc	status,2,c
  8309  001D96  D018               	goto	i2l3555
  8310  001D98  0E01               	movlw	1
  8311  001D9A  6E05               	movwf	i2___awmod@counter,c
  8312  001D9C  D004               	goto	i2l3545
  8313  001D9E                     i2l3543:
  8314  001D9E  90D8               	bcf	status,0,c
  8315  001DA0  3603               	rlcf	i2___awmod@divisor,f,c
  8316  001DA2  3604               	rlcf	i2___awmod@divisor+1,f,c
  8317  001DA4  2A05               	incf	i2___awmod@counter,f,c
  8318  001DA6                     i2l3545:
  8319  001DA6  AE04               	btfss	i2___awmod@divisor+1,7,c
  8320  001DA8  D7FA               	goto	i2l3543
  8321  001DAA                     i2l3547:
  8322  001DAA  5003               	movf	i2___awmod@divisor,w,c
  8323  001DAC  5C01               	subwf	i2___awmod@dividend,w,c
  8324  001DAE  5004               	movf	i2___awmod@divisor+1,w,c
  8325  001DB0  5802               	subwfb	i2___awmod@dividend+1,w,c
  8326  001DB2  A0D8               	btfss	status,0,c
  8327  001DB4  D004               	goto	i2l3551
  8328  001DB6  5003               	movf	i2___awmod@divisor,w,c
  8329  001DB8  5E01               	subwf	i2___awmod@dividend,f,c
  8330  001DBA  5004               	movf	i2___awmod@divisor+1,w,c
  8331  001DBC  5A02               	subwfb	i2___awmod@dividend+1,f,c
  8332  001DBE                     i2l3551:
  8333  001DBE  90D8               	bcf	status,0,c
  8334  001DC0  3204               	rrcf	i2___awmod@divisor+1,f,c
  8335  001DC2  3203               	rrcf	i2___awmod@divisor,f,c
  8336  001DC4  2E05               	decfsz	i2___awmod@counter,f,c
  8337  001DC6  D7F1               	goto	i2l3547
  8338  001DC8                     i2l3555:
  8339  001DC8  5006               	movf	i2___awmod@sign,w,c
  8340  001DCA  B4D8               	btfsc	status,2,c
  8341  001DCC  D004               	goto	i2l3559
  8342  001DCE  6C01               	negf	i2___awmod@dividend,c
  8343  001DD0  1E02               	comf	i2___awmod@dividend+1,f,c
  8344  001DD2  B0D8               	btfsc	status,0,c
  8345  001DD4  2A02               	incf	i2___awmod@dividend+1,f,c
  8346  001DD6                     i2l3559:
  8347  001DD6  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  8348  001DDA  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  8349  001DDE  0012               	return	
  8350  001DE0                     __end_ofi2___awmod:
  8351                           	opt stack 0
  8352                           pclatu	equ	0xFFB
  8353                           pclath	equ	0xFFA
  8354                           tblptru	equ	0xFF8
  8355                           tblptrh	equ	0xFF7
  8356                           tblptrl	equ	0xFF6
  8357                           tablat	equ	0xFF5
  8358                           prodh	equ	0xFF4
  8359                           prodl	equ	0xFF3
  8360                           intcon	equ	0xFF2
  8361                           intcon2	equ	0xFF1
  8362                           postinc0	equ	0xFEE
  8363                           fsr0h	equ	0xFEA
  8364                           fsr0l	equ	0xFE9
  8365                           wreg	equ	0xFE8
  8366                           indf1	equ	0xFE7
  8367                           fsr1h	equ	0xFE2
  8368                           fsr1l	equ	0xFE1
  8369                           indf2	equ	0xFDF
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function i2___awdiv *****************
  8375 ;; Defined at:
  8376 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awdiv.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;  dividend        2    0[COMRAM] int 
  8379 ;;  divisor         2    2[COMRAM] int 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  __awdiv         2    6[COMRAM] int 
  8382 ;;  __awdiv         1    5[COMRAM] unsigned char 
  8383 ;;  __awdiv         1    4[COMRAM] unsigned char 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  2    0[COMRAM] int 
  8386 ;; Registers used:
  8387 ;;		wreg, status,2, status,0
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8393 ;;      Params:         4       0       0       0       0       0       0       0       0
  8394 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8396 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8397 ;;Total ram usage:        8 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; This function calls:
  8400 ;;		Nothing
  8401 ;; This function is called by:
  8402 ;;		_get_next_state
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           	psect	text37
  8407  001B9A                     __ptext37:
  8408                           	opt stack 0
  8409  001B9A                     i2___awdiv:
  8410                           	opt stack 24
  8411                           
  8412                           ;incstack = 0
  8413  001B9A  0E00               	movlw	0
  8414  001B9C  6E06               	movwf	i2___awdiv@sign,c
  8415  001B9E  AE04               	btfss	i2___awdiv@divisor+1,7,c
  8416  001BA0  D006               	goto	i2l3491
  8417  001BA2  6C03               	negf	i2___awdiv@divisor,c
  8418  001BA4  1E04               	comf	i2___awdiv@divisor+1,f,c
  8419  001BA6  B0D8               	btfsc	status,0,c
  8420  001BA8  2A04               	incf	i2___awdiv@divisor+1,f,c
  8421  001BAA  0E01               	movlw	1
  8422  001BAC  6E06               	movwf	i2___awdiv@sign,c
  8423  001BAE                     i2l3491:
  8424  001BAE  AE02               	btfss	i2___awdiv@dividend+1,7,c
  8425  001BB0  D006               	goto	i2l3497
  8426  001BB2  6C01               	negf	i2___awdiv@dividend,c
  8427  001BB4  1E02               	comf	i2___awdiv@dividend+1,f,c
  8428  001BB6  B0D8               	btfsc	status,0,c
  8429  001BB8  2A02               	incf	i2___awdiv@dividend+1,f,c
  8430  001BBA  0E01               	movlw	1
  8431  001BBC  1A06               	xorwf	i2___awdiv@sign,f,c
  8432  001BBE                     i2l3497:
  8433  001BBE  0E00               	movlw	0
  8434  001BC0  6E08               	movwf	i2___awdiv@quotient+1,c
  8435  001BC2  0E00               	movlw	0
  8436  001BC4  6E07               	movwf	i2___awdiv@quotient,c
  8437  001BC6  5003               	movf	i2___awdiv@divisor,w,c
  8438  001BC8  1004               	iorwf	i2___awdiv@divisor+1,w,c
  8439  001BCA  B4D8               	btfsc	status,2,c
  8440  001BCC  D01C               	goto	i2l3519
  8441  001BCE  0E01               	movlw	1
  8442  001BD0  6E05               	movwf	i2___awdiv@counter,c
  8443  001BD2  D004               	goto	i2l3505
  8444  001BD4                     i2l3503:
  8445  001BD4  90D8               	bcf	status,0,c
  8446  001BD6  3603               	rlcf	i2___awdiv@divisor,f,c
  8447  001BD8  3604               	rlcf	i2___awdiv@divisor+1,f,c
  8448  001BDA  2A05               	incf	i2___awdiv@counter,f,c
  8449  001BDC                     i2l3505:
  8450  001BDC  AE04               	btfss	i2___awdiv@divisor+1,7,c
  8451  001BDE  D7FA               	goto	i2l3503
  8452  001BE0                     i2l3507:
  8453  001BE0  90D8               	bcf	status,0,c
  8454  001BE2  3607               	rlcf	i2___awdiv@quotient,f,c
  8455  001BE4  3608               	rlcf	i2___awdiv@quotient+1,f,c
  8456  001BE6  5003               	movf	i2___awdiv@divisor,w,c
  8457  001BE8  5C01               	subwf	i2___awdiv@dividend,w,c
  8458  001BEA  5004               	movf	i2___awdiv@divisor+1,w,c
  8459  001BEC  5802               	subwfb	i2___awdiv@dividend+1,w,c
  8460  001BEE  A0D8               	btfss	status,0,c
  8461  001BF0  D005               	goto	i2l3515
  8462  001BF2  5003               	movf	i2___awdiv@divisor,w,c
  8463  001BF4  5E01               	subwf	i2___awdiv@dividend,f,c
  8464  001BF6  5004               	movf	i2___awdiv@divisor+1,w,c
  8465  001BF8  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  8466  001BFA  8007               	bsf	i2___awdiv@quotient,0,c
  8467  001BFC                     i2l3515:
  8468  001BFC  90D8               	bcf	status,0,c
  8469  001BFE  3204               	rrcf	i2___awdiv@divisor+1,f,c
  8470  001C00  3203               	rrcf	i2___awdiv@divisor,f,c
  8471  001C02  2E05               	decfsz	i2___awdiv@counter,f,c
  8472  001C04  D7ED               	goto	i2l3507
  8473  001C06                     i2l3519:
  8474  001C06  5006               	movf	i2___awdiv@sign,w,c
  8475  001C08  B4D8               	btfsc	status,2,c
  8476  001C0A  D004               	goto	i2l3523
  8477  001C0C  6C07               	negf	i2___awdiv@quotient,c
  8478  001C0E  1E08               	comf	i2___awdiv@quotient+1,f,c
  8479  001C10  B0D8               	btfsc	status,0,c
  8480  001C12  2A08               	incf	i2___awdiv@quotient+1,f,c
  8481  001C14                     i2l3523:
  8482  001C14  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  8483  001C18  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  8484  001C1C  0012               	return	
  8485  001C1E                     __end_ofi2___awdiv:
  8486                           	opt stack 0
  8487                           pclatu	equ	0xFFB
  8488                           pclath	equ	0xFFA
  8489                           tblptru	equ	0xFF8
  8490                           tblptrh	equ	0xFF7
  8491                           tblptrl	equ	0xFF6
  8492                           tablat	equ	0xFF5
  8493                           prodh	equ	0xFF4
  8494                           prodl	equ	0xFF3
  8495                           intcon	equ	0xFF2
  8496                           intcon2	equ	0xFF1
  8497                           postinc0	equ	0xFEE
  8498                           fsr0h	equ	0xFEA
  8499                           fsr0l	equ	0xFE9
  8500                           wreg	equ	0xFE8
  8501                           indf1	equ	0xFE7
  8502                           fsr1h	equ	0xFE2
  8503                           fsr1l	equ	0xFE1
  8504                           indf2	equ	0xFDF
  8505                           fsr2h	equ	0xFDA
  8506                           fsr2l	equ	0xFD9
  8507                           status	equ	0xFD8
  8508                           
  8509 ;; *************** function _set_time *****************
  8510 ;; Defined at:
  8511 ;;		line 237 in file "user.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;  seconds         1    wreg     unsigned char 
  8514 ;;  minutes         1    7[COMRAM] unsigned char 
  8515 ;;  hour            1    8[COMRAM] unsigned char 
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;  seconds         1    9[COMRAM] unsigned char 
  8518 ;;  hour_reg        1   12[COMRAM] unsigned char 
  8519 ;;  min_reg         1   11[COMRAM] unsigned char 
  8520 ;;  sec_reg         1   10[COMRAM] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      void 
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8530 ;;      Params:         2       0       0       0       0       0       0       0       0
  8531 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8532 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8533 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8534 ;;Total ram usage:        6 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    3
  8537 ;; This function calls:
  8538 ;;		_byte_write
  8539 ;;		_get_hour_reg
  8540 ;;		i2_get_seconds_reg
  8541 ;; This function is called by:
  8542 ;;		_get_next_state
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           	psect	text38
  8547  002038                     __ptext38:
  8548                           	opt stack 0
  8549  002038                     _set_time:
  8550                           	opt stack 21
  8551                           
  8552                           ;incstack = 0
  8553                           ;set_time@seconds stored from wreg
  8554  002038  6E0A               	movwf	set_time@seconds,c
  8555                           
  8556                           ;user.c: 240: char sec_reg = get_seconds_reg(seconds);
  8557  00203A  500A               	movf	set_time@seconds,w,c
  8558  00203C  EC80  F00F         	call	i2_get_seconds_reg
  8559  002040  6E0B               	movwf	set_time@sec_reg,c
  8560                           
  8561                           ;user.c: 241: char min_reg = get_seconds_reg(minutes);
  8562  002042  5008               	movf	set_time@minutes,w,c
  8563  002044  EC80  F00F         	call	i2_get_seconds_reg
  8564  002048  6E0C               	movwf	set_time@min_reg,c
  8565                           
  8566                           ;user.c: 242: char hour_reg = get_hour_reg(hour);
  8567  00204A  5009               	movf	set_time@hour,w,c
  8568  00204C  EC54  F010         	call	_get_hour_reg
  8569  002050  6E0D               	movwf	set_time@hour_reg,c
  8570                           
  8571                           ;user.c: 244: byte_write(0x80,sec_reg);
  8572  002052  C00B  F006         	movff	set_time@sec_reg,byte_write@value
  8573  002056  0E80               	movlw	128
  8574  002058  EC7C  F010         	call	_byte_write
  8575                           
  8576                           ;user.c: 245: byte_write(0x82,min_reg);
  8577  00205C  C00C  F006         	movff	set_time@min_reg,byte_write@value
  8578  002060  0E82               	movlw	130
  8579  002062  EC7C  F010         	call	_byte_write
  8580                           
  8581                           ;user.c: 246: byte_write(0x84,hour_reg);
  8582  002066  C00D  F006         	movff	set_time@hour_reg,byte_write@value
  8583  00206A  0E84               	movlw	132
  8584  00206C  EC7C  F010         	call	_byte_write
  8585  002070  0012               	return		;funcret
  8586  002072                     __end_of_set_time:
  8587                           	opt stack 0
  8588                           pclatu	equ	0xFFB
  8589                           pclath	equ	0xFFA
  8590                           tblptru	equ	0xFF8
  8591                           tblptrh	equ	0xFF7
  8592                           tblptrl	equ	0xFF6
  8593                           tablat	equ	0xFF5
  8594                           prodh	equ	0xFF4
  8595                           prodl	equ	0xFF3
  8596                           intcon	equ	0xFF2
  8597                           intcon2	equ	0xFF1
  8598                           postinc0	equ	0xFEE
  8599                           fsr0h	equ	0xFEA
  8600                           fsr0l	equ	0xFE9
  8601                           wreg	equ	0xFE8
  8602                           indf1	equ	0xFE7
  8603                           fsr1h	equ	0xFE2
  8604                           fsr1l	equ	0xFE1
  8605                           indf2	equ	0xFDF
  8606                           fsr2h	equ	0xFDA
  8607                           fsr2l	equ	0xFD9
  8608                           status	equ	0xFD8
  8609                           
  8610 ;; *************** function i2_get_seconds_reg *****************
  8611 ;; Defined at:
  8612 ;;		line 298 in file "user.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  seconds         1    wreg     unsigned char 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  seconds         1    1[COMRAM] unsigned char 
  8617 ;;  get_seconds_    1    0[COMRAM] unsigned char 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      unsigned char 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8627 ;;      Params:         0       0       0       0       0       0       0       0       0
  8628 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8630 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8631 ;;Total ram usage:        2 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; This function calls:
  8634 ;;		Nothing
  8635 ;; This function is called by:
  8636 ;;		_set_time
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           	psect	text39
  8641  001F00                     __ptext39:
  8642                           	opt stack 0
  8643  001F00                     i2_get_seconds_reg:
  8644                           	opt stack 23
  8645                           
  8646                           ;incstack = 0
  8647                           ;i2get_seconds_reg@seconds stored from wreg
  8648  001F00  6E02               	movwf	i2get_seconds_reg@seconds,c
  8649                           
  8650                           ;user.c: 300: char res = 0;
  8651  001F02  0E00               	movlw	0
  8652  001F04  6E01               	movwf	i2get_seconds_reg@res,c
  8653                           
  8654                           ;user.c: 301: if(seconds<10)
  8655  001F06  0E0A               	movlw	10
  8656  001F08  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8657  001F0A  D003               	goto	i2l3275
  8658                           
  8659                           ;user.c: 302: {
  8660                           ;user.c: 303: res = seconds;
  8661  001F0C  C002  F001         	movff	i2get_seconds_reg@seconds,i2get_seconds_reg@res
  8662                           
  8663                           ;user.c: 304: }
  8664  001F10  D020               	goto	i2l3293
  8665  001F12                     i2l3275:
  8666                           
  8667                           ;user.c: 305: else if(seconds <20)
  8668  001F12  0E14               	movlw	20
  8669  001F14  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8670  001F16  D004               	goto	i2l3279
  8671                           
  8672                           ;user.c: 306: {
  8673                           ;user.c: 307: res = 1<<4 | (seconds - 10);
  8674  001F18  5002               	movf	i2get_seconds_reg@seconds,w,c
  8675  001F1A  0FF6               	addlw	246
  8676  001F1C  0910               	iorlw	16
  8677  001F1E  D018               	goto	L56
  8678  001F20                     i2l3279:
  8679                           
  8680                           ;user.c: 309: else if(seconds <30)
  8681  001F20  0E1E               	movlw	30
  8682  001F22  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8683  001F24  D004               	goto	i2l3283
  8684                           
  8685                           ;user.c: 310: {
  8686                           ;user.c: 311: res = 2<<4 | (seconds -20);
  8687  001F26  5002               	movf	i2get_seconds_reg@seconds,w,c
  8688  001F28  0FEC               	addlw	236
  8689  001F2A  0920               	iorlw	32
  8690  001F2C  D011               	goto	L56
  8691  001F2E                     i2l3283:
  8692                           
  8693                           ;user.c: 313: else if(seconds <40)
  8694  001F2E  0E28               	movlw	40
  8695  001F30  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8696  001F32  D004               	goto	i2l3287
  8697                           
  8698                           ;user.c: 314: {
  8699                           ;user.c: 315: res = 3<<4 | (seconds - 30);
  8700  001F34  5002               	movf	i2get_seconds_reg@seconds,w,c
  8701  001F36  0FE2               	addlw	226
  8702  001F38  0930               	iorlw	48
  8703  001F3A  D00A               	goto	L56
  8704  001F3C                     i2l3287:
  8705                           
  8706                           ;user.c: 317: else if(seconds <50)
  8707  001F3C  0E32               	movlw	50
  8708  001F3E  6002               	cpfslt	i2get_seconds_reg@seconds,c
  8709  001F40  D004               	goto	i2l3291
  8710                           
  8711                           ;user.c: 318: {
  8712                           ;user.c: 319: res = 4<<4 | (seconds - 40);
  8713  001F42  5002               	movf	i2get_seconds_reg@seconds,w,c
  8714  001F44  0FD8               	addlw	216
  8715  001F46  0940               	iorlw	64
  8716  001F48  D003               	goto	L56
  8717  001F4A                     i2l3291:
  8718                           
  8719                           ;user.c: 321: else
  8720                           ;user.c: 322: {
  8721                           ;user.c: 323: res = 5<<4 | (seconds -50);
  8722  001F4A  5002               	movf	i2get_seconds_reg@seconds,w,c
  8723  001F4C  0FCE               	addlw	206
  8724  001F4E  0950               	iorlw	80
  8725  001F50                     L56:
  8726  001F50  6E01               	movwf	i2get_seconds_reg@res,c
  8727  001F52                     i2l3293:
  8728                           
  8729                           ;user.c: 324: }
  8730                           ;user.c: 326: return res;
  8731  001F52  5001               	movf	i2get_seconds_reg@res,w,c
  8732  001F54  0012               	return	
  8733  001F56                     __end_ofi2_get_seconds_reg:
  8734                           	opt stack 0
  8735                           pclatu	equ	0xFFB
  8736                           pclath	equ	0xFFA
  8737                           tblptru	equ	0xFF8
  8738                           tblptrh	equ	0xFF7
  8739                           tblptrl	equ	0xFF6
  8740                           tablat	equ	0xFF5
  8741                           prodh	equ	0xFF4
  8742                           prodl	equ	0xFF3
  8743                           intcon	equ	0xFF2
  8744                           intcon2	equ	0xFF1
  8745                           postinc0	equ	0xFEE
  8746                           fsr0h	equ	0xFEA
  8747                           fsr0l	equ	0xFE9
  8748                           wreg	equ	0xFE8
  8749                           indf1	equ	0xFE7
  8750                           fsr1h	equ	0xFE2
  8751                           fsr1l	equ	0xFE1
  8752                           indf2	equ	0xFDF
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function _get_hour_reg *****************
  8758 ;; Defined at:
  8759 ;;		line 337 in file "user.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;  hour            1    wreg     unsigned char 
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;  hour            1    1[COMRAM] unsigned char 
  8764 ;;  res             1    0[COMRAM] unsigned char 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  1    wreg      unsigned char 
  8767 ;; Registers used:
  8768 ;;		wreg, status,2, status,0
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8774 ;;      Params:         0       0       0       0       0       0       0       0       0
  8775 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8777 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8778 ;;Total ram usage:        2 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; This function calls:
  8781 ;;		Nothing
  8782 ;; This function is called by:
  8783 ;;		_set_time
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           	psect	text40
  8788  0020A8                     __ptext40:
  8789                           	opt stack 0
  8790  0020A8                     _get_hour_reg:
  8791                           	opt stack 23
  8792                           
  8793                           ;incstack = 0
  8794                           ;get_hour_reg@hour stored from wreg
  8795  0020A8  6E02               	movwf	get_hour_reg@hour,c
  8796                           
  8797                           ;user.c: 339: char res = 0;
  8798  0020AA  0E00               	movlw	0
  8799  0020AC  6E01               	movwf	get_hour_reg@res,c
  8800                           
  8801                           ;user.c: 340: if(hour < 10)
  8802  0020AE  0E0A               	movlw	10
  8803  0020B0  6002               	cpfslt	get_hour_reg@hour,c
  8804  0020B2  D003               	goto	i2l3179
  8805                           
  8806                           ;user.c: 341: {
  8807                           ;user.c: 342: res = hour;
  8808  0020B4  C002  F001         	movff	get_hour_reg@hour,get_hour_reg@res
  8809                           
  8810                           ;user.c: 343: }
  8811  0020B8  D00B               	goto	i2l3185
  8812  0020BA                     i2l3179:
  8813                           
  8814                           ;user.c: 344: else if(hour < 20)
  8815  0020BA  0E14               	movlw	20
  8816  0020BC  6002               	cpfslt	get_hour_reg@hour,c
  8817  0020BE  D004               	goto	i2l3183
  8818                           
  8819                           ;user.c: 345: {
  8820                           ;user.c: 346: res = 1<<4 | (hour -10);
  8821  0020C0  5002               	movf	get_hour_reg@hour,w,c
  8822  0020C2  0FF6               	addlw	246
  8823  0020C4  0910               	iorlw	16
  8824  0020C6  D003               	goto	L57
  8825  0020C8                     i2l3183:
  8826                           
  8827                           ;user.c: 348: else
  8828                           ;user.c: 349: {
  8829                           ;user.c: 350: res = 2<<4 | (hour-20);
  8830  0020C8  5002               	movf	get_hour_reg@hour,w,c
  8831  0020CA  0FEC               	addlw	236
  8832  0020CC  0920               	iorlw	32
  8833  0020CE                     L57:
  8834  0020CE  6E01               	movwf	get_hour_reg@res,c
  8835  0020D0                     i2l3185:
  8836                           
  8837                           ;user.c: 351: }
  8838                           ;user.c: 353: return res;
  8839  0020D0  5001               	movf	get_hour_reg@res,w,c
  8840  0020D2  0012               	return	
  8841  0020D4                     __end_of_get_hour_reg:
  8842                           	opt stack 0
  8843                           pclatu	equ	0xFFB
  8844                           pclath	equ	0xFFA
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           prodh	equ	0xFF4
  8850                           prodl	equ	0xFF3
  8851                           intcon	equ	0xFF2
  8852                           intcon2	equ	0xFF1
  8853                           postinc0	equ	0xFEE
  8854                           fsr0h	equ	0xFEA
  8855                           fsr0l	equ	0xFE9
  8856                           wreg	equ	0xFE8
  8857                           indf1	equ	0xFE7
  8858                           fsr1h	equ	0xFE2
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           fsr2h	equ	0xFDA
  8862                           fsr2l	equ	0xFD9
  8863                           status	equ	0xFD8
  8864                           
  8865 ;; *************** function _byte_write *****************
  8866 ;; Defined at:
  8867 ;;		line 225 in file "user.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  address         1    wreg     unsigned char 
  8870 ;;  value           1    5[COMRAM] unsigned char 
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;  address         1    6[COMRAM] unsigned char 
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      void 
  8875 ;; Registers used:
  8876 ;;		wreg, status,2, status,0, cstack
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8882 ;;      Params:         1       0       0       0       0       0       0       0       0
  8883 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8885 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8886 ;;Total ram usage:        2 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:    2
  8889 ;; This function calls:
  8890 ;;		i2_ce_disable
  8891 ;;		i2_ce_enable
  8892 ;;		i2_send_command
  8893 ;; This function is called by:
  8894 ;;		_set_time
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text41
  8899  0020F8                     __ptext41:
  8900                           	opt stack 0
  8901  0020F8                     _byte_write:
  8902                           	opt stack 21
  8903                           
  8904                           ;incstack = 0
  8905                           ;byte_write@address stored from wreg
  8906  0020F8  6E07               	movwf	byte_write@address,c
  8907                           
  8908                           ;user.c: 227: ce_enable();
  8909  0020FA  ECAC  F010         	call	i2_ce_enable	;wreg free
  8910                           
  8911                           ;user.c: 230: send_command(address);
  8912  0020FE  5007               	movf	byte_write@address,w,c
  8913  002100  EC27  F00F         	call	i2_send_command
  8914                           
  8915                           ;user.c: 231: send_command(value);
  8916  002104  5006               	movf	byte_write@value,w,c
  8917  002106  EC27  F00F         	call	i2_send_command
  8918                           
  8919                           ;user.c: 233: ce_disable();
  8920  00210A  EC97  F010         	call	i2_ce_disable	;wreg free
  8921  00210E  0012               	return		;funcret
  8922  002110                     __end_of_byte_write:
  8923                           	opt stack 0
  8924                           pclatu	equ	0xFFB
  8925                           pclath	equ	0xFFA
  8926                           tblptru	equ	0xFF8
  8927                           tblptrh	equ	0xFF7
  8928                           tblptrl	equ	0xFF6
  8929                           tablat	equ	0xFF5
  8930                           prodh	equ	0xFF4
  8931                           prodl	equ	0xFF3
  8932                           intcon	equ	0xFF2
  8933                           intcon2	equ	0xFF1
  8934                           postinc0	equ	0xFEE
  8935                           fsr0h	equ	0xFEA
  8936                           fsr0l	equ	0xFE9
  8937                           wreg	equ	0xFE8
  8938                           indf1	equ	0xFE7
  8939                           fsr1h	equ	0xFE2
  8940                           fsr1l	equ	0xFE1
  8941                           indf2	equ	0xFDF
  8942                           fsr2h	equ	0xFDA
  8943                           fsr2l	equ	0xFD9
  8944                           status	equ	0xFD8
  8945                           
  8946 ;; *************** function i2_send_command *****************
  8947 ;; Defined at:
  8948 ;;		line 358 in file "user.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;  command         1    wreg     unsigned char 
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  command         1    2[COMRAM] unsigned char 
  8953 ;;  send_command    2    3[COMRAM] int 
  8954 ;; Return value:  Size  Location     Type
  8955 ;;                  1    wreg      void 
  8956 ;; Registers used:
  8957 ;;		wreg, status,2, status,0, cstack
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8963 ;;      Params:         0       0       0       0       0       0       0       0       0
  8964 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8965 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8966 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8967 ;;Total ram usage:        5 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:    1
  8970 ;; This function calls:
  8971 ;;		i2_io_as_output
  8972 ;; This function is called by:
  8973 ;;		_byte_write
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           	psect	text42
  8978  001E4E                     __ptext42:
  8979                           	opt stack 0
  8980  001E4E                     i2_send_command:
  8981                           	opt stack 21
  8982                           
  8983                           ;incstack = 0
  8984                           ;i2send_command@command stored from wreg
  8985  001E4E  6E03               	movwf	i2send_command@command,c
  8986                           
  8987                           ;user.c: 360: int i;
  8988                           ;user.c: 361: io_as_output();
  8989  001E50  ECAA  F010         	call	i2_io_as_output	;wreg free
  8990                           
  8991                           ;user.c: 362: for(i=0; i<8; i++)
  8992  001E54  0E00               	movlw	0
  8993  001E56  6E05               	movwf	i2send_command@i+1,c
  8994  001E58  0E00               	movlw	0
  8995  001E5A  6E04               	movwf	i2send_command@i,c
  8996  001E5C                     i2l3121:
  8997  001E5C  BE05               	btfsc	i2send_command@i+1,7,c
  8998  001E5E  D006               	goto	i2l3125
  8999  001E60  5005               	movf	i2send_command@i+1,w,c
  9000  001E62  E121               	bnz	i2l437
  9001  001E64  0E08               	movlw	8
  9002  001E66  5C04               	subwf	i2send_command@i,w,c
  9003  001E68  B0D8               	btfsc	status,0,c
  9004  001E6A  0012               	return	
  9005  001E6C                     i2l3125:
  9006                           
  9007                           ;user.c: 363: {
  9008                           ;user.c: 364: RA3 = command>>i & 0x01;
  9009  001E6C  C004  F001         	movff	i2send_command@i,??i2_send_command
  9010  001E70  C003  F002         	movff	i2send_command@command,??i2_send_command+1
  9011  001E74  2A01               	incf	??i2_send_command,f,c
  9012  001E76  D002               	goto	i2u288_44
  9013  001E78                     i2u288_45:
  9014  001E78  90D8               	bcf	status,0,c
  9015  001E7A  3202               	rrcf	??i2_send_command+1,f,c
  9016  001E7C                     i2u288_44:
  9017  001E7C  2E01               	decfsz	??i2_send_command,f,c
  9018  001E7E  D7FC               	goto	i2u288_45
  9019  001E80  3002               	rrcf	??i2_send_command+1,w,c
  9020  001E82  A0D8               	btfss	status,0,c
  9021  001E84  D002               	goto	i2u289_40
  9022  001E86  8680               	bsf	3968,3,c	;volatile
  9023  001E88  D001               	goto	i2l3127
  9024  001E8A                     i2u289_40:
  9025  001E8A  9680               	bcf	3968,3,c	;volatile
  9026  001E8C                     i2l3127:
  9027                           
  9028                           ;user.c: 365: RA2 = 1;
  9029  001E8C  8480               	bsf	3968,2,c	;volatile
  9030                           
  9031                           ;user.c: 366: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  9032  001E8E  0E10               	movlw	16
  9033  001E90                     i2u664_47:
  9034  001E90  2EE8               	decfsz	wreg,f,c
  9035  001E92  D7FE               	bra	i2u664_47
  9036  001E94  D000               	nop2	
  9037                           
  9038                           ;user.c: 367: RA2 = 0;
  9039  001E96  9480               	bcf	3968,2,c	;volatile
  9040                           
  9041                           ;user.c: 368: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  9042  001E98  0E06               	movlw	6
  9043  001E9A                     i2u665_47:
  9044  001E9A  2EE8               	decfsz	wreg,f,c
  9045  001E9C  D7FE               	bra	i2u665_47
  9046  001E9E  D000               	nop2	
  9047  001EA0  4A04               	infsnz	i2send_command@i,f,c
  9048  001EA2  2A05               	incf	i2send_command@i+1,f,c
  9049  001EA4  D7DB               	goto	i2l3121
  9050  001EA6                     i2l437:
  9051  001EA6  0012               	return		;funcret
  9052  001EA8                     __end_ofi2_send_command:
  9053                           	opt stack 0
  9054                           pclatu	equ	0xFFB
  9055                           pclath	equ	0xFFA
  9056                           tblptru	equ	0xFF8
  9057                           tblptrh	equ	0xFF7
  9058                           tblptrl	equ	0xFF6
  9059                           tablat	equ	0xFF5
  9060                           prodh	equ	0xFF4
  9061                           prodl	equ	0xFF3
  9062                           intcon	equ	0xFF2
  9063                           intcon2	equ	0xFF1
  9064                           postinc0	equ	0xFEE
  9065                           fsr0h	equ	0xFEA
  9066                           fsr0l	equ	0xFE9
  9067                           wreg	equ	0xFE8
  9068                           indf1	equ	0xFE7
  9069                           fsr1h	equ	0xFE2
  9070                           fsr1l	equ	0xFE1
  9071                           indf2	equ	0xFDF
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function i2_io_as_output *****************
  9077 ;; Defined at:
  9078 ;;		line 380 in file "user.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;		None
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;		None
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      void 
  9085 ;; Registers used:
  9086 ;;		None
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9092 ;;      Params:         0       0       0       0       0       0       0       0       0
  9093 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9094 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9095 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9096 ;;Total ram usage:        0 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; This function calls:
  9099 ;;		Nothing
  9100 ;; This function is called by:
  9101 ;;		i2_send_command
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105                           	psect	text43
  9106  002154                     __ptext43:
  9107                           	opt stack 0
  9108  002154                     i2_io_as_output:
  9109                           	opt stack 21
  9110                           
  9111                           ;user.c: 382: TRISA3 = 0;
  9112                           
  9113                           ;incstack = 0
  9114  002154  9692               	bcf	3986,3,c	;volatile
  9115  002156  0012               	return		;funcret
  9116  002158                     __end_ofi2_io_as_output:
  9117                           	opt stack 0
  9118                           pclatu	equ	0xFFB
  9119                           pclath	equ	0xFFA
  9120                           tblptru	equ	0xFF8
  9121                           tblptrh	equ	0xFF7
  9122                           tblptrl	equ	0xFF6
  9123                           tablat	equ	0xFF5
  9124                           prodh	equ	0xFF4
  9125                           prodl	equ	0xFF3
  9126                           intcon	equ	0xFF2
  9127                           intcon2	equ	0xFF1
  9128                           postinc0	equ	0xFEE
  9129                           fsr0h	equ	0xFEA
  9130                           fsr0l	equ	0xFE9
  9131                           wreg	equ	0xFE8
  9132                           indf1	equ	0xFE7
  9133                           fsr1h	equ	0xFE2
  9134                           fsr1l	equ	0xFE1
  9135                           indf2	equ	0xFDF
  9136                           fsr2h	equ	0xFDA
  9137                           fsr2l	equ	0xFD9
  9138                           status	equ	0xFD8
  9139                           
  9140 ;; *************** function i2_ce_enable *****************
  9141 ;; Defined at:
  9142 ;;		line 184 in file "user.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;		None
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;		None
  9147 ;; Return value:  Size  Location     Type
  9148 ;;                  1    wreg      void 
  9149 ;; Registers used:
  9150 ;;		None
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9156 ;;      Params:         0       0       0       0       0       0       0       0       0
  9157 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9159 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9160 ;;Total ram usage:        0 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; This function calls:
  9163 ;;		Nothing
  9164 ;; This function is called by:
  9165 ;;		_byte_write
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           	psect	text44
  9170  002158                     __ptext44:
  9171                           	opt stack 0
  9172  002158                     i2_ce_enable:
  9173                           	opt stack 22
  9174                           
  9175                           ;user.c: 187: RA5 = 1;
  9176                           
  9177                           ;incstack = 0
  9178  002158  8A80               	bsf	3968,5,c	;volatile
  9179  00215A  0012               	return		;funcret
  9180  00215C                     __end_ofi2_ce_enable:
  9181                           	opt stack 0
  9182                           pclatu	equ	0xFFB
  9183                           pclath	equ	0xFFA
  9184                           tblptru	equ	0xFF8
  9185                           tblptrh	equ	0xFF7
  9186                           tblptrl	equ	0xFF6
  9187                           tablat	equ	0xFF5
  9188                           prodh	equ	0xFF4
  9189                           prodl	equ	0xFF3
  9190                           intcon	equ	0xFF2
  9191                           intcon2	equ	0xFF1
  9192                           postinc0	equ	0xFEE
  9193                           fsr0h	equ	0xFEA
  9194                           fsr0l	equ	0xFE9
  9195                           wreg	equ	0xFE8
  9196                           indf1	equ	0xFE7
  9197                           fsr1h	equ	0xFE2
  9198                           fsr1l	equ	0xFE1
  9199                           indf2	equ	0xFDF
  9200                           fsr2h	equ	0xFDA
  9201                           fsr2l	equ	0xFD9
  9202                           status	equ	0xFD8
  9203                           
  9204 ;; *************** function i2_ce_disable *****************
  9205 ;; Defined at:
  9206 ;;		line 191 in file "user.c"
  9207 ;; Parameters:    Size  Location     Type
  9208 ;;		None
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;		None
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  1    wreg      void 
  9213 ;; Registers used:
  9214 ;;		None
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0
  9221 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9223 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9224 ;;Total ram usage:        0 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; This function calls:
  9227 ;;		Nothing
  9228 ;; This function is called by:
  9229 ;;		_byte_write
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           	psect	text45
  9234  00212E                     __ptext45:
  9235                           	opt stack 0
  9236  00212E                     i2_ce_disable:
  9237                           	opt stack 22
  9238                           
  9239                           ;user.c: 193: RA5 = 0;
  9240                           
  9241                           ;incstack = 0
  9242  00212E  9A80               	bcf	3968,5,c	;volatile
  9243                           
  9244                           ;user.c: 194: RA2 = 0;
  9245  002130  9480               	bcf	3968,2,c	;volatile
  9246  002132  0012               	return		;funcret
  9247  002134                     __end_ofi2_ce_disable:
  9248                           	opt stack 0
  9249  0000                     pclatu	equ	0xFFB
  9250                           pclath	equ	0xFFA
  9251                           tblptru	equ	0xFF8
  9252                           tblptrh	equ	0xFF7
  9253                           tblptrl	equ	0xFF6
  9254                           tablat	equ	0xFF5
  9255                           prodh	equ	0xFF4
  9256                           prodl	equ	0xFF3
  9257                           intcon	equ	0xFF2
  9258                           intcon2	equ	0xFF1
  9259                           postinc0	equ	0xFEE
  9260                           fsr0h	equ	0xFEA
  9261                           fsr0l	equ	0xFE9
  9262                           wreg	equ	0xFE8
  9263                           indf1	equ	0xFE7
  9264                           fsr1h	equ	0xFE2
  9265                           fsr1l	equ	0xFE1
  9266                           indf2	equ	0xFDF
  9267                           fsr2h	equ	0xFDA
  9268                           fsr2l	equ	0xFD9
  9269                           status	equ	0xFD8
  9270                           pclatu	equ	0xFFB
  9271                           pclath	equ	0xFFA
  9272                           tblptru	equ	0xFF8
  9273                           tblptrh	equ	0xFF7
  9274                           tblptrl	equ	0xFF6
  9275                           tablat	equ	0xFF5
  9276                           prodh	equ	0xFF4
  9277                           prodl	equ	0xFF3
  9278                           intcon	equ	0xFF2
  9279                           intcon2	equ	0xFF1
  9280                           postinc0	equ	0xFEE
  9281                           fsr0h	equ	0xFEA
  9282                           fsr0l	equ	0xFE9
  9283                           wreg	equ	0xFE8
  9284                           indf1	equ	0xFE7
  9285                           fsr1h	equ	0xFE2
  9286                           fsr1l	equ	0xFE1
  9287                           indf2	equ	0xFDF
  9288                           fsr2h	equ	0xFDA
  9289                           fsr2l	equ	0xFD9
  9290                           status	equ	0xFD8
  9291                           
  9292                           	psect	rparam
  9293  0000                     pclatu	equ	0xFFB
  9294                           pclath	equ	0xFFA
  9295                           tblptru	equ	0xFF8
  9296                           tblptrh	equ	0xFF7
  9297                           tblptrl	equ	0xFF6
  9298                           tablat	equ	0xFF5
  9299                           prodh	equ	0xFF4
  9300                           prodl	equ	0xFF3
  9301                           intcon	equ	0xFF2
  9302                           intcon2	equ	0xFF1
  9303                           postinc0	equ	0xFEE
  9304                           fsr0h	equ	0xFEA
  9305                           fsr0l	equ	0xFE9
  9306                           wreg	equ	0xFE8
  9307                           indf1	equ	0xFE7
  9308                           fsr1h	equ	0xFE2
  9309                           fsr1l	equ	0xFE1
  9310                           indf2	equ	0xFDF
  9311                           fsr2h	equ	0xFDA
  9312                           fsr2l	equ	0xFD9
  9313                           status	equ	0xFD8
  9314                           
  9315                           	psect	temp
  9316  000035                     btemp:
  9317                           	opt stack 0
  9318  000035                     	ds	1
  9319  0000                     int$flags	set	btemp
  9320                           pclatu	equ	0xFFB
  9321                           pclath	equ	0xFFA
  9322                           tblptru	equ	0xFF8
  9323                           tblptrh	equ	0xFF7
  9324                           tblptrl	equ	0xFF6
  9325                           tablat	equ	0xFF5
  9326                           prodh	equ	0xFF4
  9327                           prodl	equ	0xFF3
  9328                           intcon	equ	0xFF2
  9329                           intcon2	equ	0xFF1
  9330                           postinc0	equ	0xFEE
  9331                           fsr0h	equ	0xFEA
  9332                           fsr0l	equ	0xFE9
  9333                           wreg	equ	0xFE8
  9334                           indf1	equ	0xFE7
  9335                           fsr1h	equ	0xFE2
  9336                           fsr1l	equ	0xFE1
  9337                           indf2	equ	0xFDF
  9338                           fsr2h	equ	0xFDA
  9339                           fsr2l	equ	0xFD9
  9340                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         65
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      52
    BANK0           160     60     122
    BANK1           256     23      23
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    update_timer1_counter_10@counter	PTR unsigned char  size(2) Largest target is 1
		 -> timer1_counter_10(BANK0[1]), 

    get_timer1_counter_interval@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_timer1_counter_speed@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_timer1_counter_down@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_timer1_counter@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_time@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    put_nums@nums	PTR unsigned char  size(2) Largest target is 6
		 -> masked_digits(BANK0[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_get_next_state
    _put_nums->_put_num
    _get_next_state->_set_time
    _set_time->_byte_write
    _byte_write->i2_send_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_get_time
    _get_timer1_counter_speed->_get_cents_reg
    _get_cents_reg->___awdiv
    _get_timer1_counter_interval->___awdiv
    _get_timer1_counter_down->_get_seconds_reg
    _get_timer1_counter->_get_seconds_reg
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   11369
                                             20 BANK1      3     3      0
                _ConfigureOscillator
                            _InitApp
                     _buzzer_disable
                           _get_time
                 _get_timer1_counter
            _get_timer1_counter_down
        _get_timer1_counter_interval
           _get_timer1_counter_speed
                  _ir_is_code_number
                     _timer1_disable
                      _timer1_enable
 ---------------------------------------------------------------------------------
 (1) _timer1_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ir_is_code_number                                    1     1      0     310
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter_speed                             3     1      2    3346
                                             12 BANK1      3     1      2
                      _get_cents_reg
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (2) _get_cents_reg                                        4     4      0    2497
                                              8 BANK1      4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter_interval                          6     2      4    4491
                                              8 BANK1      6     2      4
                            ___awdiv
                            ___awmod
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1193
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1205
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter_down                              3     1      2     939
                                              2 BANK1      3     1      2
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter                                   3     1      2     939
                                              2 BANK1      3     1      2
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (2) _get_seconds_reg                                      2     2      0     393
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             9     6      3    1304
                                             11 BANK1      9     6      3
                          _byte_read
 ---------------------------------------------------------------------------------
 (2) _byte_read                                            6     6      0     297
                                              5 BANK1      6     6      0
                         _ce_disable
                          _ce_enable
                        _io_as_input
                       _send_command
 ---------------------------------------------------------------------------------
 (3) _send_command                                         5     5      0     130
                                              0 BANK1      5     5      0
                       _io_as_output
 ---------------------------------------------------------------------------------
 (4) _io_as_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _io_as_input                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_enable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_disable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buzzer_disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            77    77      0    6866
                                             27 COMRAM    17    17      0
                                              0 BANK0     60    60      0
                     _get_next_state
                  _ir_get_human_code
                      _point_disable
                       _point_enable
                           _put_nums
                      _update_buzzer
                       _update_point
           _update_timer1_counter_10
 ---------------------------------------------------------------------------------
 (6) _update_timer1_counter_10                             4     2      2     802
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _update_point                                         3     0      3     306
                                              0 COMRAM     3     0      3
                      _point_disable
                       _point_enable
 ---------------------------------------------------------------------------------
 (7) _point_enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _point_disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _update_buzzer                                        3     0      3     306
                                              0 COMRAM     3     0      3
                      _buzzer_enable
                   i2_buzzer_disable
 ---------------------------------------------------------------------------------
 (7) i2_buzzer_disable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _buzzer_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _put_nums                                             4     2      2     536
                                              7 COMRAM     4     2      2
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (7) _put_num                                             17    17      0     348
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (7) _get_num                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ir_get_human_code                                    5     3      2     115
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _get_next_state                                      14    10      4    4345
                                             13 COMRAM    14    10      4
                           _set_time
                          i2___awdiv
                          i2___awmod
                    i2_timer1_enable
 ---------------------------------------------------------------------------------
 (7) i2_timer1_enable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _set_time                                             6     4      2    1056
                                              7 COMRAM     6     4      2
                         _byte_write
                       _get_hour_reg
                  i2_get_seconds_reg
 ---------------------------------------------------------------------------------
 (8) i2_get_seconds_reg                                    2     2      0     271
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _get_hour_reg                                         2     2      0     136
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _byte_write                                           2     1      1     362
                                              5 COMRAM     2     1      1
                       i2_ce_disable
                        i2_ce_enable
                     i2_send_command
 ---------------------------------------------------------------------------------
 (9) i2_send_command                                       5     5      0      90
                                              0 COMRAM     5     5      0
                     i2_io_as_output
 ---------------------------------------------------------------------------------
 (10) i2_io_as_output                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _buzzer_disable
   _get_time
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
   _get_timer1_counter
     _get_seconds_reg
   _get_timer1_counter_down
     _get_seconds_reg
   _get_timer1_counter_interval
     ___awdiv
     ___awmod
     _get_seconds_reg
   _get_timer1_counter_speed
     _get_cents_reg
       ___awdiv
       ___awmod
     _get_seconds_reg
   _ir_is_code_number
   _timer1_disable
   _timer1_enable

 _high_isr (ROOT)
   _get_next_state
     _set_time
       _byte_write
         i2_ce_disable
         i2_ce_enable
         i2_send_command
           i2_io_as_output
       _get_hour_reg
       i2_get_seconds_reg
     i2___awdiv
     i2___awmod
     i2_timer1_enable
   _ir_get_human_code
   _point_disable
   _point_enable
   _put_nums
     _get_num
     _put_num
   _update_buzzer
     _buzzer_enable
     i2_buzzer_disable
   _update_point
     _point_disable
     _point_enable
   _update_timer1_counter_10

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     17      17       7        9.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      7A       5       76.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      34       1       55.3%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5      11        0.0%
DATA                 0      0      C5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon May 29 01:34:05 2017

                              _update_point 1FA8                               _update_buzzer 1FF0  
                              ___awdiv@sign 0105                                 __CFG_BOR$ON 000000  
                           ??_point_disable 0001                                 _put_num$982 0005  
                               __CFG_BORV$3 000000                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000        __size_of_get_timer1_counter_interval 0200  
                               __CFG_LVP$ON 000000                              i2_send_command 1E4E  
                               __CFG_WDT$ON 000000                    _update_timer1_counter_10 12F8  
                                       l177 0924                                         l437 1CFE  
                                       l394 1B46                                __CFG_CPB$OFF 000000  
                                       _RB0 007C08                                         _RA2 007C02  
                                       _RB1 007C09                                         _RA3 007C03  
                                       _RB3 007C0B                                         _RA5 007C05  
                                       _RB4 007C0C                                         _RB5 007C0D  
                           ?_get_next_state 000E                                __CFG_CPD$OFF 000000  
                              ___awmod@sign 0105                                         prod 000FF3  
                                       wreg 000FE8                                __CFG_FOSC$HS 000000  
               __size_of_get_timer1_counter 0098                                ?_io_as_input 0001  
                               high_isr@aux 00D1                       ir_get_human_code@code 0001  
                          ?_get_seconds_reg 0001                                        l5001 1956  
                                      l5011 1986                                        l5013 198C  
                                      l5021 19BE                                        l5005 1966  
                                      l5025 19D2                                        l5017 19B0  
                                      l5009 197A                                        l5201 1E46  
                                      l5055 1B90                                        l5039 1B30  
                                      l5071 1C48                                        l5207 1E4A  
                                      l5241 11D6                                        l5305 0932  
           update_timer1_counter_10@counter 0001                                        l5171 1524  
                                      l5083 1C7E                                        l5075 1C5A  
                                      l5067 1C36                                        l5243 11E8  
                                      l5235 117E                                        l5331 09A4  
                                      l5315 0956                                        l5085 1C8A  
                                      l5245 1252                                        l5237 11A4  
                                      l5405 0AEE                                        l5333 09B6  
                                      l5325 097A                                        l5079 1C6C  
                                      l5247 127C                                        l5415 0B12  
                                      l5335 09C8                                        l5271 0896  
                                      l5177 155C                                        l5249 128E  
                                      l5425 0B36                                        l5345 09EC  
                                      l5329 0992                                        l5281 08BE  
                                      l5273 08A0                                        l5179 158A  
                                      l5443 0B88                                        l5435 0B5C  
                                      l5355 0A10                                        l5291 08F8  
                                      l5283 08D4                                        l5509 0CAA  
                                      l5461 0BDE                                        l5381 0A82  
                                      l5365 0A34                                        l5293 08FE  
                                      l5277 08AE                                        l5519 0CCE  
                                      l5439 0B72                                        l5383 0A94  
                                      l5375 0A58                                        l5465 0BFC  
                                      l5457 0BC0                                        l5385 0AA6  
                                      l5529 0CF4                                        l5395 0ACA  
                                      l5379 0A70                                        l5299 091C  
                                      l4933 1CB8                                        l5469 0C1A  
                                      l4935 1CE2                                        l5479 0C3E  
                                      l4929 1CA2                                        l5489 0C62  
                                      l4971 1826                                        l4963 17FC  
                                      l5499 0C86                                        l4981 185C  
                                      l4973 182C                                        l4957 17E6  
                                      l4969 181A                                        l4985 186A  
                                      l4989 187E                                 get_time@aux 0112  
                                      _PIE1 000F9D                       __size_ofi2_ce_disable 0006  
                                      _RBIF 007F90                                        u5750 1CE0  
                                      u5910 1B60                                        u6607 1CE6  
                                      i2l80 1076                                        u5744 1CCC  
                                      i2l73 0F2A                                        u6617 1CF0  
                                      u5745 1CC6                                        i2l91 1010  
                                      i2l85 0FAE                                        u5934 1B70  
                                      u5935 1B6A                                        u5928 1B64  
                                      u6587 1B4A                                        u6597 1B82  
                               i2_ce_enable 2158                                        _aux1 0095  
                                      _main 0860                                        _next 0088  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr2h 000FDA                                        fsr0l 000FE9  
                                      indf1 000FE7                                        indf2 000FDF  
                                      fsr1l 000FE1                                        fsr2l 000FD9  
                                      btemp 0035                                        prodh 000FF4  
                                      prodl 000FF3                                        start 000E  
                             __CFG_IESO$OFF 000000                              ??_get_hour_reg 0001  
               get_timer1_counter_down@data 0102                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000000                                high_isr@code 009C  
                           __end_of_InitApp 1D70                              ?_update_buzzer 0001  
                             ?_io_as_output 0001                      __end_ofi2_send_command 1EA8  
               ir_is_code_number@human_code 0100                               __CFG_PLLDIV$1 000000  
           __end_of_get_timer1_counter_down 1A74                             ??_get_cents_reg 0108  
                            __CFG_CCP2MX$ON 000000                                       ?_main 0001  
                              get_time@data 010B                             __end_of___awdiv 1888  
                           __end_of___awmod 19DC                                       _T0CON 000FD5  
                           ___awdiv@divisor 0102                                       _T1CON 000FCD  
                                     i2l104 10BC                                       i2l331 1EFE  
                                     i2l336 20A6                                       i2l437 1EA6  
                                     i2l447 0856                             ___awdiv@counter 0104  
                       update_point@counter 0003                               __CFG_USBDIV$1 000000  
                              i2_ce_disable 212E                         _ConfigureOscillator 215C  
                             __CFG_PWRT$OFF 000000                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                           __end_of_get_num 17CA                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                            __CFG_EBTRB$OFF 000000                                       _state 00D8  
                                     pclath 000FFA                                       tablat 000FF5  
                           __end_of_put_num 1F00                                       status 000FD8  
                        __size_ofi2___awdiv 0084                          __size_ofi2___awmod 0070  
                      ?_ConfigureOscillator 0001                            ??i2_io_as_output 0001  
                    get_timer1_counter@data 0102                             __initialization 20D4  
                             high_isr@i_166 00D6                                __end_of_main 0DD8  
                            ??_io_as_output 0100                             ?i2_send_command 0001  
                                    ??_main 0114                               __activetblptr 000002  
          __end_of_get_timer1_counter_speed 193A                                      _ADCON1 000FC1  
                          get_hour_reg@hour 0002                            ___awdiv@dividend 0100  
           get_timer1_counter_interval@data 0108                               get_time@hours 0113  
                                    i2l3121 1E5C                                      i2l4003 1FCA  
                                    i2l3125 1E6C                                      i2l4021 2012  
                                    i2l4005 1FD0                                      i2l3127 1E8C  
                                    i2l3303 1EB6                                      i2l4023 2018  
                                    i2l4111 1454                                      i2l4033 207A  
                                    i2l4121 147A                                      i2l4105 1432  
                                    i2l3331 1712                                      i2l3315 1EEA  
                                    i2l3307 1EC6                                      i2l3405 175A  
                                    i2l4037 208A                                      i2l4125 1494  
                                    i2l4117 146A                                      i2l3183 20C8  
                                    i2l3503 1BD4                                      i2l3351 1726  
                                    i2l3343 171E                                      i2l3335 1716  
                                    i2l3327 170E                                      i2l4063 136E  
                                    i2l4071 138A                                      i2l4055 1340  
                                    i2l4047 1310                                      i2l3185 20D0  
                                    i2l3505 1BDC                                      i2l4057 134C  
                                    i2l4313 0EAE                                      i2l3179 20BA  
                                    i2l3291 1F4A                                      i2l3283 1F2E  
                                    i2l3275 1F12                                      i2l3523 1C14  
                                    i2l3515 1BFC                                      i2l3507 1BE0  
                                    i2l3371 173A                                      i2l3363 1732  
                                    i2l3355 172A                                      i2l3347 1722  
                                    i2l3339 171A                                      i2l4091 13FE  
                                    i2l4083 13D0                                      i2l4075 13A0  
                                    i2l4403 10BA                                      i2l4331 0F38  
                                    i2l4307 0E84                                      i2l3293 1F52  
                                    i2l3605 1648                                      i2l4085 13DC  
                                    i2l4069 1384                                      i2l4341 0F7A  
                                    i2l4325 0F24                                      i2l4309 0E98  
                                    i2l3287 1F3C                                      i2l3279 1F20  
                                    i2l3519 1C06                                      i2l3551 1DBE  
                                    i2l3543 1D9E                                      i2l3535 1D84  
                                    i2l3391 174E                                      i2l3383 1746  
                                    i2l3375 173E                                      i2l3367 1736  
                                    i2l3359 172E                                      i2l4335 0F4E  
                                    i2l4319 0EEA                                      i2l3545 1DA6  
                                    i2l3713 0186                                      i2l3705 015E  
                                    i2l4097 1414                                      i2l4361 0FE8  
                                    i2l4345 0F88                                      i2l3491 1BAE  
                                    i2l3547 1DAA                                      i2l3555 1DC8  
                                    i2l3539 1D90                                      i2l3643 0028  
                                    i2l3571 15F0                                      i2l3395 1752  
                                    i2l3387 174A                                      i2l3379 1742  
                                    i2l4355 0FBA                                      i2l4347 0F98  
                                    i2l3901 0566                                      i2l3813 0388  
                                    i2l3805 0366                                      i2l3725 01C4  
                                    i2l3717 019E                                      i2l3653 0058  
                                    i2l3645 0032                                      i2l3581 160E  
                                    i2l3573 15F6                                      i2l3565 15DE  
                                    i2l4381 102C                                      i2l4373 1012  
                                    i2l3559 1DD6                                      i2l3743 0234  
                                    i2l3735 020C                                      i2l3655 0066  
                                    i2l3591 162C                                      i2l3583 1614  
                                    i2l3575 15FC                                      i2l3567 15E4  
                                    i2l3399 1756                                      i2l4383 1034  
                                    i2l4367 1000                                      i2l4295 0E3E  
                                    i2l3497 1BBE                                      i2l3905 0586  
                                    i2l3841 0420                                      i2l3833 03EA  
                                    i2l3825 03C2                                      i2l3761 028A  
                                    i2l3681 00E2                                      i2l3665 0096  
                                    i2l3657 0070                                      i2l3593 1632  
                                    i2l3585 161A                                      i2l3577 1602  
                                    i2l3569 15EA                                      i2l4377 101C  
                                    i2l3931 0612                                      i2l3923 05E4  
                                    i2l3851 0454                                      i2l3819 03A0  
                                    i2l3771 02BA                                      i2l3667 00A4  
                                    i2l3595 1638                                      i2l3587 1620  
                                    i2l3579 1608                                      i2l4379 1024  
                                    i2l4387 103C                                      i2l4299 0E54  
                                    i2l3925 05EE                                      i2l3765 0298  
                                    i2l3757 0276                                      i2l3749 0250  
                                    i2l3693 0124                                      i2l3677 00D4  
                                    i2l3669 00AE                                      i2l3597 163E  
                                    i2l3589 1626                                      i2l4397 1088  
                                    i2l4389 1066                                      i2l3951 0684  
                                    i2l3943 065C                                      i2l3863 0498  
                                    i2l3855 046C                                      i2l3847 043C  
                                    i2l3687 0102                                      i2l3599 1644  
                                    _INTCON 000FF2                                      i2l3873 04C4  
                                    i2l3857 0476                                      i2l3849 044A  
                                    i2l3963 0710                                      i2l3939 063A  
                                    i2l3795 0340                                      i2l3787 0318  
                                    i2l3779 02E2                                      i2l3699 0146  
                                    i2l3981 07F6                                      i2l3973 07AC  
                                    i2l3965 0714                                      i2l3893 0540  
                                    i2l3885 04FC                                      i2l3877 04D2  
                                    i2l3869 04B0                                      i2l3983 07FA  
                                    i2l3975 07B2                                      i2l3967 0756  
                                    i2l3887 0516                                      i2l3985 081C  
                                    i2l5761 16BA                                      i2l5763 16C4  
                                    i2l5755 1684                                      i2l3989 0830  
                                    i2l5765 16DA                                      i2l5757 169A  
                                    i2l5767 16E4                                      i2l5759 16AA  
                                    i2l5769 16F4                                      _TMR0IF 007F92  
                                    _TMR1IF 007CF0                                      _TRISA2 007C92  
                                    _TRISB1 007C99                                      _TRISA3 007C93  
                                    _TRISB3 007C9B                                      _TRISA5 007C95  
                                    _TRISB4 007C9C                             i2_timer1_enable 2150  
                                 ??_InitApp 0100                       ??_ConfigureOscillator 0100  
                            __CFG_XINST$OFF 000000                             ??_update_buzzer 0004  
                          __end_of_high_isr 10F8                            __end_of_get_time 15DC  
                           set_time@min_reg 000C                                   ??___awdiv 0104  
                            __CFG_STVREN$ON 000000                                   ??___awmod 0104  
                           set_time@sec_reg 000B                             set_time@minutes 0008  
                           set_time@seconds 000A                                      clear_0 20DA  
                          ___awdiv@quotient 0106                           _ir_get_human_code 15DC  
                           ___awmod@divisor 0102                           ?i2_buzzer_disable 0001  
                           ___awmod@counter 0104                                   ??_get_num 0001  
                            i2___awdiv@sign 0006                          get_seconds_reg@res 0100  
                        ?_ir_get_human_code 0001                          ??i2_buzzer_disable 0001  
                         __end_ofi2___awdiv 1C1E                            __end_of_set_time 2072  
                         __end_ofi2___awmod 1DE0                               _masked_digits 008F  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                        __end_of_get_hour_reg 20D4  
                            i2___awmod@sign 0006                            __end_of_put_nums 20A8  
                                 ??_put_num 0001                         ??_ir_get_human_code 0003  
                      __size_of_io_as_input 0004                                put_nums@nums 0008  
                                __accesstop 0060                     __end_of__initialization 20EA  
                           __CFG_PBADEN$OFF 000000                            ??_buzzer_disable 0100  
                             ___rparam_used 000001                             _current_program 008B  
                        __size_of_ce_enable 0004                  ??_update_timer1_counter_10 0003  
                            __pcstackCOMRAM 0001                   __end_of_ir_get_human_code 170A  
                          ??_get_next_state 0012                              high_isr@digits 00CB  
get_timer1_counter_interval@current_program 010B                                  _ce_disable 2128  
                     __end_of_timer1_enable 2138                     __end_ofi2_timer1_enable 2154  
                      __end_of_io_as_output 2140                                  __pbssBANK0 0060  
                              ?i2_ce_enable 0001         __end_of_get_timer1_counter_interval 12F8  
               _get_timer1_counter_interval 10F8                                  __pnvCOMRAM 0032  
             update_timer1_counter_10@state 0004                          __size_of_byte_read 008E  
         __size_of_get_timer1_counter_speed 00B2                   ?_get_timer1_counter_speed 010C  
                        get_next_state@code 0010                          get_next_state@hour 001B  
                    __size_of_buzzer_enable 0008                     __size_of_timer1_disable 0004  
                             ?_send_command 0001                                     _CCP2CON 000FBA  
                            get_time@format 010D                       __end_of_point_disable 2150  
                         _timer1_counter_10 009B            get_timer1_counter_interval@state 010A  
                __end_of_get_timer1_counter 1B0C                                     _INTCON2 000FF1  
                         __end_of_ce_enable 2148                          update_buzzer@state 0001  
                  ?_get_timer1_counter_down 0102                                     _SSPCON1 000FC6  
                                 ?_high_isr 0001                                   ?_get_time 010B  
                           __CFG_VREGEN$OFF 000000                                     _InitApp 1D00  
                  __size_of_get_seconds_reg 0072                                     __Hparam 0000  
                          ??i2_send_command 0001                                     __Lparam 0000  
                          byte_read@address 0107                                   ?_set_time 0008  
                              byte_read@res 0108                            get_time@aux_hour 0110  
                            ??_send_command 0100                                     ___awdiv 17CA  
                                   ___awmod 193A                  __size_of_ir_get_human_code 012E  
                                 ?_put_nums 0008                                  _byte_write 20F8  
                                   __pcinit 20D4                            set_time@hour_reg 000D  
                                   __ramtop 0800                                     __ptext0 0860  
                                   __ptext1 2134                                     __ptext2 2138  
                                   __ptext3 1DE0                                     __ptext4 1888  
                                   __ptext5 1F56                                     __ptext6 10F8  
                                   __ptext7 193A                                     __ptext8 17CA  
                                   __ptext9 19DC                       __size_of_get_hour_reg 002C  
                                   _get_num 170A                       __end_of_get_cents_reg 1FA8  
                                   _counter 008A                           __end_of_byte_read 1B9A  
                               ?_ce_disable 0001                                  _human_code 008E  
                          ___awmod@dividend 0100                               _buzzer_enable 2120  
                                   _put_num 1EA8                            ?i2_timer1_enable 0001  
                                ??_high_isr 001C                                  ??_get_time 010E  
                            __pintcode_body 0DD8                               ?_point_enable 0001  
                      end_of_initialization 20EA                               _buzzer_status 008D  
                             __Lmediumconst 0000                                     int_func 0DD8  
                          get_cents_reg@res 010A                           i2_get_seconds_reg 1F00  
          __end_of_update_timer1_counter_10 14AA                                  ??_set_time 000A  
                      update_buzzer@counter 0003                          ?i2_get_seconds_reg 0001  
                              _get_hour_reg 20A8                                     postinc0 000FEE  
                                ??_put_nums 000A                         ??i2_get_seconds_reg 0001  
                           byte_write@value 0006                       __size_of_io_as_output 0004  
                            ?_buzzer_enable 0001            ir_get_human_code@human_read_code 0005  
                            ??_point_enable 0001                                   i2___awdiv 1B9A  
                                 i2___awmod 1D70                 __end_of_ConfigureOscillator 215E  
                             send_command@i 0103                   __size_ofi2_buzzer_disable 0008  
                 __end_ofi2_get_seconds_reg 1F56                                  get_num@num 0001  
                      __size_ofi2_ce_enable 0004                                  main@format 0116  
                        i2___awdiv@dividend 0001                         __size_of_ce_disable 0006  
                             ?_update_point 0001                          high_isr@final_code 00D2  
                            _timer1_disable 2138                       __end_of_update_buzzer 2038  
                         ??_get_seconds_reg 0100                                _io_as_output 213C  
                            _timer1_counter 008C                                 ?_byte_write 0006  
                    get_seconds_reg@seconds 0101                     __size_ofi2_io_as_output 0004  
                       start_initialization 20D4                          i2___awdiv@quotient 0007  
                             ??_io_as_input 0100                                  ?i2___awdiv 0001  
                                ?i2___awmod 0001                        __end_of_send_command 1D00  
                     i2send_command@command 0003                             get_hour_reg@res 0001  
                    __end_of_timer1_disable 213C                                  byte_read@i 0109  
                            ??_update_point 0004                            __CFG_LPT1OSC$OFF 000000  
                               put_num@mask 0004                        i2get_seconds_reg@res 0001  
                           ??_buzzer_enable 0001                               ?i2_ce_disable 0001  
                               __pbssCOMRAM 002D                               __pcstackBANK0 009C  
                             __pcstackBANK1 0100           __size_of_update_timer1_counter_10 01B2  
                 ?_update_timer1_counter_10 0001                                   _ce_enable 2144  
                       __size_of_byte_write 0018                           __size_of_high_isr 10F0  
                       __end_of_io_as_input 2144                          _get_timer1_counter 1A74  
                         __size_of_get_time 0132                  __size_ofi2_get_seconds_reg 0056  
                                  ?_InitApp 0001                                   __pnvBANK0 00D8  
                              _current_type 0032                             ?_timer1_disable 0001  
          __size_of_get_timer1_counter_down 0098                         ?_get_timer1_counter 0102  
                                 __pintcode 0008                      __size_of_timer1_enable 0004  
                                  ?___awdiv 0100                                    ?___awmod 0100  
                      __end_of_point_enable 214C                           __size_of_set_time 003A  
                   __size_of_buzzer_disable 0008                         get_next_state@state 000E  
                                  ?_get_num 0001                           __size_of_put_nums 0036  
                            ??i2_ce_disable 0001                                ??_ce_disable 0100  
                   __size_of_get_next_state 084E                        ??_get_timer1_counter 0104  
                                 _byte_read 1B0C                       get_next_state@minutes 001A  
                     get_next_state@seconds 0019                                    ?_put_num 0001  
                               ??i2___awdiv 0005                                 ??i2___awmod 0005  
                           get_time@minutes 0111                             get_time@seconds 010F  
                                ?_ce_enable 0001                            i2_buzzer_disable 2118  
                                 _intervals 0060                          _timer1_counter_min 0031  
                  _get_timer1_counter_speed 1888                      __size_of_point_disable 0004  
                                  i2u320_45 1EF2                                    i2u320_46 1EF4  
                                  i2u317_44 1EDA                                    i2u317_45 1ED6  
                                  i2u514_44 0ED2                                    i2u514_45 0ECC  
                                  i2u516_40 0EF8                                    i2u447_41 0690  
                                  i2u288_44 1E7C                                    i2u288_45 1E78  
                                  i2u289_40 1E8A                          __end_of_ce_disable 212E  
                                  i2u662_47 0E28                                    i2u663_47 0E72  
                                  i2u664_47 1E90                                    i2u665_47 1E9A  
                          __CFG_WDTPS$32768 000000                              i2_io_as_output 2154  
                                 high_isr@i 00D4                       __size_of_send_command 0070  
                         i2___awdiv@divisor 0003                           i2___awdiv@counter 0005  
                         _ir_is_code_number 1DE0                               _timer1_enable 2134  
                               _io_as_input 2140                                  ?_byte_read 0001  
                      __end_of_update_point 1FF0                          ?_ir_is_code_number 0001  
                         update_point@state 0001                          i2___awmod@dividend 0001  
                       send_command@command 0102                             _get_seconds_reg 1C1E  
                       ??_ir_is_code_number 0100                    __size_ofi2_timer1_enable 0004  
                    __size_of_get_cents_reg 0052                            __size_of_InitApp 0070  
                                  __Hrparam 0000                                    __Lrparam 0000  
                                put_num@num 0003                                _send_command 1C90  
                              ??_byte_write 0007                            __size_of___awdiv 00BE  
                          __size_of___awmod 00A2                      __end_ofi2_io_as_output 2158  
              get_timer1_counter_speed@data 010C                     __size_ofi2_send_command 005A  
                 __end_of_ir_is_code_number 1E4E                               _point_disable 214C  
                          __size_of_get_num 00C0                          get_cents_reg@cents 010B  
                               _max_program 002D                              ?_timer1_enable 0001  
                                  __ptext10 1A74                                    __ptext11 1C1E  
                                  __ptext20 1D00                                    __ptext12 14AA  
                                  __ptext21 215C                                    __ptext13 1B0C  
                                  __ptext30 2072                                    __ptext14 1C90  
                                  __ptext31 1EA8                                    __ptext23 12F8  
                                  __ptext15 213C                                    __ptext40 20A8  
                                  __ptext32 170A                                    __ptext24 1FA8  
                                  __ptext16 2140                                    __ptext41 20F8  
                                  __ptext33 15DC                                    __ptext25 2148  
                                  __ptext17 2144                                    __ptext42 1E4E  
                                  __ptext34 0012                                    __ptext26 214C  
                                  __ptext18 2128                                    __ptext43 2154  
                                  __ptext35 2150                                    __ptext27 1FF0  
                                  __ptext19 2110                                    __ptext44 2158  
                                  __ptext36 1D70                                    __ptext28 2118  
                                  __ptext45 212E                                    __ptext37 1B9A  
                                  __ptext29 2120                                    __ptext38 2038  
                                  __ptext39 1F00                                    _high_isr 0008  
                                  _get_time 14AA                            __size_of_put_num 0058  
                             ??i2_ce_enable 0001                                 ??_ce_enable 0100  
              ?_get_timer1_counter_interval 0108                               __size_of_main 0578  
                        __end_of_byte_write 2110                         _timer1_up_limit_min 0033  
                       _timer1_up_limit_sec 0034                        __end_ofi2_ce_disable 2134  
                   _get_timer1_counter_down 19DC                __size_of_ConfigureOscillator 0002  
                     __size_of_point_enable 0004                                    _set_time 2038  
                                  int$flags 0035                              _buzzer_disable 2110  
                                  _put_nums 2072                             ?i2_io_as_output 0001  
                     __CFG_CPUDIV$OSC1_PLL2 000000                              ?_point_disable 0001  
                        _timer1_speed_cents 002E                           i2___awmod@divisor 0003  
                         i2___awmod@counter 0005                               _get_cents_reg 1F56  
                                _INTCONbits 000FF2                              _get_next_state 0012  
                      _timer1_down_init_min 0030                        _timer1_down_init_sec 002F  
                              set_time@hour 0009                     __end_of_get_seconds_reg 1C90  
                               ??_byte_read 0105                                   put_nums@i 000A  
                                  intlevel2 0000                                _point_enable 2148  
                    __size_of_update_buzzer 0048                            ??_timer1_disable 0100  
             ??_get_timer1_counter_interval 010C                         __end_ofi2_ce_enable 215C  
                           i2send_command@i 0004                           byte_write@address 0007  
                    __end_of_buzzer_disable 2118                    i2get_seconds_reg@seconds 0002  
                         ??i2_timer1_enable 0001                    __end_ofi2_buzzer_disable 2120  
                                  put_num@i 0006                      __end_of_get_next_state 0860  
                            ?_get_cents_reg 0001                  __size_of_ir_is_code_number 006E  
                     __size_of_update_point 0048                             ??_timer1_enable 0100  
                     __end_of_buzzer_enable 2128                  ??_get_timer1_counter_speed 010E  
                 ??_get_timer1_counter_down 0104                               ?_get_hour_reg 0001  
                           ?_buzzer_disable 0001  
