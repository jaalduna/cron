

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun May 21 14:31:31 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.42
    38                           ; Generated 13/04/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F2550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	nvCOMRAM
    73  00004B                     __pnvCOMRAM:
    74                           	opt stack 0
    75  00004B                     _state:
    76                           	opt stack 0
    77  00004B                     	ds	2
    78  0000                     _RA3	set	31747
    79  0000                     _RA2	set	31746
    80  0000                     _RA5	set	31749
    81  0000                     _RB0	set	31752
    82  0000                     _RB1	set	31753
    83  0000                     _RB4	set	31756
    84  0000                     _RB3	set	31755
    85  0000                     _TRISA3	set	31891
    86  0000                     _TRISA5	set	31893
    87  0000                     _TRISA2	set	31890
    88  0000                     _TRISB1	set	31897
    89  0000                     _TRISB4	set	31900
    90  0000                     _TRISB3	set	31899
    91  0000                     _RB5	set	31757
    92  0000                     _ADCON1	set	4033
    93  0000                     _SSPCON1	set	4038
    94  0000                     _CCP2CON	set	4026
    95  0000                     _INTCON	set	4082
    96  0000                     _INTCONbits	set	4082
    97  0000                     _RBIF	set	32656
    98                           
    99                           ; #config settings
   100  0000                     
   101                           	psect	cinit
   102  000AD8                     __pcinit:
   103                           	opt stack 0
   104  000AD8                     start_initialization:
   105                           	opt stack 0
   106  000AD8                     __initialization:
   107                           	opt stack 0
   108                           
   109                           ; Clear objects allocated to BANK0 (3 bytes)
   110  000AD8  0100               	movlb	0
   111  000ADA  6B8C               	clrf	(__pbssBANK0+2)& (0+255),b
   112  000ADC  6B8B               	clrf	(__pbssBANK0+1)& (0+255),b
   113  000ADE  6B8A               	clrf	__pbssBANK0& (0+255),b
   114  000AE0                     end_of_initialization:
   115                           	opt stack 0
   116  000AE0                     __end_of__initialization:
   117                           	opt stack 0
   118  000AE0  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   119  000AE2  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   120  000AE4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   121  000AE6  6EF8               	movwf	tblptru,c
   122  000AE8  0100               	movlb	0
   123  000AEA  EF55  F000         	goto	_main	;jump to C main() function
   124                           tblptru	equ	0xFF8
   125                           
   126                           	psect	bssBANK0
   127  00008A                     __pbssBANK0:
   128                           	opt stack 0
   129  00008A                     _next:
   130                           	opt stack 0
   131  00008A                     	ds	2
   132  00008C                     _human_code:
   133                           	opt stack 0
   134  00008C                     	ds	1
   135                           tblptru	equ	0xFF8
   136                           
   137                           	psect	cstackBANK0
   138  000060                     __pcstackBANK0:
   139                           	opt stack 0
   140  000060                     ??_low_isr:
   141                           
   142                           ; 1 bytes @ 0x0
   143  000060                     	ds	17
   144  000071                     ??_send_command:
   145  000071                     ??_put_num:
   146  000071                     get_num@num:
   147                           	opt stack 0
   148  000071                     ir_is_code_number@human_code:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0x11
   152  000071                     	ds	2
   153  000073                     put_num@num:
   154                           	opt stack 0
   155  000073                     send_command@command:
   156                           	opt stack 0
   157                           
   158                           ; 1 bytes @ 0x13
   159  000073                     	ds	1
   160  000074                     put_num@mask:
   161                           	opt stack 0
   162  000074                     send_command@i:
   163                           	opt stack 0
   164                           
   165                           ; 2 bytes @ 0x14
   166  000074                     	ds	1
   167  000075                     _put_num$849:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x15
   171  000075                     	ds	1
   172  000076                     ??_byte_read:
   173  000076                     put_num@i:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x16
   177  000076                     	ds	2
   178  000078                     put_nums_individual@num4:
   179                           	opt stack 0
   180  000078                     byte_read@address:
   181                           	opt stack 0
   182  000078                     put_nums@nums:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x18
   186  000078                     	ds	1
   187  000079                     put_nums_individual@num3:
   188                           	opt stack 0
   189  000079                     byte_read@res:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0x19
   193  000079                     	ds	1
   194  00007A                     put_nums_individual@num2:
   195                           	opt stack 0
   196  00007A                     put_nums@i:
   197                           	opt stack 0
   198  00007A                     byte_read@i:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x1A
   202  00007A                     	ds	1
   203  00007B                     put_nums_individual@num1:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x1B
   207  00007B                     	ds	1
   208  00007C                     put_nums_individual@num0:
   209                           	opt stack 0
   210  00007C                     get_time@data:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x1C
   214  00007C                     	ds	1
   215  00007D                     put_nums_individual@num5:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0x1D
   219  00007D                     	ds	1
   220  00007E                     get_time@seconds:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x1E
   224  00007E                     	ds	1
   225  00007F                     get_time@minutes:
   226                           	opt stack 0
   227                           
   228                           ; 1 bytes @ 0x1F
   229  00007F                     	ds	1
   230  000080                     get_time@hours:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0x20
   234  000080                     	ds	1
   235  000081                     get_time@aux:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x21
   239  000081                     	ds	1
   240  000082                     ??_main:
   241                           
   242                           ; 1 bytes @ 0x22
   243  000082                     	ds	2
   244  000084                     main@aux1:
   245                           	opt stack 0
   246                           
   247                           ; 6 bytes @ 0x24
   248  000084                     	ds	6
   249                           tblptru	equ	0xFF8
   250                           
   251                           	psect	cstackCOMRAM
   252  000001                     __pcstackCOMRAM:
   253                           	opt stack 0
   254  000001                     ?_get_next_state:
   255  000001                     get_next_state@state:
   256                           	opt stack 0
   257  000001                     ir_get_human_code@code:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x0
   261  000001                     	ds	2
   262  000003                     ??_ir_get_human_code:
   263  000003                     get_next_state@code:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x2
   267  000003                     	ds	2
   268  000005                     ir_get_human_code@human_read_code:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x4
   272  000005                     	ds	1
   273  000006                     ??_high_isr:
   274                           
   275                           ; 1 bytes @ 0x5
   276  000006                     	ds	17
   277  000017                     high_isr@code:
   278                           	opt stack 0
   279                           
   280                           ; 47 bytes @ 0x16
   281  000017                     	ds	47
   282  000046                     high_isr@aux:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0x45
   286  000046                     	ds	1
   287  000047                     high_isr@final_code:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x46
   291  000047                     	ds	2
   292  000049                     high_isr@i:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x48
   296  000049                     	ds	2
   297                           tblptru	equ	0xFF8
   298                           
   299 ;;
   300 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   301 ;;
   302 ;; *************** function _main *****************
   303 ;; Defined at:
   304 ;;		line 37 in file "main.c"
   305 ;; Parameters:    Size  Location     Type
   306 ;;		None
   307 ;; Auto vars:     Size  Location     Type
   308 ;;  aux1            6   36[BANK0 ] unsigned char [6]
   309 ;;  temp            1    0        unsigned char 
   310 ;; Return value:  Size  Location     Type
   311 ;;                  1    wreg      void 
   312 ;; Registers used:
   313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : 0/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   319 ;;      Params:         0       0       0       0       0       0       0       0       0
   320 ;;      Locals:         0       6       0       0       0       0       0       0       0
   321 ;;      Temps:          0       2       0       0       0       0       0       0       0
   322 ;;      Totals:         0       8       0       0       0       0       0       0       0
   323 ;;Total ram usage:        8 bytes
   324 ;; Hardware stack levels required when called:    7
   325 ;; This function calls:
   326 ;;		_ConfigureOscillator
   327 ;;		_InitApp
   328 ;;		_get_time
   329 ;;		_ir_is_code_number
   330 ;;		_point_toggle
   331 ;;		_put_nums
   332 ;;		_put_nums_individual
   333 ;; This function is called by:
   334 ;;		Startup code after reset
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338                           	psect	text0
   339  0000AA                     __ptext0:
   340                           	opt stack 0
   341  0000AA                     _main:
   342                           	opt stack 24
   343                           
   344                           ;main.c: 40: ConfigureOscillator();
   345                           
   346                           ;incstack = 0
   347  0000AA  EC8C  F005         	call	_ConfigureOscillator	;wreg free
   348                           
   349                           ;main.c: 43: InitApp();
   350  0000AE  EC54  F005         	call	_InitApp	;wreg free
   351                           
   352                           ;main.c: 47: char aux1[6];
   353                           ;main.c: 48: aux1[0] = 1;
   354  0000B2  0E01               	movlw	1
   355  0000B4  0100               	movlb	0	; () banked
   356  0000B6  6F84               	movwf	main@aux1& (0+255),b
   357                           
   358                           ;main.c: 49: aux1[1] = 2;
   359  0000B8  0E02               	movlw	2
   360  0000BA  0100               	movlb	0	; () banked
   361  0000BC  6F85               	movwf	(main@aux1+1)& (0+255),b
   362                           
   363                           ;main.c: 50: aux1[2] = 3;
   364  0000BE  0E03               	movlw	3
   365  0000C0  0100               	movlb	0	; () banked
   366  0000C2  6F86               	movwf	(main@aux1+2)& (0+255),b
   367                           
   368                           ;main.c: 51: aux1[3] = 4;
   369  0000C4  0E04               	movlw	4
   370  0000C6  0100               	movlb	0	; () banked
   371  0000C8  6F87               	movwf	(main@aux1+3)& (0+255),b
   372                           
   373                           ;main.c: 52: aux1[4] = 5;
   374  0000CA  0E05               	movlw	5
   375  0000CC  0100               	movlb	0	; () banked
   376  0000CE  6F88               	movwf	(main@aux1+4)& (0+255),b
   377                           
   378                           ;main.c: 53: aux1[5] = 6;
   379  0000D0  0E06               	movlw	6
   380  0000D2  0100               	movlb	0	; () banked
   381  0000D4  6F89               	movwf	(main@aux1+5)& (0+255),b
   382  0000D6                     l2127:
   383                           
   384                           ;main.c: 58: {
   385                           ;main.c: 59: state = next;
   386  0000D6  C08A  F04B         	movff	_next,_state
   387  0000DA  C08B  F04C         	movff	_next+1,_state+1
   388                           
   389                           ;main.c: 61: switch(state){
   390  0000DE  D110               	goto	l2179
   391  0000E0                     l2129:
   392                           
   393                           ;main.c: 63: get_time(aux1);
   394  0000E0  0E84               	movlw	low main@aux1
   395  0000E2  0100               	movlb	0	; () banked
   396  0000E4  6F7C               	movwf	get_time@data& (0+255),b
   397  0000E6  0E00               	movlw	high main@aux1
   398  0000E8  0100               	movlb	0	; () banked
   399  0000EA  6F7D               	movwf	(get_time@data+1)& (0+255),b
   400  0000EC  EC65  F003         	call	_get_time	;wreg free
   401                           
   402                           ;main.c: 64: put_nums(aux1);
   403  0000F0  0E84               	movlw	low main@aux1
   404  0000F2  0100               	movlb	0	; () banked
   405  0000F4  6F78               	movwf	put_nums@nums& (0+255),b
   406  0000F6  0E00               	movlw	high main@aux1
   407  0000F8  0100               	movlb	0	; () banked
   408  0000FA  6F79               	movwf	(put_nums@nums+1)& (0+255),b
   409  0000FC  EC30  F005         	call	_put_nums	;wreg free
   410                           
   411                           ;main.c: 65: _delay((unsigned long)((500)*(20000000L/4000.0)));
   412  000100  0E0D               	movlw	13
   413  000102  0100               	movlb	0	; () banked
   414  000104  6F83               	movwf	(??_main+1)& (0+255),b
   415  000106  0EAF               	movlw	175
   416  000108  0100               	movlb	0	; () banked
   417  00010A  6F82               	movwf	??_main& (0+255),b
   418  00010C  0EB6               	movlw	182
   419  00010E                     u1157:
   420  00010E  2EE8               	decfsz	wreg,f,c
   421  000110  D7FE               	bra	u1157
   422  000112  2F82               	decfsz	??_main& (0+255),f,b
   423  000114  D7FC               	bra	u1157
   424  000116  2F83               	decfsz	(??_main+1)& (0+255),f,b
   425  000118  D7FA               	bra	u1157
   426  00011A  F000               	nop	
   427                           
   428                           ;main.c: 66: point_toggle();
   429  00011C  EC77  F005         	call	_point_toggle	;wreg free
   430                           
   431                           ;main.c: 68: _delay((unsigned long)((500)*(20000000L/4000.0)));
   432  000120  0E0D               	movlw	13
   433  000122  0100               	movlb	0	; () banked
   434  000124  6F83               	movwf	(??_main+1)& (0+255),b
   435  000126  0EAF               	movlw	175
   436  000128  0100               	movlb	0	; () banked
   437  00012A  6F82               	movwf	??_main& (0+255),b
   438  00012C  0EB6               	movlw	182
   439  00012E                     u1167:
   440  00012E  2EE8               	decfsz	wreg,f,c
   441  000130  D7FE               	bra	u1167
   442  000132  2F82               	decfsz	??_main& (0+255),f,b
   443  000134  D7FC               	bra	u1167
   444  000136  2F83               	decfsz	(??_main+1)& (0+255),f,b
   445  000138  D7FA               	bra	u1167
   446  00013A  F000               	nop	
   447                           
   448                           ;main.c: 69: point_toggle();
   449  00013C  EC77  F005         	call	_point_toggle	;wreg free
   450                           
   451                           ;main.c: 70: break;
   452  000140  D7CA               	goto	l2127
   453  000142                     l2139:
   454                           
   455                           ;main.c: 74: if(ir_is_code_number(human_code) && human_code <=2)
   456  000142  0100               	movlb	0	; () banked
   457  000144  518C               	movf	_human_code& (0+255),w,b
   458  000146  ECD2  F004         	call	_ir_is_code_number
   459  00014A  0900               	iorlw	0
   460  00014C  B4D8               	btfsc	status,2,c
   461  00014E  D006               	goto	l2145
   462  000150  0E03               	movlw	3
   463  000152  0100               	movlb	0	; () banked
   464  000154  618C               	cpfslt	_human_code& (0+255),b
   465  000156  D002               	goto	l2145
   466                           
   467                           ; BSR set to: 0
   468                           ;main.c: 75: aux1[3] = human_code;
   469  000158  C08C  F087         	movff	_human_code,main@aux1+3
   470  00015C                     l2145:
   471                           
   472                           ;main.c: 76: next = 2;
   473  00015C  0E00               	movlw	0
   474  00015E  0100               	movlb	0	; () banked
   475  000160  6F8B               	movwf	(_next+1)& (0+255),b
   476  000162  0E02               	movlw	2
   477  000164  6F8A               	movwf	_next& (0+255),b
   478                           
   479                           ; BSR set to: 0
   480                           ;main.c: 78: put_nums(aux1);
   481  000166  0E84               	movlw	low main@aux1
   482  000168  0100               	movlb	0	; () banked
   483  00016A  6F78               	movwf	put_nums@nums& (0+255),b
   484  00016C  0E00               	movlw	high main@aux1
   485  00016E  0100               	movlb	0	; () banked
   486  000170  6F79               	movwf	(put_nums@nums+1)& (0+255),b
   487  000172  EC30  F005         	call	_put_nums	;wreg free
   488                           
   489                           ;main.c: 79: _delay((unsigned long)((500)*(20000000L/4000.0)));
   490  000176  0E0D               	movlw	13
   491  000178  0100               	movlb	0	; () banked
   492  00017A  6F83               	movwf	(??_main+1)& (0+255),b
   493  00017C  0EAF               	movlw	175
   494  00017E  0100               	movlb	0	; () banked
   495  000180  6F82               	movwf	??_main& (0+255),b
   496  000182  0EB6               	movlw	182
   497  000184                     u1177:
   498  000184  2EE8               	decfsz	wreg,f,c
   499  000186  D7FE               	bra	u1177
   500  000188  2F82               	decfsz	??_main& (0+255),f,b
   501  00018A  D7FC               	bra	u1177
   502  00018C  2F83               	decfsz	(??_main+1)& (0+255),f,b
   503  00018E  D7FA               	bra	u1177
   504  000190  F000               	nop	
   505                           
   506                           ;main.c: 80: put_nums_individual(aux1[5], aux1[4], 'V',aux1[2],aux1[1],aux1[0]);
   507  000192  C088  F078         	movff	main@aux1+4,put_nums_individual@num4
   508  000196  0E56               	movlw	86
   509  000198  0100               	movlb	0	; () banked
   510  00019A  6F79               	movwf	put_nums_individual@num3& (0+255),b
   511  00019C  C086  F07A         	movff	main@aux1+2,put_nums_individual@num2
   512  0001A0  C085  F07B         	movff	main@aux1+1,put_nums_individual@num1
   513  0001A4  C084  F07C         	movff	main@aux1,put_nums_individual@num0
   514  0001A8  0100               	movlb	0	; () banked
   515  0001AA  5189               	movf	(main@aux1+5)& (0+255),w,b
   516  0001AC  EC09  F005         	call	_put_nums_individual
   517                           
   518                           ;main.c: 81: _delay((unsigned long)((500)*(20000000L/4000.0)));
   519  0001B0  0E0D               	movlw	13
   520  0001B2  0100               	movlb	0	; () banked
   521  0001B4  6F83               	movwf	(??_main+1)& (0+255),b
   522  0001B6  0EAF               	movlw	175
   523  0001B8  0100               	movlb	0	; () banked
   524  0001BA  6F82               	movwf	??_main& (0+255),b
   525  0001BC  0EB6               	movlw	182
   526  0001BE                     u1187:
   527  0001BE  2EE8               	decfsz	wreg,f,c
   528  0001C0  D7FE               	bra	u1187
   529  0001C2  2F82               	decfsz	??_main& (0+255),f,b
   530  0001C4  D7FC               	bra	u1187
   531  0001C6  2F83               	decfsz	(??_main+1)& (0+255),f,b
   532  0001C8  D7FA               	bra	u1187
   533  0001CA  D098               	goto	L3
   534  0001CC                     l2155:
   535                           
   536                           ;main.c: 84: put_nums(aux1);
   537  0001CC  0E84               	movlw	low main@aux1
   538  0001CE  0100               	movlb	0	; () banked
   539  0001D0  6F78               	movwf	put_nums@nums& (0+255),b
   540  0001D2  0E00               	movlw	high main@aux1
   541  0001D4  0100               	movlb	0	; () banked
   542  0001D6  6F79               	movwf	(put_nums@nums+1)& (0+255),b
   543  0001D8  EC30  F005         	call	_put_nums	;wreg free
   544                           
   545                           ;main.c: 85: _delay((unsigned long)((500)*(20000000L/4000.0)));
   546  0001DC  0E0D               	movlw	13
   547  0001DE  0100               	movlb	0	; () banked
   548  0001E0  6F83               	movwf	(??_main+1)& (0+255),b
   549  0001E2  0EAF               	movlw	175
   550  0001E4  0100               	movlb	0	; () banked
   551  0001E6  6F82               	movwf	??_main& (0+255),b
   552  0001E8  0EB6               	movlw	182
   553  0001EA                     u1197:
   554  0001EA  2EE8               	decfsz	wreg,f,c
   555  0001EC  D7FE               	bra	u1197
   556  0001EE  2F82               	decfsz	??_main& (0+255),f,b
   557  0001F0  D7FC               	bra	u1197
   558  0001F2  2F83               	decfsz	(??_main+1)& (0+255),f,b
   559  0001F4  D7FA               	bra	u1197
   560  0001F6  F000               	nop	
   561                           
   562                           ;main.c: 86: put_nums_individual(aux1[5], aux1[4], aux1[3],'V',aux1[1],aux1[0]);
   563  0001F8  C088  F078         	movff	main@aux1+4,put_nums_individual@num4
   564  0001FC  C087  F079         	movff	main@aux1+3,put_nums_individual@num3
   565  000200  0E56               	movlw	86
   566  000202  0100               	movlb	0	; () banked
   567  000204  6F7A               	movwf	put_nums_individual@num2& (0+255),b
   568  000206  C085  F07B         	movff	main@aux1+1,put_nums_individual@num1
   569  00020A  C084  F07C         	movff	main@aux1,put_nums_individual@num0
   570  00020E  0100               	movlb	0	; () banked
   571  000210  5189               	movf	(main@aux1+5)& (0+255),w,b
   572  000212  EC09  F005         	call	_put_nums_individual
   573                           
   574                           ;main.c: 87: _delay((unsigned long)((500)*(20000000L/4000.0)));
   575  000216  0E0D               	movlw	13
   576  000218  0100               	movlb	0	; () banked
   577  00021A  6F83               	movwf	(??_main+1)& (0+255),b
   578  00021C  0EAF               	movlw	175
   579  00021E  0100               	movlb	0	; () banked
   580  000220  6F82               	movwf	??_main& (0+255),b
   581  000222  0EB6               	movlw	182
   582  000224                     u1207:
   583  000224  2EE8               	decfsz	wreg,f,c
   584  000226  D7FE               	bra	u1207
   585  000228  2F82               	decfsz	??_main& (0+255),f,b
   586  00022A  D7FC               	bra	u1207
   587  00022C  2F83               	decfsz	(??_main+1)& (0+255),f,b
   588  00022E  D7FA               	bra	u1207
   589  000230  D065               	goto	L3
   590  000232                     l2163:
   591                           
   592                           ;main.c: 90: put_nums(aux1);
   593  000232  0E84               	movlw	low main@aux1
   594  000234  0100               	movlb	0	; () banked
   595  000236  6F78               	movwf	put_nums@nums& (0+255),b
   596  000238  0E00               	movlw	high main@aux1
   597  00023A  0100               	movlb	0	; () banked
   598  00023C  6F79               	movwf	(put_nums@nums+1)& (0+255),b
   599  00023E  EC30  F005         	call	_put_nums	;wreg free
   600                           
   601                           ;main.c: 91: _delay((unsigned long)((500)*(20000000L/4000.0)));
   602  000242  0E0D               	movlw	13
   603  000244  0100               	movlb	0	; () banked
   604  000246  6F83               	movwf	(??_main+1)& (0+255),b
   605  000248  0EAF               	movlw	175
   606  00024A  0100               	movlb	0	; () banked
   607  00024C  6F82               	movwf	??_main& (0+255),b
   608  00024E  0EB6               	movlw	182
   609  000250                     u1217:
   610  000250  2EE8               	decfsz	wreg,f,c
   611  000252  D7FE               	bra	u1217
   612  000254  2F82               	decfsz	??_main& (0+255),f,b
   613  000256  D7FC               	bra	u1217
   614  000258  2F83               	decfsz	(??_main+1)& (0+255),f,b
   615  00025A  D7FA               	bra	u1217
   616  00025C  F000               	nop	
   617                           
   618                           ;main.c: 92: put_nums_individual(aux1[5], aux1[4], aux1[3],aux1[2],'V',aux1[0]);
   619  00025E  C088  F078         	movff	main@aux1+4,put_nums_individual@num4
   620  000262  C087  F079         	movff	main@aux1+3,put_nums_individual@num3
   621  000266  C086  F07A         	movff	main@aux1+2,put_nums_individual@num2
   622  00026A  0E56               	movlw	86
   623  00026C  0100               	movlb	0	; () banked
   624  00026E  6F7B               	movwf	put_nums_individual@num1& (0+255),b
   625  000270  C084  F07C         	movff	main@aux1,put_nums_individual@num0
   626  000274  0100               	movlb	0	; () banked
   627  000276  5189               	movf	(main@aux1+5)& (0+255),w,b
   628  000278  EC09  F005         	call	_put_nums_individual
   629                           
   630                           ;main.c: 93: _delay((unsigned long)((500)*(20000000L/4000.0)));
   631  00027C  0E0D               	movlw	13
   632  00027E  0100               	movlb	0	; () banked
   633  000280  6F83               	movwf	(??_main+1)& (0+255),b
   634  000282  0EAF               	movlw	175
   635  000284  0100               	movlb	0	; () banked
   636  000286  6F82               	movwf	??_main& (0+255),b
   637  000288  0EB6               	movlw	182
   638  00028A                     u1227:
   639  00028A  2EE8               	decfsz	wreg,f,c
   640  00028C  D7FE               	bra	u1227
   641  00028E  2F82               	decfsz	??_main& (0+255),f,b
   642  000290  D7FC               	bra	u1227
   643  000292  2F83               	decfsz	(??_main+1)& (0+255),f,b
   644  000294  D7FA               	bra	u1227
   645  000296  D032               	goto	L3
   646  000298                     l2171:
   647                           
   648                           ;main.c: 96: put_nums(aux1);
   649  000298  0E84               	movlw	low main@aux1
   650  00029A  0100               	movlb	0	; () banked
   651  00029C  6F78               	movwf	put_nums@nums& (0+255),b
   652  00029E  0E00               	movlw	high main@aux1
   653  0002A0  0100               	movlb	0	; () banked
   654  0002A2  6F79               	movwf	(put_nums@nums+1)& (0+255),b
   655  0002A4  EC30  F005         	call	_put_nums	;wreg free
   656                           
   657                           ;main.c: 97: _delay((unsigned long)((500)*(20000000L/4000.0)));
   658  0002A8  0E0D               	movlw	13
   659  0002AA  0100               	movlb	0	; () banked
   660  0002AC  6F83               	movwf	(??_main+1)& (0+255),b
   661  0002AE  0EAF               	movlw	175
   662  0002B0  0100               	movlb	0	; () banked
   663  0002B2  6F82               	movwf	??_main& (0+255),b
   664  0002B4  0EB6               	movlw	182
   665  0002B6                     u1237:
   666  0002B6  2EE8               	decfsz	wreg,f,c
   667  0002B8  D7FE               	bra	u1237
   668  0002BA  2F82               	decfsz	??_main& (0+255),f,b
   669  0002BC  D7FC               	bra	u1237
   670  0002BE  2F83               	decfsz	(??_main+1)& (0+255),f,b
   671  0002C0  D7FA               	bra	u1237
   672  0002C2  F000               	nop	
   673                           
   674                           ;main.c: 98: put_nums_individual(aux1[5], aux1[4], aux1[3],aux1[2],aux1[1],'V');
   675  0002C4  C088  F078         	movff	main@aux1+4,put_nums_individual@num4
   676  0002C8  C087  F079         	movff	main@aux1+3,put_nums_individual@num3
   677  0002CC  C086  F07A         	movff	main@aux1+2,put_nums_individual@num2
   678  0002D0  C085  F07B         	movff	main@aux1+1,put_nums_individual@num1
   679  0002D4  0E56               	movlw	86
   680  0002D6  0100               	movlb	0	; () banked
   681  0002D8  6F7C               	movwf	put_nums_individual@num0& (0+255),b
   682  0002DA  0100               	movlb	0	; () banked
   683  0002DC  5189               	movf	(main@aux1+5)& (0+255),w,b
   684  0002DE  EC09  F005         	call	_put_nums_individual
   685                           
   686                           ;main.c: 99: _delay((unsigned long)((500)*(20000000L/4000.0)));
   687  0002E2  0E0D               	movlw	13
   688  0002E4  0100               	movlb	0	; () banked
   689  0002E6  6F83               	movwf	(??_main+1)& (0+255),b
   690  0002E8  0EAF               	movlw	175
   691  0002EA  0100               	movlb	0	; () banked
   692  0002EC  6F82               	movwf	??_main& (0+255),b
   693  0002EE  0EB6               	movlw	182
   694  0002F0                     u1247:
   695  0002F0  2EE8               	decfsz	wreg,f,c
   696  0002F2  D7FE               	bra	u1247
   697  0002F4  2F82               	decfsz	??_main& (0+255),f,b
   698  0002F6  D7FC               	bra	u1247
   699  0002F8  2F83               	decfsz	(??_main+1)& (0+255),f,b
   700  0002FA  D7FA               	bra	u1247
   701  0002FC                     L3:
   702  0002FC  F000               	nop	
   703                           
   704                           ;main.c: 103: }
   705                           
   706                           ;main.c: 101: default: ;
   707                           
   708                           ;main.c: 100: break;
   709  0002FE  D6EB               	goto	l2127
   710  000300                     l2179:
   711  000300  C04B  F082         	movff	_state,??_main
   712  000304  C04C  F083         	movff	_state+1,??_main+1
   713                           
   714                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   715                           ; Switch size 1, requested type "space"
   716                           ; Number of cases is 1, Range of values is 0 to 0
   717                           ; switch strategies available:
   718                           ; Name         Instructions Cycles
   719                           ; simple_byte            4     3 (average)
   720                           ;	Chosen strategy is simple_byte
   721  000308  0100               	movlb	0	; () banked
   722  00030A  5183               	movf	(??_main+1)& (0+255),w,b
   723  00030C  0A00               	xorlw	0	; case 0
   724  00030E  A4D8               	btfss	status,2,c
   725  000310  D6E2               	goto	l2127
   726                           
   727                           ; BSR set to: 0
   728                           ; Switch size 1, requested type "space"
   729                           ; Number of cases is 5, Range of values is 0 to 4
   730                           ; switch strategies available:
   731                           ; Name         Instructions Cycles
   732                           ; simple_byte           16     9 (average)
   733                           ;	Chosen strategy is simple_byte
   734  000312  0100               	movlb	0	; () banked
   735  000314  5182               	movf	??_main& (0+255),w,b
   736  000316  0A00               	xorlw	0	; case 0
   737  000318  B4D8               	btfsc	status,2,c
   738  00031A  D6E2               	goto	l2129
   739  00031C  0A01               	xorlw	1	; case 1
   740  00031E  B4D8               	btfsc	status,2,c
   741  000320  D710               	goto	l2139
   742  000322  0A03               	xorlw	3	; case 2
   743  000324  B4D8               	btfsc	status,2,c
   744  000326  D752               	goto	l2155
   745  000328  0A01               	xorlw	1	; case 3
   746  00032A  B4D8               	btfsc	status,2,c
   747  00032C  D782               	goto	l2163
   748  00032E  0A07               	xorlw	7	; case 4
   749  000330  B4D8               	btfsc	status,2,c
   750  000332  D7B2               	goto	l2171
   751                           
   752                           ; BSR set to: 0
   753                           
   754                           ; BSR set to: 0
   755  000334  D6D0               	goto	l2127
   756  000336                     __end_of_main:
   757                           	opt stack 0
   758                           tblptru	equ	0xFF8
   759                           wreg	equ	0xFE8
   760                           status	equ	0xFD8
   761                           
   762 ;; *************** function _put_nums_individual *****************
   763 ;; Defined at:
   764 ;;		line 72 in file "user.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;  num5            1    wreg     unsigned char 
   767 ;;  num4            1   24[BANK0 ] unsigned char 
   768 ;;  num3            1   25[BANK0 ] unsigned char 
   769 ;;  num2            1   26[BANK0 ] unsigned char 
   770 ;;  num1            1   27[BANK0 ] unsigned char 
   771 ;;  num0            1   28[BANK0 ] unsigned char 
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  num5            1   29[BANK0 ] unsigned char 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   783 ;;      Params:         0       5       0       0       0       0       0       0       0
   784 ;;      Locals:         0       1       0       0       0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0
   786 ;;      Totals:         0       6       0       0       0       0       0       0       0
   787 ;;Total ram usage:        6 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    4
   790 ;; This function calls:
   791 ;;		_get_num
   792 ;;		_put_num
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text1
   799  000A12                     __ptext1:
   800                           	opt stack 0
   801  000A12                     _put_nums_individual:
   802                           	opt stack 26
   803                           
   804                           ; BSR set to: 0
   805                           ;incstack = 0
   806                           ;put_nums_individual@num5 stored from wreg
   807  000A12  0100               	movlb	0	; () banked
   808  000A14  6F7D               	movwf	put_nums_individual@num5& (0+255),b
   809                           
   810                           ;user.c: 74: put_num(get_num(num0));
   811  000A16  0100               	movlb	0	; () banked
   812  000A18  517C               	movf	put_nums_individual@num0& (0+255),w,b
   813  000A1A  ECBE  F003         	call	_get_num
   814  000A1E  EC5D  F004         	call	_put_num
   815                           
   816                           ;user.c: 75: put_num(get_num(num1));
   817  000A22  0100               	movlb	0	; () banked
   818  000A24  517B               	movf	put_nums_individual@num1& (0+255),w,b
   819  000A26  ECBE  F003         	call	_get_num
   820  000A2A  EC5D  F004         	call	_put_num
   821                           
   822                           ;user.c: 76: put_num(get_num(num2));
   823  000A2E  0100               	movlb	0	; () banked
   824  000A30  517A               	movf	put_nums_individual@num2& (0+255),w,b
   825  000A32  ECBE  F003         	call	_get_num
   826  000A36  EC5D  F004         	call	_put_num
   827                           
   828                           ;user.c: 77: put_num(get_num(num3));
   829  000A3A  0100               	movlb	0	; () banked
   830  000A3C  5179               	movf	put_nums_individual@num3& (0+255),w,b
   831  000A3E  ECBE  F003         	call	_get_num
   832  000A42  EC5D  F004         	call	_put_num
   833                           
   834                           ;user.c: 78: put_num(get_num(num4));
   835  000A46  0100               	movlb	0	; () banked
   836  000A48  5178               	movf	put_nums_individual@num4& (0+255),w,b
   837  000A4A  ECBE  F003         	call	_get_num
   838  000A4E  EC5D  F004         	call	_put_num
   839                           
   840                           ;user.c: 79: put_num(get_num(num5));
   841  000A52  0100               	movlb	0	; () banked
   842  000A54  517D               	movf	put_nums_individual@num5& (0+255),w,b
   843  000A56  ECBE  F003         	call	_get_num
   844  000A5A  EC5D  F004         	call	_put_num
   845  000A5E  0012               	return		;funcret
   846  000A60                     __end_of_put_nums_individual:
   847                           	opt stack 0
   848                           tblptru	equ	0xFF8
   849                           wreg	equ	0xFE8
   850                           status	equ	0xFD8
   851                           
   852 ;; *************** function _put_nums *****************
   853 ;; Defined at:
   854 ;;		line 63 in file "user.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;  nums            2   24[BANK0 ] PTR unsigned char 
   857 ;;		 -> main@aux1(6), 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  i               2   26[BANK0 ] int 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   869 ;;      Params:         0       2       0       0       0       0       0       0       0
   870 ;;      Locals:         0       2       0       0       0       0       0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0
   872 ;;      Totals:         0       4       0       0       0       0       0       0       0
   873 ;;Total ram usage:        4 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    4
   876 ;; This function calls:
   877 ;;		_get_num
   878 ;;		_put_num
   879 ;; This function is called by:
   880 ;;		_main
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           	psect	text2
   885  000A60                     __ptext2:
   886                           	opt stack 0
   887  000A60                     _put_nums:
   888                           	opt stack 26
   889                           
   890                           ;user.c: 65: int i;
   891                           ;user.c: 66: for(i=0;i<6;i++)
   892                           
   893                           ;incstack = 0
   894  000A60  0E00               	movlw	0
   895  000A62  0100               	movlb	0	; () banked
   896  000A64  6F7B               	movwf	(put_nums@i+1)& (0+255),b
   897  000A66  0E00               	movlw	0
   898  000A68  6F7A               	movwf	put_nums@i& (0+255),b
   899  000A6A                     l2027:
   900                           
   901                           ; BSR set to: 0
   902  000A6A  0100               	movlb	0	; () banked
   903  000A6C  BF7B               	btfsc	(put_nums@i+1)& (0+255),7,b
   904  000A6E  D008               	goto	l2031
   905  000A70  0100               	movlb	0	; () banked
   906  000A72  517B               	movf	(put_nums@i+1)& (0+255),w,b
   907  000A74  E118               	bnz	l143
   908  000A76  0E06               	movlw	6
   909  000A78  0100               	movlb	0	; () banked
   910  000A7A  5D7A               	subwf	put_nums@i& (0+255),w,b
   911  000A7C  B0D8               	btfsc	status,0,c
   912  000A7E  0012               	return	
   913  000A80                     l2031:
   914                           
   915                           ; BSR set to: 0
   916                           ;user.c: 67: {
   917                           ;user.c: 68: put_num(get_num(nums[i]));
   918  000A80  0100               	movlb	0	; () banked
   919  000A82  517A               	movf	put_nums@i& (0+255),w,b
   920  000A84  0100               	movlb	0	; () banked
   921  000A86  2578               	addwf	put_nums@nums& (0+255),w,b
   922  000A88  6ED9               	movwf	fsr2l,c
   923  000A8A  0100               	movlb	0	; () banked
   924  000A8C  517B               	movf	(put_nums@i+1)& (0+255),w,b
   925  000A8E  0100               	movlb	0	; () banked
   926  000A90  2179               	addwfc	(put_nums@nums+1)& (0+255),w,b
   927  000A92  6EDA               	movwf	fsr2h,c
   928  000A94  50DF               	movf	indf2,w,c
   929  000A96  ECBE  F003         	call	_get_num
   930  000A9A  EC5D  F004         	call	_put_num
   931  000A9E  0100               	movlb	0	; () banked
   932  000AA0  4B7A               	infsnz	put_nums@i& (0+255),f,b
   933  000AA2  2B7B               	incf	(put_nums@i+1)& (0+255),f,b
   934  000AA4  D7E2               	goto	l2027
   935  000AA6                     l143:
   936                           
   937                           ; BSR set to: 0
   938  000AA6  0012               	return		;funcret
   939  000AA8                     __end_of_put_nums:
   940                           	opt stack 0
   941                           tblptru	equ	0xFF8
   942                           wreg	equ	0xFE8
   943                           indf2	equ	0xFDF
   944                           fsr2h	equ	0xFDA
   945                           fsr2l	equ	0xFD9
   946                           status	equ	0xFD8
   947                           
   948 ;; *************** function _put_num *****************
   949 ;; Defined at:
   950 ;;		line 51 in file "user.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;  num             1    wreg     unsigned char 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  num             1   19[BANK0 ] unsigned char 
   955 ;;  i               2   22[BANK0 ] int 
   956 ;;  mask            1   20[BANK0 ] unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  1    wreg      void 
   959 ;; Registers used:
   960 ;;		wreg, status,2, status,0
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   966 ;;      Params:         0       0       0       0       0       0       0       0       0
   967 ;;      Locals:         0       5       0       0       0       0       0       0       0
   968 ;;      Temps:          0       2       0       0       0       0       0       0       0
   969 ;;      Totals:         0       7       0       0       0       0       0       0       0
   970 ;;Total ram usage:        7 bytes
   971 ;; Hardware stack levels used:    1
   972 ;; Hardware stack levels required when called:    3
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_put_nums
   977 ;;		_put_nums_individual
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text3
   982  0008BA                     __ptext3:
   983                           	opt stack 0
   984  0008BA                     _put_num:
   985                           	opt stack 26
   986                           
   987                           ; BSR set to: 0
   988                           ;incstack = 0
   989                           ;put_num@num stored from wreg
   990  0008BA  0100               	movlb	0	; () banked
   991  0008BC  6F73               	movwf	put_num@num& (0+255),b
   992                           
   993                           ;user.c: 53: char mask = 0x01;
   994  0008BE  0E01               	movlw	1
   995  0008C0  0100               	movlb	0	; () banked
   996  0008C2  6F74               	movwf	put_num@mask& (0+255),b
   997                           
   998                           ;user.c: 54: int i;
   999                           ;user.c: 55: for(i= 0; i<8; i++)
  1000  0008C4  0E00               	movlw	0
  1001  0008C6  0100               	movlb	0	; () banked
  1002  0008C8  6F77               	movwf	(put_num@i+1)& (0+255),b
  1003  0008CA  0E00               	movlw	0
  1004  0008CC  6F76               	movwf	put_num@i& (0+255),b
  1005  0008CE                     l1733:
  1006                           
  1007                           ; BSR set to: 0
  1008  0008CE  0100               	movlb	0	; () banked
  1009  0008D0  BF77               	btfsc	(put_num@i+1)& (0+255),7,b
  1010  0008D2  D008               	goto	l1737
  1011  0008D4  0100               	movlb	0	; () banked
  1012  0008D6  5177               	movf	(put_num@i+1)& (0+255),w,b
  1013  0008D8  E12C               	bnz	l138
  1014  0008DA  0E08               	movlw	8
  1015  0008DC  0100               	movlb	0	; () banked
  1016  0008DE  5D76               	subwf	put_num@i& (0+255),w,b
  1017  0008E0  B0D8               	btfsc	status,0,c
  1018  0008E2  0012               	return	
  1019  0008E4                     l1737:
  1020                           
  1021                           ; BSR set to: 0
  1022                           ;user.c: 56: {
  1023                           ;user.c: 57: RB3 = num>>i & mask;
  1024  0008E4  0E00               	movlw	0
  1025  0008E6  0100               	movlb	0	; () banked
  1026  0008E8  6F75               	movwf	_put_num$849& (0+255),b
  1027                           
  1028                           ; BSR set to: 0
  1029  0008EA  C076  F071         	movff	put_num@i,??_put_num
  1030  0008EE  C073  F072         	movff	put_num@num,??_put_num+1
  1031  0008F2  0100               	movlb	0	; () banked
  1032  0008F4  2B71               	incf	??_put_num& (0+255),f,b
  1033  0008F6  D003               	goto	u684
  1034  0008F8                     u685:
  1035  0008F8  0100               	movlb	0	; () banked
  1036  0008FA  90D8               	bcf	status,0,c
  1037  0008FC  3372               	rrcf	(??_put_num+1)& (0+255),f,b
  1038  0008FE                     u684:
  1039  0008FE  0100               	movlb	0	; () banked
  1040  000900  2F71               	decfsz	??_put_num& (0+255),f,b
  1041  000902  D7FA               	goto	u685
  1042  000904  0100               	movlb	0	; () banked
  1043  000906  3172               	rrcf	(??_put_num+1)& (0+255),w,b
  1044  000908  0100               	movlb	0	; () banked
  1045  00090A  A0D8               	btfss	status,0,c
  1046  00090C  D006               	goto	l1745
  1047                           
  1048                           ; BSR set to: 0
  1049  00090E  0100               	movlb	0	; () banked
  1050  000910  A174               	btfss	put_num@mask& (0+255),0,b
  1051  000912  D003               	goto	l1745
  1052                           
  1053                           ; BSR set to: 0
  1054  000914  0E01               	movlw	1
  1055  000916  0100               	movlb	0	; () banked
  1056  000918  6F75               	movwf	_put_num$849& (0+255),b
  1057  00091A                     l1745:
  1058                           
  1059                           ; BSR set to: 0
  1060  00091A  0100               	movlb	0	; () banked
  1061  00091C  B175               	btfsc	_put_num$849& (0+255),0,b
  1062  00091E  D002               	bra	u715
  1063  000920  9681               	bcf	3969,3,c	;volatile
  1064  000922  D001               	bra	u716
  1065  000924                     u715:
  1066  000924  8681               	bsf	3969,3,c	;volatile
  1067  000926                     u716:
  1068                           
  1069                           ;user.c: 58: RB4 = 0;
  1070  000926  9881               	bcf	3969,4,c	;volatile
  1071                           
  1072                           ;user.c: 59: RB4 = 1;
  1073  000928  8881               	bsf	3969,4,c	;volatile
  1074  00092A  0100               	movlb	0	; () banked
  1075  00092C  4B76               	infsnz	put_num@i& (0+255),f,b
  1076  00092E  2B77               	incf	(put_num@i+1)& (0+255),f,b
  1077  000930  D7CE               	goto	l1733
  1078  000932                     l138:
  1079                           
  1080                           ; BSR set to: 0
  1081  000932  0012               	return		;funcret
  1082  000934                     __end_of_put_num:
  1083                           	opt stack 0
  1084                           tblptru	equ	0xFF8
  1085                           wreg	equ	0xFE8
  1086                           indf2	equ	0xFDF
  1087                           fsr2h	equ	0xFDA
  1088                           fsr2l	equ	0xFD9
  1089                           status	equ	0xFD8
  1090                           
  1091 ;; *************** function _get_num *****************
  1092 ;; Defined at:
  1093 ;;		line 82 in file "user.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;  num             1    wreg     unsigned char 
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  num             1   17[BANK0 ] unsigned char 
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  1    wreg      unsigned char 
  1100 ;; Registers used:
  1101 ;;		wreg, status,2, status,0
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1107 ;;      Params:         0       0       0       0       0       0       0       0       0
  1108 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1109 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1110 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1111 ;;Total ram usage:        1 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:    3
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_put_nums
  1118 ;;		_put_nums_individual
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text4
  1123  00077C                     __ptext4:
  1124                           	opt stack 0
  1125  00077C                     _get_num:
  1126                           	opt stack 26
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;incstack = 0
  1130                           ;get_num@num stored from wreg
  1131  00077C  0100               	movlb	0	; () banked
  1132  00077E  6F71               	movwf	get_num@num& (0+255),b
  1133                           
  1134                           ;user.c: 84: switch(num)
  1135  000780  D022               	goto	l1827
  1136  000782                     l1757:
  1137  000782  0E30               	movlw	48
  1138  000784  0012               	return	
  1139  000786                     l1761:
  1140  000786  0E6D               	movlw	109
  1141  000788  0012               	return	
  1142  00078A                     l1765:
  1143  00078A  0E79               	movlw	121
  1144  00078C  0012               	return	
  1145  00078E                     l1769:
  1146  00078E  0E33               	movlw	51
  1147  000790  0012               	return	
  1148  000792                     l1773:
  1149  000792  0E5B               	movlw	91
  1150  000794  0012               	return	
  1151  000796                     l1777:
  1152  000796  0E5F               	movlw	95
  1153  000798  0012               	return	
  1154  00079A                     l1781:
  1155  00079A  0E70               	movlw	112
  1156  00079C  0012               	return	
  1157  00079E                     l1785:
  1158  00079E  0E7F               	movlw	127
  1159  0007A0  0012               	return	
  1160  0007A2                     l1789:
  1161  0007A2  0E73               	movlw	115
  1162  0007A4  0012               	return	
  1163  0007A6                     l1793:
  1164  0007A6  0E7E               	movlw	126
  1165  0007A8  0012               	return	
  1166  0007AA                     l1797:
  1167  0007AA  0E3E               	movlw	62
  1168  0007AC  0012               	return	
  1169  0007AE                     l1801:
  1170  0007AE  0E67               	movlw	103
  1171  0007B0  0012               	return	
  1172  0007B2                     l1805:
  1173  0007B2  0E37               	movlw	55
  1174  0007B4  0012               	return	
  1175  0007B6                     l1809:
  1176  0007B6  0E3D               	movlw	61
  1177  0007B8  0012               	return	
  1178  0007BA                     l1813:
  1179  0007BA  0E15               	movlw	21
  1180  0007BC  0012               	return	
  1181  0007BE                     l1817:
  1182  0007BE  0E00               	movlw	0
  1183  0007C0  0012               	return	
  1184  0007C2                     l1821:
  1185  0007C2  0E7F               	movlw	127
  1186                           
  1187                           ;user.c: 103: }
  1188  0007C4  0012               	return	
  1189  0007C6                     l1827:
  1190  0007C6  0100               	movlb	0	; () banked
  1191  0007C8  5171               	movf	get_num@num& (0+255),w,b
  1192                           
  1193                           ; Switch size 1, requested type "space"
  1194                           ; Number of cases is 16, Range of values is 0 to 86
  1195                           ; switch strategies available:
  1196                           ; Name         Instructions Cycles
  1197                           ; simple_byte           49    25 (average)
  1198                           ;	Chosen strategy is simple_byte
  1199  0007CA  0A00               	xorlw	0	; case 0
  1200  0007CC  B4D8               	btfsc	status,2,c
  1201  0007CE  D7EB               	goto	l1793
  1202  0007D0  0A01               	xorlw	1	; case 1
  1203  0007D2  B4D8               	btfsc	status,2,c
  1204  0007D4  D7D6               	goto	l1757
  1205  0007D6  0A03               	xorlw	3	; case 2
  1206  0007D8  B4D8               	btfsc	status,2,c
  1207  0007DA  D7D5               	goto	l1761
  1208  0007DC  0A01               	xorlw	1	; case 3
  1209  0007DE  B4D8               	btfsc	status,2,c
  1210  0007E0  D7D4               	goto	l1765
  1211  0007E2  0A07               	xorlw	7	; case 4
  1212  0007E4  B4D8               	btfsc	status,2,c
  1213  0007E6  D7D3               	goto	l1769
  1214  0007E8  0A01               	xorlw	1	; case 5
  1215  0007EA  B4D8               	btfsc	status,2,c
  1216  0007EC  D7D2               	goto	l1773
  1217  0007EE  0A03               	xorlw	3	; case 6
  1218  0007F0  B4D8               	btfsc	status,2,c
  1219  0007F2  D7D1               	goto	l1777
  1220  0007F4  0A01               	xorlw	1	; case 7
  1221  0007F6  B4D8               	btfsc	status,2,c
  1222  0007F8  D7D0               	goto	l1781
  1223  0007FA  0A0F               	xorlw	15	; case 8
  1224  0007FC  B4D8               	btfsc	status,2,c
  1225  0007FE  D7CF               	goto	l1785
  1226  000800  0A01               	xorlw	1	; case 9
  1227  000802  B4D8               	btfsc	status,2,c
  1228  000804  D7CE               	goto	l1789
  1229  000806  0A4D               	xorlw	77	; case 68
  1230  000808  B4D8               	btfsc	status,2,c
  1231  00080A  D7D5               	goto	l1809
  1232  00080C  0A0C               	xorlw	12	; case 72
  1233  00080E  B4D8               	btfsc	status,2,c
  1234  000810  D7D0               	goto	l1805
  1235  000812  0A06               	xorlw	6	; case 78
  1236  000814  B4D8               	btfsc	status,2,c
  1237  000816  D7D1               	goto	l1813
  1238  000818  0A1E               	xorlw	30	; case 80
  1239  00081A  B4D8               	btfsc	status,2,c
  1240  00081C  D7C8               	goto	l1801
  1241  00081E  0A05               	xorlw	5	; case 85
  1242  000820  B4D8               	btfsc	status,2,c
  1243  000822  D7C3               	goto	l1797
  1244  000824  0A03               	xorlw	3	; case 86
  1245  000826  B4D8               	btfsc	status,2,c
  1246  000828  D7CA               	goto	l1817
  1247  00082A  D7CB               	goto	l1821
  1248  00082C                     __end_of_get_num:
  1249                           	opt stack 0
  1250                           tblptru	equ	0xFF8
  1251                           wreg	equ	0xFE8
  1252                           indf2	equ	0xFDF
  1253                           fsr2h	equ	0xFDA
  1254                           fsr2l	equ	0xFD9
  1255                           status	equ	0xFD8
  1256                           
  1257 ;; *************** function _point_toggle *****************
  1258 ;; Defined at:
  1259 ;;		line 116 in file "user.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1273 ;;      Params:         0       0       0       0       0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1276 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1277 ;;Total ram usage:        0 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    4
  1280 ;; This function calls:
  1281 ;;		_point_disable
  1282 ;;		_point_enable
  1283 ;; This function is called by:
  1284 ;;		_main
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           	psect	text5
  1289  000AEE                     __ptext5:
  1290                           	opt stack 0
  1291  000AEE                     _point_toggle:
  1292                           	opt stack 26
  1293                           
  1294                           ;user.c: 118: if(RB1 == 0)
  1295                           
  1296                           ;incstack = 0
  1297  000AEE  B281               	btfsc	3969,1,c	;volatile
  1298  000AF0  D003               	goto	l2041
  1299                           
  1300                           ;user.c: 119: point_enable();
  1301  000AF2  EC82  F005         	call	_point_enable	;wreg free
  1302  000AF6  0012               	return	
  1303  000AF8                     l2041:
  1304                           
  1305                           ;user.c: 120: else
  1306                           ;user.c: 121: point_disable();
  1307  000AF8  EC84  F005         	call	_point_disable	;wreg free
  1308  000AFC  0012               	return	
  1309  000AFE                     __end_of_point_toggle:
  1310                           	opt stack 0
  1311                           tblptru	equ	0xFF8
  1312                           wreg	equ	0xFE8
  1313                           indf2	equ	0xFDF
  1314                           fsr2h	equ	0xFDA
  1315                           fsr2l	equ	0xFD9
  1316                           status	equ	0xFD8
  1317                           
  1318 ;; *************** function _point_enable *****************
  1319 ;; Defined at:
  1320 ;;		line 106 in file "user.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;		None
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		None
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1334 ;;      Params:         0       0       0       0       0       0       0       0       0
  1335 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1337 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1338 ;;Total ram usage:        0 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    3
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_point_toggle
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           	psect	text6
  1349  000B04                     __ptext6:
  1350                           	opt stack 0
  1351  000B04                     _point_enable:
  1352                           	opt stack 26
  1353                           
  1354                           ;user.c: 108: RB1 = 1;
  1355                           
  1356                           ;incstack = 0
  1357  000B04  8281               	bsf	3969,1,c	;volatile
  1358  000B06  0012               	return		;funcret
  1359  000B08                     __end_of_point_enable:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           wreg	equ	0xFE8
  1363                           indf2	equ	0xFDF
  1364                           fsr2h	equ	0xFDA
  1365                           fsr2l	equ	0xFD9
  1366                           status	equ	0xFD8
  1367                           
  1368 ;; *************** function _point_disable *****************
  1369 ;; Defined at:
  1370 ;;		line 111 in file "user.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		None
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1384 ;;      Params:         0       0       0       0       0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    3
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_point_toggle
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text7
  1399  000B08                     __ptext7:
  1400                           	opt stack 0
  1401  000B08                     _point_disable:
  1402                           	opt stack 26
  1403                           
  1404                           ;user.c: 113: RB1 = 0;
  1405                           
  1406                           ;incstack = 0
  1407  000B08  9281               	bcf	3969,1,c	;volatile
  1408  000B0A  0012               	return		;funcret
  1409  000B0C                     __end_of_point_disable:
  1410                           	opt stack 0
  1411                           tblptru	equ	0xFF8
  1412                           wreg	equ	0xFE8
  1413                           indf2	equ	0xFDF
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function _ir_is_code_number *****************
  1419 ;; Defined at:
  1420 ;;		line 314 in file "user.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  human_code      1    wreg     unsigned char 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  human_code      1   17[BANK0 ] unsigned char 
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      unsigned char 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2, status,0
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1434 ;;      Params:         0       0       0       0       0       0       0       0       0
  1435 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1437 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1438 ;;Total ram usage:        1 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    3
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text8
  1449  0009A4                     __ptext8:
  1450                           	opt stack 0
  1451  0009A4                     _ir_is_code_number:
  1452                           	opt stack 27
  1453                           
  1454                           ;incstack = 0
  1455                           ;ir_is_code_number@human_code stored from wreg
  1456  0009A4  0100               	movlb	0	; () banked
  1457  0009A6  6F71               	movwf	ir_is_code_number@human_code& (0+255),b
  1458                           
  1459                           ;user.c: 316: if(human_code == 0 || human_code == 1 || human_code == 2 || human_code == 
      +                          3 || human_code == 4
  1460                           ;user.c: 317: || human_code == 5 || human_code == 6 || human_code == 7 || human_code == 
      +                          8 || human_code == 9)
  1461  0009A8  0100               	movlb	0	; () banked
  1462  0009AA  5171               	movf	ir_is_code_number@human_code& (0+255),w,b
  1463  0009AC  0100               	movlb	0	; () banked
  1464  0009AE  B4D8               	btfsc	status,2,c
  1465  0009B0  D02C               	goto	l2063
  1466                           
  1467                           ; BSR set to: 0
  1468  0009B2  0100               	movlb	0	; () banked
  1469  0009B4  0571               	decf	ir_is_code_number@human_code& (0+255),w,b
  1470  0009B6  B4D8               	btfsc	status,2,c
  1471  0009B8  D028               	goto	l2063
  1472                           
  1473                           ; BSR set to: 0
  1474  0009BA  0E02               	movlw	2
  1475  0009BC  0100               	movlb	0	; () banked
  1476  0009BE  1971               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1477  0009C0  B4D8               	btfsc	status,2,c
  1478  0009C2  D023               	goto	l2063
  1479                           
  1480                           ; BSR set to: 0
  1481  0009C4  0E03               	movlw	3
  1482  0009C6  0100               	movlb	0	; () banked
  1483  0009C8  1971               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1484  0009CA  B4D8               	btfsc	status,2,c
  1485  0009CC  D01E               	goto	l2063
  1486                           
  1487                           ; BSR set to: 0
  1488  0009CE  0E04               	movlw	4
  1489  0009D0  0100               	movlb	0	; () banked
  1490  0009D2  1971               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1491  0009D4  B4D8               	btfsc	status,2,c
  1492  0009D6  D019               	goto	l2063
  1493                           
  1494                           ; BSR set to: 0
  1495  0009D8  0E05               	movlw	5
  1496  0009DA  0100               	movlb	0	; () banked
  1497  0009DC  1971               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1498  0009DE  B4D8               	btfsc	status,2,c
  1499  0009E0  D014               	goto	l2063
  1500                           
  1501                           ; BSR set to: 0
  1502  0009E2  0E06               	movlw	6
  1503  0009E4  0100               	movlb	0	; () banked
  1504  0009E6  1971               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1505  0009E8  B4D8               	btfsc	status,2,c
  1506  0009EA  D00F               	goto	l2063
  1507                           
  1508                           ; BSR set to: 0
  1509  0009EC  0E07               	movlw	7
  1510  0009EE  0100               	movlb	0	; () banked
  1511  0009F0  1971               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1512  0009F2  B4D8               	btfsc	status,2,c
  1513  0009F4  D00A               	goto	l2063
  1514                           
  1515                           ; BSR set to: 0
  1516  0009F6  0E08               	movlw	8
  1517  0009F8  0100               	movlb	0	; () banked
  1518  0009FA  1971               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1519  0009FC  B4D8               	btfsc	status,2,c
  1520  0009FE  D005               	goto	l2063
  1521                           
  1522                           ; BSR set to: 0
  1523  000A00  0E09               	movlw	9
  1524  000A02  0100               	movlb	0	; () banked
  1525  000A04  1971               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1526  000A06  A4D8               	btfss	status,2,c
  1527  000A08  D002               	goto	l2069
  1528  000A0A                     l2063:
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;user.c: 318: return 1;
  1532  000A0A  0E01               	movlw	1
  1533                           
  1534                           ; BSR set to: 0
  1535                           
  1536                           ; BSR set to: 0
  1537  000A0C  0012               	return	
  1538  000A0E                     l2069:
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;user.c: 319: else
  1542                           ;user.c: 320: return 0;
  1543  000A0E  0E00               	movlw	0
  1544                           
  1545                           ; BSR set to: 0
  1546  000A10  0012               	return	
  1547  000A12                     __end_of_ir_is_code_number:
  1548                           	opt stack 0
  1549                           tblptru	equ	0xFF8
  1550                           wreg	equ	0xFE8
  1551                           indf2	equ	0xFDF
  1552                           fsr2h	equ	0xFDA
  1553                           fsr2l	equ	0xFD9
  1554                           status	equ	0xFD8
  1555                           
  1556 ;; *************** function _get_time *****************
  1557 ;; Defined at:
  1558 ;;		line 199 in file "user.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;  data            2   28[BANK0 ] PTR unsigned char 
  1561 ;;		 -> main@aux1(6), 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  aux             1   33[BANK0 ] unsigned char 
  1564 ;;  hours           1   32[BANK0 ] unsigned char 
  1565 ;;  minutes         1   31[BANK0 ] unsigned char 
  1566 ;;  seconds         1   30[BANK0 ] unsigned char 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1576 ;;      Params:         0       2       0       0       0       0       0       0       0
  1577 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1579 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1580 ;;Total ram usage:        6 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    6
  1583 ;; This function calls:
  1584 ;;		_byte_read
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text9
  1591  0006CA                     __ptext9:
  1592                           	opt stack 0
  1593  0006CA                     _get_time:
  1594                           	opt stack 24
  1595                           
  1596                           ;user.c: 201: char aux = 0x81;
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;incstack = 0
  1600  0006CA  0E81               	movlw	129
  1601  0006CC  0100               	movlb	0	; () banked
  1602  0006CE  6F81               	movwf	get_time@aux& (0+255),b
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;user.c: 202: char seconds = byte_read(aux);
  1606  0006D0  0100               	movlb	0	; () banked
  1607  0006D2  5181               	movf	get_time@aux& (0+255),w,b
  1608  0006D4  EC16  F004         	call	_byte_read
  1609  0006D8  0100               	movlb	0	; () banked
  1610  0006DA  6F7E               	movwf	get_time@seconds& (0+255),b
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;user.c: 203: aux = 0x83;
  1614  0006DC  0E83               	movlw	131
  1615  0006DE  0100               	movlb	0	; () banked
  1616  0006E0  6F81               	movwf	get_time@aux& (0+255),b
  1617                           
  1618                           ;user.c: 204: char minutes = byte_read(aux);
  1619  0006E2  0100               	movlb	0	; () banked
  1620  0006E4  5181               	movf	get_time@aux& (0+255),w,b
  1621  0006E6  EC16  F004         	call	_byte_read
  1622  0006EA  0100               	movlb	0	; () banked
  1623  0006EC  6F7F               	movwf	get_time@minutes& (0+255),b
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;user.c: 205: aux = 0x85;
  1627  0006EE  0E85               	movlw	133
  1628  0006F0  0100               	movlb	0	; () banked
  1629  0006F2  6F81               	movwf	get_time@aux& (0+255),b
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;user.c: 206: char hours = byte_read(aux);
  1633  0006F4  0100               	movlb	0	; () banked
  1634  0006F6  5181               	movf	get_time@aux& (0+255),w,b
  1635  0006F8  EC16  F004         	call	_byte_read
  1636  0006FC  0100               	movlb	0	; () banked
  1637  0006FE  6F80               	movwf	get_time@hours& (0+255),b
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;user.c: 208: data[0] = minutes & 0x0f;
  1641  000700  0100               	movlb	0	; () banked
  1642  000702  517F               	movf	get_time@minutes& (0+255),w,b
  1643  000704  0B0F               	andlw	15
  1644  000706  C07C  FFD9         	movff	get_time@data,fsr2l
  1645  00070A  C07D  FFDA         	movff	get_time@data+1,fsr2h
  1646  00070E  6EDF               	movwf	indf2,c
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;user.c: 209: data[1] = (minutes & 0xf0)>>4;
  1650  000710  0100               	movlb	0	; () banked
  1651  000712  EE20 F001          	lfsr	2,1
  1652  000716  517C               	movf	get_time@data& (0+255),w,b
  1653  000718  26D9               	addwf	fsr2l,f,c
  1654  00071A  517D               	movf	(get_time@data+1)& (0+255),w,b
  1655  00071C  22DA               	addwfc	fsr2h,f,c
  1656  00071E  0100               	movlb	0	; () banked
  1657  000720  397F               	swapf	get_time@minutes& (0+255),w,b
  1658  000722  0B0F               	andlw	15
  1659  000724  0B0F               	andlw	15
  1660  000726  6EDF               	movwf	indf2,c
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;user.c: 210: data[2] = hours & 0x0f;
  1664  000728  0100               	movlb	0	; () banked
  1665  00072A  EE20 F002          	lfsr	2,2
  1666  00072E  517C               	movf	get_time@data& (0+255),w,b
  1667  000730  26D9               	addwf	fsr2l,f,c
  1668  000732  517D               	movf	(get_time@data+1)& (0+255),w,b
  1669  000734  22DA               	addwfc	fsr2h,f,c
  1670  000736  0100               	movlb	0	; () banked
  1671  000738  5180               	movf	get_time@hours& (0+255),w,b
  1672  00073A  0B0F               	andlw	15
  1673  00073C  6EDF               	movwf	indf2,c
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;user.c: 211: data[3] = (hours & 0xf0)>>4;
  1677  00073E  0100               	movlb	0	; () banked
  1678  000740  EE20 F003          	lfsr	2,3
  1679  000744  517C               	movf	get_time@data& (0+255),w,b
  1680  000746  26D9               	addwf	fsr2l,f,c
  1681  000748  517D               	movf	(get_time@data+1)& (0+255),w,b
  1682  00074A  22DA               	addwfc	fsr2h,f,c
  1683  00074C  0100               	movlb	0	; () banked
  1684  00074E  3980               	swapf	get_time@hours& (0+255),w,b
  1685  000750  0B0F               	andlw	15
  1686  000752  0B0F               	andlw	15
  1687  000754  6EDF               	movwf	indf2,c
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;user.c: 212: data[4] = 1;
  1691  000756  0100               	movlb	0	; () banked
  1692  000758  EE20 F004          	lfsr	2,4
  1693  00075C  517C               	movf	get_time@data& (0+255),w,b
  1694  00075E  26D9               	addwf	fsr2l,f,c
  1695  000760  517D               	movf	(get_time@data+1)& (0+255),w,b
  1696  000762  22DA               	addwfc	fsr2h,f,c
  1697  000764  0E01               	movlw	1
  1698  000766  6EDF               	movwf	indf2,c
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;user.c: 213: data[5] = 'H';
  1702  000768  0100               	movlb	0	; () banked
  1703  00076A  EE20 F005          	lfsr	2,5
  1704  00076E  517C               	movf	get_time@data& (0+255),w,b
  1705  000770  26D9               	addwf	fsr2l,f,c
  1706  000772  517D               	movf	(get_time@data+1)& (0+255),w,b
  1707  000774  22DA               	addwfc	fsr2h,f,c
  1708  000776  0E48               	movlw	72
  1709  000778  6EDF               	movwf	indf2,c
  1710                           
  1711                           ; BSR set to: 0
  1712  00077A  0012               	return		;funcret
  1713  00077C                     __end_of_get_time:
  1714                           	opt stack 0
  1715                           tblptru	equ	0xFF8
  1716                           wreg	equ	0xFE8
  1717                           indf2	equ	0xFDF
  1718                           fsr2h	equ	0xFDA
  1719                           fsr2l	equ	0xFD9
  1720                           status	equ	0xFD8
  1721                           
  1722 ;; *************** function _byte_read *****************
  1723 ;; Defined at:
  1724 ;;		line 150 in file "user.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;  address         1    wreg     unsigned char 
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  address         1   24[BANK0 ] unsigned char 
  1729 ;;  i               2   26[BANK0 ] int 
  1730 ;;  res             1   25[BANK0 ] unsigned char 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      unsigned char 
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1740 ;;      Params:         0       0       0       0       0       0       0       0       0
  1741 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1742 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1743 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1744 ;;Total ram usage:        6 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    5
  1747 ;; This function calls:
  1748 ;;		_ce_disable
  1749 ;;		_ce_enable
  1750 ;;		_io_as_input
  1751 ;;		_send_command
  1752 ;; This function is called by:
  1753 ;;		_get_time
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text10
  1758  00082C                     __ptext10:
  1759                           	opt stack 0
  1760  00082C                     _byte_read:
  1761                           	opt stack 24
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;incstack = 0
  1765                           ;byte_read@address stored from wreg
  1766  00082C  0100               	movlb	0	; () banked
  1767  00082E  6F78               	movwf	byte_read@address& (0+255),b
  1768                           
  1769                           ;user.c: 151: char res = 0;
  1770  000830  0E00               	movlw	0
  1771  000832  0100               	movlb	0	; () banked
  1772  000834  6F79               	movwf	byte_read@res& (0+255),b
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;user.c: 154: ce_enable();
  1776  000836  EC8A  F005         	call	_ce_enable	;wreg free
  1777                           
  1778                           ;user.c: 156: send_command(address);
  1779  00083A  0100               	movlb	0	; () banked
  1780  00083C  5178               	movf	byte_read@address& (0+255),w,b
  1781  00083E  EC9A  F004         	call	_send_command
  1782                           
  1783                           ;user.c: 157: io_as_input();
  1784  000842  EC88  F005         	call	_io_as_input	;wreg free
  1785                           
  1786                           ;user.c: 158: int i;
  1787                           ;user.c: 159: for(i=0;i<8;i++)
  1788  000846  0E00               	movlw	0
  1789  000848  0100               	movlb	0	; () banked
  1790  00084A  6F7B               	movwf	(byte_read@i+1)& (0+255),b
  1791  00084C  0E00               	movlw	0
  1792  00084E  6F7A               	movwf	byte_read@i& (0+255),b
  1793  000850                     l1843:
  1794                           
  1795                           ; BSR set to: 0
  1796  000850  0100               	movlb	0	; () banked
  1797  000852  BF7B               	btfsc	(byte_read@i+1)& (0+255),7,b
  1798  000854  D008               	goto	l199
  1799  000856  0100               	movlb	0	; () banked
  1800  000858  517B               	movf	(byte_read@i+1)& (0+255),w,b
  1801  00085A  E12A               	bnz	l1859
  1802  00085C  0E08               	movlw	8
  1803  00085E  0100               	movlb	0	; () banked
  1804  000860  5D7A               	subwf	byte_read@i& (0+255),w,b
  1805  000862  B0D8               	btfsc	status,0,c
  1806  000864  D025               	goto	l1859
  1807  000866                     l199:
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;user.c: 160: {
  1811                           ;user.c: 161: RA2 = 0;
  1812  000866  9480               	bcf	3968,2,c	;volatile
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;user.c: 162: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  1816  000868  0E06               	movlw	6
  1817  00086A                     u1257:
  1818  00086A  2EE8               	decfsz	wreg,f,c
  1819  00086C  D7FE               	bra	u1257
  1820  00086E  D000               	nop2	
  1821                           
  1822                           ;user.c: 163: res |= RA3<<i;
  1823  000870  C07A  F076         	movff	byte_read@i,??_byte_read
  1824  000874  A680               	btfss	3968,3,c	;volatile
  1825  000876  D004               	goto	u740
  1826  000878  0100               	movlb	0	; () banked
  1827  00087A  6B77               	clrf	(??_byte_read+1)& (0+255),b
  1828  00087C  2B77               	incf	(??_byte_read+1)& (0+255),f,b
  1829  00087E  D002               	goto	u758
  1830  000880                     u740:
  1831  000880  0100               	movlb	0	; () banked
  1832  000882  6B77               	clrf	(??_byte_read+1)& (0+255),b
  1833  000884                     u758:
  1834  000884  0100               	movlb	0	; () banked
  1835  000886  2B76               	incf	??_byte_read& (0+255),f,b
  1836  000888  D003               	goto	u764
  1837  00088A                     u765:
  1838  00088A  0100               	movlb	0	; () banked
  1839  00088C  90D8               	bcf	status,0,c
  1840  00088E  3777               	rlcf	(??_byte_read+1)& (0+255),f,b
  1841  000890                     u764:
  1842  000890  0100               	movlb	0	; () banked
  1843  000892  2F76               	decfsz	??_byte_read& (0+255),f,b
  1844  000894  D7FA               	goto	u765
  1845  000896  0100               	movlb	0	; () banked
  1846  000898  5177               	movf	(??_byte_read+1)& (0+255),w,b
  1847  00089A  0100               	movlb	0	; () banked
  1848  00089C  1379               	iorwf	byte_read@res& (0+255),f,b
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;user.c: 164: RA2 = 1;
  1852  00089E  8480               	bsf	3968,2,c	;volatile
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;user.c: 165: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  1856  0008A0  0E10               	movlw	16
  1857  0008A2                     u1267:
  1858  0008A2  2EE8               	decfsz	wreg,f,c
  1859  0008A4  D7FE               	bra	u1267
  1860  0008A6  D000               	nop2	
  1861  0008A8  0100               	movlb	0	; () banked
  1862  0008AA  4B7A               	infsnz	byte_read@i& (0+255),f,b
  1863  0008AC  2B7B               	incf	(byte_read@i+1)& (0+255),f,b
  1864  0008AE  D7D0               	goto	l1843
  1865  0008B0                     l1859:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;user.c: 167: }
  1869                           ;user.c: 169: ce_disable();
  1870  0008B0  EC7F  F005         	call	_ce_disable	;wreg free
  1871                           
  1872                           ;user.c: 172: return res;
  1873  0008B4  0100               	movlb	0	; () banked
  1874  0008B6  5179               	movf	byte_read@res& (0+255),w,b
  1875  0008B8  0012               	return	
  1876  0008BA                     __end_of_byte_read:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           wreg	equ	0xFE8
  1880                           indf2	equ	0xFDF
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _send_command *****************
  1886 ;; Defined at:
  1887 ;;		line 265 in file "user.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  command         1    wreg     unsigned char 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  command         1   19[BANK0 ] unsigned char 
  1892 ;;  i               2   20[BANK0 ] int 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, status,2, status,0, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1902 ;;      Params:         0       0       0       0       0       0       0       0       0
  1903 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1904 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1905 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1906 ;;Total ram usage:        5 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    4
  1909 ;; This function calls:
  1910 ;;		_io_as_output
  1911 ;; This function is called by:
  1912 ;;		_byte_read
  1913 ;;		_byte_write
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text11
  1918  000934                     __ptext11:
  1919                           	opt stack 0
  1920  000934                     _send_command:
  1921                           	opt stack 24
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;incstack = 0
  1925                           ;send_command@command stored from wreg
  1926  000934  0100               	movlb	0	; () banked
  1927  000936  6F73               	movwf	send_command@command& (0+255),b
  1928                           
  1929                           ;user.c: 267: int i;
  1930                           ;user.c: 268: io_as_output();
  1931  000938  EC86  F005         	call	_io_as_output	;wreg free
  1932                           
  1933                           ;user.c: 269: for(i=0; i<8; i++)
  1934  00093C  0E00               	movlw	0
  1935  00093E  0100               	movlb	0	; () banked
  1936  000940  6F75               	movwf	(send_command@i+1)& (0+255),b
  1937  000942  0E00               	movlw	0
  1938  000944  6F74               	movwf	send_command@i& (0+255),b
  1939  000946                     l1711:
  1940                           
  1941                           ; BSR set to: 0
  1942  000946  0100               	movlb	0	; () banked
  1943  000948  BF75               	btfsc	(send_command@i+1)& (0+255),7,b
  1944  00094A  D008               	goto	l1715
  1945  00094C  0100               	movlb	0	; () banked
  1946  00094E  5175               	movf	(send_command@i+1)& (0+255),w,b
  1947  000950  E128               	bnz	l235
  1948  000952  0E08               	movlw	8
  1949  000954  0100               	movlb	0	; () banked
  1950  000956  5D74               	subwf	send_command@i& (0+255),w,b
  1951  000958  B0D8               	btfsc	status,0,c
  1952  00095A  0012               	return	
  1953  00095C                     l1715:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;user.c: 270: {
  1957                           ;user.c: 271: RA3 = command>>i & 0x01;
  1958  00095C  C074  F071         	movff	send_command@i,??_send_command
  1959  000960  C073  F072         	movff	send_command@command,??_send_command+1
  1960  000964  0100               	movlb	0	; () banked
  1961  000966  2B71               	incf	??_send_command& (0+255),f,b
  1962  000968  D003               	goto	u634
  1963  00096A                     u635:
  1964  00096A  0100               	movlb	0	; () banked
  1965  00096C  90D8               	bcf	status,0,c
  1966  00096E  3372               	rrcf	(??_send_command+1)& (0+255),f,b
  1967  000970                     u634:
  1968  000970  0100               	movlb	0	; () banked
  1969  000972  2F71               	decfsz	??_send_command& (0+255),f,b
  1970  000974  D7FA               	goto	u635
  1971  000976  0100               	movlb	0	; () banked
  1972  000978  3172               	rrcf	(??_send_command+1)& (0+255),w,b
  1973  00097A  0100               	movlb	0	; () banked
  1974  00097C  A0D8               	btfss	status,0,c
  1975  00097E  D002               	goto	u640
  1976  000980  8680               	bsf	3968,3,c	;volatile
  1977  000982  D001               	goto	l1717
  1978  000984                     u640:
  1979  000984  9680               	bcf	3968,3,c	;volatile
  1980  000986                     l1717:
  1981                           
  1982                           ;user.c: 272: RA2 = 1;
  1983  000986  8480               	bsf	3968,2,c	;volatile
  1984                           
  1985                           ;user.c: 273: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  1986  000988  0E10               	movlw	16
  1987  00098A                     u1277:
  1988  00098A  2EE8               	decfsz	wreg,f,c
  1989  00098C  D7FE               	bra	u1277
  1990  00098E  D000               	nop2	
  1991                           
  1992                           ;user.c: 274: RA2 = 0;
  1993  000990  9480               	bcf	3968,2,c	;volatile
  1994                           
  1995                           ;user.c: 275: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  1996  000992  0E06               	movlw	6
  1997  000994                     u1287:
  1998  000994  2EE8               	decfsz	wreg,f,c
  1999  000996  D7FE               	bra	u1287
  2000  000998  D000               	nop2	
  2001  00099A  0100               	movlb	0	; () banked
  2002  00099C  4B74               	infsnz	send_command@i& (0+255),f,b
  2003  00099E  2B75               	incf	(send_command@i+1)& (0+255),f,b
  2004  0009A0  D7D2               	goto	l1711
  2005  0009A2                     l235:
  2006                           
  2007                           ; BSR set to: 0
  2008  0009A2  0012               	return		;funcret
  2009  0009A4                     __end_of_send_command:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           wreg	equ	0xFE8
  2013                           indf2	equ	0xFDF
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8
  2017                           
  2018 ;; *************** function _io_as_output *****************
  2019 ;; Defined at:
  2020 ;;		line 285 in file "user.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;		None
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		None
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2034 ;;      Params:         0       0       0       0       0       0       0       0       0
  2035 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2036 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2037 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2038 ;;Total ram usage:        0 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    3
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_send_command
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text12
  2049  000B0C                     __ptext12:
  2050                           	opt stack 0
  2051  000B0C                     _io_as_output:
  2052                           	opt stack 24
  2053                           
  2054                           ;user.c: 287: TRISA3 = 0;
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;incstack = 0
  2058  000B0C  9692               	bcf	3986,3,c	;volatile
  2059  000B0E  0012               	return		;funcret
  2060  000B10                     __end_of_io_as_output:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           wreg	equ	0xFE8
  2064                           indf2	equ	0xFDF
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _io_as_input *****************
  2070 ;; Defined at:
  2071 ;;		line 280 in file "user.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;		None
  2076 ;; Return value:  Size  Location     Type
  2077 ;;                  1    wreg      void 
  2078 ;; Registers used:
  2079 ;;		None
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2085 ;;      Params:         0       0       0       0       0       0       0       0       0
  2086 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2088 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2089 ;;Total ram usage:        0 bytes
  2090 ;; Hardware stack levels used:    1
  2091 ;; Hardware stack levels required when called:    3
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_byte_read
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text13
  2100  000B10                     __ptext13:
  2101                           	opt stack 0
  2102  000B10                     _io_as_input:
  2103                           	opt stack 25
  2104                           
  2105                           ;user.c: 282: TRISA3 = 1;
  2106                           
  2107                           ;incstack = 0
  2108  000B10  8692               	bsf	3986,3,c	;volatile
  2109  000B12  0012               	return		;funcret
  2110  000B14                     __end_of_io_as_input:
  2111                           	opt stack 0
  2112                           tblptru	equ	0xFF8
  2113                           wreg	equ	0xFE8
  2114                           indf2	equ	0xFDF
  2115                           fsr2h	equ	0xFDA
  2116                           fsr2l	equ	0xFD9
  2117                           status	equ	0xFD8
  2118                           
  2119 ;; *************** function _ce_enable *****************
  2120 ;; Defined at:
  2121 ;;		line 142 in file "user.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		None
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2135 ;;      Params:         0       0       0       0       0       0       0       0       0
  2136 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2138 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2139 ;;Total ram usage:        0 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    3
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		_byte_read
  2146 ;;		_byte_write
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text14
  2151  000B14                     __ptext14:
  2152                           	opt stack 0
  2153  000B14                     _ce_enable:
  2154                           	opt stack 25
  2155                           
  2156                           ;user.c: 143: RA5 = 1;
  2157                           
  2158                           ;incstack = 0
  2159  000B14  8A80               	bsf	3968,5,c	;volatile
  2160  000B16  0012               	return		;funcret
  2161  000B18                     __end_of_ce_enable:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           wreg	equ	0xFE8
  2165                           indf2	equ	0xFDF
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _ce_disable *****************
  2171 ;; Defined at:
  2172 ;;		line 145 in file "user.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		None
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2186 ;;      Params:         0       0       0       0       0       0       0       0       0
  2187 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2189 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    3
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_byte_read
  2197 ;;		_byte_write
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text15
  2202  000AFE                     __ptext15:
  2203                           	opt stack 0
  2204  000AFE                     _ce_disable:
  2205                           	opt stack 25
  2206                           
  2207                           ;user.c: 146: RA5 = 0;
  2208                           
  2209                           ;incstack = 0
  2210  000AFE  9A80               	bcf	3968,5,c	;volatile
  2211                           
  2212                           ;user.c: 147: RA2 = 0;
  2213  000B00  9480               	bcf	3968,2,c	;volatile
  2214  000B02  0012               	return		;funcret
  2215  000B04                     __end_of_ce_disable:
  2216                           	opt stack 0
  2217                           tblptru	equ	0xFF8
  2218                           wreg	equ	0xFE8
  2219                           indf2	equ	0xFDF
  2220                           fsr2h	equ	0xFDA
  2221                           fsr2l	equ	0xFD9
  2222                           status	equ	0xFD8
  2223                           
  2224 ;; *************** function _InitApp *****************
  2225 ;; Defined at:
  2226 ;;		line 28 in file "user.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2240 ;;      Params:         0       0       0       0       0       0       0       0       0
  2241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2243 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2244 ;;Total ram usage:        0 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    3
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text16
  2255  000AA8                     __ptext16:
  2256                           	opt stack 0
  2257  000AA8                     _InitApp:
  2258                           	opt stack 27
  2259                           
  2260                           ;user.c: 32: TRISB3 = 0;
  2261                           
  2262                           ;incstack = 0
  2263  000AA8  9693               	bcf	3987,3,c	;volatile
  2264                           
  2265                           ;user.c: 33: TRISB4 = 0;
  2266  000AAA  9893               	bcf	3987,4,c	;volatile
  2267                           
  2268                           ;user.c: 35: CCP2CON = 0x00;
  2269  000AAC  0E00               	movlw	0
  2270  000AAE  6EBA               	movwf	4026,c	;volatile
  2271                           
  2272                           ;user.c: 36: SSPCON1 = 0X00;
  2273  000AB0  0E00               	movlw	0
  2274  000AB2  6EC6               	movwf	4038,c	;volatile
  2275                           
  2276                           ;user.c: 37: ADCON1 = 0X0F;
  2277  000AB4  0E0F               	movlw	15
  2278  000AB6  6EC1               	movwf	4033,c	;volatile
  2279                           
  2280                           ;user.c: 38: INTCON = 0b10001000;
  2281  000AB8  0E88               	movlw	136
  2282  000ABA  6EF2               	movwf	intcon,c	;volatile
  2283                           
  2284                           ;user.c: 39: TRISB1 = 0;
  2285  000ABC  9293               	bcf	3987,1,c	;volatile
  2286                           
  2287                           ;user.c: 40: TRISA2 = 0;
  2288  000ABE  9492               	bcf	3986,2,c	;volatile
  2289                           
  2290                           ;user.c: 41: TRISA5 = 0;
  2291  000AC0  9A92               	bcf	3986,5,c	;volatile
  2292                           
  2293                           ;user.c: 42: TRISA3 = 0;
  2294  000AC2  9692               	bcf	3986,3,c	;volatile
  2295                           
  2296                           ;user.c: 46: state = 0;
  2297  000AC4  0E00               	movlw	0
  2298  000AC6  6E4C               	movwf	_state+1,c
  2299  000AC8  0E00               	movlw	0
  2300  000ACA  6E4B               	movwf	_state,c
  2301                           
  2302                           ;user.c: 47: next = 0;
  2303  000ACC  0E00               	movlw	0
  2304  000ACE  0100               	movlb	0	; () banked
  2305  000AD0  6F8B               	movwf	(_next+1)& (0+255),b
  2306  000AD2  0E00               	movlw	0
  2307  000AD4  6F8A               	movwf	_next& (0+255),b
  2308                           
  2309                           ; BSR set to: 0
  2310  000AD6  0012               	return		;funcret
  2311  000AD8                     __end_of_InitApp:
  2312                           	opt stack 0
  2313                           tblptru	equ	0xFF8
  2314                           intcon	equ	0xFF2
  2315                           wreg	equ	0xFE8
  2316                           indf2	equ	0xFDF
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _ConfigureOscillator *****************
  2322 ;; Defined at:
  2323 ;;		line 24 in file "system.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		None
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2337 ;;      Params:         0       0       0       0       0       0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2340 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2341 ;;Total ram usage:        0 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    3
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_main
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text17
  2352  000B18                     __ptext17:
  2353                           	opt stack 0
  2354  000B18                     _ConfigureOscillator:
  2355                           	opt stack 27
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;incstack = 0
  2359  000B18  0012               	return		;funcret
  2360  000B1A                     __end_of_ConfigureOscillator:
  2361                           	opt stack 0
  2362                           tblptru	equ	0xFF8
  2363                           intcon	equ	0xFF2
  2364                           wreg	equ	0xFE8
  2365                           indf2	equ	0xFDF
  2366                           fsr2h	equ	0xFDA
  2367                           fsr2l	equ	0xFD9
  2368                           status	equ	0xFD8
  2369                           
  2370 ;; *************** function _low_isr *****************
  2371 ;; Defined at:
  2372 ;;		line 105 in file "interrupts.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;		None
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;		None
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		None
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2386 ;;      Params:         0       0       0       0       0       0       0       0       0
  2387 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2388 ;;      Temps:          0      17       0       0       0       0       0       0       0
  2389 ;;      Totals:         0      17       0       0       0       0       0       0       0
  2390 ;;Total ram usage:       17 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    2
  2393 ;; This function calls:
  2394 ;;		Nothing
  2395 ;; This function is called by:
  2396 ;;		Interrupt level 1
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	intcodelo
  2401  000018                     __pintcodelo:
  2402                           	opt stack 0
  2403  000018                     _low_isr:
  2404                           	opt stack 24
  2405                           
  2406                           ;incstack = 0
  2407  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2408  00001A  CFD8 F060          	movff	status,??_low_isr
  2409  00001E  CFE8 F061          	movff	wreg,??_low_isr+1
  2410  000022  CFE0 F062          	movff	bsr,??_low_isr+2
  2411  000026  CFFA F063          	movff	pclath,??_low_isr+3
  2412  00002A  CFFB F064          	movff	pclatu,??_low_isr+4
  2413  00002E  CFE9 F065          	movff	fsr0l,??_low_isr+5
  2414  000032  CFEA F066          	movff	fsr0h,??_low_isr+6
  2415  000036  CFE1 F067          	movff	fsr1l,??_low_isr+7
  2416  00003A  CFE2 F068          	movff	fsr1h,??_low_isr+8
  2417  00003E  CFD9 F069          	movff	fsr2l,??_low_isr+9
  2418  000042  CFDA F06A          	movff	fsr2h,??_low_isr+10
  2419  000046  CFF3 F06B          	movff	prodl,??_low_isr+11
  2420  00004A  CFF4 F06C          	movff	prodh,??_low_isr+12
  2421  00004E  CFF6 F06D          	movff	tblptrl,??_low_isr+13
  2422  000052  CFF7 F06E          	movff	tblptrh,??_low_isr+14
  2423  000056  CFF8 F06F          	movff	tblptru,??_low_isr+15
  2424  00005A  CFF5 F070          	movff	tablat,??_low_isr+16
  2425  00005E  C070  FFF5         	movff	??_low_isr+16,tablat
  2426  000062  C06F  FFF8         	movff	??_low_isr+15,tblptru
  2427  000066  C06E  FFF7         	movff	??_low_isr+14,tblptrh
  2428  00006A  C06D  FFF6         	movff	??_low_isr+13,tblptrl
  2429  00006E  C06C  FFF4         	movff	??_low_isr+12,prodh
  2430  000072  C06B  FFF3         	movff	??_low_isr+11,prodl
  2431  000076  C06A  FFDA         	movff	??_low_isr+10,fsr2h
  2432  00007A  C069  FFD9         	movff	??_low_isr+9,fsr2l
  2433  00007E  C068  FFE2         	movff	??_low_isr+8,fsr1h
  2434  000082  C067  FFE1         	movff	??_low_isr+7,fsr1l
  2435  000086  C066  FFEA         	movff	??_low_isr+6,fsr0h
  2436  00008A  C065  FFE9         	movff	??_low_isr+5,fsr0l
  2437  00008E  C064  FFFB         	movff	??_low_isr+4,pclatu
  2438  000092  C063  FFFA         	movff	??_low_isr+3,pclath
  2439  000096  C062  FFE0         	movff	??_low_isr+2,bsr
  2440  00009A  C061  FFE8         	movff	??_low_isr+1,wreg
  2441  00009E  C060  FFD8         	movff	??_low_isr,status
  2442  0000A2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2443  0000A4  0010               	retfie	
  2444  0000A6                     __end_of_low_isr:
  2445                           	opt stack 0
  2446                           pclatu	equ	0xFFB
  2447                           pclath	equ	0xFFA
  2448                           tblptru	equ	0xFF8
  2449                           tblptrh	equ	0xFF7
  2450                           tblptrl	equ	0xFF6
  2451                           tablat	equ	0xFF5
  2452                           prodh	equ	0xFF4
  2453                           prodl	equ	0xFF3
  2454                           intcon	equ	0xFF2
  2455                           fsr0h	equ	0xFEA
  2456                           fsr0l	equ	0xFE9
  2457                           wreg	equ	0xFE8
  2458                           fsr1h	equ	0xFE2
  2459                           fsr1l	equ	0xFE1
  2460                           bsr	equ	0xFE0
  2461                           indf2	equ	0xFDF
  2462                           fsr2h	equ	0xFDA
  2463                           fsr2l	equ	0xFD9
  2464                           status	equ	0xFD8
  2465                           
  2466 ;; *************** function _high_isr *****************
  2467 ;; Defined at:
  2468 ;;		line 30 in file "interrupts.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;  code           47   22[COMRAM] unsigned char [47]
  2473 ;;  i               2   72[COMRAM] int 
  2474 ;;  final_code      2   70[COMRAM] int 
  2475 ;;  aux             1   69[COMRAM] unsigned char 
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      void 
  2478 ;; Registers used:
  2479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2485 ;;      Params:         0       0       0       0       0       0       0       0       0
  2486 ;;      Locals:        52       0       0       0       0       0       0       0       0
  2487 ;;      Temps:         17       0       0       0       0       0       0       0       0
  2488 ;;      Totals:        69       0       0       0       0       0       0       0       0
  2489 ;;Total ram usage:       69 bytes
  2490 ;; Hardware stack levels used:    1
  2491 ;; Hardware stack levels required when called:    1
  2492 ;; This function calls:
  2493 ;;		_get_next_state
  2494 ;;		_ir_get_human_code
  2495 ;; This function is called by:
  2496 ;;		Interrupt level 2
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	intcode
  2501  000008                     __pintcode:
  2502                           	opt stack 0
  2503  000008                     _high_isr:
  2504                           	opt stack 24
  2505                           
  2506                           ;incstack = 0
  2507  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2508  00000A  ED9B  F001         	call	int_func,f	;refresh shadow registers
  2509                           pclatu	equ	0xFFB
  2510                           pclath	equ	0xFFA
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           intcon	equ	0xFF2
  2518                           fsr0h	equ	0xFEA
  2519                           fsr0l	equ	0xFE9
  2520                           wreg	equ	0xFE8
  2521                           fsr1h	equ	0xFE2
  2522                           fsr1l	equ	0xFE1
  2523                           bsr	equ	0xFE0
  2524                           indf2	equ	0xFDF
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529                           	psect	intcode_body
  2530  000336                     __pintcode_body:
  2531                           	opt stack 24
  2532  000336                     int_func:
  2533                           	opt stack 24
  2534  000336  0006               	pop		; remove dummy address from shadow register refresh
  2535  000338  CFFA F009          	movff	pclath,??_high_isr+3
  2536  00033C  CFFB F00A          	movff	pclatu,??_high_isr+4
  2537  000340  CFE9 F00B          	movff	fsr0l,??_high_isr+5
  2538  000344  CFEA F00C          	movff	fsr0h,??_high_isr+6
  2539  000348  CFE1 F00D          	movff	fsr1l,??_high_isr+7
  2540  00034C  CFE2 F00E          	movff	fsr1h,??_high_isr+8
  2541  000350  CFD9 F00F          	movff	fsr2l,??_high_isr+9
  2542  000354  CFDA F010          	movff	fsr2h,??_high_isr+10
  2543  000358  CFF3 F011          	movff	prodl,??_high_isr+11
  2544  00035C  CFF4 F012          	movff	prodh,??_high_isr+12
  2545  000360  CFF6 F013          	movff	tblptrl,??_high_isr+13
  2546  000364  CFF7 F014          	movff	tblptrh,??_high_isr+14
  2547  000368  CFF8 F015          	movff	tblptru,??_high_isr+15
  2548  00036C  CFF5 F016          	movff	tablat,??_high_isr+16
  2549                           
  2550                           ;interrupts.c: 66: if (RBIF == 1)
  2551  000370  A0F2               	btfss	intcon,0,c	;volatile
  2552  000372  D073               	goto	i2l29
  2553                           
  2554                           ;interrupts.c: 67: {
  2555                           ;interrupts.c: 69: INTCONbits.GIE = 0;
  2556  000374  9EF2               	bcf	intcon,7,c	;volatile
  2557                           
  2558                           ;interrupts.c: 70: char aux = 0;
  2559  000376  0E00               	movlw	0
  2560  000378  6E46               	movwf	high_isr@aux,c
  2561                           
  2562                           ;interrupts.c: 72: int i;
  2563                           ;interrupts.c: 73: char code[47];
  2564                           ;interrupts.c: 75: _delay((unsigned long)((40.6)*(20000000L/4000.0)));
  2565  00037A  0E02               	movlw	2
  2566  00037C  6E07               	movwf	(??_high_isr+1)& (0+255),c
  2567  00037E  0E08               	movlw	8
  2568  000380  6E06               	movwf	??_high_isr& (0+255),c
  2569  000382  0EA0               	movlw	160
  2570  000384                     i2u129_47:
  2571  000384  2EE8               	decfsz	wreg,f,c
  2572  000386  D7FE               	bra	i2u129_47
  2573  000388  2E06               	decfsz	??_high_isr& (0+255),f,c
  2574  00038A  D7FC               	bra	i2u129_47
  2575  00038C  2E07               	decfsz	(??_high_isr+1)& (0+255),f,c
  2576  00038E  D7FA               	bra	i2u129_47
  2577                           
  2578                           ;interrupts.c: 76: for(i = 0; i < 47 ; i ++)
  2579  000390  0E00               	movlw	0
  2580  000392  6E4A               	movwf	high_isr@i+1,c
  2581  000394  0E00               	movlw	0
  2582  000396  6E49               	movwf	high_isr@i,c
  2583  000398                     i2l2091:
  2584  000398  BE4A               	btfsc	high_isr@i+1,7,c
  2585  00039A  D006               	goto	i2l2095
  2586  00039C  504A               	movf	high_isr@i+1,w,c
  2587  00039E  E118               	bnz	i2l2103
  2588  0003A0  0E2F               	movlw	47
  2589  0003A2  5C49               	subwf	high_isr@i,w,c
  2590  0003A4  B0D8               	btfsc	status,0,c
  2591  0003A6  D014               	goto	i2l2103
  2592  0003A8                     i2l2095:
  2593                           
  2594                           ;interrupts.c: 77: {
  2595                           ;interrupts.c: 78: code[i] = RB5;
  2596  0003A8  0E17               	movlw	low high_isr@code
  2597  0003AA  2449               	addwf	high_isr@i,w,c
  2598  0003AC  6ED9               	movwf	fsr2l,c
  2599  0003AE  0E00               	movlw	high high_isr@code
  2600  0003B0  204A               	addwfc	high_isr@i+1,w,c
  2601  0003B2  6EDA               	movwf	fsr2h,c
  2602  0003B4  0E00               	movlw	0
  2603  0003B6  BA81               	btfsc	3969,5,c	;volatile
  2604  0003B8  0E01               	movlw	1
  2605  0003BA  6EDF               	movwf	indf2,c
  2606                           
  2607                           ;interrupts.c: 79: _delay((unsigned long)((590)*(20000000L/4000000.0)));
  2608  0003BC  0E04               	movlw	4
  2609  0003BE  6E06               	movwf	??_high_isr& (0+255),c
  2610  0003C0  0ED4               	movlw	212
  2611  0003C2                     i2u130_47:
  2612  0003C2  2EE8               	decfsz	wreg,f,c
  2613  0003C4  D7FE               	bra	i2u130_47
  2614  0003C6  2E06               	decfsz	??_high_isr& (0+255),f,c
  2615  0003C8  D7FC               	bra	i2u130_47
  2616  0003CA  4A49               	infsnz	high_isr@i,f,c
  2617  0003CC  2A4A               	incf	high_isr@i+1,f,c
  2618  0003CE  D7E4               	goto	i2l2091
  2619  0003D0                     i2l2103:
  2620                           
  2621                           ;interrupts.c: 80: }
  2622                           ;interrupts.c: 81: int final_code = 0;
  2623  0003D0  0E00               	movlw	0
  2624  0003D2  6E48               	movwf	high_isr@final_code+1,c
  2625  0003D4  0E00               	movlw	0
  2626  0003D6  6E47               	movwf	high_isr@final_code,c
  2627                           
  2628                           ;interrupts.c: 82: for(i = 0; i<16;i++)
  2629  0003D8  0E00               	movlw	0
  2630  0003DA  6E4A               	movwf	high_isr@i+1,c
  2631  0003DC  0E00               	movlw	0
  2632  0003DE  6E49               	movwf	high_isr@i,c
  2633  0003E0                     i2l2105:
  2634  0003E0  BE4A               	btfsc	high_isr@i+1,7,c
  2635  0003E2  D006               	goto	i2l2109
  2636  0003E4  504A               	movf	high_isr@i+1,w,c
  2637  0003E6  E11D               	bnz	i2l2115
  2638  0003E8  0E10               	movlw	16
  2639  0003EA  5C49               	subwf	high_isr@i,w,c
  2640  0003EC  B0D8               	btfsc	status,0,c
  2641  0003EE  D019               	goto	i2l2115
  2642  0003F0                     i2l2109:
  2643                           
  2644                           ;interrupts.c: 83: {
  2645                           ;interrupts.c: 84: final_code |= code[i]<<i;
  2646  0003F0  C049  F006         	movff	high_isr@i,??_high_isr
  2647  0003F4  0E17               	movlw	low high_isr@code
  2648  0003F6  2449               	addwf	high_isr@i,w,c
  2649  0003F8  6ED9               	movwf	fsr2l,c
  2650  0003FA  0E00               	movlw	high high_isr@code
  2651  0003FC  204A               	addwfc	high_isr@i+1,w,c
  2652  0003FE  6EDA               	movwf	fsr2h,c
  2653  000400  50DF               	movf	indf2,w,c
  2654  000402  6E07               	movwf	(??_high_isr+1)& (0+255),c
  2655  000404  6A08               	clrf	(??_high_isr+2)& (0+255),c
  2656  000406  2A06               	incf	??_high_isr,f,c
  2657  000408  D003               	goto	i2u110_44
  2658  00040A                     i2u110_45:
  2659  00040A  90D8               	bcf	status,0,c
  2660  00040C  3607               	rlcf	??_high_isr+1,f,c
  2661  00040E  3608               	rlcf	??_high_isr+2,f,c
  2662  000410                     i2u110_44:
  2663  000410  2E06               	decfsz	??_high_isr,f,c
  2664  000412  D7FB               	goto	i2u110_45
  2665  000414  5007               	movf	??_high_isr+1,w,c
  2666  000416  1247               	iorwf	high_isr@final_code,f,c
  2667  000418  5008               	movf	??_high_isr+2,w,c
  2668  00041A  1248               	iorwf	high_isr@final_code+1,f,c
  2669  00041C  4A49               	infsnz	high_isr@i,f,c
  2670  00041E  2A4A               	incf	high_isr@i+1,f,c
  2671  000420  D7DF               	goto	i2l2105
  2672  000422                     i2l2115:
  2673                           
  2674                           ;interrupts.c: 85: }
  2675                           ;interrupts.c: 90: if(final_code !=0xff)
  2676  000422  2847               	incf	high_isr@final_code,w,c
  2677  000424  1048               	iorwf	high_isr@final_code+1,w,c
  2678  000426  B4D8               	btfsc	status,2,c
  2679  000428  D016               	goto	i2l2119
  2680                           
  2681                           ;interrupts.c: 91: {
  2682                           ;interrupts.c: 92: human_code = ir_get_human_code(final_code);
  2683  00042A  C047  F001         	movff	high_isr@final_code,ir_get_human_code@code
  2684  00042E  C048  F002         	movff	high_isr@final_code+1,ir_get_human_code@code+1
  2685  000432  EC4B  F002         	call	_ir_get_human_code	;wreg free
  2686  000436  0100               	movlb	0	; () banked
  2687  000438  6F8C               	movwf	_human_code& (0+255),b
  2688                           
  2689                           ;interrupts.c: 93: next = get_next_state(state,final_code);
  2690  00043A  C04B  F001         	movff	_state,get_next_state@state
  2691  00043E  C04C  F002         	movff	_state+1,get_next_state@state+1
  2692  000442  C047  F003         	movff	high_isr@final_code,get_next_state@code
  2693  000446  C048  F004         	movff	high_isr@final_code+1,get_next_state@code+1
  2694  00044A  ECEC  F002         	call	_get_next_state	;wreg free
  2695  00044E  C001  F08A         	movff	?_get_next_state,_next
  2696  000452  C002  F08B         	movff	?_get_next_state+1,_next+1
  2697  000456                     i2l2119:
  2698                           
  2699                           ;interrupts.c: 94: }
  2700                           ;interrupts.c: 96: RBIF = 0;
  2701  000456  90F2               	bcf	intcon,0,c	;volatile
  2702                           
  2703                           ;interrupts.c: 97: INTCONbits.GIE = 1;
  2704  000458  8EF2               	bsf	intcon,7,c	;volatile
  2705  00045A                     i2l29:
  2706  00045A  C016  FFF5         	movff	??_high_isr+16,tablat
  2707  00045E  C015  FFF8         	movff	??_high_isr+15,tblptru
  2708  000462  C014  FFF7         	movff	??_high_isr+14,tblptrh
  2709  000466  C013  FFF6         	movff	??_high_isr+13,tblptrl
  2710  00046A  C012  FFF4         	movff	??_high_isr+12,prodh
  2711  00046E  C011  FFF3         	movff	??_high_isr+11,prodl
  2712  000472  C010  FFDA         	movff	??_high_isr+10,fsr2h
  2713  000476  C00F  FFD9         	movff	??_high_isr+9,fsr2l
  2714  00047A  C00E  FFE2         	movff	??_high_isr+8,fsr1h
  2715  00047E  C00D  FFE1         	movff	??_high_isr+7,fsr1l
  2716  000482  C00C  FFEA         	movff	??_high_isr+6,fsr0h
  2717  000486  C00B  FFE9         	movff	??_high_isr+5,fsr0l
  2718  00048A  C00A  FFFB         	movff	??_high_isr+4,pclatu
  2719  00048E  C009  FFFA         	movff	??_high_isr+3,pclath
  2720  000492  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2721  000494  0011               	retfie		f
  2722  000496                     __end_of_high_isr:
  2723                           	opt stack 0
  2724                           pclatu	equ	0xFFB
  2725                           pclath	equ	0xFFA
  2726                           tblptru	equ	0xFF8
  2727                           tblptrh	equ	0xFF7
  2728                           tblptrl	equ	0xFF6
  2729                           tablat	equ	0xFF5
  2730                           prodh	equ	0xFF4
  2731                           prodl	equ	0xFF3
  2732                           intcon	equ	0xFF2
  2733                           fsr0h	equ	0xFEA
  2734                           fsr0l	equ	0xFE9
  2735                           wreg	equ	0xFE8
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           bsr	equ	0xFE0
  2739                           indf2	equ	0xFDF
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _ir_get_human_code *****************
  2745 ;; Defined at:
  2746 ;;		line 324 in file "user.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  code            2    0[COMRAM] int 
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;  human_read_c    1    4[COMRAM] unsigned char 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      unsigned char 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2760 ;;      Params:         2       0       0       0       0       0       0       0       0
  2761 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2762 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2763 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2764 ;;Total ram usage:        5 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; This function calls:
  2767 ;;		Nothing
  2768 ;; This function is called by:
  2769 ;;		_high_isr
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text20
  2774  000496                     __ptext20:
  2775                           	opt stack 0
  2776  000496                     _ir_get_human_code:
  2777                           	opt stack 24
  2778                           
  2779                           ;user.c: 326: char human_read_code;
  2780                           ;user.c: 327: switch(code)
  2781                           
  2782                           ;incstack = 0
  2783  000496  D035               	goto	i2l1907
  2784  000498                     i2l1867:
  2785                           
  2786                           ;user.c: 330: human_read_code = 10;
  2787  000498  0E0A               	movlw	10
  2788  00049A  6E05               	movwf	ir_get_human_code@human_read_code,c
  2789                           
  2790                           ;user.c: 331: break;
  2791  00049C  0012               	return	
  2792  00049E                     i2l1869:
  2793                           
  2794                           ;user.c: 333: human_read_code = 11;
  2795  00049E  0E0B               	movlw	11
  2796  0004A0  6E05               	movwf	ir_get_human_code@human_read_code,c
  2797                           
  2798                           ;user.c: 334: break;
  2799  0004A2  0012               	return	
  2800  0004A4                     i2l1871:
  2801                           
  2802                           ;user.c: 336: human_read_code = 12;
  2803  0004A4  0E0C               	movlw	12
  2804  0004A6  6E05               	movwf	ir_get_human_code@human_read_code,c
  2805                           
  2806                           ;user.c: 337: break;
  2807  0004A8  0012               	return	
  2808  0004AA                     i2l1873:
  2809                           
  2810                           ;user.c: 339: human_read_code = 13;
  2811  0004AA  0E0D               	movlw	13
  2812  0004AC  6E05               	movwf	ir_get_human_code@human_read_code,c
  2813                           
  2814                           ;user.c: 340: break;
  2815  0004AE  0012               	return	
  2816  0004B0                     i2l1875:
  2817                           
  2818                           ;user.c: 342: human_read_code = 14;
  2819  0004B0  0E0E               	movlw	14
  2820  0004B2  6E05               	movwf	ir_get_human_code@human_read_code,c
  2821                           
  2822                           ;user.c: 343: break;
  2823  0004B4  0012               	return	
  2824  0004B6                     i2l1877:
  2825                           
  2826                           ;user.c: 345: human_read_code = 1;
  2827  0004B6  0E01               	movlw	1
  2828  0004B8  6E05               	movwf	ir_get_human_code@human_read_code,c
  2829                           
  2830                           ;user.c: 346: break;
  2831  0004BA  0012               	return	
  2832  0004BC                     i2l1879:
  2833                           
  2834                           ;user.c: 348: human_read_code = 2;
  2835  0004BC  0E02               	movlw	2
  2836  0004BE  6E05               	movwf	ir_get_human_code@human_read_code,c
  2837                           
  2838                           ;user.c: 349: break;
  2839  0004C0  0012               	return	
  2840  0004C2                     i2l1881:
  2841                           
  2842                           ;user.c: 351: human_read_code = 3;
  2843  0004C2  0E03               	movlw	3
  2844  0004C4  6E05               	movwf	ir_get_human_code@human_read_code,c
  2845                           
  2846                           ;user.c: 352: break;
  2847  0004C6  0012               	return	
  2848  0004C8                     i2l1883:
  2849                           
  2850                           ;user.c: 354: human_read_code = 4;
  2851  0004C8  0E04               	movlw	4
  2852  0004CA  6E05               	movwf	ir_get_human_code@human_read_code,c
  2853                           
  2854                           ;user.c: 355: break;
  2855  0004CC  0012               	return	
  2856  0004CE                     i2l1885:
  2857                           
  2858                           ;user.c: 357: human_read_code = 5;
  2859  0004CE  0E05               	movlw	5
  2860  0004D0  6E05               	movwf	ir_get_human_code@human_read_code,c
  2861                           
  2862                           ;user.c: 358: break;
  2863  0004D2  0012               	return	
  2864  0004D4                     i2l1887:
  2865                           
  2866                           ;user.c: 360: human_read_code = 6;
  2867  0004D4  0E06               	movlw	6
  2868  0004D6  6E05               	movwf	ir_get_human_code@human_read_code,c
  2869                           
  2870                           ;user.c: 361: break;
  2871  0004D8  0012               	return	
  2872  0004DA                     i2l1889:
  2873                           
  2874                           ;user.c: 363: human_read_code = 7;
  2875  0004DA  0E07               	movlw	7
  2876  0004DC  6E05               	movwf	ir_get_human_code@human_read_code,c
  2877                           
  2878                           ;user.c: 364: break;
  2879  0004DE  0012               	return	
  2880  0004E0                     i2l1891:
  2881                           
  2882                           ;user.c: 366: human_read_code = 8;
  2883  0004E0  0E08               	movlw	8
  2884  0004E2  6E05               	movwf	ir_get_human_code@human_read_code,c
  2885                           
  2886                           ;user.c: 367: break;
  2887  0004E4  0012               	return	
  2888  0004E6                     i2l1893:
  2889                           
  2890                           ;user.c: 369: human_read_code = 9;
  2891  0004E6  0E09               	movlw	9
  2892  0004E8  6E05               	movwf	ir_get_human_code@human_read_code,c
  2893                           
  2894                           ;user.c: 370: break;
  2895  0004EA  0012               	return	
  2896  0004EC                     i2l1895:
  2897                           
  2898                           ;user.c: 372: human_read_code = 0;
  2899  0004EC  0E00               	movlw	0
  2900  0004EE  6E05               	movwf	ir_get_human_code@human_read_code,c
  2901                           
  2902                           ;user.c: 373: break;
  2903  0004F0  0012               	return	
  2904  0004F2                     i2l1897:
  2905                           
  2906                           ;user.c: 375: human_read_code = 15;
  2907  0004F2  0E0F               	movlw	15
  2908  0004F4  6E05               	movwf	ir_get_human_code@human_read_code,c
  2909                           
  2910                           ;user.c: 376: break;
  2911  0004F6  0012               	return	
  2912  0004F8                     i2l1899:
  2913                           
  2914                           ;user.c: 378: human_read_code = 16;
  2915  0004F8  0E10               	movlw	16
  2916  0004FA  6E05               	movwf	ir_get_human_code@human_read_code,c
  2917                           
  2918                           ;user.c: 379: break;
  2919  0004FC  0012               	return	
  2920  0004FE                     i2l1901:
  2921                           
  2922                           ;user.c: 381: return -1;
  2923  0004FE  0EFF               	movlw	255
  2924                           
  2925                           ;user.c: 382: }
  2926  000500  0012               	return	
  2927  000502                     i2l1907:
  2928  000502  C001  F003         	movff	ir_get_human_code@code,??_ir_get_human_code
  2929  000506  C002  F004         	movff	ir_get_human_code@code+1,??_ir_get_human_code+1
  2930                           
  2931                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 10 sub-s
      +                          witches
  2932                           ; Switch size 1, requested type "space"
  2933                           ; Number of cases is 10, Range of values is 59 to 235
  2934                           ; switch strategies available:
  2935                           ; Name         Instructions Cycles
  2936                           ; simple_byte           31    16 (average)
  2937                           ;	Chosen strategy is simple_byte
  2938  00050A  5004               	movf	??_ir_get_human_code+1,w,c
  2939  00050C  0A3B               	xorlw	59	; case 59
  2940  00050E  B4D8               	btfsc	status,2,c
  2941  000510  D01C               	goto	i2l2409
  2942  000512  0A50               	xorlw	80	; case 107
  2943  000514  B4D8               	btfsc	status,2,c
  2944  000516  D01E               	goto	i2l2411
  2945  000518  0A05               	xorlw	5	; case 110
  2946  00051A  B4D8               	btfsc	status,2,c
  2947  00051C  D020               	goto	i2l2413
  2948  00051E  0AC4               	xorlw	196	; case 170
  2949  000520  B4D8               	btfsc	status,2,c
  2950  000522  D028               	goto	i2l2415
  2951  000524  0A01               	xorlw	1	; case 171
  2952  000526  B4D8               	btfsc	status,2,c
  2953  000528  D030               	goto	i2l2417
  2954  00052A  0A05               	xorlw	5	; case 174
  2955  00052C  B4D8               	btfsc	status,2,c
  2956  00052E  D035               	goto	i2l2419
  2957  000530  0A14               	xorlw	20	; case 186
  2958  000532  B4D8               	btfsc	status,2,c
  2959  000534  D03A               	goto	i2l2421
  2960  000536  0A01               	xorlw	1	; case 187
  2961  000538  B4D8               	btfsc	status,2,c
  2962  00053A  D03C               	goto	i2l2423
  2963  00053C  0A51               	xorlw	81	; case 234
  2964  00053E  B4D8               	btfsc	status,2,c
  2965  000540  D041               	goto	i2l2425
  2966  000542  0A01               	xorlw	1	; case 235
  2967  000544  B4D8               	btfsc	status,2,c
  2968  000546  D043               	goto	i2l2427
  2969  000548  D7DA               	goto	i2l1901
  2970  00054A                     i2l2409:
  2971                           
  2972                           ; Switch size 1, requested type "space"
  2973                           ; Number of cases is 1, Range of values is 173 to 173
  2974                           ; switch strategies available:
  2975                           ; Name         Instructions Cycles
  2976                           ; simple_byte            4     3 (average)
  2977                           ;	Chosen strategy is simple_byte
  2978  00054A  5003               	movf	??_ir_get_human_code,w,c
  2979  00054C  0AAD               	xorlw	173	; case 173
  2980  00054E  B4D8               	btfsc	status,2,c
  2981  000550  D7B8               	goto	i2l1881
  2982  000552  D7D5               	goto	i2l1901
  2983  000554                     i2l2411:
  2984                           
  2985                           ; Switch size 1, requested type "space"
  2986                           ; Number of cases is 1, Range of values is 185 to 185
  2987                           ; switch strategies available:
  2988                           ; Name         Instructions Cycles
  2989                           ; simple_byte            4     3 (average)
  2990                           ;	Chosen strategy is simple_byte
  2991  000554  5003               	movf	??_ir_get_human_code,w,c
  2992  000556  0AB9               	xorlw	185	; case 185
  2993  000558  B4D8               	btfsc	status,2,c
  2994  00055A  D7AD               	goto	i2l1877
  2995  00055C  D7D0               	goto	i2l1901
  2996  00055E                     i2l2413:
  2997                           
  2998                           ; Switch size 1, requested type "space"
  2999                           ; Number of cases is 3, Range of values is 173 to 233
  3000                           ; switch strategies available:
  3001                           ; Name         Instructions Cycles
  3002                           ; simple_byte           10     6 (average)
  3003                           ;	Chosen strategy is simple_byte
  3004  00055E  5003               	movf	??_ir_get_human_code,w,c
  3005  000560  0AAD               	xorlw	173	; case 173
  3006  000562  B4D8               	btfsc	status,2,c
  3007  000564  D7AB               	goto	i2l1879
  3008  000566  0A14               	xorlw	20	; case 185
  3009  000568  B4D8               	btfsc	status,2,c
  3010  00056A  D7BD               	goto	i2l1893
  3011  00056C  0A50               	xorlw	80	; case 233
  3012  00056E  B4D8               	btfsc	status,2,c
  3013  000570  D7B7               	goto	i2l1891
  3014  000572  D7C5               	goto	i2l1901
  3015  000574                     i2l2415:
  3016                           
  3017                           ; Switch size 1, requested type "space"
  3018                           ; Number of cases is 3, Range of values is 186 to 238
  3019                           ; switch strategies available:
  3020                           ; Name         Instructions Cycles
  3021                           ; simple_byte           10     6 (average)
  3022                           ;	Chosen strategy is simple_byte
  3023  000574  5003               	movf	??_ir_get_human_code,w,c
  3024  000576  0ABA               	xorlw	186	; case 186
  3025  000578  B4D8               	btfsc	status,2,c
  3026  00057A  D7BB               	goto	i2l1897
  3027  00057C  0A53               	xorlw	83	; case 233
  3028  00057E  B4D8               	btfsc	status,2,c
  3029  000580  D794               	goto	i2l1873
  3030  000582  0A07               	xorlw	7	; case 238
  3031  000584  B4D8               	btfsc	status,2,c
  3032  000586  D794               	goto	i2l1875
  3033  000588  D7BA               	goto	i2l1901
  3034  00058A                     i2l2417:
  3035                           
  3036                           ; Switch size 1, requested type "space"
  3037                           ; Number of cases is 2, Range of values is 169 to 185
  3038                           ; switch strategies available:
  3039                           ; Name         Instructions Cycles
  3040                           ; simple_byte            7     4 (average)
  3041                           ;	Chosen strategy is simple_byte
  3042  00058A  5003               	movf	??_ir_get_human_code,w,c
  3043  00058C  0AA9               	xorlw	169	; case 169
  3044  00058E  B4D8               	btfsc	status,2,c
  3045  000590  D7A4               	goto	i2l1889
  3046  000592  0A10               	xorlw	16	; case 185
  3047  000594  B4D8               	btfsc	status,2,c
  3048  000596  D780               	goto	i2l1867
  3049  000598  D7B2               	goto	i2l1901
  3050  00059A                     i2l2419:
  3051                           
  3052                           ; Switch size 1, requested type "space"
  3053                           ; Number of cases is 2, Range of values is 186 to 233
  3054                           ; switch strategies available:
  3055                           ; Name         Instructions Cycles
  3056                           ; simple_byte            7     4 (average)
  3057                           ;	Chosen strategy is simple_byte
  3058  00059A  5003               	movf	??_ir_get_human_code,w,c
  3059  00059C  0ABA               	xorlw	186	; case 186
  3060  00059E  B4D8               	btfsc	status,2,c
  3061  0005A0  D7AB               	goto	i2l1899
  3062  0005A2  0A53               	xorlw	83	; case 233
  3063  0005A4  B4D8               	btfsc	status,2,c
  3064  0005A6  D790               	goto	i2l1883
  3065  0005A8  D7AA               	goto	i2l1901
  3066  0005AA                     i2l2421:
  3067                           
  3068                           ; Switch size 1, requested type "space"
  3069                           ; Number of cases is 1, Range of values is 185 to 185
  3070                           ; switch strategies available:
  3071                           ; Name         Instructions Cycles
  3072                           ; simple_byte            4     3 (average)
  3073                           ;	Chosen strategy is simple_byte
  3074  0005AA  5003               	movf	??_ir_get_human_code,w,c
  3075  0005AC  0AB9               	xorlw	185	; case 185
  3076  0005AE  B4D8               	btfsc	status,2,c
  3077  0005B0  D79D               	goto	i2l1895
  3078  0005B2  D7A5               	goto	i2l1901
  3079  0005B4                     i2l2423:
  3080                           
  3081                           ; Switch size 1, requested type "space"
  3082                           ; Number of cases is 2, Range of values is 169 to 185
  3083                           ; switch strategies available:
  3084                           ; Name         Instructions Cycles
  3085                           ; simple_byte            7     4 (average)
  3086                           ;	Chosen strategy is simple_byte
  3087  0005B4  5003               	movf	??_ir_get_human_code,w,c
  3088  0005B6  0AA9               	xorlw	169	; case 169
  3089  0005B8  B4D8               	btfsc	status,2,c
  3090  0005BA  D789               	goto	i2l1885
  3091  0005BC  0A10               	xorlw	16	; case 185
  3092  0005BE  B4D8               	btfsc	status,2,c
  3093  0005C0  D789               	goto	i2l1887
  3094  0005C2  D79D               	goto	i2l1901
  3095  0005C4                     i2l2425:
  3096                           
  3097                           ; Switch size 1, requested type "space"
  3098                           ; Number of cases is 1, Range of values is 169 to 169
  3099                           ; switch strategies available:
  3100                           ; Name         Instructions Cycles
  3101                           ; simple_byte            4     3 (average)
  3102                           ;	Chosen strategy is simple_byte
  3103  0005C4  5003               	movf	??_ir_get_human_code,w,c
  3104  0005C6  0AA9               	xorlw	169	; case 169
  3105  0005C8  B4D8               	btfsc	status,2,c
  3106  0005CA  D769               	goto	i2l1869
  3107  0005CC  D798               	goto	i2l1901
  3108  0005CE                     i2l2427:
  3109                           
  3110                           ; Switch size 1, requested type "space"
  3111                           ; Number of cases is 1, Range of values is 173 to 173
  3112                           ; switch strategies available:
  3113                           ; Name         Instructions Cycles
  3114                           ; simple_byte            4     3 (average)
  3115                           ;	Chosen strategy is simple_byte
  3116  0005CE  5003               	movf	??_ir_get_human_code,w,c
  3117  0005D0  0AAD               	xorlw	173	; case 173
  3118  0005D2  B4D8               	btfsc	status,2,c
  3119  0005D4  D767               	goto	i2l1871
  3120  0005D6  D793               	goto	i2l1901
  3121  0005D8                     __end_of_ir_get_human_code:
  3122                           	opt stack 0
  3123                           pclatu	equ	0xFFB
  3124                           pclath	equ	0xFFA
  3125                           tblptru	equ	0xFF8
  3126                           tblptrh	equ	0xFF7
  3127                           tblptrl	equ	0xFF6
  3128                           tablat	equ	0xFF5
  3129                           prodh	equ	0xFF4
  3130                           prodl	equ	0xFF3
  3131                           intcon	equ	0xFF2
  3132                           fsr0h	equ	0xFEA
  3133                           fsr0l	equ	0xFE9
  3134                           wreg	equ	0xFE8
  3135                           fsr1h	equ	0xFE2
  3136                           fsr1l	equ	0xFE1
  3137                           bsr	equ	0xFE0
  3138                           indf2	equ	0xFDF
  3139                           fsr2h	equ	0xFDA
  3140                           fsr2l	equ	0xFD9
  3141                           status	equ	0xFD8
  3142                           
  3143 ;; *************** function _get_next_state *****************
  3144 ;; Defined at:
  3145 ;;		line 295 in file "user.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  state           2    0[COMRAM] int 
  3148 ;;  code            2    2[COMRAM] int 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;		None
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  2    0[COMRAM] int 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3160 ;;      Params:         4       0       0       0       0       0       0       0       0
  3161 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3163 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3164 ;;Total ram usage:        4 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; This function calls:
  3167 ;;		Nothing
  3168 ;; This function is called by:
  3169 ;;		_high_isr
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           	psect	text21
  3174  0005D8                     __ptext21:
  3175                           	opt stack 0
  3176  0005D8                     _get_next_state:
  3177                           	opt stack 24
  3178                           
  3179                           ;user.c: 297: if(state == 0 && code == 0xAABA)
  3180                           
  3181                           ;incstack = 0
  3182  0005D8  5001               	movf	get_next_state@state,w,c
  3183  0005DA  1002               	iorwf	get_next_state@state+1,w,c
  3184  0005DC  A4D8               	btfss	status,2,c
  3185  0005DE  D00D               	goto	i2l1955
  3186  0005E0  0EBA               	movlw	186
  3187  0005E2  1803               	xorwf	get_next_state@code,w,c
  3188  0005E4  E10A               	bnz	i2l1955
  3189  0005E6  0EAA               	movlw	170
  3190  0005E8  1804               	xorwf	get_next_state@code+1,w,c
  3191  0005EA  A4D8               	btfss	status,2,c
  3192  0005EC  D006               	goto	i2l1955
  3193                           
  3194                           ;user.c: 298: next = 1;
  3195  0005EE  0E00               	movlw	0
  3196  0005F0  0100               	movlb	0	; () banked
  3197  0005F2  6F8B               	movwf	(_next+1)& (0+255),b
  3198  0005F4  0E01               	movlw	1
  3199  0005F6  6F8A               	movwf	_next& (0+255),b
  3200  0005F8  0012               	return	
  3201  0005FA                     i2l1955:
  3202                           
  3203                           ;user.c: 299: else if(state == 1 && code == 0xAAEE)
  3204  0005FA  0401               	decf	get_next_state@state,w,c
  3205  0005FC  1002               	iorwf	get_next_state@state+1,w,c
  3206  0005FE  A4D8               	btfss	status,2,c
  3207  000600  D00D               	goto	i2l1961
  3208  000602  0EEE               	movlw	238
  3209  000604  1803               	xorwf	get_next_state@code,w,c
  3210  000606  E10A               	bnz	i2l1961
  3211  000608  0EAA               	movlw	170
  3212  00060A  1804               	xorwf	get_next_state@code+1,w,c
  3213  00060C  A4D8               	btfss	status,2,c
  3214  00060E  D006               	goto	i2l1961
  3215                           
  3216                           ;user.c: 300: next = 2;
  3217  000610  0E00               	movlw	0
  3218  000612  0100               	movlb	0	; () banked
  3219  000614  6F8B               	movwf	(_next+1)& (0+255),b
  3220  000616  0E02               	movlw	2
  3221  000618  6F8A               	movwf	_next& (0+255),b
  3222  00061A  0012               	return	
  3223  00061C                     i2l1961:
  3224                           
  3225                           ;user.c: 301: else if(state == 2 && code == 0xAAEE)
  3226  00061C  0E02               	movlw	2
  3227  00061E  1801               	xorwf	get_next_state@state,w,c
  3228  000620  1002               	iorwf	get_next_state@state+1,w,c
  3229  000622  A4D8               	btfss	status,2,c
  3230  000624  D00D               	goto	i2l1967
  3231  000626  0EEE               	movlw	238
  3232  000628  1803               	xorwf	get_next_state@code,w,c
  3233  00062A  E10A               	bnz	i2l1967
  3234  00062C  0EAA               	movlw	170
  3235  00062E  1804               	xorwf	get_next_state@code+1,w,c
  3236  000630  A4D8               	btfss	status,2,c
  3237  000632  D006               	goto	i2l1967
  3238                           
  3239                           ;user.c: 302: next = 3;
  3240  000634  0E00               	movlw	0
  3241  000636  0100               	movlb	0	; () banked
  3242  000638  6F8B               	movwf	(_next+1)& (0+255),b
  3243  00063A  0E03               	movlw	3
  3244  00063C  6F8A               	movwf	_next& (0+255),b
  3245  00063E  0012               	return	
  3246  000640                     i2l1967:
  3247                           
  3248                           ;user.c: 303: else if(state == 3 && code == 0xAAEE)
  3249  000640  0E03               	movlw	3
  3250  000642  1801               	xorwf	get_next_state@state,w,c
  3251  000644  1002               	iorwf	get_next_state@state+1,w,c
  3252  000646  A4D8               	btfss	status,2,c
  3253  000648  D00D               	goto	i2l1973
  3254  00064A  0EEE               	movlw	238
  3255  00064C  1803               	xorwf	get_next_state@code,w,c
  3256  00064E  E10A               	bnz	i2l1973
  3257  000650  0EAA               	movlw	170
  3258  000652  1804               	xorwf	get_next_state@code+1,w,c
  3259  000654  A4D8               	btfss	status,2,c
  3260  000656  D006               	goto	i2l1973
  3261                           
  3262                           ;user.c: 304: next = 4;
  3263  000658  0E00               	movlw	0
  3264  00065A  0100               	movlb	0	; () banked
  3265  00065C  6F8B               	movwf	(_next+1)& (0+255),b
  3266  00065E  0E04               	movlw	4
  3267  000660  6F8A               	movwf	_next& (0+255),b
  3268  000662  0012               	return	
  3269  000664                     i2l1973:
  3270                           
  3271                           ;user.c: 305: else if(state == 4 && code == 0xAAEE)
  3272  000664  0E04               	movlw	4
  3273  000666  1801               	xorwf	get_next_state@state,w,c
  3274  000668  1002               	iorwf	get_next_state@state+1,w,c
  3275  00066A  A4D8               	btfss	status,2,c
  3276  00066C  D00D               	goto	i2l1979
  3277  00066E  0EEE               	movlw	238
  3278  000670  1803               	xorwf	get_next_state@code,w,c
  3279  000672  E10A               	bnz	i2l1979
  3280  000674  0EAA               	movlw	170
  3281  000676  1804               	xorwf	get_next_state@code+1,w,c
  3282  000678  A4D8               	btfss	status,2,c
  3283  00067A  D006               	goto	i2l1979
  3284                           
  3285                           ;user.c: 306: next = 1;
  3286  00067C  0E00               	movlw	0
  3287  00067E  0100               	movlb	0	; () banked
  3288  000680  6F8B               	movwf	(_next+1)& (0+255),b
  3289  000682  0E01               	movlw	1
  3290  000684  6F8A               	movwf	_next& (0+255),b
  3291  000686  0012               	return	
  3292  000688                     i2l1979:
  3293                           
  3294                           ;user.c: 307: else if((state == 1 || state == 2 || state == 3 || state == 4) && code == 
      +                          0xAEBA)
  3295  000688  0401               	decf	get_next_state@state,w,c
  3296  00068A  1002               	iorwf	get_next_state@state+1,w,c
  3297  00068C  B4D8               	btfsc	status,2,c
  3298  00068E  D00F               	goto	i2l1987
  3299  000690  0E02               	movlw	2
  3300  000692  1801               	xorwf	get_next_state@state,w,c
  3301  000694  1002               	iorwf	get_next_state@state+1,w,c
  3302  000696  B4D8               	btfsc	status,2,c
  3303  000698  D00A               	goto	i2l1987
  3304  00069A  0E03               	movlw	3
  3305  00069C  1801               	xorwf	get_next_state@state,w,c
  3306  00069E  1002               	iorwf	get_next_state@state+1,w,c
  3307  0006A0  B4D8               	btfsc	status,2,c
  3308  0006A2  D005               	goto	i2l1987
  3309  0006A4  0E04               	movlw	4
  3310  0006A6  1801               	xorwf	get_next_state@state,w,c
  3311  0006A8  1002               	iorwf	get_next_state@state+1,w,c
  3312  0006AA  A4D8               	btfss	status,2,c
  3313  0006AC  0012               	return	
  3314  0006AE                     i2l1987:
  3315  0006AE  0EBA               	movlw	186
  3316  0006B0  1803               	xorwf	get_next_state@code,w,c
  3317  0006B2  E10A               	bnz	i2l261
  3318  0006B4  0EAE               	movlw	174
  3319  0006B6  1804               	xorwf	get_next_state@code+1,w,c
  3320  0006B8  A4D8               	btfss	status,2,c
  3321  0006BA  0012               	return	
  3322                           
  3323                           ;user.c: 308: next = 0;
  3324  0006BC  0E00               	movlw	0
  3325  0006BE  0100               	movlb	0	; () banked
  3326  0006C0  6F8B               	movwf	(_next+1)& (0+255),b
  3327  0006C2  0E00               	movlw	0
  3328  0006C4  6F8A               	movwf	_next& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331                           
  3332                           ; BSR set to: 0
  3333                           
  3334                           ; BSR set to: 0
  3335                           
  3336                           ; BSR set to: 0
  3337                           
  3338                           ; BSR set to: 0
  3339                           
  3340                           ; BSR set to: 0
  3341  0006C6  0012               	return	
  3342  0006C8                     i2l261:
  3343  0006C8  0012               	return		;funcret
  3344  0006CA                     __end_of_get_next_state:
  3345                           	opt stack 0
  3346  0000                     pclatu	equ	0xFFB
  3347                           pclath	equ	0xFFA
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           prodh	equ	0xFF4
  3353                           prodl	equ	0xFF3
  3354                           intcon	equ	0xFF2
  3355                           fsr0h	equ	0xFEA
  3356                           fsr0l	equ	0xFE9
  3357                           wreg	equ	0xFE8
  3358                           fsr1h	equ	0xFE2
  3359                           fsr1l	equ	0xFE1
  3360                           bsr	equ	0xFE0
  3361                           indf2	equ	0xFDF
  3362                           fsr2h	equ	0xFDA
  3363                           fsr2l	equ	0xFD9
  3364                           status	equ	0xFD8
  3365                           pclatu	equ	0xFFB
  3366                           pclath	equ	0xFFA
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           intcon	equ	0xFF2
  3374                           fsr0h	equ	0xFEA
  3375                           fsr0l	equ	0xFE9
  3376                           wreg	equ	0xFE8
  3377                           fsr1h	equ	0xFE2
  3378                           fsr1l	equ	0xFE1
  3379                           bsr	equ	0xFE0
  3380                           indf2	equ	0xFDF
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385                           	psect	rparam
  3386  0000                     pclatu	equ	0xFFB
  3387                           pclath	equ	0xFFA
  3388                           tblptru	equ	0xFF8
  3389                           tblptrh	equ	0xFF7
  3390                           tblptrl	equ	0xFF6
  3391                           tablat	equ	0xFF5
  3392                           prodh	equ	0xFF4
  3393                           prodl	equ	0xFF3
  3394                           intcon	equ	0xFF2
  3395                           fsr0h	equ	0xFEA
  3396                           fsr0l	equ	0xFE9
  3397                           wreg	equ	0xFE8
  3398                           fsr1h	equ	0xFE2
  3399                           fsr1l	equ	0xFE1
  3400                           bsr	equ	0xFE0
  3401                           indf2	equ	0xFDF
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406                           	psect	temp
  3407  00004D                     btemp:
  3408                           	opt stack 0
  3409  00004D                     	ds	1
  3410  0000                     int$flags	set	btemp
  3411                           pclatu	equ	0xFFB
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           fsr0h	equ	0xFEA
  3421                           fsr0l	equ	0xFE9
  3422                           wreg	equ	0xFE8
  3423                           fsr1h	equ	0xFE2
  3424                           fsr1l	equ	0xFE1
  3425                           bsr	equ	0xFE0
  3426                           indf2	equ	0xFDF
  3427                           fsr2h	equ	0xFDA
  3428                           fsr2l	equ	0xFD9
  3429                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     74      76
    BANK0           160     42      45
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    get_time@data	PTR unsigned char  size(2) Largest target is 6
		 -> main@aux1(BANK0[6]), 

    put_nums@nums	PTR unsigned char  size(2) Largest target is 6
		 -> main@aux1(BANK0[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_ir_get_human_code

Critical Paths under _main in BANK0

    _main->_get_time
    _put_nums_individual->_put_num
    _put_nums->_put_num
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    4401
                                             34 BANK0      8     8      0
                _ConfigureOscillator
                            _InitApp
                           _get_time
                  _ir_is_code_number
                       _point_toggle
                           _put_nums
                _put_nums_individual
 ---------------------------------------------------------------------------------
 (1) _put_nums_individual                                  6     1      5    2022
                                             24 BANK0      6     1      5
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (1) _put_nums                                             4     2      2     840
                                             24 BANK0      4     2      2
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (2) _put_num                                             17    17      0     348
                                             17 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _get_num                                              1     1      0      22
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _point_toggle                                         0     0      0       0
                      _point_disable
                       _point_enable
 ---------------------------------------------------------------------------------
 (2) _point_enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _point_disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ir_is_code_number                                    1     1      0     220
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             6     4      2     572
                                             28 BANK0      6     4      2
                          _byte_read
 ---------------------------------------------------------------------------------
 (2) _byte_read                                            6     6      0     204
                                             22 BANK0      6     6      0
                         _ce_disable
                          _ce_enable
                        _io_as_input
                       _send_command
 ---------------------------------------------------------------------------------
 (3) _send_command                                         5     5      0      90
                                             17 BANK0      5     5      0
                       _io_as_output
 ---------------------------------------------------------------------------------
 (4) _io_as_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _io_as_input                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_enable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_disable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            69    69      0     871
                                              5 COMRAM    69    69      0
                     _get_next_state
                  _ir_get_human_code
 ---------------------------------------------------------------------------------
 (7) _ir_get_human_code                                    5     3      2     115
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _get_next_state                                       4     0      4     482
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _get_time
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
   _ir_is_code_number
   _point_toggle
     _point_disable
     _point_enable
   _put_nums
     _get_num
     _put_num
   _put_nums_individual
     _get_num
     _put_num

 _low_isr (ROOT)

 _high_isr (ROOT)
   _get_next_state
   _ir_get_human_code

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2A      2D       5       28.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4A      4C       1       80.9%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      79      11        0.0%
DATA                 0      0      79       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun May 21 14:31:31 2017

                     __CFG_BOR$ON 000000                   ??_point_disable 0071  
                              bsr 000FE0                       _put_num$849 0075  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_LVP$ON 000000  
                     __CFG_WDT$ON 000000                               l143 0AA6  
                             l138 0932                               l235 09A2  
                             l199 0866                      __CFG_CPB$OFF 000000  
                             _RB0 007C08                               _RA2 007C02  
                             _RB1 007C09                               _RA3 007C03  
                             _RB3 007C0B                               _RA5 007C05  
                             _RB4 007C0C                               _RB5 007C0D  
                 ?_get_next_state 0001                      __CFG_CPD$OFF 000000  
                             u640 0984                               u634 0970  
                             u635 096A                               u715 0924  
                             u740 0880                               u716 0926  
                             u764 0890                               u684 08FE  
                             u765 088A                               u685 08F8  
                             u758 0884                               wreg 000FE8  
                    __CFG_FOSC$HS 000000                      ?_io_as_input 0001  
                     high_isr@aux 0046             ir_get_human_code@code 0001  
                            l2031 0A80                              l2041 0AF8  
                            l2027 0A6A                              l2063 0A0A  
                            l2127 00D6                              l2145 015C  
                            l2129 00E0                              l2171 0298  
                            l2163 0232                              l2155 01CC  
                            l2139 0142                              l2069 0A0E  
                            l1711 0946                              l1801 07AE  
                            l1715 095C                              l2179 0300  
                            l1717 0986                              l1821 07C2  
                            l1813 07BA                              l1805 07B2  
                            l1733 08CE                              l1817 07BE  
                            l1809 07B6                              l1761 0786  
                            l1745 091A                              l1737 08E4  
                            l1843 0850                              l1827 07C6  
                            l1781 079A                              l1773 0792  
                            l1765 078A                              l1757 0782  
                            l1793 07A6                              l1785 079E  
                            l1777 0796                              l1769 078E  
                            l1859 08B0                              l1797 07AA  
                            l1789 07A2                       get_time@aux 0081  
                            u1207 0224                              u1217 0250  
                            u1227 028A                              u1237 02B6  
                            u1157 010E                              u1247 02F0  
                            u1167 012E                              u1257 086A  
                            u1177 0184                              u1267 08A2  
                            u1187 01BE                              u1277 098A  
                            u1197 01EA                              u1287 0994  
                            _RBIF 007F90                              i2l29 045A  
                            _main 00AA                              _next 008A  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 004D  
                            prodh 000FF4                              prodl 000FF3  
                            start 00A6                     __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
     __end_of_put_nums_individual 0A60                      high_isr@code 0017  
                 __end_of_InitApp 0AD8                     ?_io_as_output 0001  
     ir_is_code_number@human_code 0071                     __CFG_PLLDIV$1 000000  
                  __CFG_CCP2MX$ON 000000                             ?_main 0001  
                    get_time@data 007C                             i2l261 06C8  
                   __CFG_USBDIV$1 000000               _ConfigureOscillator 0B18  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                 __end_of_get_num 082C                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                             _state 004B  
                 __end_of_low_isr 00A6                             pclath 000FFA  
                           tablat 000FF5                   __end_of_put_num 0934  
                           status 000FD8              ?_ConfigureOscillator 0001  
                 __initialization 0AD8                      __end_of_main 0336  
                  ??_io_as_output 0071                            ??_main 0082  
                   __activetblptr 000002                            _ADCON1 000FC1  
                   get_time@hours 0080                            i2l2103 03D0  
                          i2l2105 03E0                            i2l2115 0422  
                          i2l2109 03F0                            i2l2119 0456  
                          i2l2411 0554                            i2l2091 0398  
                          i2l2421 05AA                            i2l2413 055E  
                          i2l2423 05B4                            i2l2415 0574  
                          i2l2095 03A8                            i2l2425 05C4  
                          i2l2417 058A                            i2l2409 054A  
                          i2l2427 05CE                            i2l2419 059A  
                          i2l1901 04FE                            i2l1907 0502  
                          i2l1871 04A4                            i2l1961 061C  
                          i2l1881 04C2                            i2l1873 04AA  
                          i2l1955 05FA                            i2l1891 04E0  
                          i2l1883 04C8                            i2l1875 04B0  
                          i2l1867 0498                            i2l1973 0664  
                          i2l1893 04E6                            i2l1885 04CE  
                          i2l1877 04B6                            i2l1869 049E  
                          i2l1967 0640                            i2l1895 04EC  
                          i2l1887 04D4                            i2l1879 04BC  
                          i2l1897 04F2                            i2l1889 04DA  
                          i2l1987 06AE                            i2l1979 0688  
                          i2l1899 04F8                            _INTCON 000FF2  
                          _TRISA2 007C92                            _TRISB1 007C99  
                          _TRISA3 007C93                            _TRISB3 007C9B  
                          _TRISA5 007C95                            _TRISB4 007C9C  
                       ??_InitApp 0071             ??_ConfigureOscillator 0071  
                  __CFG_XINST$OFF 000000                  __end_of_high_isr 0496  
                __end_of_get_time 077C                    __CFG_STVREN$ON 000000  
               _ir_get_human_code 0496                         ??_get_num 0071  
              ?_ir_get_human_code 0001                         ??_low_isr 0060  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                  __end_of_put_nums 0AA8  
                       ??_put_num 0071               ??_ir_get_human_code 0003  
            __size_of_io_as_input 0004                      put_nums@nums 0078  
                      __accesstop 0060           __end_of__initialization 0AE0  
                 __CFG_PBADEN$OFF 000000                     ___rparam_used 000001  
              __size_of_ce_enable 0004                    __pcstackCOMRAM 0001  
       __end_of_ir_get_human_code 05D8                  ??_get_next_state 0005  
                      _ce_disable 0AFE              __end_of_io_as_output 0B10  
                      __pbssBANK0 008A                        __pnvCOMRAM 004B  
              __size_of_byte_read 008E                get_next_state@code 0003  
                   ?_send_command 0001                           _CCP2CON 000FBA  
           __end_of_point_disable 0B0C                 __end_of_ce_enable 0B18  
                         _SSPCON1 000FC6                         ?_high_isr 0001  
                       ?_get_time 007C                   __CFG_VREGEN$OFF 000000  
                         _InitApp 0AA8                           __Hparam 0000  
                         __Lparam 0000                  byte_read@address 0078  
                    byte_read@res 0079                    ??_send_command 0071  
      __size_of_ir_get_human_code 0142                         ?_put_nums 0078  
                         __pcinit 0AD8                           __ramtop 0800  
                         __ptext0 00AA                           __ptext1 0A12  
                         __ptext2 0A60                           __ptext3 08BA  
                         __ptext4 077C                           __ptext5 0AEE  
                         __ptext6 0B04                           __ptext7 0B08  
                         __ptext8 09A4                           __ptext9 06CA  
                         _get_num 077C      __size_of_put_nums_individual 004E  
               __end_of_byte_read 08BA                       ?_ce_disable 0001  
                      _human_code 008C                           _low_isr 0018  
                         _put_num 08BA                        ??_high_isr 0006  
                      ??_get_time 007E                    __pintcode_body 0336  
                   ?_point_enable 0001              end_of_initialization 0AE0  
                   __Lmediumconst 0000                     ?_point_toggle 0001  
                         int_func 0336                        ??_put_nums 007A  
           __size_of_io_as_output 0004  ir_get_human_code@human_read_code 0005  
                  ??_point_enable 0071       __end_of_ConfigureOscillator 0B1A  
                   send_command@i 0074                    ??_point_toggle 0071  
                      get_num@num 0071               __size_of_ce_disable 0006  
              high_isr@final_code 0047           put_nums_individual@num0 007C  
         put_nums_individual@num1 007B           put_nums_individual@num2 007A  
         put_nums_individual@num3 0079           put_nums_individual@num4 0078  
         put_nums_individual@num5 007D                      _io_as_output 0B0C  
             start_initialization 0AD8                     ??_io_as_input 0071  
            __end_of_send_command 09A4                        byte_read@i 007A  
                __CFG_LPT1OSC$OFF 000000                       put_num@mask 0074  
                   __pcstackBANK0 0060                         _ce_enable 0B14  
               __size_of_high_isr 048E               __end_of_io_as_input 0B14  
               __size_of_get_time 00B2               _put_nums_individual 0A12  
                        ?_InitApp 0001                         __pintcode 0008  
            __end_of_point_enable 0B08               get_next_state@state 0001  
                     __pintcodelo 0018              __end_of_point_toggle 0AFE  
            ?_put_nums_individual 0078                          ?_get_num 0001  
               __size_of_put_nums 0048                      ??_ce_disable 0071  
                        ?_low_isr 0001           __size_of_get_next_state 00F2  
                       _byte_read 082C                          ?_put_num 0001  
                 get_time@minutes 007F                   get_time@seconds 007E  
                      ?_ce_enable 0001            __size_of_point_disable 0004  
                        i2u110_44 0410                          i2u110_45 040A  
                        i2u130_47 03C2                          i2u129_47 0384  
              __end_of_ce_disable 0B04                  __CFG_WDTPS$32768 000000  
           ??_put_nums_individual 007D                         high_isr@i 0049  
           __size_of_send_command 0070                 _ir_is_code_number 09A4  
                     _io_as_input 0B10                        ?_byte_read 0001  
              ?_ir_is_code_number 0001               send_command@command 0073  
             ??_ir_is_code_number 0071                  __size_of_InitApp 0030  
                        __Hrparam 0000                          __Lrparam 0000  
                      put_num@num 0073                      _send_command 0934  
       __end_of_ir_is_code_number 0A12                     _point_disable 0B08  
                __size_of_get_num 00B0                  __size_of_low_isr 008E  
                        __ptext10 082C                          __ptext11 0934  
                        __ptext20 0496                          __ptext12 0B0C  
                        __ptext21 05D8                          __ptext13 0B10  
                        __ptext14 0B14                          __ptext15 0AFE  
                        __ptext16 0AA8                          __ptext17 0B18  
                        _high_isr 0008                          _get_time 06CA  
                __size_of_put_num 007A                       ??_ce_enable 0071  
                   __size_of_main 028C      __size_of_ConfigureOscillator 0002  
           __size_of_point_enable 0004             __size_of_point_toggle 0010  
                        int$flags 004D                          _put_nums 0A60  
                        main@aux1 0084             __CFG_CPUDIV$OSC1_PLL2 000000  
                  ?_point_disable 0001                        _INTCONbits 000FF2  
                  _get_next_state 05D8                       ??_byte_read 0076  
                       put_nums@i 007A                          intlevel1 0000  
                        intlevel2 0000                      _point_enable 0B04  
                    _point_toggle 0AEE                          put_num@i 0076  
          __end_of_get_next_state 06CA        __size_of_ir_is_code_number 006E  
