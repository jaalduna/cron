

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun May 21 18:07:56 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.42
    45                           ; Generated 13/04/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F2550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	nvCOMRAM
    80  00005A                     __pnvCOMRAM:
    81                           	opt stack 0
    82  00005A                     _state:
    83                           	opt stack 0
    84  00005A                     	ds	2
    85  0000                     _RA3	set	31747
    86  0000                     _RA2	set	31746
    87  0000                     _RA5	set	31749
    88  0000                     _RB0	set	31752
    89  0000                     _RB1	set	31753
    90  0000                     _RB4	set	31756
    91  0000                     _RB3	set	31755
    92  0000                     _TRISA3	set	31891
    93  0000                     _TRISA5	set	31893
    94  0000                     _TRISA2	set	31890
    95  0000                     _TRISB1	set	31897
    96  0000                     _TRISB4	set	31900
    97  0000                     _TRISB3	set	31899
    98  0000                     _RB5	set	31757
    99  0000                     _ADCON1	set	4033
   100  0000                     _SSPCON1	set	4038
   101  0000                     _CCP2CON	set	4026
   102  0000                     _INTCON	set	4082
   103  0000                     _INTCONbits	set	4082
   104  0000                     _RBIF	set	32656
   105                           
   106                           ; #config settings
   107  0000                     
   108                           	psect	cinit
   109  000BA4                     __pcinit:
   110                           	opt stack 0
   111  000BA4                     start_initialization:
   112                           	opt stack 0
   113  000BA4                     __initialization:
   114                           	opt stack 0
   115                           
   116                           ; Clear objects allocated to BANK0 (9 bytes)
   117  000BA4  EE00  F073         	lfsr	0,__pbssBANK0
   118  000BA8  0E09               	movlw	9
   119  000BAA                     clear_0:
   120  000BAA  6AEE               	clrf	postinc0,c
   121  000BAC  06E8               	decf	wreg,f,c
   122  000BAE  E1FD               	bnz	clear_0
   123  000BB0                     end_of_initialization:
   124                           	opt stack 0
   125  000BB0                     __end_of__initialization:
   126                           	opt stack 0
   127  000BB0  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   128  000BB2  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   129  000BB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   130  000BB6  6EF8               	movwf	tblptru,c
   131  000BB8  0100               	movlb	0
   132  000BBA  EF09  F000         	goto	_main	;jump to C main() function
   133                           tblptru	equ	0xFF8
   134                           postinc0	equ	0xFEE
   135                           wreg	equ	0xFE8
   136                           
   137                           	psect	bssBANK0
   138  000073                     __pbssBANK0:
   139                           	opt stack 0
   140  000073                     _next:
   141                           	opt stack 0
   142  000073                     	ds	2
   143  000075                     _human_code:
   144                           	opt stack 0
   145  000075                     	ds	1
   146  000076                     _aux1:
   147                           	opt stack 0
   148  000076                     	ds	6
   149                           tblptru	equ	0xFF8
   150                           postinc0	equ	0xFEE
   151                           wreg	equ	0xFE8
   152                           
   153                           	psect	cstackBANK0
   154  000060                     __pcstackBANK0:
   155                           	opt stack 0
   156  000060                     ??_send_command:
   157  000060                     ??_put_num:
   158  000060                     get_num@num:
   159                           	opt stack 0
   160  000060                     ir_is_code_number@human_code:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0x0
   164  000060                     	ds	2
   165  000062                     put_num@num:
   166                           	opt stack 0
   167  000062                     send_command@command:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x2
   171  000062                     	ds	1
   172  000063                     put_num@mask:
   173                           	opt stack 0
   174  000063                     send_command@i:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x3
   178  000063                     	ds	1
   179  000064                     _put_num$845:
   180                           	opt stack 0
   181                           
   182                           ; 1 bytes @ 0x4
   183  000064                     	ds	1
   184  000065                     ??_byte_read:
   185  000065                     put_num@i:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x5
   189  000065                     	ds	2
   190  000067                     put_nums_individual@num4:
   191                           	opt stack 0
   192  000067                     byte_read@address:
   193                           	opt stack 0
   194  000067                     put_nums@nums:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x7
   198  000067                     	ds	1
   199  000068                     put_nums_individual@num3:
   200                           	opt stack 0
   201  000068                     byte_read@res:
   202                           	opt stack 0
   203                           
   204                           ; 1 bytes @ 0x8
   205  000068                     	ds	1
   206  000069                     put_nums_individual@num2:
   207                           	opt stack 0
   208  000069                     put_nums@i:
   209                           	opt stack 0
   210  000069                     byte_read@i:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x9
   214  000069                     	ds	1
   215  00006A                     put_nums_individual@num1:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0xA
   219  00006A                     	ds	1
   220  00006B                     put_nums_individual@num0:
   221                           	opt stack 0
   222  00006B                     get_time@data:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0xB
   226  00006B                     	ds	1
   227  00006C                     put_nums_individual@num5:
   228                           	opt stack 0
   229                           
   230                           ; 1 bytes @ 0xC
   231  00006C                     	ds	1
   232  00006D                     get_time@seconds:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xD
   236  00006D                     	ds	1
   237  00006E                     get_time@minutes:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0xE
   241  00006E                     	ds	1
   242  00006F                     get_time@hours:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0xF
   246  00006F                     	ds	1
   247  000070                     get_time@aux:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x10
   251  000070                     	ds	1
   252  000071                     ??_main:
   253                           
   254                           ; 1 bytes @ 0x11
   255  000071                     	ds	2
   256                           tblptru	equ	0xFF8
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	cstackCOMRAM
   261  000001                     __pcstackCOMRAM:
   262                           	opt stack 0
   263  000001                     ??i2_send_command:
   264  000001                     get_seconds_reg@res:
   265                           	opt stack 0
   266  000001                     get_hour_reg@res:
   267                           	opt stack 0
   268  000001                     ir_get_human_code@code:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x0
   272  000001                     	ds	1
   273  000002                     get_seconds_reg@seconds:
   274                           	opt stack 0
   275  000002                     get_hour_reg@hour:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x1
   279  000002                     	ds	1
   280  000003                     ??_ir_get_human_code:
   281  000003                     i2send_command@command:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0x2
   285  000003                     	ds	1
   286  000004                     i2send_command@i:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x3
   290  000004                     	ds	1
   291  000005                     ir_get_human_code@human_read_code:
   292                           	opt stack 0
   293                           
   294                           ; 1 bytes @ 0x4
   295  000005                     	ds	1
   296  000006                     byte_write@value:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x5
   300  000006                     	ds	1
   301  000007                     byte_write@address:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x6
   305  000007                     	ds	1
   306  000008                     set_time@minutes:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x7
   310  000008                     	ds	1
   311  000009                     set_time@hour:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x8
   315  000009                     	ds	1
   316  00000A                     set_time@seconds:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x9
   320  00000A                     	ds	1
   321  00000B                     set_time@sec_reg:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0xA
   325  00000B                     	ds	1
   326  00000C                     set_time@min_reg:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0xB
   330  00000C                     	ds	1
   331  00000D                     set_time@hour_reg:
   332                           	opt stack 0
   333                           
   334                           ; 1 bytes @ 0xC
   335  00000D                     	ds	1
   336  00000E                     ?_get_next_state:
   337                           	opt stack 0
   338  00000E                     get_next_state@state:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0xD
   342  00000E                     	ds	2
   343  000010                     get_next_state@code:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0xF
   347  000010                     	ds	2
   348  000012                     get_next_state@seconds:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x11
   352  000012                     	ds	1
   353  000013                     get_next_state@minutes:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x12
   357  000013                     	ds	1
   358  000014                     get_next_state@hour:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x13
   362  000014                     	ds	1
   363  000015                     ??_high_isr:
   364                           
   365                           ; 1 bytes @ 0x14
   366  000015                     	ds	17
   367  000026                     high_isr@code:
   368                           	opt stack 0
   369                           
   370                           ; 47 bytes @ 0x25
   371  000026                     	ds	47
   372  000055                     high_isr@aux:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x54
   376  000055                     	ds	1
   377  000056                     high_isr@final_code:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x55
   381  000056                     	ds	2
   382  000058                     high_isr@i:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x57
   386  000058                     	ds	2
   387                           tblptru	equ	0xFF8
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391 ;;
   392 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   393 ;;
   394 ;; *************** function _main *****************
   395 ;; Defined at:
   396 ;;		line 37 in file "main.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  temp            1    0        unsigned char 
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   410 ;;      Params:         0       0       0       0       0       0       0       0       0
   411 ;;      Locals:         0       0       0       0       0       0       0       0       0
   412 ;;      Temps:          0       2       0       0       0       0       0       0       0
   413 ;;      Totals:         0       2       0       0       0       0       0       0       0
   414 ;;Total ram usage:        2 bytes
   415 ;; Hardware stack levels required when called:   10
   416 ;; This function calls:
   417 ;;		_ConfigureOscillator
   418 ;;		_InitApp
   419 ;;		_get_time
   420 ;;		_ir_is_code_number
   421 ;;		_point_toggle
   422 ;;		_put_nums
   423 ;;		_put_nums_individual
   424 ;; This function is called by:
   425 ;;		Startup code after reset
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           	psect	text0
   430  000012                     __ptext0:
   431                           	opt stack 0
   432  000012                     _main:
   433                           	opt stack 21
   434                           
   435                           ;main.c: 40: ConfigureOscillator();
   436                           
   437                           ;incstack = 0
   438  000012  EC07  F006         	call	_ConfigureOscillator	;wreg free
   439                           
   440                           ;main.c: 43: InitApp();
   441  000016  ECA4  F005         	call	_InitApp	;wreg free
   442                           
   443                           ;main.c: 48: aux1[0] = 1;
   444  00001A  0E01               	movlw	1
   445  00001C  0100               	movlb	0	; () banked
   446  00001E  6F76               	movwf	_aux1& (0+255),b
   447                           
   448                           ;main.c: 49: aux1[1] = 2;
   449  000020  0E02               	movlw	2
   450  000022  0100               	movlb	0	; () banked
   451  000024  6F77               	movwf	(_aux1+1)& (0+255),b
   452                           
   453                           ;main.c: 50: aux1[2] = 3;
   454  000026  0E03               	movlw	3
   455  000028  0100               	movlb	0	; () banked
   456  00002A  6F78               	movwf	(_aux1+2)& (0+255),b
   457                           
   458                           ;main.c: 51: aux1[3] = 4;
   459  00002C  0E04               	movlw	4
   460  00002E  0100               	movlb	0	; () banked
   461  000030  6F79               	movwf	(_aux1+3)& (0+255),b
   462                           
   463                           ;main.c: 52: aux1[4] = 5;
   464  000032  0E05               	movlw	5
   465  000034  0100               	movlb	0	; () banked
   466  000036  6F7A               	movwf	(_aux1+4)& (0+255),b
   467                           
   468                           ;main.c: 53: aux1[5] = 6;
   469  000038  0E06               	movlw	6
   470  00003A  0100               	movlb	0	; () banked
   471  00003C  6F7B               	movwf	(_aux1+5)& (0+255),b
   472  00003E                     l2253:
   473                           
   474                           ;main.c: 58: {
   475                           ;main.c: 59: state = next;
   476  00003E  C073  F05A         	movff	_next,_state
   477  000042  C074  F05B         	movff	_next+1,_state+1
   478                           
   479                           ;main.c: 61: switch(state){
   480  000046  D125               	goto	l2313
   481  000048                     l2255:
   482                           
   483                           ;main.c: 63: get_time(aux1);
   484  000048  0E76               	movlw	low _aux1
   485  00004A  0100               	movlb	0	; () banked
   486  00004C  6F6B               	movwf	get_time@data& (0+255),b
   487  00004E  0E00               	movlw	high _aux1
   488  000050  0100               	movlb	0	; () banked
   489  000052  6F6C               	movwf	(get_time@data+1)& (0+255),b
   490  000054  EC40  F003         	call	_get_time	;wreg free
   491                           
   492                           ;main.c: 64: put_nums(aux1);
   493  000058  0E76               	movlw	low _aux1
   494  00005A  0100               	movlb	0	; () banked
   495  00005C  6F67               	movwf	put_nums@nums& (0+255),b
   496  00005E  0E00               	movlw	high _aux1
   497  000060  0100               	movlb	0	; () banked
   498  000062  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   499  000064  EC63  F005         	call	_put_nums	;wreg free
   500                           
   501                           ;main.c: 65: _delay((unsigned long)((500)*(20000000L/4000.0)));
   502  000068  0E0D               	movlw	13
   503  00006A  0100               	movlb	0	; () banked
   504  00006C  6F72               	movwf	(??_main+1)& (0+255),b
   505  00006E  0EAF               	movlw	175
   506  000070  0100               	movlb	0	; () banked
   507  000072  6F71               	movwf	??_main& (0+255),b
   508  000074  0EB6               	movlw	182
   509  000076                     u1407:
   510  000076  2EE8               	decfsz	wreg,f,c
   511  000078  D7FE               	bra	u1407
   512  00007A  2F71               	decfsz	??_main& (0+255),f,b
   513  00007C  D7FC               	bra	u1407
   514  00007E  2F72               	decfsz	(??_main+1)& (0+255),f,b
   515  000080  D7FA               	bra	u1407
   516  000082  F000               	nop	
   517                           
   518                           ;main.c: 66: point_toggle();
   519  000084  ECEB  F005         	call	_point_toggle	;wreg free
   520                           
   521                           ;main.c: 68: _delay((unsigned long)((500)*(20000000L/4000.0)));
   522  000088  0E0D               	movlw	13
   523  00008A  0100               	movlb	0	; () banked
   524  00008C  6F72               	movwf	(??_main+1)& (0+255),b
   525  00008E  0EAF               	movlw	175
   526  000090  0100               	movlb	0	; () banked
   527  000092  6F71               	movwf	??_main& (0+255),b
   528  000094  0EB6               	movlw	182
   529  000096                     u1417:
   530  000096  2EE8               	decfsz	wreg,f,c
   531  000098  D7FE               	bra	u1417
   532  00009A  2F71               	decfsz	??_main& (0+255),f,b
   533  00009C  D7FC               	bra	u1417
   534  00009E  2F72               	decfsz	(??_main+1)& (0+255),f,b
   535  0000A0  D7FA               	bra	u1417
   536  0000A2  F000               	nop	
   537                           
   538                           ;main.c: 69: point_toggle();
   539  0000A4  ECEB  F005         	call	_point_toggle	;wreg free
   540                           
   541                           ;main.c: 70: break;
   542  0000A8  D7CA               	goto	l2253
   543  0000AA                     l2265:
   544                           
   545                           ;main.c: 74: if(ir_is_code_number(human_code) && human_code <=2)
   546  0000AA  0100               	movlb	0	; () banked
   547  0000AC  5175               	movf	_human_code& (0+255),w,b
   548  0000AE  ECAD  F004         	call	_ir_is_code_number
   549  0000B2  0900               	iorlw	0
   550  0000B4  B4D8               	btfsc	status,2,c
   551  0000B6  D00B               	goto	l2273
   552  0000B8  0E03               	movlw	3
   553  0000BA  0100               	movlb	0	; () banked
   554  0000BC  6175               	cpfslt	_human_code& (0+255),b
   555  0000BE  D007               	goto	l2273
   556                           
   557                           ; BSR set to: 0
   558                           ;main.c: 75: {
   559                           ;main.c: 76: aux1[3] = human_code;
   560  0000C0  C075  F079         	movff	_human_code,_aux1+3
   561                           
   562                           ; BSR set to: 0
   563                           ;main.c: 77: next = 2;
   564  0000C4  0E00               	movlw	0
   565  0000C6  0100               	movlb	0	; () banked
   566  0000C8  6F74               	movwf	(_next+1)& (0+255),b
   567  0000CA  0E02               	movlw	2
   568  0000CC  6F73               	movwf	_next& (0+255),b
   569  0000CE                     l2273:
   570                           
   571                           ;main.c: 78: }
   572                           ;main.c: 80: put_nums(aux1);
   573  0000CE  0E76               	movlw	low _aux1
   574  0000D0  0100               	movlb	0	; () banked
   575  0000D2  6F67               	movwf	put_nums@nums& (0+255),b
   576  0000D4  0E00               	movlw	high _aux1
   577  0000D6  0100               	movlb	0	; () banked
   578  0000D8  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   579  0000DA  EC63  F005         	call	_put_nums	;wreg free
   580                           
   581                           ;main.c: 81: _delay((unsigned long)((500)*(20000000L/4000.0)));
   582  0000DE  0E0D               	movlw	13
   583  0000E0  0100               	movlb	0	; () banked
   584  0000E2  6F72               	movwf	(??_main+1)& (0+255),b
   585  0000E4  0EAF               	movlw	175
   586  0000E6  0100               	movlb	0	; () banked
   587  0000E8  6F71               	movwf	??_main& (0+255),b
   588  0000EA  0EB6               	movlw	182
   589  0000EC                     u1427:
   590  0000EC  2EE8               	decfsz	wreg,f,c
   591  0000EE  D7FE               	bra	u1427
   592  0000F0  2F71               	decfsz	??_main& (0+255),f,b
   593  0000F2  D7FC               	bra	u1427
   594  0000F4  2F72               	decfsz	(??_main+1)& (0+255),f,b
   595  0000F6  D7FA               	bra	u1427
   596  0000F8  F000               	nop	
   597                           
   598                           ;main.c: 82: put_nums_individual(aux1[5], aux1[4], 'V',aux1[2],aux1[1],aux1[0]);
   599  0000FA  C07A  F067         	movff	_aux1+4,put_nums_individual@num4
   600  0000FE  0E56               	movlw	86
   601  000100  0100               	movlb	0	; () banked
   602  000102  6F68               	movwf	put_nums_individual@num3& (0+255),b
   603  000104  C078  F069         	movff	_aux1+2,put_nums_individual@num2
   604  000108  C077  F06A         	movff	_aux1+1,put_nums_individual@num1
   605  00010C  C076  F06B         	movff	_aux1,put_nums_individual@num0
   606  000110  0100               	movlb	0	; () banked
   607  000112  517B               	movf	(_aux1+5)& (0+255),w,b
   608  000114  EC3C  F005         	call	_put_nums_individual
   609                           
   610                           ;main.c: 83: _delay((unsigned long)((500)*(20000000L/4000.0)));
   611  000118  0E0D               	movlw	13
   612  00011A  0100               	movlb	0	; () banked
   613  00011C  6F72               	movwf	(??_main+1)& (0+255),b
   614  00011E  0EAF               	movlw	175
   615  000120  0100               	movlb	0	; () banked
   616  000122  6F71               	movwf	??_main& (0+255),b
   617  000124  0EB6               	movlw	182
   618  000126                     u1437:
   619  000126  2EE8               	decfsz	wreg,f,c
   620  000128  D7FE               	bra	u1437
   621  00012A  2F71               	decfsz	??_main& (0+255),f,b
   622  00012C  D7FC               	bra	u1437
   623  00012E  2F72               	decfsz	(??_main+1)& (0+255),f,b
   624  000130  D7FA               	bra	u1437
   625  000132  D0AD               	goto	L3
   626  000134                     l2281:
   627                           
   628                           ;main.c: 87: if(ir_is_code_number(human_code) && ((aux1[3]<2 && human_code <=9) || human
      +                          _code <=3))
   629  000134  0100               	movlb	0	; () banked
   630  000136  5175               	movf	_human_code& (0+255),w,b
   631  000138  ECAD  F004         	call	_ir_is_code_number
   632  00013C  0900               	iorlw	0
   633  00013E  B4D8               	btfsc	status,2,c
   634  000140  D00E               	goto	l2289
   635  000142  0E02               	movlw	2
   636  000144  0100               	movlb	0	; () banked
   637  000146  6179               	cpfslt	(_aux1+3)& (0+255),b
   638  000148  D004               	goto	l2287
   639                           
   640                           ; BSR set to: 0
   641  00014A  0E09               	movlw	9
   642  00014C  0100               	movlb	0	; () banked
   643  00014E  6575               	cpfsgt	_human_code& (0+255),b
   644  000150  D004               	goto	l69
   645  000152                     l2287:
   646                           
   647                           ; BSR set to: 0
   648  000152  0E04               	movlw	4
   649  000154  0100               	movlb	0	; () banked
   650  000156  6175               	cpfslt	_human_code& (0+255),b
   651  000158  D002               	goto	l2289
   652  00015A                     l69:
   653                           
   654                           ; BSR set to: 0
   655                           ;main.c: 88: aux1[2] = human_code;
   656  00015A  C075  F078         	movff	_human_code,_aux1+2
   657  00015E                     l2289:
   658                           
   659                           ;main.c: 89: put_nums(aux1);
   660  00015E  0E76               	movlw	low _aux1
   661  000160  0100               	movlb	0	; () banked
   662  000162  6F67               	movwf	put_nums@nums& (0+255),b
   663  000164  0E00               	movlw	high _aux1
   664  000166  0100               	movlb	0	; () banked
   665  000168  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   666  00016A  EC63  F005         	call	_put_nums	;wreg free
   667                           
   668                           ;main.c: 90: _delay((unsigned long)((500)*(20000000L/4000.0)));
   669  00016E  0E0D               	movlw	13
   670  000170  0100               	movlb	0	; () banked
   671  000172  6F72               	movwf	(??_main+1)& (0+255),b
   672  000174  0EAF               	movlw	175
   673  000176  0100               	movlb	0	; () banked
   674  000178  6F71               	movwf	??_main& (0+255),b
   675  00017A  0EB6               	movlw	182
   676  00017C                     u1447:
   677  00017C  2EE8               	decfsz	wreg,f,c
   678  00017E  D7FE               	bra	u1447
   679  000180  2F71               	decfsz	??_main& (0+255),f,b
   680  000182  D7FC               	bra	u1447
   681  000184  2F72               	decfsz	(??_main+1)& (0+255),f,b
   682  000186  D7FA               	bra	u1447
   683  000188  F000               	nop	
   684                           
   685                           ;main.c: 91: put_nums_individual(aux1[5], aux1[4], aux1[3],'V',aux1[1],aux1[0]);
   686  00018A  C07A  F067         	movff	_aux1+4,put_nums_individual@num4
   687  00018E  C079  F068         	movff	_aux1+3,put_nums_individual@num3
   688  000192  0E56               	movlw	86
   689  000194  0100               	movlb	0	; () banked
   690  000196  6F69               	movwf	put_nums_individual@num2& (0+255),b
   691  000198  C077  F06A         	movff	_aux1+1,put_nums_individual@num1
   692  00019C  C076  F06B         	movff	_aux1,put_nums_individual@num0
   693  0001A0  0100               	movlb	0	; () banked
   694  0001A2  517B               	movf	(_aux1+5)& (0+255),w,b
   695  0001A4  EC3C  F005         	call	_put_nums_individual
   696                           
   697                           ;main.c: 92: _delay((unsigned long)((500)*(20000000L/4000.0)));
   698  0001A8  0E0D               	movlw	13
   699  0001AA  0100               	movlb	0	; () banked
   700  0001AC  6F72               	movwf	(??_main+1)& (0+255),b
   701  0001AE  0EAF               	movlw	175
   702  0001B0  0100               	movlb	0	; () banked
   703  0001B2  6F71               	movwf	??_main& (0+255),b
   704  0001B4  0EB6               	movlw	182
   705  0001B6                     u1457:
   706  0001B6  2EE8               	decfsz	wreg,f,c
   707  0001B8  D7FE               	bra	u1457
   708  0001BA  2F71               	decfsz	??_main& (0+255),f,b
   709  0001BC  D7FC               	bra	u1457
   710  0001BE  2F72               	decfsz	(??_main+1)& (0+255),f,b
   711  0001C0  D7FA               	bra	u1457
   712  0001C2  D065               	goto	L3
   713  0001C4                     l2297:
   714                           
   715                           ;main.c: 95: put_nums(aux1);
   716  0001C4  0E76               	movlw	low _aux1
   717  0001C6  0100               	movlb	0	; () banked
   718  0001C8  6F67               	movwf	put_nums@nums& (0+255),b
   719  0001CA  0E00               	movlw	high _aux1
   720  0001CC  0100               	movlb	0	; () banked
   721  0001CE  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   722  0001D0  EC63  F005         	call	_put_nums	;wreg free
   723                           
   724                           ;main.c: 96: _delay((unsigned long)((500)*(20000000L/4000.0)));
   725  0001D4  0E0D               	movlw	13
   726  0001D6  0100               	movlb	0	; () banked
   727  0001D8  6F72               	movwf	(??_main+1)& (0+255),b
   728  0001DA  0EAF               	movlw	175
   729  0001DC  0100               	movlb	0	; () banked
   730  0001DE  6F71               	movwf	??_main& (0+255),b
   731  0001E0  0EB6               	movlw	182
   732  0001E2                     u1467:
   733  0001E2  2EE8               	decfsz	wreg,f,c
   734  0001E4  D7FE               	bra	u1467
   735  0001E6  2F71               	decfsz	??_main& (0+255),f,b
   736  0001E8  D7FC               	bra	u1467
   737  0001EA  2F72               	decfsz	(??_main+1)& (0+255),f,b
   738  0001EC  D7FA               	bra	u1467
   739  0001EE  F000               	nop	
   740                           
   741                           ;main.c: 97: put_nums_individual(aux1[5], aux1[4], aux1[3],aux1[2],'V',aux1[0]);
   742  0001F0  C07A  F067         	movff	_aux1+4,put_nums_individual@num4
   743  0001F4  C079  F068         	movff	_aux1+3,put_nums_individual@num3
   744  0001F8  C078  F069         	movff	_aux1+2,put_nums_individual@num2
   745  0001FC  0E56               	movlw	86
   746  0001FE  0100               	movlb	0	; () banked
   747  000200  6F6A               	movwf	put_nums_individual@num1& (0+255),b
   748  000202  C076  F06B         	movff	_aux1,put_nums_individual@num0
   749  000206  0100               	movlb	0	; () banked
   750  000208  517B               	movf	(_aux1+5)& (0+255),w,b
   751  00020A  EC3C  F005         	call	_put_nums_individual
   752                           
   753                           ;main.c: 98: _delay((unsigned long)((500)*(20000000L/4000.0)));
   754  00020E  0E0D               	movlw	13
   755  000210  0100               	movlb	0	; () banked
   756  000212  6F72               	movwf	(??_main+1)& (0+255),b
   757  000214  0EAF               	movlw	175
   758  000216  0100               	movlb	0	; () banked
   759  000218  6F71               	movwf	??_main& (0+255),b
   760  00021A  0EB6               	movlw	182
   761  00021C                     u1477:
   762  00021C  2EE8               	decfsz	wreg,f,c
   763  00021E  D7FE               	bra	u1477
   764  000220  2F71               	decfsz	??_main& (0+255),f,b
   765  000222  D7FC               	bra	u1477
   766  000224  2F72               	decfsz	(??_main+1)& (0+255),f,b
   767  000226  D7FA               	bra	u1477
   768  000228  D032               	goto	L3
   769  00022A                     l2305:
   770                           
   771                           ;main.c: 101: put_nums(aux1);
   772  00022A  0E76               	movlw	low _aux1
   773  00022C  0100               	movlb	0	; () banked
   774  00022E  6F67               	movwf	put_nums@nums& (0+255),b
   775  000230  0E00               	movlw	high _aux1
   776  000232  0100               	movlb	0	; () banked
   777  000234  6F68               	movwf	(put_nums@nums+1)& (0+255),b
   778  000236  EC63  F005         	call	_put_nums	;wreg free
   779                           
   780                           ;main.c: 102: _delay((unsigned long)((500)*(20000000L/4000.0)));
   781  00023A  0E0D               	movlw	13
   782  00023C  0100               	movlb	0	; () banked
   783  00023E  6F72               	movwf	(??_main+1)& (0+255),b
   784  000240  0EAF               	movlw	175
   785  000242  0100               	movlb	0	; () banked
   786  000244  6F71               	movwf	??_main& (0+255),b
   787  000246  0EB6               	movlw	182
   788  000248                     u1487:
   789  000248  2EE8               	decfsz	wreg,f,c
   790  00024A  D7FE               	bra	u1487
   791  00024C  2F71               	decfsz	??_main& (0+255),f,b
   792  00024E  D7FC               	bra	u1487
   793  000250  2F72               	decfsz	(??_main+1)& (0+255),f,b
   794  000252  D7FA               	bra	u1487
   795  000254  F000               	nop	
   796                           
   797                           ;main.c: 103: put_nums_individual(aux1[5], aux1[4], aux1[3],aux1[2],aux1[1],'V');
   798  000256  C07A  F067         	movff	_aux1+4,put_nums_individual@num4
   799  00025A  C079  F068         	movff	_aux1+3,put_nums_individual@num3
   800  00025E  C078  F069         	movff	_aux1+2,put_nums_individual@num2
   801  000262  C077  F06A         	movff	_aux1+1,put_nums_individual@num1
   802  000266  0E56               	movlw	86
   803  000268  0100               	movlb	0	; () banked
   804  00026A  6F6B               	movwf	put_nums_individual@num0& (0+255),b
   805  00026C  0100               	movlb	0	; () banked
   806  00026E  517B               	movf	(_aux1+5)& (0+255),w,b
   807  000270  EC3C  F005         	call	_put_nums_individual
   808                           
   809                           ;main.c: 104: _delay((unsigned long)((500)*(20000000L/4000.0)));
   810  000274  0E0D               	movlw	13
   811  000276  0100               	movlb	0	; () banked
   812  000278  6F72               	movwf	(??_main+1)& (0+255),b
   813  00027A  0EAF               	movlw	175
   814  00027C  0100               	movlb	0	; () banked
   815  00027E  6F71               	movwf	??_main& (0+255),b
   816  000280  0EB6               	movlw	182
   817  000282                     u1497:
   818  000282  2EE8               	decfsz	wreg,f,c
   819  000284  D7FE               	bra	u1497
   820  000286  2F71               	decfsz	??_main& (0+255),f,b
   821  000288  D7FC               	bra	u1497
   822  00028A  2F72               	decfsz	(??_main+1)& (0+255),f,b
   823  00028C  D7FA               	bra	u1497
   824  00028E                     L3:
   825  00028E  F000               	nop	
   826                           
   827                           ;main.c: 108: }
   828                           
   829                           ;main.c: 106: default: ;
   830                           
   831                           ;main.c: 105: break;
   832  000290  D6D6               	goto	l2253
   833  000292                     l2313:
   834  000292  C05A  F071         	movff	_state,??_main
   835  000296  C05B  F072         	movff	_state+1,??_main+1
   836                           
   837                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   838                           ; Switch size 1, requested type "space"
   839                           ; Number of cases is 1, Range of values is 0 to 0
   840                           ; switch strategies available:
   841                           ; Name         Instructions Cycles
   842                           ; simple_byte            4     3 (average)
   843                           ;	Chosen strategy is simple_byte
   844  00029A  0100               	movlb	0	; () banked
   845  00029C  5172               	movf	(??_main+1)& (0+255),w,b
   846  00029E  0A00               	xorlw	0	; case 0
   847  0002A0  A4D8               	btfss	status,2,c
   848  0002A2  D6CD               	goto	l2253
   849                           
   850                           ; BSR set to: 0
   851                           ; Switch size 1, requested type "space"
   852                           ; Number of cases is 5, Range of values is 0 to 4
   853                           ; switch strategies available:
   854                           ; Name         Instructions Cycles
   855                           ; simple_byte           16     9 (average)
   856                           ;	Chosen strategy is simple_byte
   857  0002A4  0100               	movlb	0	; () banked
   858  0002A6  5171               	movf	??_main& (0+255),w,b
   859  0002A8  0A00               	xorlw	0	; case 0
   860  0002AA  B4D8               	btfsc	status,2,c
   861  0002AC  D6CD               	goto	l2255
   862  0002AE  0A01               	xorlw	1	; case 1
   863  0002B0  B4D8               	btfsc	status,2,c
   864  0002B2  D6FB               	goto	l2265
   865  0002B4  0A03               	xorlw	3	; case 2
   866  0002B6  B4D8               	btfsc	status,2,c
   867  0002B8  D73D               	goto	l2281
   868  0002BA  0A01               	xorlw	1	; case 3
   869  0002BC  B4D8               	btfsc	status,2,c
   870  0002BE  D782               	goto	l2297
   871  0002C0  0A07               	xorlw	7	; case 4
   872  0002C2  B4D8               	btfsc	status,2,c
   873  0002C4  D7B2               	goto	l2305
   874                           
   875                           ; BSR set to: 0
   876                           
   877                           ; BSR set to: 0
   878  0002C6  D6BB               	goto	l2253
   879  0002C8                     __end_of_main:
   880                           	opt stack 0
   881                           tblptru	equ	0xFF8
   882                           postinc0	equ	0xFEE
   883                           wreg	equ	0xFE8
   884                           status	equ	0xFD8
   885                           
   886 ;; *************** function _put_nums_individual *****************
   887 ;; Defined at:
   888 ;;		line 72 in file "user.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  num5            1    wreg     unsigned char 
   891 ;;  num4            1    7[BANK0 ] unsigned char 
   892 ;;  num3            1    8[BANK0 ] unsigned char 
   893 ;;  num2            1    9[BANK0 ] unsigned char 
   894 ;;  num1            1   10[BANK0 ] unsigned char 
   895 ;;  num0            1   11[BANK0 ] unsigned char 
   896 ;; Auto vars:     Size  Location     Type
   897 ;;  num5            1   12[BANK0 ] unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, status,2, status,0, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   907 ;;      Params:         0       5       0       0       0       0       0       0       0
   908 ;;      Locals:         0       1       0       0       0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0       0       0       0       0
   910 ;;      Totals:         0       6       0       0       0       0       0       0       0
   911 ;;Total ram usage:        6 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    7
   914 ;; This function calls:
   915 ;;		_get_num
   916 ;;		_put_num
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text1
   923  000A78                     __ptext1:
   924                           	opt stack 0
   925  000A78                     _put_nums_individual:
   926                           	opt stack 23
   927                           
   928                           ; BSR set to: 0
   929                           ;incstack = 0
   930                           ;put_nums_individual@num5 stored from wreg
   931  000A78  0100               	movlb	0	; () banked
   932  000A7A  6F6C               	movwf	put_nums_individual@num5& (0+255),b
   933                           
   934                           ;user.c: 74: put_num(get_num(num0));
   935  000A7C  0100               	movlb	0	; () banked
   936  000A7E  516B               	movf	put_nums_individual@num0& (0+255),w,b
   937  000A80  EC99  F003         	call	_get_num
   938  000A84  EC38  F004         	call	_put_num
   939                           
   940                           ;user.c: 75: put_num(get_num(num1));
   941  000A88  0100               	movlb	0	; () banked
   942  000A8A  516A               	movf	put_nums_individual@num1& (0+255),w,b
   943  000A8C  EC99  F003         	call	_get_num
   944  000A90  EC38  F004         	call	_put_num
   945                           
   946                           ;user.c: 76: put_num(get_num(num2));
   947  000A94  0100               	movlb	0	; () banked
   948  000A96  5169               	movf	put_nums_individual@num2& (0+255),w,b
   949  000A98  EC99  F003         	call	_get_num
   950  000A9C  EC38  F004         	call	_put_num
   951                           
   952                           ;user.c: 77: put_num(get_num(num3));
   953  000AA0  0100               	movlb	0	; () banked
   954  000AA2  5168               	movf	put_nums_individual@num3& (0+255),w,b
   955  000AA4  EC99  F003         	call	_get_num
   956  000AA8  EC38  F004         	call	_put_num
   957                           
   958                           ;user.c: 78: put_num(get_num(num4));
   959  000AAC  0100               	movlb	0	; () banked
   960  000AAE  5167               	movf	put_nums_individual@num4& (0+255),w,b
   961  000AB0  EC99  F003         	call	_get_num
   962  000AB4  EC38  F004         	call	_put_num
   963                           
   964                           ;user.c: 79: put_num(get_num(num5));
   965  000AB8  0100               	movlb	0	; () banked
   966  000ABA  516C               	movf	put_nums_individual@num5& (0+255),w,b
   967  000ABC  EC99  F003         	call	_get_num
   968  000AC0  EC38  F004         	call	_put_num
   969  000AC4  0012               	return		;funcret
   970  000AC6                     __end_of_put_nums_individual:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           status	equ	0xFD8
   976                           
   977 ;; *************** function _put_nums *****************
   978 ;; Defined at:
   979 ;;		line 63 in file "user.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  nums            2    7[BANK0 ] PTR unsigned char 
   982 ;;		 -> aux1(6), 
   983 ;; Auto vars:     Size  Location     Type
   984 ;;  i               2    9[BANK0 ] int 
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   994 ;;      Params:         0       2       0       0       0       0       0       0       0
   995 ;;      Locals:         0       2       0       0       0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0       0       0
   997 ;;      Totals:         0       4       0       0       0       0       0       0       0
   998 ;;Total ram usage:        4 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    7
  1001 ;; This function calls:
  1002 ;;		_get_num
  1003 ;;		_put_num
  1004 ;; This function is called by:
  1005 ;;		_main
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text2
  1010  000AC6                     __ptext2:
  1011                           	opt stack 0
  1012  000AC6                     _put_nums:
  1013                           	opt stack 23
  1014                           
  1015                           ;user.c: 65: int i;
  1016                           ;user.c: 66: for(i=0;i<6;i++)
  1017                           
  1018                           ;incstack = 0
  1019  000AC6  0E00               	movlw	0
  1020  000AC8  0100               	movlb	0	; () banked
  1021  000ACA  6F6A               	movwf	(put_nums@i+1)& (0+255),b
  1022  000ACC  0E00               	movlw	0
  1023  000ACE  6F69               	movwf	put_nums@i& (0+255),b
  1024  000AD0                     l2157:
  1025                           
  1026                           ; BSR set to: 0
  1027  000AD0  0100               	movlb	0	; () banked
  1028  000AD2  BF6A               	btfsc	(put_nums@i+1)& (0+255),7,b
  1029  000AD4  D008               	goto	l2161
  1030  000AD6  0100               	movlb	0	; () banked
  1031  000AD8  516A               	movf	(put_nums@i+1)& (0+255),w,b
  1032  000ADA  E118               	bnz	l149
  1033  000ADC  0E06               	movlw	6
  1034  000ADE  0100               	movlb	0	; () banked
  1035  000AE0  5D69               	subwf	put_nums@i& (0+255),w,b
  1036  000AE2  B0D8               	btfsc	status,0,c
  1037  000AE4  0012               	return	
  1038  000AE6                     l2161:
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;user.c: 67: {
  1042                           ;user.c: 68: put_num(get_num(nums[i]));
  1043  000AE6  0100               	movlb	0	; () banked
  1044  000AE8  5169               	movf	put_nums@i& (0+255),w,b
  1045  000AEA  0100               	movlb	0	; () banked
  1046  000AEC  2567               	addwf	put_nums@nums& (0+255),w,b
  1047  000AEE  6ED9               	movwf	fsr2l,c
  1048  000AF0  0100               	movlb	0	; () banked
  1049  000AF2  516A               	movf	(put_nums@i+1)& (0+255),w,b
  1050  000AF4  0100               	movlb	0	; () banked
  1051  000AF6  2168               	addwfc	(put_nums@nums+1)& (0+255),w,b
  1052  000AF8  6EDA               	movwf	fsr2h,c
  1053  000AFA  50DF               	movf	indf2,w,c
  1054  000AFC  EC99  F003         	call	_get_num
  1055  000B00  EC38  F004         	call	_put_num
  1056  000B04  0100               	movlb	0	; () banked
  1057  000B06  4B69               	infsnz	put_nums@i& (0+255),f,b
  1058  000B08  2B6A               	incf	(put_nums@i+1)& (0+255),f,b
  1059  000B0A  D7E2               	goto	l2157
  1060  000B0C                     l149:
  1061                           
  1062                           ; BSR set to: 0
  1063  000B0C  0012               	return		;funcret
  1064  000B0E                     __end_of_put_nums:
  1065                           	opt stack 0
  1066                           tblptru	equ	0xFF8
  1067                           postinc0	equ	0xFEE
  1068                           wreg	equ	0xFE8
  1069                           indf2	equ	0xFDF
  1070                           fsr2h	equ	0xFDA
  1071                           fsr2l	equ	0xFD9
  1072                           status	equ	0xFD8
  1073                           
  1074 ;; *************** function _put_num *****************
  1075 ;; Defined at:
  1076 ;;		line 51 in file "user.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  num             1    wreg     unsigned char 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;  num             1    2[BANK0 ] unsigned char 
  1081 ;;  i               2    5[BANK0 ] int 
  1082 ;;  mask            1    3[BANK0 ] unsigned char 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  1    wreg      void 
  1085 ;; Registers used:
  1086 ;;		wreg, status,2, status,0
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1092 ;;      Params:         0       0       0       0       0       0       0       0       0
  1093 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1094 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1095 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1096 ;;Total ram usage:        7 bytes
  1097 ;; Hardware stack levels used:    1
  1098 ;; Hardware stack levels required when called:    6
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_put_nums
  1103 ;;		_put_nums_individual
  1104 ;; This function uses a non-reentrant model
  1105 ;;
  1106                           
  1107                           	psect	text3
  1108  000870                     __ptext3:
  1109                           	opt stack 0
  1110  000870                     _put_num:
  1111                           	opt stack 23
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;incstack = 0
  1115                           ;put_num@num stored from wreg
  1116  000870  0100               	movlb	0	; () banked
  1117  000872  6F62               	movwf	put_num@num& (0+255),b
  1118                           
  1119                           ;user.c: 53: char mask = 0x01;
  1120  000874  0E01               	movlw	1
  1121  000876  0100               	movlb	0	; () banked
  1122  000878  6F63               	movwf	put_num@mask& (0+255),b
  1123                           
  1124                           ;user.c: 54: int i;
  1125                           ;user.c: 55: for(i= 0; i<8; i++)
  1126  00087A  0E00               	movlw	0
  1127  00087C  0100               	movlb	0	; () banked
  1128  00087E  6F66               	movwf	(put_num@i+1)& (0+255),b
  1129  000880  0E00               	movlw	0
  1130  000882  6F65               	movwf	put_num@i& (0+255),b
  1131  000884                     l1855:
  1132                           
  1133                           ; BSR set to: 0
  1134  000884  0100               	movlb	0	; () banked
  1135  000886  BF66               	btfsc	(put_num@i+1)& (0+255),7,b
  1136  000888  D008               	goto	l1859
  1137  00088A  0100               	movlb	0	; () banked
  1138  00088C  5166               	movf	(put_num@i+1)& (0+255),w,b
  1139  00088E  E12C               	bnz	l144
  1140  000890  0E08               	movlw	8
  1141  000892  0100               	movlb	0	; () banked
  1142  000894  5D65               	subwf	put_num@i& (0+255),w,b
  1143  000896  B0D8               	btfsc	status,0,c
  1144  000898  0012               	return	
  1145  00089A                     l1859:
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;user.c: 56: {
  1149                           ;user.c: 57: RB3 = num>>i & mask;
  1150  00089A  0E00               	movlw	0
  1151  00089C  0100               	movlb	0	; () banked
  1152  00089E  6F64               	movwf	_put_num$845& (0+255),b
  1153                           
  1154                           ; BSR set to: 0
  1155  0008A0  C065  F060         	movff	put_num@i,??_put_num
  1156  0008A4  C062  F061         	movff	put_num@num,??_put_num+1
  1157  0008A8  0100               	movlb	0	; () banked
  1158  0008AA  2B60               	incf	??_put_num& (0+255),f,b
  1159  0008AC  D003               	goto	u894
  1160  0008AE                     u895:
  1161  0008AE  0100               	movlb	0	; () banked
  1162  0008B0  90D8               	bcf	status,0,c
  1163  0008B2  3361               	rrcf	(??_put_num+1)& (0+255),f,b
  1164  0008B4                     u894:
  1165  0008B4  0100               	movlb	0	; () banked
  1166  0008B6  2F60               	decfsz	??_put_num& (0+255),f,b
  1167  0008B8  D7FA               	goto	u895
  1168  0008BA  0100               	movlb	0	; () banked
  1169  0008BC  3161               	rrcf	(??_put_num+1)& (0+255),w,b
  1170  0008BE  0100               	movlb	0	; () banked
  1171  0008C0  A0D8               	btfss	status,0,c
  1172  0008C2  D006               	goto	l1867
  1173                           
  1174                           ; BSR set to: 0
  1175  0008C4  0100               	movlb	0	; () banked
  1176  0008C6  A163               	btfss	put_num@mask& (0+255),0,b
  1177  0008C8  D003               	goto	l1867
  1178                           
  1179                           ; BSR set to: 0
  1180  0008CA  0E01               	movlw	1
  1181  0008CC  0100               	movlb	0	; () banked
  1182  0008CE  6F64               	movwf	_put_num$845& (0+255),b
  1183  0008D0                     l1867:
  1184                           
  1185                           ; BSR set to: 0
  1186  0008D0  0100               	movlb	0	; () banked
  1187  0008D2  B164               	btfsc	_put_num$845& (0+255),0,b
  1188  0008D4  D002               	bra	u925
  1189  0008D6  9681               	bcf	3969,3,c	;volatile
  1190  0008D8  D001               	bra	u926
  1191  0008DA                     u925:
  1192  0008DA  8681               	bsf	3969,3,c	;volatile
  1193  0008DC                     u926:
  1194                           
  1195                           ;user.c: 58: RB4 = 0;
  1196  0008DC  9881               	bcf	3969,4,c	;volatile
  1197                           
  1198                           ;user.c: 59: RB4 = 1;
  1199  0008DE  8881               	bsf	3969,4,c	;volatile
  1200  0008E0  0100               	movlb	0	; () banked
  1201  0008E2  4B65               	infsnz	put_num@i& (0+255),f,b
  1202  0008E4  2B66               	incf	(put_num@i+1)& (0+255),f,b
  1203  0008E6  D7CE               	goto	l1855
  1204  0008E8                     l144:
  1205                           
  1206                           ; BSR set to: 0
  1207  0008E8  0012               	return		;funcret
  1208  0008EA                     __end_of_put_num:
  1209                           	opt stack 0
  1210                           tblptru	equ	0xFF8
  1211                           postinc0	equ	0xFEE
  1212                           wreg	equ	0xFE8
  1213                           indf2	equ	0xFDF
  1214                           fsr2h	equ	0xFDA
  1215                           fsr2l	equ	0xFD9
  1216                           status	equ	0xFD8
  1217                           
  1218 ;; *************** function _get_num *****************
  1219 ;; Defined at:
  1220 ;;		line 82 in file "user.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  num             1    wreg     unsigned char 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;  num             1    0[BANK0 ] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      unsigned char 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         0       0       0       0       0       0       0       0       0
  1235 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1237 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1238 ;;Total ram usage:        1 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    6
  1241 ;; This function calls:
  1242 ;;		Nothing
  1243 ;; This function is called by:
  1244 ;;		_put_nums
  1245 ;;		_put_nums_individual
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text4
  1250  000732                     __ptext4:
  1251                           	opt stack 0
  1252  000732                     _get_num:
  1253                           	opt stack 23
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;incstack = 0
  1257                           ;get_num@num stored from wreg
  1258  000732  0100               	movlb	0	; () banked
  1259  000734  6F60               	movwf	get_num@num& (0+255),b
  1260                           
  1261                           ;user.c: 84: switch(num)
  1262  000736  D022               	goto	l1949
  1263  000738                     l1879:
  1264  000738  0E30               	movlw	48
  1265  00073A  0012               	return	
  1266  00073C                     l1883:
  1267  00073C  0E6D               	movlw	109
  1268  00073E  0012               	return	
  1269  000740                     l1887:
  1270  000740  0E79               	movlw	121
  1271  000742  0012               	return	
  1272  000744                     l1891:
  1273  000744  0E33               	movlw	51
  1274  000746  0012               	return	
  1275  000748                     l1895:
  1276  000748  0E5B               	movlw	91
  1277  00074A  0012               	return	
  1278  00074C                     l1899:
  1279  00074C  0E5F               	movlw	95
  1280  00074E  0012               	return	
  1281  000750                     l1903:
  1282  000750  0E70               	movlw	112
  1283  000752  0012               	return	
  1284  000754                     l1907:
  1285  000754  0E7F               	movlw	127
  1286  000756  0012               	return	
  1287  000758                     l1911:
  1288  000758  0E73               	movlw	115
  1289  00075A  0012               	return	
  1290  00075C                     l1915:
  1291  00075C  0E7E               	movlw	126
  1292  00075E  0012               	return	
  1293  000760                     l1919:
  1294  000760  0E3E               	movlw	62
  1295  000762  0012               	return	
  1296  000764                     l1923:
  1297  000764  0E67               	movlw	103
  1298  000766  0012               	return	
  1299  000768                     l1927:
  1300  000768  0E37               	movlw	55
  1301  00076A  0012               	return	
  1302  00076C                     l1931:
  1303  00076C  0E3D               	movlw	61
  1304  00076E  0012               	return	
  1305  000770                     l1935:
  1306  000770  0E15               	movlw	21
  1307  000772  0012               	return	
  1308  000774                     l1939:
  1309  000774  0E00               	movlw	0
  1310  000776  0012               	return	
  1311  000778                     l1943:
  1312  000778  0E7F               	movlw	127
  1313                           
  1314                           ;user.c: 103: }
  1315  00077A  0012               	return	
  1316  00077C                     l1949:
  1317  00077C  0100               	movlb	0	; () banked
  1318  00077E  5160               	movf	get_num@num& (0+255),w,b
  1319                           
  1320                           ; Switch size 1, requested type "space"
  1321                           ; Number of cases is 16, Range of values is 0 to 86
  1322                           ; switch strategies available:
  1323                           ; Name         Instructions Cycles
  1324                           ; simple_byte           49    25 (average)
  1325                           ;	Chosen strategy is simple_byte
  1326  000780  0A00               	xorlw	0	; case 0
  1327  000782  B4D8               	btfsc	status,2,c
  1328  000784  D7EB               	goto	l1915
  1329  000786  0A01               	xorlw	1	; case 1
  1330  000788  B4D8               	btfsc	status,2,c
  1331  00078A  D7D6               	goto	l1879
  1332  00078C  0A03               	xorlw	3	; case 2
  1333  00078E  B4D8               	btfsc	status,2,c
  1334  000790  D7D5               	goto	l1883
  1335  000792  0A01               	xorlw	1	; case 3
  1336  000794  B4D8               	btfsc	status,2,c
  1337  000796  D7D4               	goto	l1887
  1338  000798  0A07               	xorlw	7	; case 4
  1339  00079A  B4D8               	btfsc	status,2,c
  1340  00079C  D7D3               	goto	l1891
  1341  00079E  0A01               	xorlw	1	; case 5
  1342  0007A0  B4D8               	btfsc	status,2,c
  1343  0007A2  D7D2               	goto	l1895
  1344  0007A4  0A03               	xorlw	3	; case 6
  1345  0007A6  B4D8               	btfsc	status,2,c
  1346  0007A8  D7D1               	goto	l1899
  1347  0007AA  0A01               	xorlw	1	; case 7
  1348  0007AC  B4D8               	btfsc	status,2,c
  1349  0007AE  D7D0               	goto	l1903
  1350  0007B0  0A0F               	xorlw	15	; case 8
  1351  0007B2  B4D8               	btfsc	status,2,c
  1352  0007B4  D7CF               	goto	l1907
  1353  0007B6  0A01               	xorlw	1	; case 9
  1354  0007B8  B4D8               	btfsc	status,2,c
  1355  0007BA  D7CE               	goto	l1911
  1356  0007BC  0A4D               	xorlw	77	; case 68
  1357  0007BE  B4D8               	btfsc	status,2,c
  1358  0007C0  D7D5               	goto	l1931
  1359  0007C2  0A0C               	xorlw	12	; case 72
  1360  0007C4  B4D8               	btfsc	status,2,c
  1361  0007C6  D7D0               	goto	l1927
  1362  0007C8  0A06               	xorlw	6	; case 78
  1363  0007CA  B4D8               	btfsc	status,2,c
  1364  0007CC  D7D1               	goto	l1935
  1365  0007CE  0A1E               	xorlw	30	; case 80
  1366  0007D0  B4D8               	btfsc	status,2,c
  1367  0007D2  D7C8               	goto	l1923
  1368  0007D4  0A05               	xorlw	5	; case 85
  1369  0007D6  B4D8               	btfsc	status,2,c
  1370  0007D8  D7C3               	goto	l1919
  1371  0007DA  0A03               	xorlw	3	; case 86
  1372  0007DC  B4D8               	btfsc	status,2,c
  1373  0007DE  D7CA               	goto	l1939
  1374  0007E0  D7CB               	goto	l1943
  1375  0007E2                     __end_of_get_num:
  1376                           	opt stack 0
  1377                           tblptru	equ	0xFF8
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           indf2	equ	0xFDF
  1381                           fsr2h	equ	0xFDA
  1382                           fsr2l	equ	0xFD9
  1383                           status	equ	0xFD8
  1384                           
  1385 ;; *************** function _point_toggle *****************
  1386 ;; Defined at:
  1387 ;;		line 116 in file "user.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1401 ;;      Params:         0       0       0       0       0       0       0       0       0
  1402 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1404 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1405 ;;Total ram usage:        0 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    7
  1408 ;; This function calls:
  1409 ;;		_point_disable
  1410 ;;		_point_enable
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text5
  1417  000BD6                     __ptext5:
  1418                           	opt stack 0
  1419  000BD6                     _point_toggle:
  1420                           	opt stack 23
  1421                           
  1422                           ;user.c: 118: if(RB1 == 0)
  1423                           
  1424                           ;incstack = 0
  1425  000BD6  B281               	btfsc	3969,1,c	;volatile
  1426  000BD8  D003               	goto	l2171
  1427                           
  1428                           ;user.c: 119: point_enable();
  1429  000BDA  ECF9  F005         	call	_point_enable	;wreg free
  1430  000BDE  0012               	return	
  1431  000BE0                     l2171:
  1432                           
  1433                           ;user.c: 120: else
  1434                           ;user.c: 121: point_disable();
  1435  000BE0  ECFB  F005         	call	_point_disable	;wreg free
  1436  000BE4  0012               	return	
  1437  000BE6                     __end_of_point_toggle:
  1438                           	opt stack 0
  1439                           tblptru	equ	0xFF8
  1440                           postinc0	equ	0xFEE
  1441                           wreg	equ	0xFE8
  1442                           indf2	equ	0xFDF
  1443                           fsr2h	equ	0xFDA
  1444                           fsr2l	equ	0xFD9
  1445                           status	equ	0xFD8
  1446                           
  1447 ;; *************** function _point_enable *****************
  1448 ;; Defined at:
  1449 ;;		line 106 in file "user.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		None
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1463 ;;      Params:         0       0       0       0       0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1466 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1467 ;;Total ram usage:        0 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    6
  1470 ;; This function calls:
  1471 ;;		Nothing
  1472 ;; This function is called by:
  1473 ;;		_point_toggle
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           	psect	text6
  1478  000BF2                     __ptext6:
  1479                           	opt stack 0
  1480  000BF2                     _point_enable:
  1481                           	opt stack 23
  1482                           
  1483                           ;user.c: 108: RB1 = 1;
  1484                           
  1485                           ;incstack = 0
  1486  000BF2  8281               	bsf	3969,1,c	;volatile
  1487  000BF4  0012               	return		;funcret
  1488  000BF6                     __end_of_point_enable:
  1489                           	opt stack 0
  1490                           tblptru	equ	0xFF8
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           indf2	equ	0xFDF
  1494                           fsr2h	equ	0xFDA
  1495                           fsr2l	equ	0xFD9
  1496                           status	equ	0xFD8
  1497                           
  1498 ;; *************** function _point_disable *****************
  1499 ;; Defined at:
  1500 ;;		line 111 in file "user.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;		None
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;		None
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      void 
  1507 ;; Registers used:
  1508 ;;		None
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1514 ;;      Params:         0       0       0       0       0       0       0       0       0
  1515 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1517 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1518 ;;Total ram usage:        0 bytes
  1519 ;; Hardware stack levels used:    1
  1520 ;; Hardware stack levels required when called:    6
  1521 ;; This function calls:
  1522 ;;		Nothing
  1523 ;; This function is called by:
  1524 ;;		_point_toggle
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text7
  1529  000BF6                     __ptext7:
  1530                           	opt stack 0
  1531  000BF6                     _point_disable:
  1532                           	opt stack 23
  1533                           
  1534                           ;user.c: 113: RB1 = 0;
  1535                           
  1536                           ;incstack = 0
  1537  000BF6  9281               	bcf	3969,1,c	;volatile
  1538  000BF8  0012               	return		;funcret
  1539  000BFA                     __end_of_point_disable:
  1540                           	opt stack 0
  1541                           tblptru	equ	0xFF8
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           indf2	equ	0xFDF
  1545                           fsr2h	equ	0xFDA
  1546                           fsr2l	equ	0xFD9
  1547                           status	equ	0xFD8
  1548                           
  1549 ;; *************** function _ir_is_code_number *****************
  1550 ;; Defined at:
  1551 ;;		line 322 in file "user.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;  human_code      1    wreg     unsigned char 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  human_code      1    0[BANK0 ] unsigned char 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      unsigned char 
  1558 ;; Registers used:
  1559 ;;		wreg, status,2, status,0
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1565 ;;      Params:         0       0       0       0       0       0       0       0       0
  1566 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1568 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1569 ;;Total ram usage:        1 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; Hardware stack levels required when called:    6
  1572 ;; This function calls:
  1573 ;;		Nothing
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text8
  1580  00095A                     __ptext8:
  1581                           	opt stack 0
  1582  00095A                     _ir_is_code_number:
  1583                           	opt stack 24
  1584                           
  1585                           ;incstack = 0
  1586                           ;ir_is_code_number@human_code stored from wreg
  1587  00095A  0100               	movlb	0	; () banked
  1588  00095C  6F60               	movwf	ir_is_code_number@human_code& (0+255),b
  1589                           
  1590                           ;user.c: 324: if(human_code == 0 || human_code == 1 || human_code == 2 || human_code == 
      +                          3 || human_code == 4
  1591                           ;user.c: 325: || human_code == 5 || human_code == 6 || human_code == 7 || human_code == 
      +                          8 || human_code == 9)
  1592  00095E  0100               	movlb	0	; () banked
  1593  000960  5160               	movf	ir_is_code_number@human_code& (0+255),w,b
  1594  000962  0100               	movlb	0	; () banked
  1595  000964  B4D8               	btfsc	status,2,c
  1596  000966  D02C               	goto	l2193
  1597                           
  1598                           ; BSR set to: 0
  1599  000968  0100               	movlb	0	; () banked
  1600  00096A  0560               	decf	ir_is_code_number@human_code& (0+255),w,b
  1601  00096C  B4D8               	btfsc	status,2,c
  1602  00096E  D028               	goto	l2193
  1603                           
  1604                           ; BSR set to: 0
  1605  000970  0E02               	movlw	2
  1606  000972  0100               	movlb	0	; () banked
  1607  000974  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1608  000976  B4D8               	btfsc	status,2,c
  1609  000978  D023               	goto	l2193
  1610                           
  1611                           ; BSR set to: 0
  1612  00097A  0E03               	movlw	3
  1613  00097C  0100               	movlb	0	; () banked
  1614  00097E  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1615  000980  B4D8               	btfsc	status,2,c
  1616  000982  D01E               	goto	l2193
  1617                           
  1618                           ; BSR set to: 0
  1619  000984  0E04               	movlw	4
  1620  000986  0100               	movlb	0	; () banked
  1621  000988  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1622  00098A  B4D8               	btfsc	status,2,c
  1623  00098C  D019               	goto	l2193
  1624                           
  1625                           ; BSR set to: 0
  1626  00098E  0E05               	movlw	5
  1627  000990  0100               	movlb	0	; () banked
  1628  000992  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1629  000994  B4D8               	btfsc	status,2,c
  1630  000996  D014               	goto	l2193
  1631                           
  1632                           ; BSR set to: 0
  1633  000998  0E06               	movlw	6
  1634  00099A  0100               	movlb	0	; () banked
  1635  00099C  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1636  00099E  B4D8               	btfsc	status,2,c
  1637  0009A0  D00F               	goto	l2193
  1638                           
  1639                           ; BSR set to: 0
  1640  0009A2  0E07               	movlw	7
  1641  0009A4  0100               	movlb	0	; () banked
  1642  0009A6  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1643  0009A8  B4D8               	btfsc	status,2,c
  1644  0009AA  D00A               	goto	l2193
  1645                           
  1646                           ; BSR set to: 0
  1647  0009AC  0E08               	movlw	8
  1648  0009AE  0100               	movlb	0	; () banked
  1649  0009B0  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1650  0009B2  B4D8               	btfsc	status,2,c
  1651  0009B4  D005               	goto	l2193
  1652                           
  1653                           ; BSR set to: 0
  1654  0009B6  0E09               	movlw	9
  1655  0009B8  0100               	movlb	0	; () banked
  1656  0009BA  1960               	xorwf	ir_is_code_number@human_code& (0+255),w,b
  1657  0009BC  A4D8               	btfss	status,2,c
  1658  0009BE  D002               	goto	l2199
  1659  0009C0                     l2193:
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;user.c: 326: return 1;
  1663  0009C0  0E01               	movlw	1
  1664                           
  1665                           ; BSR set to: 0
  1666                           
  1667                           ; BSR set to: 0
  1668  0009C2  0012               	return	
  1669  0009C4                     l2199:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;user.c: 327: else
  1673                           ;user.c: 328: return 0;
  1674  0009C4  0E00               	movlw	0
  1675                           
  1676                           ; BSR set to: 0
  1677  0009C6  0012               	return	
  1678  0009C8                     __end_of_ir_is_code_number:
  1679                           	opt stack 0
  1680                           tblptru	equ	0xFF8
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           indf2	equ	0xFDF
  1684                           fsr2h	equ	0xFDA
  1685                           fsr2l	equ	0xFD9
  1686                           status	equ	0xFD8
  1687                           
  1688 ;; *************** function _get_time *****************
  1689 ;; Defined at:
  1690 ;;		line 199 in file "user.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  data            2   11[BANK0 ] PTR unsigned char 
  1693 ;;		 -> aux1(6), 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  aux             1   16[BANK0 ] unsigned char 
  1696 ;;  hours           1   15[BANK0 ] unsigned char 
  1697 ;;  minutes         1   14[BANK0 ] unsigned char 
  1698 ;;  seconds         1   13[BANK0 ] unsigned char 
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  1    wreg      void 
  1701 ;; Registers used:
  1702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1708 ;;      Params:         0       2       0       0       0       0       0       0       0
  1709 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1711 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1712 ;;Total ram usage:        6 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    9
  1715 ;; This function calls:
  1716 ;;		_byte_read
  1717 ;; This function is called by:
  1718 ;;		_main
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text9
  1723  000680                     __ptext9:
  1724                           	opt stack 0
  1725  000680                     _get_time:
  1726                           	opt stack 21
  1727                           
  1728                           ;user.c: 201: char aux = 0x81;
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;incstack = 0
  1732  000680  0E81               	movlw	129
  1733  000682  0100               	movlb	0	; () banked
  1734  000684  6F70               	movwf	get_time@aux& (0+255),b
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;user.c: 202: char seconds = byte_read(aux);
  1738  000686  0100               	movlb	0	; () banked
  1739  000688  5170               	movf	get_time@aux& (0+255),w,b
  1740  00068A  ECF1  F003         	call	_byte_read
  1741  00068E  0100               	movlb	0	; () banked
  1742  000690  6F6D               	movwf	get_time@seconds& (0+255),b
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;user.c: 203: aux = 0x83;
  1746  000692  0E83               	movlw	131
  1747  000694  0100               	movlb	0	; () banked
  1748  000696  6F70               	movwf	get_time@aux& (0+255),b
  1749                           
  1750                           ;user.c: 204: char minutes = byte_read(aux);
  1751  000698  0100               	movlb	0	; () banked
  1752  00069A  5170               	movf	get_time@aux& (0+255),w,b
  1753  00069C  ECF1  F003         	call	_byte_read
  1754  0006A0  0100               	movlb	0	; () banked
  1755  0006A2  6F6E               	movwf	get_time@minutes& (0+255),b
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;user.c: 205: aux = 0x85;
  1759  0006A4  0E85               	movlw	133
  1760  0006A6  0100               	movlb	0	; () banked
  1761  0006A8  6F70               	movwf	get_time@aux& (0+255),b
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;user.c: 206: char hours = byte_read(aux);
  1765  0006AA  0100               	movlb	0	; () banked
  1766  0006AC  5170               	movf	get_time@aux& (0+255),w,b
  1767  0006AE  ECF1  F003         	call	_byte_read
  1768  0006B2  0100               	movlb	0	; () banked
  1769  0006B4  6F6F               	movwf	get_time@hours& (0+255),b
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;user.c: 208: data[0] = minutes & 0x0f;
  1773  0006B6  0100               	movlb	0	; () banked
  1774  0006B8  516E               	movf	get_time@minutes& (0+255),w,b
  1775  0006BA  0B0F               	andlw	15
  1776  0006BC  C06B  FFD9         	movff	get_time@data,fsr2l
  1777  0006C0  C06C  FFDA         	movff	get_time@data+1,fsr2h
  1778  0006C4  6EDF               	movwf	indf2,c
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;user.c: 209: data[1] = (minutes & 0xf0)>>4;
  1782  0006C6  0100               	movlb	0	; () banked
  1783  0006C8  EE20 F001          	lfsr	2,1
  1784  0006CC  516B               	movf	get_time@data& (0+255),w,b
  1785  0006CE  26D9               	addwf	fsr2l,f,c
  1786  0006D0  516C               	movf	(get_time@data+1)& (0+255),w,b
  1787  0006D2  22DA               	addwfc	fsr2h,f,c
  1788  0006D4  0100               	movlb	0	; () banked
  1789  0006D6  396E               	swapf	get_time@minutes& (0+255),w,b
  1790  0006D8  0B0F               	andlw	15
  1791  0006DA  0B0F               	andlw	15
  1792  0006DC  6EDF               	movwf	indf2,c
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;user.c: 210: data[2] = hours & 0x0f;
  1796  0006DE  0100               	movlb	0	; () banked
  1797  0006E0  EE20 F002          	lfsr	2,2
  1798  0006E4  516B               	movf	get_time@data& (0+255),w,b
  1799  0006E6  26D9               	addwf	fsr2l,f,c
  1800  0006E8  516C               	movf	(get_time@data+1)& (0+255),w,b
  1801  0006EA  22DA               	addwfc	fsr2h,f,c
  1802  0006EC  0100               	movlb	0	; () banked
  1803  0006EE  516F               	movf	get_time@hours& (0+255),w,b
  1804  0006F0  0B0F               	andlw	15
  1805  0006F2  6EDF               	movwf	indf2,c
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;user.c: 211: data[3] = (hours & 0xf0)>>4;
  1809  0006F4  0100               	movlb	0	; () banked
  1810  0006F6  EE20 F003          	lfsr	2,3
  1811  0006FA  516B               	movf	get_time@data& (0+255),w,b
  1812  0006FC  26D9               	addwf	fsr2l,f,c
  1813  0006FE  516C               	movf	(get_time@data+1)& (0+255),w,b
  1814  000700  22DA               	addwfc	fsr2h,f,c
  1815  000702  0100               	movlb	0	; () banked
  1816  000704  396F               	swapf	get_time@hours& (0+255),w,b
  1817  000706  0B0F               	andlw	15
  1818  000708  0B0F               	andlw	15
  1819  00070A  6EDF               	movwf	indf2,c
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;user.c: 212: data[4] = 1;
  1823  00070C  0100               	movlb	0	; () banked
  1824  00070E  EE20 F004          	lfsr	2,4
  1825  000712  516B               	movf	get_time@data& (0+255),w,b
  1826  000714  26D9               	addwf	fsr2l,f,c
  1827  000716  516C               	movf	(get_time@data+1)& (0+255),w,b
  1828  000718  22DA               	addwfc	fsr2h,f,c
  1829  00071A  0E01               	movlw	1
  1830  00071C  6EDF               	movwf	indf2,c
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;user.c: 213: data[5] = 'H';
  1834  00071E  0100               	movlb	0	; () banked
  1835  000720  EE20 F005          	lfsr	2,5
  1836  000724  516B               	movf	get_time@data& (0+255),w,b
  1837  000726  26D9               	addwf	fsr2l,f,c
  1838  000728  516C               	movf	(get_time@data+1)& (0+255),w,b
  1839  00072A  22DA               	addwfc	fsr2h,f,c
  1840  00072C  0E48               	movlw	72
  1841  00072E  6EDF               	movwf	indf2,c
  1842                           
  1843                           ; BSR set to: 0
  1844  000730  0012               	return		;funcret
  1845  000732                     __end_of_get_time:
  1846                           	opt stack 0
  1847                           tblptru	equ	0xFF8
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           indf2	equ	0xFDF
  1851                           fsr2h	equ	0xFDA
  1852                           fsr2l	equ	0xFD9
  1853                           status	equ	0xFD8
  1854                           
  1855 ;; *************** function _byte_read *****************
  1856 ;; Defined at:
  1857 ;;		line 150 in file "user.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  address         1    wreg     unsigned char 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  address         1    7[BANK0 ] unsigned char 
  1862 ;;  i               2    9[BANK0 ] int 
  1863 ;;  res             1    8[BANK0 ] unsigned char 
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  1    wreg      unsigned char 
  1866 ;; Registers used:
  1867 ;;		wreg, status,2, status,0, cstack
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1873 ;;      Params:         0       0       0       0       0       0       0       0       0
  1874 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1875 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1876 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1877 ;;Total ram usage:        6 bytes
  1878 ;; Hardware stack levels used:    1
  1879 ;; Hardware stack levels required when called:    8
  1880 ;; This function calls:
  1881 ;;		_ce_disable
  1882 ;;		_ce_enable
  1883 ;;		_io_as_input
  1884 ;;		_send_command
  1885 ;; This function is called by:
  1886 ;;		_get_time
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text10
  1891  0007E2                     __ptext10:
  1892                           	opt stack 0
  1893  0007E2                     _byte_read:
  1894                           	opt stack 21
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;incstack = 0
  1898                           ;byte_read@address stored from wreg
  1899  0007E2  0100               	movlb	0	; () banked
  1900  0007E4  6F67               	movwf	byte_read@address& (0+255),b
  1901                           
  1902                           ;user.c: 151: char res = 0;
  1903  0007E6  0E00               	movlw	0
  1904  0007E8  0100               	movlb	0	; () banked
  1905  0007EA  6F68               	movwf	byte_read@res& (0+255),b
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;user.c: 154: ce_enable();
  1909  0007EC  EC01  F006         	call	_ce_enable	;wreg free
  1910                           
  1911                           ;user.c: 156: send_command(address);
  1912  0007F0  0100               	movlb	0	; () banked
  1913  0007F2  5167               	movf	byte_read@address& (0+255),w,b
  1914  0007F4  EC75  F004         	call	_send_command
  1915                           
  1916                           ;user.c: 157: io_as_input();
  1917  0007F8  ECFF  F005         	call	_io_as_input	;wreg free
  1918                           
  1919                           ;user.c: 158: int i;
  1920                           ;user.c: 159: for(i=0;i<8;i++)
  1921  0007FC  0E00               	movlw	0
  1922  0007FE  0100               	movlb	0	; () banked
  1923  000800  6F6A               	movwf	(byte_read@i+1)& (0+255),b
  1924  000802  0E00               	movlw	0
  1925  000804  6F69               	movwf	byte_read@i& (0+255),b
  1926  000806                     l1965:
  1927                           
  1928                           ; BSR set to: 0
  1929  000806  0100               	movlb	0	; () banked
  1930  000808  BF6A               	btfsc	(byte_read@i+1)& (0+255),7,b
  1931  00080A  D008               	goto	l205
  1932  00080C  0100               	movlb	0	; () banked
  1933  00080E  516A               	movf	(byte_read@i+1)& (0+255),w,b
  1934  000810  E12A               	bnz	l1981
  1935  000812  0E08               	movlw	8
  1936  000814  0100               	movlb	0	; () banked
  1937  000816  5D69               	subwf	byte_read@i& (0+255),w,b
  1938  000818  B0D8               	btfsc	status,0,c
  1939  00081A  D025               	goto	l1981
  1940  00081C                     l205:
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;user.c: 160: {
  1944                           ;user.c: 161: RA2 = 0;
  1945  00081C  9480               	bcf	3968,2,c	;volatile
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;user.c: 162: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  1949  00081E  0E06               	movlw	6
  1950  000820                     u1507:
  1951  000820  2EE8               	decfsz	wreg,f,c
  1952  000822  D7FE               	bra	u1507
  1953  000824  D000               	nop2	
  1954                           
  1955                           ;user.c: 163: res |= RA3<<i;
  1956  000826  C069  F065         	movff	byte_read@i,??_byte_read
  1957  00082A  A680               	btfss	3968,3,c	;volatile
  1958  00082C  D004               	goto	u950
  1959  00082E  0100               	movlb	0	; () banked
  1960  000830  6B66               	clrf	(??_byte_read+1)& (0+255),b
  1961  000832  2B66               	incf	(??_byte_read+1)& (0+255),f,b
  1962  000834  D002               	goto	u968
  1963  000836                     u950:
  1964  000836  0100               	movlb	0	; () banked
  1965  000838  6B66               	clrf	(??_byte_read+1)& (0+255),b
  1966  00083A                     u968:
  1967  00083A  0100               	movlb	0	; () banked
  1968  00083C  2B65               	incf	??_byte_read& (0+255),f,b
  1969  00083E  D003               	goto	u974
  1970  000840                     u975:
  1971  000840  0100               	movlb	0	; () banked
  1972  000842  90D8               	bcf	status,0,c
  1973  000844  3766               	rlcf	(??_byte_read+1)& (0+255),f,b
  1974  000846                     u974:
  1975  000846  0100               	movlb	0	; () banked
  1976  000848  2F65               	decfsz	??_byte_read& (0+255),f,b
  1977  00084A  D7FA               	goto	u975
  1978  00084C  0100               	movlb	0	; () banked
  1979  00084E  5166               	movf	(??_byte_read+1)& (0+255),w,b
  1980  000850  0100               	movlb	0	; () banked
  1981  000852  1368               	iorwf	byte_read@res& (0+255),f,b
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;user.c: 164: RA2 = 1;
  1985  000854  8480               	bsf	3968,2,c	;volatile
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;user.c: 165: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  1989  000856  0E10               	movlw	16
  1990  000858                     u1517:
  1991  000858  2EE8               	decfsz	wreg,f,c
  1992  00085A  D7FE               	bra	u1517
  1993  00085C  D000               	nop2	
  1994  00085E  0100               	movlb	0	; () banked
  1995  000860  4B69               	infsnz	byte_read@i& (0+255),f,b
  1996  000862  2B6A               	incf	(byte_read@i+1)& (0+255),f,b
  1997  000864  D7D0               	goto	l1965
  1998  000866                     l1981:
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;user.c: 167: }
  2002                           ;user.c: 169: ce_disable();
  2003  000866  ECF3  F005         	call	_ce_disable	;wreg free
  2004                           
  2005                           ;user.c: 172: return res;
  2006  00086A  0100               	movlb	0	; () banked
  2007  00086C  5168               	movf	byte_read@res& (0+255),w,b
  2008  00086E  0012               	return	
  2009  000870                     __end_of_byte_read:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           postinc0	equ	0xFEE
  2013                           wreg	equ	0xFE8
  2014                           indf2	equ	0xFDF
  2015                           fsr2h	equ	0xFDA
  2016                           fsr2l	equ	0xFD9
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _send_command *****************
  2020 ;; Defined at:
  2021 ;;		line 265 in file "user.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  command         1    wreg     unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  command         1    2[BANK0 ] unsigned char 
  2026 ;;  i               2    3[BANK0 ] int 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, status,2, status,0, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2036 ;;      Params:         0       0       0       0       0       0       0       0       0
  2037 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2038 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2039 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2040 ;;Total ram usage:        5 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    7
  2043 ;; This function calls:
  2044 ;;		_io_as_output
  2045 ;; This function is called by:
  2046 ;;		_byte_read
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text11
  2051  0008EA                     __ptext11:
  2052                           	opt stack 0
  2053  0008EA                     _send_command:
  2054                           	opt stack 21
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;incstack = 0
  2058                           ;send_command@command stored from wreg
  2059  0008EA  0100               	movlb	0	; () banked
  2060  0008EC  6F62               	movwf	send_command@command& (0+255),b
  2061                           
  2062                           ;user.c: 267: int i;
  2063                           ;user.c: 268: io_as_output();
  2064  0008EE  ECFD  F005         	call	_io_as_output	;wreg free
  2065                           
  2066                           ;user.c: 269: for(i=0; i<8; i++)
  2067  0008F2  0E00               	movlw	0
  2068  0008F4  0100               	movlb	0	; () banked
  2069  0008F6  6F64               	movwf	(send_command@i+1)& (0+255),b
  2070  0008F8  0E00               	movlw	0
  2071  0008FA  6F63               	movwf	send_command@i& (0+255),b
  2072  0008FC                     l1783:
  2073                           
  2074                           ; BSR set to: 0
  2075  0008FC  0100               	movlb	0	; () banked
  2076  0008FE  BF64               	btfsc	(send_command@i+1)& (0+255),7,b
  2077  000900  D008               	goto	l1787
  2078  000902  0100               	movlb	0	; () banked
  2079  000904  5164               	movf	(send_command@i+1)& (0+255),w,b
  2080  000906  E128               	bnz	l241
  2081  000908  0E08               	movlw	8
  2082  00090A  0100               	movlb	0	; () banked
  2083  00090C  5D63               	subwf	send_command@i& (0+255),w,b
  2084  00090E  B0D8               	btfsc	status,0,c
  2085  000910  0012               	return	
  2086  000912                     l1787:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;user.c: 270: {
  2090                           ;user.c: 271: RA3 = command>>i & 0x01;
  2091  000912  C063  F060         	movff	send_command@i,??_send_command
  2092  000916  C062  F061         	movff	send_command@command,??_send_command+1
  2093  00091A  0100               	movlb	0	; () banked
  2094  00091C  2B60               	incf	??_send_command& (0+255),f,b
  2095  00091E  D003               	goto	u774
  2096  000920                     u775:
  2097  000920  0100               	movlb	0	; () banked
  2098  000922  90D8               	bcf	status,0,c
  2099  000924  3361               	rrcf	(??_send_command+1)& (0+255),f,b
  2100  000926                     u774:
  2101  000926  0100               	movlb	0	; () banked
  2102  000928  2F60               	decfsz	??_send_command& (0+255),f,b
  2103  00092A  D7FA               	goto	u775
  2104  00092C  0100               	movlb	0	; () banked
  2105  00092E  3161               	rrcf	(??_send_command+1)& (0+255),w,b
  2106  000930  0100               	movlb	0	; () banked
  2107  000932  A0D8               	btfss	status,0,c
  2108  000934  D002               	goto	u780
  2109  000936  8680               	bsf	3968,3,c	;volatile
  2110  000938  D001               	goto	l1789
  2111  00093A                     u780:
  2112  00093A  9680               	bcf	3968,3,c	;volatile
  2113  00093C                     l1789:
  2114                           
  2115                           ;user.c: 272: RA2 = 1;
  2116  00093C  8480               	bsf	3968,2,c	;volatile
  2117                           
  2118                           ;user.c: 273: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  2119  00093E  0E10               	movlw	16
  2120  000940                     u1527:
  2121  000940  2EE8               	decfsz	wreg,f,c
  2122  000942  D7FE               	bra	u1527
  2123  000944  D000               	nop2	
  2124                           
  2125                           ;user.c: 274: RA2 = 0;
  2126  000946  9480               	bcf	3968,2,c	;volatile
  2127                           
  2128                           ;user.c: 275: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  2129  000948  0E06               	movlw	6
  2130  00094A                     u1537:
  2131  00094A  2EE8               	decfsz	wreg,f,c
  2132  00094C  D7FE               	bra	u1537
  2133  00094E  D000               	nop2	
  2134  000950  0100               	movlb	0	; () banked
  2135  000952  4B63               	infsnz	send_command@i& (0+255),f,b
  2136  000954  2B64               	incf	(send_command@i+1)& (0+255),f,b
  2137  000956  D7D2               	goto	l1783
  2138  000958                     l241:
  2139                           
  2140                           ; BSR set to: 0
  2141  000958  0012               	return		;funcret
  2142  00095A                     __end_of_send_command:
  2143                           	opt stack 0
  2144                           tblptru	equ	0xFF8
  2145                           postinc0	equ	0xFEE
  2146                           wreg	equ	0xFE8
  2147                           indf2	equ	0xFDF
  2148                           fsr2h	equ	0xFDA
  2149                           fsr2l	equ	0xFD9
  2150                           status	equ	0xFD8
  2151                           
  2152 ;; *************** function _io_as_output *****************
  2153 ;; Defined at:
  2154 ;;		line 285 in file "user.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		None
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2168 ;;      Params:         0       0       0       0       0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2171 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2172 ;;Total ram usage:        0 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    6
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_send_command
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text12
  2183  000BFA                     __ptext12:
  2184                           	opt stack 0
  2185  000BFA                     _io_as_output:
  2186                           	opt stack 21
  2187                           
  2188                           ;user.c: 287: TRISA3 = 0;
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;incstack = 0
  2192  000BFA  9692               	bcf	3986,3,c	;volatile
  2193  000BFC  0012               	return		;funcret
  2194  000BFE                     __end_of_io_as_output:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           indf2	equ	0xFDF
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _io_as_input *****************
  2205 ;; Defined at:
  2206 ;;		line 280 in file "user.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		None
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2223 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2224 ;;Total ram usage:        0 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    6
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_byte_read
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text13
  2235  000BFE                     __ptext13:
  2236                           	opt stack 0
  2237  000BFE                     _io_as_input:
  2238                           	opt stack 22
  2239                           
  2240                           ;user.c: 282: TRISA3 = 1;
  2241                           
  2242                           ;incstack = 0
  2243  000BFE  8692               	bsf	3986,3,c	;volatile
  2244  000C00  0012               	return		;funcret
  2245  000C02                     __end_of_io_as_input:
  2246                           	opt stack 0
  2247                           tblptru	equ	0xFF8
  2248                           postinc0	equ	0xFEE
  2249                           wreg	equ	0xFE8
  2250                           indf2	equ	0xFDF
  2251                           fsr2h	equ	0xFDA
  2252                           fsr2l	equ	0xFD9
  2253                           status	equ	0xFD8
  2254                           
  2255 ;; *************** function _ce_enable *****************
  2256 ;; Defined at:
  2257 ;;		line 142 in file "user.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;		None
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		None
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2271 ;;      Params:         0       0       0       0       0       0       0       0       0
  2272 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2274 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2275 ;;Total ram usage:        0 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    6
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_byte_read
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text14
  2286  000C02                     __ptext14:
  2287                           	opt stack 0
  2288  000C02                     _ce_enable:
  2289                           	opt stack 22
  2290                           
  2291                           ;user.c: 143: RA5 = 1;
  2292                           
  2293                           ;incstack = 0
  2294  000C02  8A80               	bsf	3968,5,c	;volatile
  2295  000C04  0012               	return		;funcret
  2296  000C06                     __end_of_ce_enable:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           postinc0	equ	0xFEE
  2300                           wreg	equ	0xFE8
  2301                           indf2	equ	0xFDF
  2302                           fsr2h	equ	0xFDA
  2303                           fsr2l	equ	0xFD9
  2304                           status	equ	0xFD8
  2305                           
  2306 ;; *************** function _ce_disable *****************
  2307 ;; Defined at:
  2308 ;;		line 145 in file "user.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;		None
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;		None
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  1    wreg      void 
  2315 ;; Registers used:
  2316 ;;		None
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2322 ;;      Params:         0       0       0       0       0       0       0       0       0
  2323 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2325 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2326 ;;Total ram usage:        0 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    6
  2329 ;; This function calls:
  2330 ;;		Nothing
  2331 ;; This function is called by:
  2332 ;;		_byte_read
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           	psect	text15
  2337  000BE6                     __ptext15:
  2338                           	opt stack 0
  2339  000BE6                     _ce_disable:
  2340                           	opt stack 22
  2341                           
  2342                           ;user.c: 146: RA5 = 0;
  2343                           
  2344                           ;incstack = 0
  2345  000BE6  9A80               	bcf	3968,5,c	;volatile
  2346                           
  2347                           ;user.c: 147: RA2 = 0;
  2348  000BE8  9480               	bcf	3968,2,c	;volatile
  2349  000BEA  0012               	return		;funcret
  2350  000BEC                     __end_of_ce_disable:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           postinc0	equ	0xFEE
  2354                           wreg	equ	0xFE8
  2355                           indf2	equ	0xFDF
  2356                           fsr2h	equ	0xFDA
  2357                           fsr2l	equ	0xFD9
  2358                           status	equ	0xFD8
  2359                           
  2360 ;; *************** function _InitApp *****************
  2361 ;; Defined at:
  2362 ;;		line 28 in file "user.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;		None
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;		None
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      void 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2376 ;;      Params:         0       0       0       0       0       0       0       0       0
  2377 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2379 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2380 ;;Total ram usage:        0 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    6
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_main
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text16
  2391  000B48                     __ptext16:
  2392                           	opt stack 0
  2393  000B48                     _InitApp:
  2394                           	opt stack 24
  2395                           
  2396                           ;user.c: 32: TRISB3 = 0;
  2397                           
  2398                           ;incstack = 0
  2399  000B48  9693               	bcf	3987,3,c	;volatile
  2400                           
  2401                           ;user.c: 33: TRISB4 = 0;
  2402  000B4A  9893               	bcf	3987,4,c	;volatile
  2403                           
  2404                           ;user.c: 35: CCP2CON = 0x00;
  2405  000B4C  0E00               	movlw	0
  2406  000B4E  6EBA               	movwf	4026,c	;volatile
  2407                           
  2408                           ;user.c: 36: SSPCON1 = 0X00;
  2409  000B50  0E00               	movlw	0
  2410  000B52  6EC6               	movwf	4038,c	;volatile
  2411                           
  2412                           ;user.c: 37: ADCON1 = 0X0F;
  2413  000B54  0E0F               	movlw	15
  2414  000B56  6EC1               	movwf	4033,c	;volatile
  2415                           
  2416                           ;user.c: 38: INTCON = 0b10001000;
  2417  000B58  0E88               	movlw	136
  2418  000B5A  6EF2               	movwf	intcon,c	;volatile
  2419                           
  2420                           ;user.c: 39: TRISB1 = 0;
  2421  000B5C  9293               	bcf	3987,1,c	;volatile
  2422                           
  2423                           ;user.c: 40: TRISA2 = 0;
  2424  000B5E  9492               	bcf	3986,2,c	;volatile
  2425                           
  2426                           ;user.c: 41: TRISA5 = 0;
  2427  000B60  9A92               	bcf	3986,5,c	;volatile
  2428                           
  2429                           ;user.c: 42: TRISA3 = 0;
  2430  000B62  9692               	bcf	3986,3,c	;volatile
  2431                           
  2432                           ;user.c: 46: state = 0;
  2433  000B64  0E00               	movlw	0
  2434  000B66  6E5B               	movwf	_state+1,c
  2435  000B68  0E00               	movlw	0
  2436  000B6A  6E5A               	movwf	_state,c
  2437                           
  2438                           ;user.c: 47: next = 0;
  2439  000B6C  0E00               	movlw	0
  2440  000B6E  0100               	movlb	0	; () banked
  2441  000B70  6F74               	movwf	(_next+1)& (0+255),b
  2442  000B72  0E00               	movlw	0
  2443  000B74  6F73               	movwf	_next& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446  000B76  0012               	return		;funcret
  2447  000B78                     __end_of_InitApp:
  2448                           	opt stack 0
  2449                           tblptru	equ	0xFF8
  2450                           intcon	equ	0xFF2
  2451                           postinc0	equ	0xFEE
  2452                           wreg	equ	0xFE8
  2453                           indf2	equ	0xFDF
  2454                           fsr2h	equ	0xFDA
  2455                           fsr2l	equ	0xFD9
  2456                           status	equ	0xFD8
  2457                           
  2458 ;; *************** function _ConfigureOscillator *****************
  2459 ;; Defined at:
  2460 ;;		line 24 in file "system.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		None
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2474 ;;      Params:         0       0       0       0       0       0       0       0       0
  2475 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2476 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2477 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2478 ;;Total ram usage:        0 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    6
  2481 ;; This function calls:
  2482 ;;		Nothing
  2483 ;; This function is called by:
  2484 ;;		_main
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text17
  2489  000C0E                     __ptext17:
  2490                           	opt stack 0
  2491  000C0E                     _ConfigureOscillator:
  2492                           	opt stack 24
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;incstack = 0
  2496  000C0E  0012               	return		;funcret
  2497  000C10                     __end_of_ConfigureOscillator:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           intcon	equ	0xFF2
  2501                           postinc0	equ	0xFEE
  2502                           wreg	equ	0xFE8
  2503                           indf2	equ	0xFDF
  2504                           fsr2h	equ	0xFDA
  2505                           fsr2l	equ	0xFD9
  2506                           status	equ	0xFD8
  2507                           
  2508 ;; *************** function _high_isr *****************
  2509 ;; Defined at:
  2510 ;;		line 30 in file "interrupts.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;  code           47   37[COMRAM] unsigned char [47]
  2515 ;;  i               2   87[COMRAM] int 
  2516 ;;  final_code      2   85[COMRAM] int 
  2517 ;;  aux             1   84[COMRAM] unsigned char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2527 ;;      Params:         0       0       0       0       0       0       0       0       0
  2528 ;;      Locals:        52       0       0       0       0       0       0       0       0
  2529 ;;      Temps:         17       0       0       0       0       0       0       0       0
  2530 ;;      Totals:        69       0       0       0       0       0       0       0       0
  2531 ;;Total ram usage:       69 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    5
  2534 ;; This function calls:
  2535 ;;		_get_next_state
  2536 ;;		_ir_get_human_code
  2537 ;; This function is called by:
  2538 ;;		Interrupt level 2
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	intcode
  2543  000008                     __pintcode:
  2544                           	opt stack 0
  2545  000008                     _high_isr:
  2546                           	opt stack 21
  2547                           
  2548                           ;incstack = 0
  2549  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2550  00000A  ED64  F001         	call	int_func,f	;refresh shadow registers
  2551                           tblptru	equ	0xFF8
  2552                           intcon	equ	0xFF2
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           indf2	equ	0xFDF
  2556                           fsr2h	equ	0xFDA
  2557                           fsr2l	equ	0xFD9
  2558                           status	equ	0xFD8
  2559                           
  2560                           	psect	intcode_body
  2561  0002C8                     __pintcode_body:
  2562                           	opt stack 21
  2563  0002C8                     int_func:
  2564                           	opt stack 21
  2565  0002C8  0006               	pop		; remove dummy address from shadow register refresh
  2566  0002CA  CFFA F018          	movff	pclath,??_high_isr+3
  2567  0002CE  CFFB F019          	movff	pclatu,??_high_isr+4
  2568  0002D2  CFE9 F01A          	movff	fsr0l,??_high_isr+5
  2569  0002D6  CFEA F01B          	movff	fsr0h,??_high_isr+6
  2570  0002DA  CFE1 F01C          	movff	fsr1l,??_high_isr+7
  2571  0002DE  CFE2 F01D          	movff	fsr1h,??_high_isr+8
  2572  0002E2  CFD9 F01E          	movff	fsr2l,??_high_isr+9
  2573  0002E6  CFDA F01F          	movff	fsr2h,??_high_isr+10
  2574  0002EA  CFF3 F020          	movff	prodl,??_high_isr+11
  2575  0002EE  CFF4 F021          	movff	prodh,??_high_isr+12
  2576  0002F2  CFF6 F022          	movff	tblptrl,??_high_isr+13
  2577  0002F6  CFF7 F023          	movff	tblptrh,??_high_isr+14
  2578  0002FA  CFF8 F024          	movff	tblptru,??_high_isr+15
  2579  0002FE  CFF5 F025          	movff	tablat,??_high_isr+16
  2580                           
  2581                           ;interrupts.c: 66: if (RBIF == 1)
  2582  000302  A0F2               	btfss	intcon,0,c	;volatile
  2583  000304  D074               	goto	i2l31
  2584                           
  2585                           ;interrupts.c: 67: {
  2586                           ;interrupts.c: 69: INTCONbits.GIE = 0;
  2587  000306  9EF2               	bcf	intcon,7,c	;volatile
  2588                           
  2589                           ;interrupts.c: 70: char aux = 0;
  2590  000308  0E00               	movlw	0
  2591  00030A  6E55               	movwf	high_isr@aux,c
  2592                           
  2593                           ;interrupts.c: 72: int i;
  2594                           ;interrupts.c: 73: char code[47];
  2595                           ;interrupts.c: 75: _delay((unsigned long)((40.6)*(20000000L/4000.0)));
  2596  00030C  0E02               	movlw	2
  2597  00030E  6E16               	movwf	(??_high_isr+1)& (0+255),c
  2598  000310  0E08               	movlw	8
  2599  000312  6E15               	movwf	??_high_isr& (0+255),c
  2600  000314  0EA0               	movlw	160
  2601  000316                     i2u154_47:
  2602  000316  2EE8               	decfsz	wreg,f,c
  2603  000318  D7FE               	bra	i2u154_47
  2604  00031A  2E15               	decfsz	??_high_isr& (0+255),f,c
  2605  00031C  D7FC               	bra	i2u154_47
  2606  00031E  2E16               	decfsz	(??_high_isr+1)& (0+255),f,c
  2607  000320  D7FA               	bra	i2u154_47
  2608                           
  2609                           ;interrupts.c: 76: for(i = 0; i < 47 ; i ++)
  2610  000322  0E00               	movlw	0
  2611  000324  6E59               	movwf	high_isr@i+1,c
  2612  000326  0E00               	movlw	0
  2613  000328  6E58               	movwf	high_isr@i,c
  2614  00032A                     i2l2215:
  2615  00032A  BE59               	btfsc	high_isr@i+1,7,c
  2616  00032C  D006               	goto	i2l2219
  2617  00032E  5059               	movf	high_isr@i+1,w,c
  2618  000330  E118               	bnz	i2l2227
  2619  000332  0E2F               	movlw	47
  2620  000334  5C58               	subwf	high_isr@i,w,c
  2621  000336  B0D8               	btfsc	status,0,c
  2622  000338  D014               	goto	i2l2227
  2623  00033A                     i2l2219:
  2624                           
  2625                           ;interrupts.c: 77: {
  2626                           ;interrupts.c: 78: code[i] = RB5;
  2627  00033A  0E26               	movlw	low high_isr@code
  2628  00033C  2458               	addwf	high_isr@i,w,c
  2629  00033E  6ED9               	movwf	fsr2l,c
  2630  000340  0E00               	movlw	high high_isr@code
  2631  000342  2059               	addwfc	high_isr@i+1,w,c
  2632  000344  6EDA               	movwf	fsr2h,c
  2633  000346  0E00               	movlw	0
  2634  000348  BA81               	btfsc	3969,5,c	;volatile
  2635  00034A  0E01               	movlw	1
  2636  00034C  6EDF               	movwf	indf2,c
  2637                           
  2638                           ;interrupts.c: 79: _delay((unsigned long)((590)*(20000000L/4000000.0)));
  2639  00034E  0E04               	movlw	4
  2640  000350  6E15               	movwf	??_high_isr& (0+255),c
  2641  000352  0ED4               	movlw	212
  2642  000354                     i2u155_47:
  2643  000354  2EE8               	decfsz	wreg,f,c
  2644  000356  D7FE               	bra	i2u155_47
  2645  000358  2E15               	decfsz	??_high_isr& (0+255),f,c
  2646  00035A  D7FC               	bra	i2u155_47
  2647  00035C  4A58               	infsnz	high_isr@i,f,c
  2648  00035E  2A59               	incf	high_isr@i+1,f,c
  2649  000360  D7E4               	goto	i2l2215
  2650  000362                     i2l2227:
  2651                           
  2652                           ;interrupts.c: 80: }
  2653                           ;interrupts.c: 81: int final_code = 0;
  2654  000362  0E00               	movlw	0
  2655  000364  6E57               	movwf	high_isr@final_code+1,c
  2656  000366  0E00               	movlw	0
  2657  000368  6E56               	movwf	high_isr@final_code,c
  2658                           
  2659                           ;interrupts.c: 82: for(i = 0; i<16;i++)
  2660  00036A  0E00               	movlw	0
  2661  00036C  6E59               	movwf	high_isr@i+1,c
  2662  00036E  0E00               	movlw	0
  2663  000370  6E58               	movwf	high_isr@i,c
  2664  000372                     i2l2229:
  2665  000372  BE59               	btfsc	high_isr@i+1,7,c
  2666  000374  D006               	goto	i2l2233
  2667  000376  5059               	movf	high_isr@i+1,w,c
  2668  000378  E11D               	bnz	i2l2239
  2669  00037A  0E10               	movlw	16
  2670  00037C  5C58               	subwf	high_isr@i,w,c
  2671  00037E  B0D8               	btfsc	status,0,c
  2672  000380  D019               	goto	i2l2239
  2673  000382                     i2l2233:
  2674                           
  2675                           ;interrupts.c: 83: {
  2676                           ;interrupts.c: 84: final_code |= code[i]<<i;
  2677  000382  C058  F015         	movff	high_isr@i,??_high_isr
  2678  000386  0E26               	movlw	low high_isr@code
  2679  000388  2458               	addwf	high_isr@i,w,c
  2680  00038A  6ED9               	movwf	fsr2l,c
  2681  00038C  0E00               	movlw	high high_isr@code
  2682  00038E  2059               	addwfc	high_isr@i+1,w,c
  2683  000390  6EDA               	movwf	fsr2h,c
  2684  000392  50DF               	movf	indf2,w,c
  2685  000394  6E16               	movwf	(??_high_isr+1)& (0+255),c
  2686  000396  6A17               	clrf	(??_high_isr+2)& (0+255),c
  2687  000398  2A15               	incf	??_high_isr,f,c
  2688  00039A  D003               	goto	i2u131_44
  2689  00039C                     i2u131_45:
  2690  00039C  90D8               	bcf	status,0,c
  2691  00039E  3616               	rlcf	??_high_isr+1,f,c
  2692  0003A0  3617               	rlcf	??_high_isr+2,f,c
  2693  0003A2                     i2u131_44:
  2694  0003A2  2E15               	decfsz	??_high_isr,f,c
  2695  0003A4  D7FB               	goto	i2u131_45
  2696  0003A6  5016               	movf	??_high_isr+1,w,c
  2697  0003A8  1256               	iorwf	high_isr@final_code,f,c
  2698  0003AA  5017               	movf	??_high_isr+2,w,c
  2699  0003AC  1257               	iorwf	high_isr@final_code+1,f,c
  2700  0003AE  4A58               	infsnz	high_isr@i,f,c
  2701  0003B0  2A59               	incf	high_isr@i+1,f,c
  2702  0003B2  D7DF               	goto	i2l2229
  2703  0003B4                     i2l2239:
  2704                           
  2705                           ;interrupts.c: 85: }
  2706                           ;interrupts.c: 90: if(final_code !=0xffff)
  2707  0003B4  2856               	incf	high_isr@final_code,w,c
  2708  0003B6  E103               	bnz	i2u133_40
  2709  0003B8  2857               	incf	high_isr@final_code+1,w,c
  2710  0003BA  B4D8               	btfsc	status,2,c
  2711  0003BC  D016               	goto	i2l2245
  2712  0003BE                     i2u133_40:
  2713                           
  2714                           ;interrupts.c: 91: {
  2715                           ;interrupts.c: 92: human_code = ir_get_human_code(final_code);
  2716  0003BE  C056  F001         	movff	high_isr@final_code,ir_get_human_code@code
  2717  0003C2  C057  F002         	movff	high_isr@final_code+1,ir_get_human_code@code+1
  2718  0003C6  EC15  F002         	call	_ir_get_human_code	;wreg free
  2719  0003CA  0100               	movlb	0	; () banked
  2720  0003CC  6F75               	movwf	_human_code& (0+255),b
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;interrupts.c: 93: next = get_next_state(state,final_code);
  2724  0003CE  C05A  F00E         	movff	_state,get_next_state@state
  2725  0003D2  C05B  F00F         	movff	_state+1,get_next_state@state+1
  2726  0003D6  C056  F010         	movff	high_isr@final_code,get_next_state@code
  2727  0003DA  C057  F011         	movff	high_isr@final_code+1,get_next_state@code+1
  2728  0003DE  ECB6  F002         	call	_get_next_state	;wreg free
  2729  0003E2  C00E  F073         	movff	?_get_next_state,_next
  2730  0003E6  C00F  F074         	movff	?_get_next_state+1,_next+1
  2731  0003EA                     i2l2245:
  2732                           
  2733                           ;interrupts.c: 94: }
  2734                           ;interrupts.c: 96: RBIF = 0;
  2735  0003EA  90F2               	bcf	intcon,0,c	;volatile
  2736                           
  2737                           ;interrupts.c: 97: INTCONbits.GIE = 1;
  2738  0003EC  8EF2               	bsf	intcon,7,c	;volatile
  2739  0003EE                     i2l31:
  2740  0003EE  C025  FFF5         	movff	??_high_isr+16,tablat
  2741  0003F2  C024  FFF8         	movff	??_high_isr+15,tblptru
  2742  0003F6  C023  FFF7         	movff	??_high_isr+14,tblptrh
  2743  0003FA  C022  FFF6         	movff	??_high_isr+13,tblptrl
  2744  0003FE  C021  FFF4         	movff	??_high_isr+12,prodh
  2745  000402  C020  FFF3         	movff	??_high_isr+11,prodl
  2746  000406  C01F  FFDA         	movff	??_high_isr+10,fsr2h
  2747  00040A  C01E  FFD9         	movff	??_high_isr+9,fsr2l
  2748  00040E  C01D  FFE2         	movff	??_high_isr+8,fsr1h
  2749  000412  C01C  FFE1         	movff	??_high_isr+7,fsr1l
  2750  000416  C01B  FFEA         	movff	??_high_isr+6,fsr0h
  2751  00041A  C01A  FFE9         	movff	??_high_isr+5,fsr0l
  2752  00041E  C019  FFFB         	movff	??_high_isr+4,pclatu
  2753  000422  C018  FFFA         	movff	??_high_isr+3,pclath
  2754  000426  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2755  000428  0011               	retfie		f
  2756  00042A                     __end_of_high_isr:
  2757                           	opt stack 0
  2758                           pclatu	equ	0xFFB
  2759                           pclath	equ	0xFFA
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           prodh	equ	0xFF4
  2765                           prodl	equ	0xFF3
  2766                           intcon	equ	0xFF2
  2767                           postinc0	equ	0xFEE
  2768                           fsr0h	equ	0xFEA
  2769                           fsr0l	equ	0xFE9
  2770                           wreg	equ	0xFE8
  2771                           fsr1h	equ	0xFE2
  2772                           fsr1l	equ	0xFE1
  2773                           indf2	equ	0xFDF
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _ir_get_human_code *****************
  2779 ;; Defined at:
  2780 ;;		line 332 in file "user.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  code            2    0[COMRAM] int 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  human_read_c    1    4[COMRAM] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      unsigned char 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2794 ;;      Params:         2       0       0       0       0       0       0       0       0
  2795 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2796 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2797 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2798 ;;Total ram usage:        5 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; This function calls:
  2801 ;;		Nothing
  2802 ;; This function is called by:
  2803 ;;		_high_isr
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text19
  2808  00042A                     __ptext19:
  2809                           	opt stack 0
  2810  00042A                     _ir_get_human_code:
  2811                           	opt stack 25
  2812                           
  2813                           ;user.c: 334: char human_read_code;
  2814                           ;user.c: 335: switch(code)
  2815                           
  2816                           ;incstack = 0
  2817  00042A  D035               	goto	i2l2031
  2818  00042C                     i2l1991:
  2819                           
  2820                           ;user.c: 338: human_read_code = 10;
  2821  00042C  0E0A               	movlw	10
  2822  00042E  6E05               	movwf	ir_get_human_code@human_read_code,c
  2823                           
  2824                           ;user.c: 339: break;
  2825  000430  0012               	return	
  2826  000432                     i2l1993:
  2827                           
  2828                           ;user.c: 341: human_read_code = 11;
  2829  000432  0E0B               	movlw	11
  2830  000434  6E05               	movwf	ir_get_human_code@human_read_code,c
  2831                           
  2832                           ;user.c: 342: break;
  2833  000436  0012               	return	
  2834  000438                     i2l1995:
  2835                           
  2836                           ;user.c: 344: human_read_code = 12;
  2837  000438  0E0C               	movlw	12
  2838  00043A  6E05               	movwf	ir_get_human_code@human_read_code,c
  2839                           
  2840                           ;user.c: 345: break;
  2841  00043C  0012               	return	
  2842  00043E                     i2l1997:
  2843                           
  2844                           ;user.c: 347: human_read_code = 13;
  2845  00043E  0E0D               	movlw	13
  2846  000440  6E05               	movwf	ir_get_human_code@human_read_code,c
  2847                           
  2848                           ;user.c: 348: break;
  2849  000442  0012               	return	
  2850  000444                     i2l1999:
  2851                           
  2852                           ;user.c: 350: human_read_code = 14;
  2853  000444  0E0E               	movlw	14
  2854  000446  6E05               	movwf	ir_get_human_code@human_read_code,c
  2855                           
  2856                           ;user.c: 351: break;
  2857  000448  0012               	return	
  2858  00044A                     i2l2001:
  2859                           
  2860                           ;user.c: 353: human_read_code = 1;
  2861  00044A  0E01               	movlw	1
  2862  00044C  6E05               	movwf	ir_get_human_code@human_read_code,c
  2863                           
  2864                           ;user.c: 354: break;
  2865  00044E  0012               	return	
  2866  000450                     i2l2003:
  2867                           
  2868                           ;user.c: 356: human_read_code = 2;
  2869  000450  0E02               	movlw	2
  2870  000452  6E05               	movwf	ir_get_human_code@human_read_code,c
  2871                           
  2872                           ;user.c: 357: break;
  2873  000454  0012               	return	
  2874  000456                     i2l2005:
  2875                           
  2876                           ;user.c: 359: human_read_code = 3;
  2877  000456  0E03               	movlw	3
  2878  000458  6E05               	movwf	ir_get_human_code@human_read_code,c
  2879                           
  2880                           ;user.c: 360: break;
  2881  00045A  0012               	return	
  2882  00045C                     i2l2007:
  2883                           
  2884                           ;user.c: 362: human_read_code = 4;
  2885  00045C  0E04               	movlw	4
  2886  00045E  6E05               	movwf	ir_get_human_code@human_read_code,c
  2887                           
  2888                           ;user.c: 363: break;
  2889  000460  0012               	return	
  2890  000462                     i2l2009:
  2891                           
  2892                           ;user.c: 365: human_read_code = 5;
  2893  000462  0E05               	movlw	5
  2894  000464  6E05               	movwf	ir_get_human_code@human_read_code,c
  2895                           
  2896                           ;user.c: 366: break;
  2897  000466  0012               	return	
  2898  000468                     i2l2011:
  2899                           
  2900                           ;user.c: 368: human_read_code = 6;
  2901  000468  0E06               	movlw	6
  2902  00046A  6E05               	movwf	ir_get_human_code@human_read_code,c
  2903                           
  2904                           ;user.c: 369: break;
  2905  00046C  0012               	return	
  2906  00046E                     i2l2013:
  2907                           
  2908                           ;user.c: 371: human_read_code = 7;
  2909  00046E  0E07               	movlw	7
  2910  000470  6E05               	movwf	ir_get_human_code@human_read_code,c
  2911                           
  2912                           ;user.c: 372: break;
  2913  000472  0012               	return	
  2914  000474                     i2l2015:
  2915                           
  2916                           ;user.c: 374: human_read_code = 8;
  2917  000474  0E08               	movlw	8
  2918  000476  6E05               	movwf	ir_get_human_code@human_read_code,c
  2919                           
  2920                           ;user.c: 375: break;
  2921  000478  0012               	return	
  2922  00047A                     i2l2017:
  2923                           
  2924                           ;user.c: 377: human_read_code = 9;
  2925  00047A  0E09               	movlw	9
  2926  00047C  6E05               	movwf	ir_get_human_code@human_read_code,c
  2927                           
  2928                           ;user.c: 378: break;
  2929  00047E  0012               	return	
  2930  000480                     i2l2019:
  2931                           
  2932                           ;user.c: 380: human_read_code = 0;
  2933  000480  0E00               	movlw	0
  2934  000482  6E05               	movwf	ir_get_human_code@human_read_code,c
  2935                           
  2936                           ;user.c: 381: break;
  2937  000484  0012               	return	
  2938  000486                     i2l2021:
  2939                           
  2940                           ;user.c: 383: human_read_code = 15;
  2941  000486  0E0F               	movlw	15
  2942  000488  6E05               	movwf	ir_get_human_code@human_read_code,c
  2943                           
  2944                           ;user.c: 384: break;
  2945  00048A  0012               	return	
  2946  00048C                     i2l2023:
  2947                           
  2948                           ;user.c: 386: human_read_code = 16;
  2949  00048C  0E10               	movlw	16
  2950  00048E  6E05               	movwf	ir_get_human_code@human_read_code,c
  2951                           
  2952                           ;user.c: 387: break;
  2953  000490  0012               	return	
  2954  000492                     i2l2025:
  2955                           
  2956                           ;user.c: 389: return -1;
  2957  000492  0EFF               	movlw	255
  2958                           
  2959                           ;user.c: 390: }
  2960  000494  0012               	return	
  2961  000496                     i2l2031:
  2962  000496  C001  F003         	movff	ir_get_human_code@code,??_ir_get_human_code
  2963  00049A  C002  F004         	movff	ir_get_human_code@code+1,??_ir_get_human_code+1
  2964                           
  2965                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 10 sub-s
      +                          witches
  2966                           ; Switch size 1, requested type "space"
  2967                           ; Number of cases is 10, Range of values is 17 to 238
  2968                           ; switch strategies available:
  2969                           ; Name         Instructions Cycles
  2970                           ; simple_byte           31    16 (average)
  2971                           ;	Chosen strategy is simple_byte
  2972  00049E  5004               	movf	??_ir_get_human_code+1,w,c
  2973  0004A0  0A11               	xorlw	17	; case 17
  2974  0004A2  B4D8               	btfsc	status,2,c
  2975  0004A4  D01C               	goto	i2l2541
  2976  0004A6  0A7F               	xorlw	127	; case 110
  2977  0004A8  B4D8               	btfsc	status,2,c
  2978  0004AA  D01E               	goto	i2l2543
  2979  0004AC  0AC4               	xorlw	196	; case 170
  2980  0004AE  B4D8               	btfsc	status,2,c
  2981  0004B0  D023               	goto	i2l2545
  2982  0004B2  0A01               	xorlw	1	; case 171
  2983  0004B4  B4D8               	btfsc	status,2,c
  2984  0004B6  D02B               	goto	i2l2547
  2985  0004B8  0A05               	xorlw	5	; case 174
  2986  0004BA  B4D8               	btfsc	status,2,c
  2987  0004BC  D030               	goto	i2l2549
  2988  0004BE  0A14               	xorlw	20	; case 186
  2989  0004C0  B4D8               	btfsc	status,2,c
  2990  0004C2  D035               	goto	i2l2551
  2991  0004C4  0A01               	xorlw	1	; case 187
  2992  0004C6  B4D8               	btfsc	status,2,c
  2993  0004C8  D037               	goto	i2l2553
  2994  0004CA  0A51               	xorlw	81	; case 234
  2995  0004CC  B4D8               	btfsc	status,2,c
  2996  0004CE  D03C               	goto	i2l2555
  2997  0004D0  0A01               	xorlw	1	; case 235
  2998  0004D2  B4D8               	btfsc	status,2,c
  2999  0004D4  D03E               	goto	i2l2557
  3000  0004D6  0A05               	xorlw	5	; case 238
  3001  0004D8  B4D8               	btfsc	status,2,c
  3002  0004DA  D043               	goto	i2l2559
  3003  0004DC  D7DA               	goto	i2l2025
  3004  0004DE                     i2l2541:
  3005                           
  3006                           ; Switch size 1, requested type "space"
  3007                           ; Number of cases is 1, Range of values is 17 to 17
  3008                           ; switch strategies available:
  3009                           ; Name         Instructions Cycles
  3010                           ; simple_byte            4     3 (average)
  3011                           ;	Chosen strategy is simple_byte
  3012  0004DE  5003               	movf	??_ir_get_human_code,w,c
  3013  0004E0  0A11               	xorlw	17	; case 17
  3014  0004E2  B4D8               	btfsc	status,2,c
  3015  0004E4  D7B8               	goto	i2l2005
  3016  0004E6  D7D5               	goto	i2l2025
  3017  0004E8                     i2l2543:
  3018                           
  3019                           ; Switch size 1, requested type "space"
  3020                           ; Number of cases is 2, Range of values is 185 to 233
  3021                           ; switch strategies available:
  3022                           ; Name         Instructions Cycles
  3023                           ; simple_byte            7     4 (average)
  3024                           ;	Chosen strategy is simple_byte
  3025  0004E8  5003               	movf	??_ir_get_human_code,w,c
  3026  0004EA  0AB9               	xorlw	185	; case 185
  3027  0004EC  B4D8               	btfsc	status,2,c
  3028  0004EE  D7C5               	goto	i2l2017
  3029  0004F0  0A50               	xorlw	80	; case 233
  3030  0004F2  B4D8               	btfsc	status,2,c
  3031  0004F4  D7BF               	goto	i2l2015
  3032  0004F6  D7CD               	goto	i2l2025
  3033  0004F8                     i2l2545:
  3034                           
  3035                           ; Switch size 1, requested type "space"
  3036                           ; Number of cases is 3, Range of values is 186 to 238
  3037                           ; switch strategies available:
  3038                           ; Name         Instructions Cycles
  3039                           ; simple_byte           10     6 (average)
  3040                           ;	Chosen strategy is simple_byte
  3041  0004F8  5003               	movf	??_ir_get_human_code,w,c
  3042  0004FA  0ABA               	xorlw	186	; case 186
  3043  0004FC  B4D8               	btfsc	status,2,c
  3044  0004FE  D7C3               	goto	i2l2021
  3045  000500  0A53               	xorlw	83	; case 233
  3046  000502  B4D8               	btfsc	status,2,c
  3047  000504  D79C               	goto	i2l1997
  3048  000506  0A07               	xorlw	7	; case 238
  3049  000508  B4D8               	btfsc	status,2,c
  3050  00050A  D79C               	goto	i2l1999
  3051  00050C  D7C2               	goto	i2l2025
  3052  00050E                     i2l2547:
  3053                           
  3054                           ; Switch size 1, requested type "space"
  3055                           ; Number of cases is 2, Range of values is 169 to 185
  3056                           ; switch strategies available:
  3057                           ; Name         Instructions Cycles
  3058                           ; simple_byte            7     4 (average)
  3059                           ;	Chosen strategy is simple_byte
  3060  00050E  5003               	movf	??_ir_get_human_code,w,c
  3061  000510  0AA9               	xorlw	169	; case 169
  3062  000512  B4D8               	btfsc	status,2,c
  3063  000514  D7AC               	goto	i2l2013
  3064  000516  0A10               	xorlw	16	; case 185
  3065  000518  B4D8               	btfsc	status,2,c
  3066  00051A  D788               	goto	i2l1991
  3067  00051C  D7BA               	goto	i2l2025
  3068  00051E                     i2l2549:
  3069                           
  3070                           ; Switch size 1, requested type "space"
  3071                           ; Number of cases is 2, Range of values is 186 to 233
  3072                           ; switch strategies available:
  3073                           ; Name         Instructions Cycles
  3074                           ; simple_byte            7     4 (average)
  3075                           ;	Chosen strategy is simple_byte
  3076  00051E  5003               	movf	??_ir_get_human_code,w,c
  3077  000520  0ABA               	xorlw	186	; case 186
  3078  000522  B4D8               	btfsc	status,2,c
  3079  000524  D7B3               	goto	i2l2023
  3080  000526  0A53               	xorlw	83	; case 233
  3081  000528  B4D8               	btfsc	status,2,c
  3082  00052A  D798               	goto	i2l2007
  3083  00052C  D7B2               	goto	i2l2025
  3084  00052E                     i2l2551:
  3085                           
  3086                           ; Switch size 1, requested type "space"
  3087                           ; Number of cases is 1, Range of values is 186 to 186
  3088                           ; switch strategies available:
  3089                           ; Name         Instructions Cycles
  3090                           ; simple_byte            4     3 (average)
  3091                           ;	Chosen strategy is simple_byte
  3092  00052E  5003               	movf	??_ir_get_human_code,w,c
  3093  000530  0ABA               	xorlw	186	; case 186
  3094  000532  B4D8               	btfsc	status,2,c
  3095  000534  D7A5               	goto	i2l2019
  3096  000536  D7AD               	goto	i2l2025
  3097  000538                     i2l2553:
  3098                           
  3099                           ; Switch size 1, requested type "space"
  3100                           ; Number of cases is 2, Range of values is 169 to 185
  3101                           ; switch strategies available:
  3102                           ; Name         Instructions Cycles
  3103                           ; simple_byte            7     4 (average)
  3104                           ;	Chosen strategy is simple_byte
  3105  000538  5003               	movf	??_ir_get_human_code,w,c
  3106  00053A  0AA9               	xorlw	169	; case 169
  3107  00053C  B4D8               	btfsc	status,2,c
  3108  00053E  D791               	goto	i2l2009
  3109  000540  0A10               	xorlw	16	; case 185
  3110  000542  B4D8               	btfsc	status,2,c
  3111  000544  D791               	goto	i2l2011
  3112  000546  D7A5               	goto	i2l2025
  3113  000548                     i2l2555:
  3114                           
  3115                           ; Switch size 1, requested type "space"
  3116                           ; Number of cases is 1, Range of values is 169 to 169
  3117                           ; switch strategies available:
  3118                           ; Name         Instructions Cycles
  3119                           ; simple_byte            4     3 (average)
  3120                           ;	Chosen strategy is simple_byte
  3121  000548  5003               	movf	??_ir_get_human_code,w,c
  3122  00054A  0AA9               	xorlw	169	; case 169
  3123  00054C  B4D8               	btfsc	status,2,c
  3124  00054E  D771               	goto	i2l1993
  3125  000550  D7A0               	goto	i2l2025
  3126  000552                     i2l2557:
  3127                           
  3128                           ; Switch size 1, requested type "space"
  3129                           ; Number of cases is 2, Range of values is 173 to 186
  3130                           ; switch strategies available:
  3131                           ; Name         Instructions Cycles
  3132                           ; simple_byte            7     4 (average)
  3133                           ;	Chosen strategy is simple_byte
  3134  000552  5003               	movf	??_ir_get_human_code,w,c
  3135  000554  0AAD               	xorlw	173	; case 173
  3136  000556  B4D8               	btfsc	status,2,c
  3137  000558  D76F               	goto	i2l1995
  3138  00055A  0A17               	xorlw	23	; case 186
  3139  00055C  B4D8               	btfsc	status,2,c
  3140  00055E  D775               	goto	i2l2001
  3141  000560  D798               	goto	i2l2025
  3142  000562                     i2l2559:
  3143                           
  3144                           ; Switch size 1, requested type "space"
  3145                           ; Number of cases is 1, Range of values is 174 to 174
  3146                           ; switch strategies available:
  3147                           ; Name         Instructions Cycles
  3148                           ; simple_byte            4     3 (average)
  3149                           ;	Chosen strategy is simple_byte
  3150  000562  5003               	movf	??_ir_get_human_code,w,c
  3151  000564  0AAE               	xorlw	174	; case 174
  3152  000566  B4D8               	btfsc	status,2,c
  3153  000568  D773               	goto	i2l2003
  3154  00056A  D793               	goto	i2l2025
  3155  00056C                     __end_of_ir_get_human_code:
  3156                           	opt stack 0
  3157                           pclatu	equ	0xFFB
  3158                           pclath	equ	0xFFA
  3159                           tblptru	equ	0xFF8
  3160                           tblptrh	equ	0xFF7
  3161                           tblptrl	equ	0xFF6
  3162                           tablat	equ	0xFF5
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           intcon	equ	0xFF2
  3166                           postinc0	equ	0xFEE
  3167                           fsr0h	equ	0xFEA
  3168                           fsr0l	equ	0xFE9
  3169                           wreg	equ	0xFE8
  3170                           fsr1h	equ	0xFE2
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function _get_next_state *****************
  3178 ;; Defined at:
  3179 ;;		line 295 in file "user.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;  state           2   13[COMRAM] int 
  3182 ;;  code            2   15[COMRAM] int 
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  hour            1   19[COMRAM] unsigned char 
  3185 ;;  minutes         1   18[COMRAM] unsigned char 
  3186 ;;  seconds         1   17[COMRAM] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  2   13[COMRAM] int 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3196 ;;      Params:         4       0       0       0       0       0       0       0       0
  3197 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3199 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3200 ;;Total ram usage:        7 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    4
  3203 ;; This function calls:
  3204 ;;		_set_time
  3205 ;; This function is called by:
  3206 ;;		_high_isr
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text20
  3211  00056C                     __ptext20:
  3212                           	opt stack 0
  3213  00056C                     _get_next_state:
  3214                           	opt stack 21
  3215                           
  3216                           ;user.c: 297: if(state == 0 && code == 0xAABA)
  3217                           
  3218                           ;incstack = 0
  3219  00056C  500E               	movf	get_next_state@state,w,c
  3220  00056E  100F               	iorwf	get_next_state@state+1,w,c
  3221  000570  A4D8               	btfss	status,2,c
  3222  000572  D007               	goto	i2l2079
  3223  000574  0EBA               	movlw	186
  3224  000576  1810               	xorwf	get_next_state@code,w,c
  3225  000578  E104               	bnz	i2l2079
  3226  00057A  0EAA               	movlw	170
  3227  00057C  1811               	xorwf	get_next_state@code+1,w,c
  3228  00057E  B4D8               	btfsc	status,2,c
  3229  000580  D03E               	goto	i2l2101
  3230  000582                     i2l2079:
  3231                           
  3232                           ;user.c: 299: else if(state == 1 && code == 0xAAEE)
  3233  000582  040E               	decf	get_next_state@state,w,c
  3234  000584  100F               	iorwf	get_next_state@state+1,w,c
  3235  000586  A4D8               	btfss	status,2,c
  3236  000588  D00C               	goto	i2l2085
  3237  00058A  0EEE               	movlw	238
  3238  00058C  1810               	xorwf	get_next_state@code,w,c
  3239  00058E  E109               	bnz	i2l2085
  3240  000590  0EAA               	movlw	170
  3241  000592  1811               	xorwf	get_next_state@code+1,w,c
  3242  000594  A4D8               	btfss	status,2,c
  3243  000596  D005               	goto	i2l2085
  3244                           
  3245                           ;user.c: 300: next = 2;
  3246  000598  0E00               	movlw	0
  3247  00059A  0100               	movlb	0	; () banked
  3248  00059C  6F74               	movwf	(_next+1)& (0+255),b
  3249  00059E  0E02               	movlw	2
  3250  0005A0  D032               	goto	L7
  3251  0005A2                     i2l2085:
  3252                           
  3253                           ;user.c: 301: else if(state == 2 && code == 0xAAEE)
  3254  0005A2  0E02               	movlw	2
  3255  0005A4  180E               	xorwf	get_next_state@state,w,c
  3256  0005A6  100F               	iorwf	get_next_state@state+1,w,c
  3257  0005A8  A4D8               	btfss	status,2,c
  3258  0005AA  D00C               	goto	i2l2091
  3259  0005AC  0EEE               	movlw	238
  3260  0005AE  1810               	xorwf	get_next_state@code,w,c
  3261  0005B0  E109               	bnz	i2l2091
  3262  0005B2  0EAA               	movlw	170
  3263  0005B4  1811               	xorwf	get_next_state@code+1,w,c
  3264  0005B6  A4D8               	btfss	status,2,c
  3265  0005B8  D005               	goto	i2l2091
  3266                           
  3267                           ;user.c: 302: next = 3;
  3268  0005BA  0E00               	movlw	0
  3269  0005BC  0100               	movlb	0	; () banked
  3270  0005BE  6F74               	movwf	(_next+1)& (0+255),b
  3271  0005C0  0E03               	movlw	3
  3272  0005C2  D021               	goto	L7
  3273  0005C4                     i2l2091:
  3274                           
  3275                           ;user.c: 303: else if(state == 3 && code == 0xAAEE)
  3276  0005C4  0E03               	movlw	3
  3277  0005C6  180E               	xorwf	get_next_state@state,w,c
  3278  0005C8  100F               	iorwf	get_next_state@state+1,w,c
  3279  0005CA  A4D8               	btfss	status,2,c
  3280  0005CC  D00C               	goto	i2l2097
  3281  0005CE  0EEE               	movlw	238
  3282  0005D0  1810               	xorwf	get_next_state@code,w,c
  3283  0005D2  E109               	bnz	i2l2097
  3284  0005D4  0EAA               	movlw	170
  3285  0005D6  1811               	xorwf	get_next_state@code+1,w,c
  3286  0005D8  A4D8               	btfss	status,2,c
  3287  0005DA  D005               	goto	i2l2097
  3288                           
  3289                           ;user.c: 304: next = 4;
  3290  0005DC  0E00               	movlw	0
  3291  0005DE  0100               	movlb	0	; () banked
  3292  0005E0  6F74               	movwf	(_next+1)& (0+255),b
  3293  0005E2  0E04               	movlw	4
  3294  0005E4  D010               	goto	L7
  3295  0005E6                     i2l2097:
  3296                           
  3297                           ;user.c: 305: else if(state == 4 && code == 0xAAEE)
  3298  0005E6  0E04               	movlw	4
  3299  0005E8  180E               	xorwf	get_next_state@state,w,c
  3300  0005EA  100F               	iorwf	get_next_state@state+1,w,c
  3301  0005EC  A4D8               	btfss	status,2,c
  3302  0005EE  D00D               	goto	i2l2103
  3303  0005F0  0EEE               	movlw	238
  3304  0005F2  1810               	xorwf	get_next_state@code,w,c
  3305  0005F4  E10A               	bnz	i2l2103
  3306  0005F6  0EAA               	movlw	170
  3307  0005F8  1811               	xorwf	get_next_state@code+1,w,c
  3308  0005FA  A4D8               	btfss	status,2,c
  3309  0005FC  D006               	goto	i2l2103
  3310  0005FE                     i2l2101:
  3311                           
  3312                           ;user.c: 306: next = 1;
  3313  0005FE  0E00               	movlw	0
  3314  000600  0100               	movlb	0	; () banked
  3315  000602  6F74               	movwf	(_next+1)& (0+255),b
  3316  000604  0E01               	movlw	1
  3317  000606                     L7:
  3318  000606  6F73               	movwf	_next& (0+255),b
  3319  000608  D036               	goto	i2l254
  3320  00060A                     i2l2103:
  3321                           
  3322                           ;user.c: 307: else if((state == 1 || state == 2 || state == 3 || state == 4) && code == 
      +                          0xAEBA)
  3323  00060A  040E               	decf	get_next_state@state,w,c
  3324  00060C  100F               	iorwf	get_next_state@state+1,w,c
  3325  00060E  B4D8               	btfsc	status,2,c
  3326  000610  D00F               	goto	i2l2111
  3327  000612  0E02               	movlw	2
  3328  000614  180E               	xorwf	get_next_state@state,w,c
  3329  000616  100F               	iorwf	get_next_state@state+1,w,c
  3330  000618  B4D8               	btfsc	status,2,c
  3331  00061A  D00A               	goto	i2l2111
  3332  00061C  0E03               	movlw	3
  3333  00061E  180E               	xorwf	get_next_state@state,w,c
  3334  000620  100F               	iorwf	get_next_state@state+1,w,c
  3335  000622  B4D8               	btfsc	status,2,c
  3336  000624  D005               	goto	i2l2111
  3337  000626  0E04               	movlw	4
  3338  000628  180E               	xorwf	get_next_state@state,w,c
  3339  00062A  100F               	iorwf	get_next_state@state+1,w,c
  3340  00062C  A4D8               	btfss	status,2,c
  3341  00062E  D023               	goto	i2l254
  3342  000630                     i2l2111:
  3343  000630  0EBA               	movlw	186
  3344  000632  1810               	xorwf	get_next_state@code,w,c
  3345  000634  E120               	bnz	i2l254
  3346  000636  0EAE               	movlw	174
  3347  000638  1811               	xorwf	get_next_state@code+1,w,c
  3348  00063A  A4D8               	btfss	status,2,c
  3349  00063C  D01C               	goto	i2l254
  3350                           
  3351                           ;user.c: 308: {
  3352                           ;user.c: 309: next = 0;
  3353  00063E  0E00               	movlw	0
  3354  000640  0100               	movlb	0	; () banked
  3355  000642  6F74               	movwf	(_next+1)& (0+255),b
  3356  000644  0E00               	movlw	0
  3357  000646  6F73               	movwf	_next& (0+255),b
  3358                           
  3359                           ;user.c: 310: char seconds = 0;
  3360  000648  0E00               	movlw	0
  3361  00064A  6E12               	movwf	get_next_state@seconds,c
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;user.c: 311: char minutes = aux1[0] + aux1[1]*10;
  3365  00064C  0100               	movlb	0	; () banked
  3366  00064E  5177               	movf	(_aux1+1)& (0+255),w,b
  3367  000650  0D0A               	mullw	10
  3368  000652  50F3               	movf	prodl,w,c
  3369  000654  0100               	movlb	0	; () banked
  3370  000656  2576               	addwf	_aux1& (0+255),w,b
  3371  000658  6E13               	movwf	get_next_state@minutes,c
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;user.c: 312: char hour = aux1[2] + aux1[3]*10;
  3375  00065A  0100               	movlb	0	; () banked
  3376  00065C  5179               	movf	(_aux1+3)& (0+255),w,b
  3377  00065E  0D0A               	mullw	10
  3378  000660  50F3               	movf	prodl,w,c
  3379  000662  0100               	movlb	0	; () banked
  3380  000664  2578               	addwf	(_aux1+2)& (0+255),w,b
  3381  000666  6E14               	movwf	get_next_state@hour,c
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;user.c: 313: set_time(seconds,minutes,hour);
  3385  000668  C013  F008         	movff	get_next_state@minutes,set_time@minutes
  3386  00066C  C014  F009         	movff	get_next_state@hour,set_time@hour
  3387  000670  5012               	movf	get_next_state@seconds,w,c
  3388  000672  EC87  F005         	call	_set_time
  3389  000676                     i2l254:
  3390                           
  3391                           ;user.c: 318: return next;
  3392  000676  C073  F00E         	movff	_next,?_get_next_state
  3393  00067A  C074  F00F         	movff	_next+1,?_get_next_state+1
  3394  00067E  0012               	return		;funcret
  3395  000680                     __end_of_get_next_state:
  3396                           	opt stack 0
  3397                           pclatu	equ	0xFFB
  3398                           pclath	equ	0xFFA
  3399                           tblptru	equ	0xFF8
  3400                           tblptrh	equ	0xFF7
  3401                           tblptrl	equ	0xFF6
  3402                           tablat	equ	0xFF5
  3403                           prodh	equ	0xFF4
  3404                           prodl	equ	0xFF3
  3405                           intcon	equ	0xFF2
  3406                           postinc0	equ	0xFEE
  3407                           fsr0h	equ	0xFEA
  3408                           fsr0l	equ	0xFE9
  3409                           wreg	equ	0xFE8
  3410                           fsr1h	equ	0xFE2
  3411                           fsr1l	equ	0xFE1
  3412                           indf2	equ	0xFDF
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417 ;; *************** function _set_time *****************
  3418 ;; Defined at:
  3419 ;;		line 186 in file "user.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  seconds         1    wreg     unsigned char 
  3422 ;;  minutes         1    7[COMRAM] unsigned char 
  3423 ;;  hour            1    8[COMRAM] unsigned char 
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;  seconds         1    9[COMRAM] unsigned char 
  3426 ;;  hour_reg        1   12[COMRAM] unsigned char 
  3427 ;;  min_reg         1   11[COMRAM] unsigned char 
  3428 ;;  sec_reg         1   10[COMRAM] unsigned char 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      void 
  3431 ;; Registers used:
  3432 ;;		wreg, status,2, status,0, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3438 ;;      Params:         2       0       0       0       0       0       0       0       0
  3439 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3441 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3442 ;;Total ram usage:        6 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    3
  3445 ;; This function calls:
  3446 ;;		_byte_write
  3447 ;;		_get_hour_reg
  3448 ;;		_get_seconds_reg
  3449 ;; This function is called by:
  3450 ;;		_get_next_state
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text21
  3455  000B0E                     __ptext21:
  3456                           	opt stack 0
  3457  000B0E                     _set_time:
  3458                           	opt stack 21
  3459                           
  3460                           ;incstack = 0
  3461                           ;set_time@seconds stored from wreg
  3462  000B0E  6E0A               	movwf	set_time@seconds,c
  3463                           
  3464                           ;user.c: 189: char sec_reg = get_seconds_reg(seconds);
  3465  000B10  500A               	movf	set_time@seconds,w,c
  3466  000B12  EC11  F005         	call	_get_seconds_reg
  3467  000B16  6E0B               	movwf	set_time@sec_reg,c
  3468                           
  3469                           ;user.c: 190: char min_reg = get_seconds_reg(minutes);
  3470  000B18  5008               	movf	set_time@minutes,w,c
  3471  000B1A  EC11  F005         	call	_get_seconds_reg
  3472  000B1E  6E0C               	movwf	set_time@min_reg,c
  3473                           
  3474                           ;user.c: 191: char hour_reg = get_hour_reg(hour);
  3475  000B20  5009               	movf	set_time@hour,w,c
  3476  000B22  ECBC  F005         	call	_get_hour_reg
  3477  000B26  6E0D               	movwf	set_time@hour_reg,c
  3478                           
  3479                           ;user.c: 193: byte_write(0x80,sec_reg);
  3480  000B28  C00B  F006         	movff	set_time@sec_reg,byte_write@value
  3481  000B2C  0E80               	movlw	128
  3482  000B2E  ECDF  F005         	call	_byte_write
  3483                           
  3484                           ;user.c: 194: byte_write(0x82,min_reg);
  3485  000B32  C00C  F006         	movff	set_time@min_reg,byte_write@value
  3486  000B36  0E82               	movlw	130
  3487  000B38  ECDF  F005         	call	_byte_write
  3488                           
  3489                           ;user.c: 195: byte_write(0x84,hour_reg);
  3490  000B3C  C00D  F006         	movff	set_time@hour_reg,byte_write@value
  3491  000B40  0E84               	movlw	132
  3492  000B42  ECDF  F005         	call	_byte_write
  3493  000B46  0012               	return		;funcret
  3494  000B48                     __end_of_set_time:
  3495                           	opt stack 0
  3496                           pclatu	equ	0xFFB
  3497                           pclath	equ	0xFFA
  3498                           tblptru	equ	0xFF8
  3499                           tblptrh	equ	0xFF7
  3500                           tblptrl	equ	0xFF6
  3501                           tablat	equ	0xFF5
  3502                           prodh	equ	0xFF4
  3503                           prodl	equ	0xFF3
  3504                           intcon	equ	0xFF2
  3505                           postinc0	equ	0xFEE
  3506                           fsr0h	equ	0xFEA
  3507                           fsr0l	equ	0xFE9
  3508                           wreg	equ	0xFE8
  3509                           fsr1h	equ	0xFE2
  3510                           fsr1l	equ	0xFE1
  3511                           indf2	equ	0xFDF
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function _get_seconds_reg *****************
  3517 ;; Defined at:
  3518 ;;		line 216 in file "user.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  seconds         1    wreg     unsigned char 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  seconds         1    1[COMRAM] unsigned char 
  3523 ;;  res             1    0[COMRAM] unsigned char 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      unsigned char 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2, status,0
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3533 ;;      Params:         0       0       0       0       0       0       0       0       0
  3534 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3536 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3537 ;;Total ram usage:        2 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_set_time
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text22
  3547  000A22                     __ptext22:
  3548                           	opt stack 0
  3549  000A22                     _get_seconds_reg:
  3550                           	opt stack 23
  3551                           
  3552                           ;incstack = 0
  3553                           ;get_seconds_reg@seconds stored from wreg
  3554  000A22  6E02               	movwf	get_seconds_reg@seconds,c
  3555                           
  3556                           ;user.c: 218: char res = 0;
  3557  000A24  0E00               	movlw	0
  3558  000A26  6E01               	movwf	get_seconds_reg@res,c
  3559                           
  3560                           ;user.c: 219: if(seconds<10)
  3561  000A28  0E0A               	movlw	10
  3562  000A2A  6002               	cpfslt	get_seconds_reg@seconds,c
  3563  000A2C  D003               	goto	i2l1815
  3564                           
  3565                           ;user.c: 220: {
  3566                           ;user.c: 221: res = seconds;
  3567  000A2E  C002  F001         	movff	get_seconds_reg@seconds,get_seconds_reg@res
  3568                           
  3569                           ;user.c: 222: }
  3570  000A32  D020               	goto	i2l1833
  3571  000A34                     i2l1815:
  3572                           
  3573                           ;user.c: 223: else if(seconds <20)
  3574  000A34  0E14               	movlw	20
  3575  000A36  6002               	cpfslt	get_seconds_reg@seconds,c
  3576  000A38  D004               	goto	i2l1819
  3577                           
  3578                           ;user.c: 224: {
  3579                           ;user.c: 225: res = 1<<4 | (seconds - 10);
  3580  000A3A  5002               	movf	get_seconds_reg@seconds,w,c
  3581  000A3C  0FF6               	addlw	246
  3582  000A3E  0910               	iorlw	16
  3583  000A40  D018               	goto	L11
  3584  000A42                     i2l1819:
  3585                           
  3586                           ;user.c: 227: else if(seconds <30)
  3587  000A42  0E1E               	movlw	30
  3588  000A44  6002               	cpfslt	get_seconds_reg@seconds,c
  3589  000A46  D004               	goto	i2l1823
  3590                           
  3591                           ;user.c: 228: {
  3592                           ;user.c: 229: res = 2<<4 | (seconds -20);
  3593  000A48  5002               	movf	get_seconds_reg@seconds,w,c
  3594  000A4A  0FEC               	addlw	236
  3595  000A4C  0920               	iorlw	32
  3596  000A4E  D011               	goto	L11
  3597  000A50                     i2l1823:
  3598                           
  3599                           ;user.c: 231: else if(seconds <40)
  3600  000A50  0E28               	movlw	40
  3601  000A52  6002               	cpfslt	get_seconds_reg@seconds,c
  3602  000A54  D004               	goto	i2l1827
  3603                           
  3604                           ;user.c: 232: {
  3605                           ;user.c: 233: res = 3<<4 | (seconds - 30);
  3606  000A56  5002               	movf	get_seconds_reg@seconds,w,c
  3607  000A58  0FE2               	addlw	226
  3608  000A5A  0930               	iorlw	48
  3609  000A5C  D00A               	goto	L11
  3610  000A5E                     i2l1827:
  3611                           
  3612                           ;user.c: 235: else if(seconds <50)
  3613  000A5E  0E32               	movlw	50
  3614  000A60  6002               	cpfslt	get_seconds_reg@seconds,c
  3615  000A62  D004               	goto	i2l1831
  3616                           
  3617                           ;user.c: 236: {
  3618                           ;user.c: 237: res = 4<<4 | (seconds - 40);
  3619  000A64  5002               	movf	get_seconds_reg@seconds,w,c
  3620  000A66  0FD8               	addlw	216
  3621  000A68  0940               	iorlw	64
  3622  000A6A  D003               	goto	L11
  3623  000A6C                     i2l1831:
  3624                           
  3625                           ;user.c: 239: else
  3626                           ;user.c: 240: {
  3627                           ;user.c: 241: res = 5<<4 | (seconds -50);
  3628  000A6C  5002               	movf	get_seconds_reg@seconds,w,c
  3629  000A6E  0FCE               	addlw	206
  3630  000A70  0950               	iorlw	80
  3631  000A72                     L11:
  3632  000A72  6E01               	movwf	get_seconds_reg@res,c
  3633  000A74                     i2l1833:
  3634                           
  3635                           ;user.c: 242: }
  3636                           ;user.c: 244: return res;
  3637  000A74  5001               	movf	get_seconds_reg@res,w,c
  3638  000A76  0012               	return	
  3639  000A78                     __end_of_get_seconds_reg:
  3640                           	opt stack 0
  3641                           pclatu	equ	0xFFB
  3642                           pclath	equ	0xFFA
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           prodh	equ	0xFF4
  3648                           prodl	equ	0xFF3
  3649                           intcon	equ	0xFF2
  3650                           postinc0	equ	0xFEE
  3651                           fsr0h	equ	0xFEA
  3652                           fsr0l	equ	0xFE9
  3653                           wreg	equ	0xFE8
  3654                           fsr1h	equ	0xFE2
  3655                           fsr1l	equ	0xFE1
  3656                           indf2	equ	0xFDF
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _get_hour_reg *****************
  3662 ;; Defined at:
  3663 ;;		line 246 in file "user.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  hour            1    wreg     unsigned char 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  hour            1    1[COMRAM] unsigned char 
  3668 ;;  res             1    0[COMRAM] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      unsigned char 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3678 ;;      Params:         0       0       0       0       0       0       0       0       0
  3679 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3681 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3682 ;;Total ram usage:        2 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; This function calls:
  3685 ;;		Nothing
  3686 ;; This function is called by:
  3687 ;;		_set_time
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           	psect	text23
  3692  000B78                     __ptext23:
  3693                           	opt stack 0
  3694  000B78                     _get_hour_reg:
  3695                           	opt stack 23
  3696                           
  3697                           ;incstack = 0
  3698                           ;get_hour_reg@hour stored from wreg
  3699  000B78  6E02               	movwf	get_hour_reg@hour,c
  3700                           
  3701                           ;user.c: 248: char res = 0;
  3702  000B7A  0E00               	movlw	0
  3703  000B7C  6E01               	movwf	get_hour_reg@res,c
  3704                           
  3705                           ;user.c: 249: if(hour < 10)
  3706  000B7E  0E0A               	movlw	10
  3707  000B80  6002               	cpfslt	get_hour_reg@hour,c
  3708  000B82  D003               	goto	i2l1843
  3709                           
  3710                           ;user.c: 250: {
  3711                           ;user.c: 251: res = hour;
  3712  000B84  C002  F001         	movff	get_hour_reg@hour,get_hour_reg@res
  3713                           
  3714                           ;user.c: 252: }
  3715  000B88  D00B               	goto	i2l1849
  3716  000B8A                     i2l1843:
  3717                           
  3718                           ;user.c: 253: else if(hour < 20)
  3719  000B8A  0E14               	movlw	20
  3720  000B8C  6002               	cpfslt	get_hour_reg@hour,c
  3721  000B8E  D004               	goto	i2l1847
  3722                           
  3723                           ;user.c: 254: {
  3724                           ;user.c: 255: res = 1<<4 | (hour -10);
  3725  000B90  5002               	movf	get_hour_reg@hour,w,c
  3726  000B92  0FF6               	addlw	246
  3727  000B94  0910               	iorlw	16
  3728  000B96  D003               	goto	L12
  3729  000B98                     i2l1847:
  3730                           
  3731                           ;user.c: 257: else
  3732                           ;user.c: 258: {
  3733                           ;user.c: 259: res = 2<<4 | (hour-20);
  3734  000B98  5002               	movf	get_hour_reg@hour,w,c
  3735  000B9A  0FEC               	addlw	236
  3736  000B9C  0920               	iorlw	32
  3737  000B9E                     L12:
  3738  000B9E  6E01               	movwf	get_hour_reg@res,c
  3739  000BA0                     i2l1849:
  3740                           
  3741                           ;user.c: 260: }
  3742                           ;user.c: 262: return res;
  3743  000BA0  5001               	movf	get_hour_reg@res,w,c
  3744  000BA2  0012               	return	
  3745  000BA4                     __end_of_get_hour_reg:
  3746                           	opt stack 0
  3747                           pclatu	equ	0xFFB
  3748                           pclath	equ	0xFFA
  3749                           tblptru	equ	0xFF8
  3750                           tblptrh	equ	0xFF7
  3751                           tblptrl	equ	0xFF6
  3752                           tablat	equ	0xFF5
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           intcon	equ	0xFF2
  3756                           postinc0	equ	0xFEE
  3757                           fsr0h	equ	0xFEA
  3758                           fsr0l	equ	0xFE9
  3759                           wreg	equ	0xFE8
  3760                           fsr1h	equ	0xFE2
  3761                           fsr1l	equ	0xFE1
  3762                           indf2	equ	0xFDF
  3763                           fsr2h	equ	0xFDA
  3764                           fsr2l	equ	0xFD9
  3765                           status	equ	0xFD8
  3766                           
  3767 ;; *************** function _byte_write *****************
  3768 ;; Defined at:
  3769 ;;		line 175 in file "user.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;  address         1    wreg     unsigned char 
  3772 ;;  value           1    5[COMRAM] unsigned char 
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;  address         1    6[COMRAM] unsigned char 
  3775 ;; Return value:  Size  Location     Type
  3776 ;;                  1    wreg      void 
  3777 ;; Registers used:
  3778 ;;		wreg, status,2, status,0, cstack
  3779 ;; Tracked objects:
  3780 ;;		On entry : 0/0
  3781 ;;		On exit  : 0/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3784 ;;      Params:         1       0       0       0       0       0       0       0       0
  3785 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3787 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3788 ;;Total ram usage:        2 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; Hardware stack levels required when called:    2
  3791 ;; This function calls:
  3792 ;;		i2_ce_disable
  3793 ;;		i2_ce_enable
  3794 ;;		i2_send_command
  3795 ;; This function is called by:
  3796 ;;		_set_time
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text24
  3801  000BBE                     __ptext24:
  3802                           	opt stack 0
  3803  000BBE                     _byte_write:
  3804                           	opt stack 21
  3805                           
  3806                           ;incstack = 0
  3807                           ;byte_write@address stored from wreg
  3808  000BBE  6E07               	movwf	byte_write@address,c
  3809                           
  3810                           ;user.c: 177: ce_enable();
  3811  000BC0  EC05  F006         	call	i2_ce_enable	;wreg free
  3812                           
  3813                           ;user.c: 180: send_command(address);
  3814  000BC4  5007               	movf	byte_write@address,w,c
  3815  000BC6  ECE4  F004         	call	i2_send_command
  3816                           
  3817                           ;user.c: 181: send_command(value);
  3818  000BCA  5006               	movf	byte_write@value,w,c
  3819  000BCC  ECE4  F004         	call	i2_send_command
  3820                           
  3821                           ;user.c: 183: ce_disable();
  3822  000BD0  ECF6  F005         	call	i2_ce_disable	;wreg free
  3823  000BD4  0012               	return		;funcret
  3824  000BD6                     __end_of_byte_write:
  3825                           	opt stack 0
  3826                           pclatu	equ	0xFFB
  3827                           pclath	equ	0xFFA
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           postinc0	equ	0xFEE
  3836                           fsr0h	equ	0xFEA
  3837                           fsr0l	equ	0xFE9
  3838                           wreg	equ	0xFE8
  3839                           fsr1h	equ	0xFE2
  3840                           fsr1l	equ	0xFE1
  3841                           indf2	equ	0xFDF
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function i2_send_command *****************
  3847 ;; Defined at:
  3848 ;;		line 265 in file "user.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  command         1    wreg     unsigned char 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  command         1    2[COMRAM] unsigned char 
  3853 ;;  send_command    2    3[COMRAM] int 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3863 ;;      Params:         0       0       0       0       0       0       0       0       0
  3864 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3865 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3866 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3867 ;;Total ram usage:        5 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    1
  3870 ;; This function calls:
  3871 ;;		i2_io_as_output
  3872 ;; This function is called by:
  3873 ;;		_byte_write
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text25
  3878  0009C8                     __ptext25:
  3879                           	opt stack 0
  3880  0009C8                     i2_send_command:
  3881                           	opt stack 21
  3882                           
  3883                           ;incstack = 0
  3884                           ;i2send_command@command stored from wreg
  3885  0009C8  6E03               	movwf	i2send_command@command,c
  3886                           
  3887                           ;user.c: 267: int i;
  3888                           ;user.c: 268: io_as_output();
  3889  0009CA  EC03  F006         	call	i2_io_as_output	;wreg free
  3890                           
  3891                           ;user.c: 269: for(i=0; i<8; i++)
  3892  0009CE  0E00               	movlw	0
  3893  0009D0  6E05               	movwf	i2send_command@i+1,c
  3894  0009D2  0E00               	movlw	0
  3895  0009D4  6E04               	movwf	i2send_command@i,c
  3896  0009D6                     i2l1757:
  3897  0009D6  BE05               	btfsc	i2send_command@i+1,7,c
  3898  0009D8  D006               	goto	i2l1761
  3899  0009DA  5005               	movf	i2send_command@i+1,w,c
  3900  0009DC  E121               	bnz	i2l241
  3901  0009DE  0E08               	movlw	8
  3902  0009E0  5C04               	subwf	i2send_command@i,w,c
  3903  0009E2  B0D8               	btfsc	status,0,c
  3904  0009E4  0012               	return	
  3905  0009E6                     i2l1761:
  3906                           
  3907                           ;user.c: 270: {
  3908                           ;user.c: 271: RA3 = command>>i & 0x01;
  3909  0009E6  C004  F001         	movff	i2send_command@i,??i2_send_command
  3910  0009EA  C003  F002         	movff	i2send_command@command,??i2_send_command+1
  3911  0009EE  2A01               	incf	??i2_send_command,f,c
  3912  0009F0  D002               	goto	i2u72_44
  3913  0009F2                     i2u72_45:
  3914  0009F2  90D8               	bcf	status,0,c
  3915  0009F4  3202               	rrcf	??i2_send_command+1,f,c
  3916  0009F6                     i2u72_44:
  3917  0009F6  2E01               	decfsz	??i2_send_command,f,c
  3918  0009F8  D7FC               	goto	i2u72_45
  3919  0009FA  3002               	rrcf	??i2_send_command+1,w,c
  3920  0009FC  A0D8               	btfss	status,0,c
  3921  0009FE  D002               	goto	i2u73_40
  3922  000A00  8680               	bsf	3968,3,c	;volatile
  3923  000A02  D001               	goto	i2l1763
  3924  000A04                     i2u73_40:
  3925  000A04  9680               	bcf	3968,3,c	;volatile
  3926  000A06                     i2l1763:
  3927                           
  3928                           ;user.c: 272: RA2 = 1;
  3929  000A06  8480               	bsf	3968,2,c	;volatile
  3930                           
  3931                           ;user.c: 273: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  3932  000A08  0E10               	movlw	16
  3933  000A0A                     i2u156_47:
  3934  000A0A  2EE8               	decfsz	wreg,f,c
  3935  000A0C  D7FE               	bra	i2u156_47
  3936  000A0E  D000               	nop2	
  3937                           
  3938                           ;user.c: 274: RA2 = 0;
  3939  000A10  9480               	bcf	3968,2,c	;volatile
  3940                           
  3941                           ;user.c: 275: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  3942  000A12  0E06               	movlw	6
  3943  000A14                     i2u157_47:
  3944  000A14  2EE8               	decfsz	wreg,f,c
  3945  000A16  D7FE               	bra	i2u157_47
  3946  000A18  D000               	nop2	
  3947  000A1A  4A04               	infsnz	i2send_command@i,f,c
  3948  000A1C  2A05               	incf	i2send_command@i+1,f,c
  3949  000A1E  D7DB               	goto	i2l1757
  3950  000A20                     i2l241:
  3951  000A20  0012               	return		;funcret
  3952  000A22                     __end_ofi2_send_command:
  3953                           	opt stack 0
  3954                           pclatu	equ	0xFFB
  3955                           pclath	equ	0xFFA
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           intcon	equ	0xFF2
  3963                           postinc0	equ	0xFEE
  3964                           fsr0h	equ	0xFEA
  3965                           fsr0l	equ	0xFE9
  3966                           wreg	equ	0xFE8
  3967                           fsr1h	equ	0xFE2
  3968                           fsr1l	equ	0xFE1
  3969                           indf2	equ	0xFDF
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function i2_io_as_output *****************
  3975 ;; Defined at:
  3976 ;;		line 285 in file "user.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;		None
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;		None
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  1    wreg      void 
  3983 ;; Registers used:
  3984 ;;		None
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3990 ;;      Params:         0       0       0       0       0       0       0       0       0
  3991 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3993 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3994 ;;Total ram usage:        0 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		i2_send_command
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text26
  4004  000C06                     __ptext26:
  4005                           	opt stack 0
  4006  000C06                     i2_io_as_output:
  4007                           	opt stack 21
  4008                           
  4009                           ;user.c: 287: TRISA3 = 0;
  4010                           
  4011                           ;incstack = 0
  4012  000C06  9692               	bcf	3986,3,c	;volatile
  4013  000C08  0012               	return		;funcret
  4014  000C0A                     __end_ofi2_io_as_output:
  4015                           	opt stack 0
  4016                           pclatu	equ	0xFFB
  4017                           pclath	equ	0xFFA
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           prodh	equ	0xFF4
  4023                           prodl	equ	0xFF3
  4024                           intcon	equ	0xFF2
  4025                           postinc0	equ	0xFEE
  4026                           fsr0h	equ	0xFEA
  4027                           fsr0l	equ	0xFE9
  4028                           wreg	equ	0xFE8
  4029                           fsr1h	equ	0xFE2
  4030                           fsr1l	equ	0xFE1
  4031                           indf2	equ	0xFDF
  4032                           fsr2h	equ	0xFDA
  4033                           fsr2l	equ	0xFD9
  4034                           status	equ	0xFD8
  4035                           
  4036 ;; *************** function i2_ce_enable *****************
  4037 ;; Defined at:
  4038 ;;		line 142 in file "user.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;		None
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		None
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4052 ;;      Params:         0       0       0       0       0       0       0       0       0
  4053 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4054 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4055 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4056 ;;Total ram usage:        0 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_byte_write
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text27
  4066  000C0A                     __ptext27:
  4067                           	opt stack 0
  4068  000C0A                     i2_ce_enable:
  4069                           	opt stack 22
  4070                           
  4071                           ;user.c: 143: RA5 = 1;
  4072                           
  4073                           ;incstack = 0
  4074  000C0A  8A80               	bsf	3968,5,c	;volatile
  4075  000C0C  0012               	return		;funcret
  4076  000C0E                     __end_ofi2_ce_enable:
  4077                           	opt stack 0
  4078                           pclatu	equ	0xFFB
  4079                           pclath	equ	0xFFA
  4080                           tblptru	equ	0xFF8
  4081                           tblptrh	equ	0xFF7
  4082                           tblptrl	equ	0xFF6
  4083                           tablat	equ	0xFF5
  4084                           prodh	equ	0xFF4
  4085                           prodl	equ	0xFF3
  4086                           intcon	equ	0xFF2
  4087                           postinc0	equ	0xFEE
  4088                           fsr0h	equ	0xFEA
  4089                           fsr0l	equ	0xFE9
  4090                           wreg	equ	0xFE8
  4091                           fsr1h	equ	0xFE2
  4092                           fsr1l	equ	0xFE1
  4093                           indf2	equ	0xFDF
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function i2_ce_disable *****************
  4099 ;; Defined at:
  4100 ;;		line 145 in file "user.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		None
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0
  4115 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4117 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_byte_write
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text28
  4128  000BEC                     __ptext28:
  4129                           	opt stack 0
  4130  000BEC                     i2_ce_disable:
  4131                           	opt stack 22
  4132                           
  4133                           ;user.c: 146: RA5 = 0;
  4134                           
  4135                           ;incstack = 0
  4136  000BEC  9A80               	bcf	3968,5,c	;volatile
  4137                           
  4138                           ;user.c: 147: RA2 = 0;
  4139  000BEE  9480               	bcf	3968,2,c	;volatile
  4140  000BF0  0012               	return		;funcret
  4141  000BF2                     __end_ofi2_ce_disable:
  4142                           	opt stack 0
  4143  0000                     pclatu	equ	0xFFB
  4144                           pclath	equ	0xFFA
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           prodh	equ	0xFF4
  4150                           prodl	equ	0xFF3
  4151                           intcon	equ	0xFF2
  4152                           postinc0	equ	0xFEE
  4153                           fsr0h	equ	0xFEA
  4154                           fsr0l	equ	0xFE9
  4155                           wreg	equ	0xFE8
  4156                           fsr1h	equ	0xFE2
  4157                           fsr1l	equ	0xFE1
  4158                           indf2	equ	0xFDF
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           pclatu	equ	0xFFB
  4163                           pclath	equ	0xFFA
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           intcon	equ	0xFF2
  4171                           postinc0	equ	0xFEE
  4172                           fsr0h	equ	0xFEA
  4173                           fsr0l	equ	0xFE9
  4174                           wreg	equ	0xFE8
  4175                           fsr1h	equ	0xFE2
  4176                           fsr1l	equ	0xFE1
  4177                           indf2	equ	0xFDF
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182                           	psect	rparam
  4183  0000                     pclatu	equ	0xFFB
  4184                           pclath	equ	0xFFA
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           intcon	equ	0xFF2
  4192                           postinc0	equ	0xFEE
  4193                           fsr0h	equ	0xFEA
  4194                           fsr0l	equ	0xFE9
  4195                           wreg	equ	0xFE8
  4196                           fsr1h	equ	0xFE2
  4197                           fsr1l	equ	0xFE1
  4198                           indf2	equ	0xFDF
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203                           	psect	temp
  4204  00005C                     btemp:
  4205                           	opt stack 0
  4206  00005C                     	ds	1
  4207  0000                     int$flags	set	btemp
  4208                           pclatu	equ	0xFFB
  4209                           pclath	equ	0xFFA
  4210                           tblptru	equ	0xFF8
  4211                           tblptrh	equ	0xFF7
  4212                           tblptrl	equ	0xFF6
  4213                           tablat	equ	0xFF5
  4214                           prodh	equ	0xFF4
  4215                           prodl	equ	0xFF3
  4216                           intcon	equ	0xFF2
  4217                           postinc0	equ	0xFEE
  4218                           fsr0h	equ	0xFEA
  4219                           fsr0l	equ	0xFE9
  4220                           wreg	equ	0xFE8
  4221                           fsr1h	equ	0xFE2
  4222                           fsr1l	equ	0xFE1
  4223                           indf2	equ	0xFDF
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     89      91
    BANK0           160     19      28
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    get_time@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    put_nums@nums	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_get_next_state
    _get_next_state->_set_time
    _set_time->_byte_write
    _byte_write->i2_send_command

Critical Paths under _main in BANK0

    _main->_get_time
    _put_nums_individual->_put_num
    _put_nums->_put_num
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3654
                                             17 BANK0      2     2      0
                _ConfigureOscillator
                            _InitApp
                           _get_time
                  _ir_is_code_number
                       _point_toggle
                           _put_nums
                _put_nums_individual
 ---------------------------------------------------------------------------------
 (1) _put_nums_individual                                  6     1      5    2022
                                              7 BANK0      6     1      5
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (1) _put_nums                                             4     2      2     840
                                              7 BANK0      4     2      2
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (2) _put_num                                             17    17      0     348
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _get_num                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _point_toggle                                         0     0      0       0
                      _point_disable
                       _point_enable
 ---------------------------------------------------------------------------------
 (2) _point_enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _point_disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ir_is_code_number                                    1     1      0     220
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             6     4      2     572
                                             11 BANK0      6     4      2
                          _byte_read
 ---------------------------------------------------------------------------------
 (2) _byte_read                                            6     6      0     204
                                              5 BANK0      6     6      0
                         _ce_disable
                          _ce_enable
                        _io_as_input
                       _send_command
 ---------------------------------------------------------------------------------
 (3) _send_command                                         5     5      0      90
                                              0 BANK0      5     5      0
                       _io_as_output
 ---------------------------------------------------------------------------------
 (4) _io_as_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _io_as_input                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_enable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_disable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            69    69      0    1996
                                             20 COMRAM    69    69      0
                     _get_next_state
                  _ir_get_human_code
 ---------------------------------------------------------------------------------
 (6) _ir_get_human_code                                    5     3      2     115
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _get_next_state                                       7     3      4    1607
                                             13 COMRAM     7     3      4
                           _set_time
 ---------------------------------------------------------------------------------
 (7) _set_time                                             6     4      2    1056
                                              7 COMRAM     6     4      2
                         _byte_write
                       _get_hour_reg
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (8) _get_seconds_reg                                      2     2      0     271
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _get_hour_reg                                         2     2      0     136
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _byte_write                                           2     1      1     362
                                              5 COMRAM     2     1      1
                       i2_ce_disable
                        i2_ce_enable
                     i2_send_command
 ---------------------------------------------------------------------------------
 (9) i2_send_command                                       5     5      0      90
                                              0 COMRAM     5     5      0
                     i2_io_as_output
 ---------------------------------------------------------------------------------
 (10) i2_io_as_output                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _get_time
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
   _ir_is_code_number
   _point_toggle
     _point_disable
     _point_enable
   _put_nums
     _get_num
     _put_num
   _put_nums_individual
     _get_num
     _put_num

 _high_isr (ROOT)
   _get_next_state
     _set_time
       _byte_write
         i2_ce_disable
         i2_ce_enable
         i2_send_command
           i2_io_as_output
       _get_hour_reg
       _get_seconds_reg
   _ir_get_human_code

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      1C       5       17.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     59      5B       1       96.8%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      77      11        0.0%
DATA                 0      0      77       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun May 21 18:07:56 2017

                              l69 015A                       __CFG_BOR$ON 000000  
                 ??_point_disable 0060                       _put_num$845 0064  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_LVP$ON 000000  
                  i2_send_command 09C8                       __CFG_WDT$ON 000000  
                             l205 081C                               l144 08E8  
                             l241 0958                               l149 0B0C  
                    __CFG_CPB$OFF 000000                               _RB0 007C08  
                             _RA2 007C02                               _RB1 007C09  
                             _RA3 007C03                               _RB3 007C0B  
                             _RA5 007C05                               _RB4 007C0C  
                             _RB5 007C0D                   ?_get_next_state 000E  
                    __CFG_CPD$OFF 000000                               u780 093A  
                             u925 08DA                               u774 0926  
                             u950 0836                               u926 08DC  
                             u775 0920                               u974 0846  
                             u894 08B4                               u975 0840  
                             u895 08AE                               u968 083A  
                             wreg 000FE8                      __CFG_FOSC$HS 000000  
                    ?_io_as_input 0001                       high_isr@aux 0055  
           ir_get_human_code@code 0001                  ?_get_seconds_reg 0001  
                            l2161 0AE6                              l2305 022A  
                            l2313 0292                              l2171 0BE0  
                            l2157 0AD0                              l2253 003E  
                            l2255 0048                              l2193 09C0  
                            l2281 0134                              l2273 00CE  
                            l2265 00AA                              l2199 09C4  
                            l1911 0758                              l1903 0750  
                            l2287 0152                              l2297 01C4  
                            l2289 015E                              l1931 076C  
                            l1923 0764                              l1915 075C  
                            l1907 0754                              l1783 08FC  
                            l1943 0778                              l1935 0770  
                            l1927 0768                              l1919 0760  
                            l1855 0884                              l1787 0912  
                            l1939 0774                              l1891 0744  
                            l1883 073C                              l1867 08D0  
                            l1859 089A                              l1789 093C  
                            l1981 0866                              l1965 0806  
                            l1949 077C                              l1895 0748  
                            l1887 0740                              l1879 0738  
                            l1899 074C                       get_time@aux 0070  
                            u1407 0076                              u1417 0096  
                            u1507 0820                              u1427 00EC  
                            u1517 0858                              u1437 0126  
                            u1527 0940                              u1447 017C  
                            u1537 094A                              u1457 01B6  
                            u1467 01E2                              u1477 021C  
                            u1487 0248                              u1497 0282  
           __size_ofi2_ce_disable 0006                              _RBIF 007F90  
                            i2l31 03EE                       i2_ce_enable 0C0A  
                            _aux1 0076                              _main 0012  
                            _next 0073                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 005C                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                    ??_get_hour_reg 0001  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
     __end_of_put_nums_individual 0AC6                      high_isr@code 0026  
                 __end_of_InitApp 0B78                     ?_io_as_output 0001  
          __end_ofi2_send_command 0A22       ir_is_code_number@human_code 0060  
                   __CFG_PLLDIV$1 000000                    __CFG_CCP2MX$ON 000000  
                           ?_main 0001                      get_time@data 006B  
                           i2l241 0A20                             i2l254 0676  
                   __CFG_USBDIV$1 000000                      i2_ce_disable 0BEC  
             _ConfigureOscillator 0C0E                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                   __end_of_get_num 07E2  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                           _state 005A                             pclath 000FFA  
                           tablat 000FF5                   __end_of_put_num 08EA  
                           status 000FD8              ?_ConfigureOscillator 0001  
                ??i2_io_as_output 0001                   __initialization 0BA4  
                    __end_of_main 02C8                    ??_io_as_output 0060  
                 ?i2_send_command 0001                            ??_main 0071  
                   __activetblptr 000002                            _ADCON1 000FC1  
                get_hour_reg@hour 0002                     get_time@hours 006F  
                          i2l2001 044A                            i2l2011 0468  
                          i2l2003 0450                            i2l2101 05FE  
                          i2l2021 0486                            i2l2013 046E  
                          i2l2005 0456                            i2l2111 0630  
                          i2l2103 060A                            i2l2023 048C  
                          i2l2015 0474                            i2l2007 045C  
                          i2l2031 0496                            i2l2025 0492  
                          i2l2017 047A                            i2l2009 0462  
                          i2l2019 0480                            i2l2215 032A  
                          i2l2233 0382                            i2l2091 05C4  
                          i2l2227 0362                            i2l2219 033A  
                          i2l2085 05A2                            i2l2245 03EA  
                          i2l2229 0372                            i2l2079 0582  
                          i2l2239 03B4                            i2l2097 05E6  
                          i2l2541 04DE                            i2l1831 0A6C  
                          i2l1823 0A50                            i2l1815 0A34  
                          i2l2551 052E                            i2l2543 04E8  
                          i2l1761 09E6                            i2l1833 0A74  
                          i2l2553 0538                            i2l2545 04F8  
                          i2l1763 0A06                            i2l1843 0B8A  
                          i2l1827 0A5E                            i2l1819 0A42  
                          i2l2555 0548                            i2l2547 050E  
                          i2l1757 09D6                            i2l2557 0552  
                          i2l2549 051E                            i2l1847 0B98  
                          i2l2559 0562                            i2l1849 0BA0  
                          i2l1991 042C                            i2l1993 0432  
                          i2l1995 0438                            i2l1997 043E  
                          i2l1999 0444                            _INTCON 000FF2  
                          _TRISA2 007C92                            _TRISB1 007C99  
                          _TRISA3 007C93                            _TRISB3 007C9B  
                          _TRISA5 007C95                            _TRISB4 007C9C  
                       ??_InitApp 0060             ??_ConfigureOscillator 0060  
                  __CFG_XINST$OFF 000000                  __end_of_high_isr 042A  
                __end_of_get_time 0732                   set_time@min_reg 000C  
                  __CFG_STVREN$ON 000000                   set_time@sec_reg 000B  
                 set_time@minutes 0008                   set_time@seconds 000A  
                          clear_0 0BAA                 _ir_get_human_code 042A  
                       ??_get_num 0060                get_seconds_reg@res 0001  
              ?_ir_get_human_code 0001                  __end_of_set_time 0B48  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8              __end_of_get_hour_reg 0BA4  
                __end_of_put_nums 0B0E                         ??_put_num 0060  
             ??_ir_get_human_code 0003              __size_of_io_as_input 0004  
                    put_nums@nums 0067                        __accesstop 0060  
         __end_of__initialization 0BB0                   __CFG_PBADEN$OFF 000000  
                   ___rparam_used 000001                __size_of_ce_enable 0004  
                  __pcstackCOMRAM 0001         __end_of_ir_get_human_code 056C  
                ??_get_next_state 0012                        _ce_disable 0BE6  
            __end_of_io_as_output 0BFE                        __pbssBANK0 0073  
                    ?i2_ce_enable 0001                        __pnvCOMRAM 005A  
              __size_of_byte_read 008E                get_next_state@code 0010  
              get_next_state@hour 0014                     ?_send_command 0001  
                         _CCP2CON 000FBA             __end_of_point_disable 0BFA  
               __end_of_ce_enable 0C06                           i2u72_44 09F6  
                         i2u72_45 09F2                           i2u73_40 0A04  
                         _SSPCON1 000FC6                         ?_high_isr 0001  
                       ?_get_time 006B                   __CFG_VREGEN$OFF 000000  
                         _InitApp 0B48          __size_of_get_seconds_reg 0056  
                         __Hparam 0000                  ??i2_send_command 0001  
                         __Lparam 0000                  byte_read@address 0067  
                       ?_set_time 0008                      byte_read@res 0068  
                  ??_send_command 0060        __size_of_ir_get_human_code 0142  
                       ?_put_nums 0067                        _byte_write 0BBE  
                         __pcinit 0BA4                  set_time@hour_reg 000D  
                         __ramtop 0800                           __ptext0 0012  
                         __ptext1 0A78                           __ptext2 0AC6  
                         __ptext3 0870                           __ptext4 0732  
                         __ptext5 0BD6                           __ptext6 0BF2  
                         __ptext7 0BF6                           __ptext8 095A  
                         __ptext9 0680             __size_of_get_hour_reg 002C  
                         _get_num 0732      __size_of_put_nums_individual 004E  
               __end_of_byte_read 0870                       ?_ce_disable 0001  
                      _human_code 0075                           _put_num 0870  
                      ??_high_isr 0015                        ??_get_time 006D  
                  __pintcode_body 02C8                     ?_point_enable 0001  
            end_of_initialization 0BB0                     __Lmediumconst 0000  
                   ?_point_toggle 0001                           int_func 02C8  
                      ??_set_time 000A                      _get_hour_reg 0B78  
                         postinc0 000FEE                        ??_put_nums 0069  
                 byte_write@value 0006             __size_of_io_as_output 0004  
ir_get_human_code@human_read_code 0005                    ??_point_enable 0060  
     __end_of_ConfigureOscillator 0C10                     send_command@i 0063  
                  ??_point_toggle 0060                        get_num@num 0060  
            __size_ofi2_ce_enable 0004               __size_of_ce_disable 0006  
              high_isr@final_code 0056                 ??_get_seconds_reg 0001  
         put_nums_individual@num0 006B           put_nums_individual@num1 006A  
         put_nums_individual@num2 0069           put_nums_individual@num3 0068  
         put_nums_individual@num4 0067           put_nums_individual@num5 006C  
                    _io_as_output 0BFA                       ?_byte_write 0006  
          get_seconds_reg@seconds 0002           __size_ofi2_io_as_output 0004  
             start_initialization 0BA4                     ??_io_as_input 0060  
            __end_of_send_command 095A             i2send_command@command 0003  
                 get_hour_reg@res 0001                        byte_read@i 0069  
                __CFG_LPT1OSC$OFF 000000                       put_num@mask 0063  
                   ?i2_ce_disable 0001                     __pcstackBANK0 0060  
                       _ce_enable 0C02               __size_of_byte_write 0018  
               __size_of_high_isr 0422               __end_of_io_as_input 0C02  
               __size_of_get_time 00B2               _put_nums_individual 0A78  
                        ?_InitApp 0001                         __pintcode 0008  
            __end_of_point_enable 0BF6                 __size_of_set_time 003A  
             get_next_state@state 000E              __end_of_point_toggle 0BE6  
            ?_put_nums_individual 0067                          ?_get_num 0001  
               __size_of_put_nums 0048                    ??i2_ce_disable 0001  
                    ??_ce_disable 0060           __size_of_get_next_state 0114  
                       _byte_read 07E2             get_next_state@minutes 0013  
           get_next_state@seconds 0012                          ?_put_num 0001  
                 get_time@minutes 006E                   get_time@seconds 006D  
                      ?_ce_enable 0001            __size_of_point_disable 0004  
                        i2u131_44 03A2                          i2u131_45 039C  
                        i2u133_40 03BE                          i2u154_47 0316  
                        i2u155_47 0354                          i2u156_47 0A0A  
                        i2u157_47 0A14                __end_of_ce_disable 0BEC  
                __CFG_WDTPS$32768 000000             ??_put_nums_individual 006C  
                  i2_io_as_output 0C06                         high_isr@i 0058  
           __size_of_send_command 0070                 _ir_is_code_number 095A  
                     _io_as_input 0BFE                        ?_byte_read 0001  
              ?_ir_is_code_number 0001               send_command@command 0062  
                 _get_seconds_reg 0A22               ??_ir_is_code_number 0060  
                __size_of_InitApp 0030                          __Hrparam 0000  
                        __Lrparam 0000                        put_num@num 0062  
                    _send_command 08EA                      ??_byte_write 0007  
          __end_ofi2_io_as_output 0C0A           __size_ofi2_send_command 005A  
       __end_of_ir_is_code_number 09C8                     _point_disable 0BF6  
                __size_of_get_num 00B0                          __ptext10 07E2  
                        __ptext11 08EA                          __ptext20 056C  
                        __ptext12 0BFA                          __ptext21 0B0E  
                        __ptext13 0BFE                          __ptext22 0A22  
                        __ptext14 0C02                          __ptext23 0B78  
                        __ptext15 0BE6                          __ptext24 0BBE  
                        __ptext16 0B48                          __ptext25 09C8  
                        __ptext17 0C0E                          __ptext26 0C06  
                        __ptext27 0C0A                          __ptext19 042A  
                        __ptext28 0BEC                          _high_isr 0008  
                        _get_time 0680                  __size_of_put_num 007A  
                   ??i2_ce_enable 0001                       ??_ce_enable 0060  
                   __size_of_main 02B6                __end_of_byte_write 0BD6  
            __end_ofi2_ce_disable 0BF2      __size_of_ConfigureOscillator 0002  
           __size_of_point_enable 0004                          _set_time 0B0E  
           __size_of_point_toggle 0010                          int$flags 005C  
                        _put_nums 0AC6                   ?i2_io_as_output 0001  
           __CFG_CPUDIV$OSC1_PLL2 000000                    ?_point_disable 0001  
                      _INTCONbits 000FF2                    _get_next_state 056C  
                    set_time@hour 0009           __end_of_get_seconds_reg 0A78  
                     ??_byte_read 0065                         put_nums@i 0069  
                        intlevel2 0000                      _point_enable 0BF2  
                    _point_toggle 0BD6               __end_ofi2_ce_enable 0C0E  
                 i2send_command@i 0004                 byte_write@address 0007  
                        put_num@i 0065            __end_of_get_next_state 0680  
      __size_of_ir_is_code_number 006E                     ?_get_hour_reg 0001  
