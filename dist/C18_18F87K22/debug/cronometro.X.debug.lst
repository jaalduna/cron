

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun May 28 19:27:42 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.42
    61                           ; Generated 13/04/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F2550 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	nvCOMRAM
    96  000038                     __pnvCOMRAM:
    97                           	opt stack 0
    98  000038                     _timer1_up_limit_min:
    99                           	opt stack 0
   100  000038                     	ds	1
   101  000039                     _timer1_up_limit_sec:
   102                           	opt stack 0
   103  000039                     	ds	1
   104                           
   105                           	psect	nvBANK0
   106  0000B8                     __pnvBANK0:
   107                           	opt stack 0
   108  0000B8                     _state:
   109                           	opt stack 0
   110  0000B8                     	ds	2
   111  0000                     _RA3	set	31747
   112  0000                     _RA2	set	31746
   113  0000                     _RA5	set	31749
   114  0000                     _RB1	set	31753
   115  0000                     _RB4	set	31756
   116  0000                     _RB3	set	31755
   117  0000                     _TRISA3	set	31891
   118  0000                     _TRISA5	set	31893
   119  0000                     _TRISA2	set	31890
   120  0000                     _TRISB1	set	31897
   121  0000                     _TRISB4	set	31900
   122  0000                     _TRISB3	set	31899
   123  0000                     _RB0	set	31752
   124  0000                     _RB5	set	31757
   125  0000                     _PIE1	set	3997
   126  0000                     _T1CON	set	4045
   127  0000                     _ADCON1	set	4033
   128  0000                     _SSPCON1	set	4038
   129  0000                     _CCP2CON	set	4026
   130  0000                     _TMR1IF	set	31984
   131  0000                     _T0CON	set	4053
   132  0000                     _INTCON2	set	4081
   133  0000                     _INTCON	set	4082
   134  0000                     _INTCONbits	set	4082
   135  0000                     _TMR0IF	set	32658
   136  0000                     _RBIF	set	32656
   137                           
   138                           ; #config settings
   139  0000                     
   140                           	psect	cinit
   141  0016EE                     __pcinit:
   142                           	opt stack 0
   143  0016EE                     start_initialization:
   144                           	opt stack 0
   145  0016EE                     __initialization:
   146                           	opt stack 0
   147                           
   148                           ; Clear objects allocated to BANK0 (16 bytes)
   149  0016EE  EE00  F0A8         	lfsr	0,__pbssBANK0
   150  0016F2  0E10               	movlw	16
   151  0016F4                     clear_0:
   152  0016F4  6AEE               	clrf	postinc0,c
   153  0016F6  06E8               	decf	wreg,f,c
   154  0016F8  E1FD               	bnz	clear_0
   155                           
   156                           ; Clear objects allocated to COMRAM (7 bytes)
   157  0016FA  EE00  F031         	lfsr	0,__pbssCOMRAM
   158  0016FE  0E07               	movlw	7
   159  001700                     clear_1:
   160  001700  6AEE               	clrf	postinc0,c
   161  001702  06E8               	decf	wreg,f,c
   162  001704  E1FD               	bnz	clear_1
   163  001706                     end_of_initialization:
   164                           	opt stack 0
   165  001706                     __end_of__initialization:
   166                           	opt stack 0
   167  001706  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   168  001708  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   169  00170A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  00170C  6EF8               	movwf	tblptru,c
   171  00170E  0100               	movlb	0
   172  001710  EF3E  F002         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	bssCOMRAM
   178  000031                     __pbssCOMRAM:
   179                           	opt stack 0
   180  000031                     _next:
   181                           	opt stack 0
   182  000031                     	ds	2
   183  000033                     _timer1_speed_cents:
   184                           	opt stack 0
   185  000033                     	ds	1
   186  000034                     _timer1_down_init_sec:
   187                           	opt stack 0
   188  000034                     	ds	1
   189  000035                     _timer1_down_init_min:
   190                           	opt stack 0
   191  000035                     	ds	1
   192  000036                     _timer1_counter_min:
   193                           	opt stack 0
   194  000036                     	ds	1
   195  000037                     _human_code:
   196                           	opt stack 0
   197  000037                     	ds	1
   198                           tblptru	equ	0xFF8
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           
   202                           	psect	bssBANK0
   203  0000A8                     __pbssBANK0:
   204                           	opt stack 0
   205  0000A8                     _counter:
   206                           	opt stack 0
   207  0000A8                     	ds	1
   208  0000A9                     _timer1_counter:
   209                           	opt stack 0
   210  0000A9                     	ds	1
   211  0000AA                     _buzzer_status:
   212                           	opt stack 0
   213  0000AA                     	ds	1
   214  0000AB                     _masked_digits:
   215                           	opt stack 0
   216  0000AB                     	ds	6
   217  0000B1                     _aux1:
   218                           	opt stack 0
   219  0000B1                     	ds	6
   220  0000B7                     _timer1_counter_10:
   221                           	opt stack 0
   222  0000B7                     	ds	1
   223                           tblptru	equ	0xFF8
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           	psect	cstackBANK0
   228  000060                     __pcstackBANK0:
   229                           	opt stack 0
   230  000060                     high_isr@code:
   231                           	opt stack 0
   232                           
   233                           ; 47 bytes @ 0x0
   234  000060                     	ds	47
   235  00008F                     high_isr@digits:
   236                           	opt stack 0
   237                           
   238                           ; 6 bytes @ 0x2F
   239  00008F                     	ds	6
   240  000095                     high_isr@aux:
   241                           	opt stack 0
   242                           
   243                           ; 1 bytes @ 0x35
   244  000095                     	ds	1
   245  000096                     high_isr@final_code:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x36
   249  000096                     	ds	2
   250  000098                     high_isr@i:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x38
   254  000098                     	ds	2
   255  00009A                     high_isr@i_156:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x3A
   259  00009A                     	ds	2
   260  00009C                     ?___awdiv:
   261                           	opt stack 0
   262  00009C                     ?___awmod:
   263                           	opt stack 0
   264  00009C                     get_time@data:
   265                           	opt stack 0
   266  00009C                     get_timer1_counter@data:
   267                           	opt stack 0
   268  00009C                     get_timer1_counter_down@data:
   269                           	opt stack 0
   270  00009C                     ___awdiv@dividend:
   271                           	opt stack 0
   272  00009C                     ___awmod@dividend:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x3C
   276  00009C                     	ds	2
   277  00009E                     get_time@format:
   278                           	opt stack 0
   279  00009E                     ___awdiv@divisor:
   280                           	opt stack 0
   281  00009E                     ___awmod@divisor:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x3E
   285  00009E                     	ds	1
   286  00009F                     ??_get_time:
   287                           
   288                           ; 1 bytes @ 0x3F
   289  00009F                     	ds	1
   290  0000A0                     get_time@seconds:
   291                           	opt stack 0
   292  0000A0                     get_timer1_counter_speed@data:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x40
   296  0000A0                     	ds	1
   297  0000A1                     get_time@aux_hour:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x41
   301  0000A1                     	ds	1
   302  0000A2                     get_time@minutes:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x42
   306  0000A2                     	ds	1
   307  0000A3                     get_time@aux:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x43
   311  0000A3                     	ds	1
   312  0000A4                     get_time@hours:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x44
   316  0000A4                     	ds	1
   317  0000A5                     ??_main:
   318                           
   319                           ; 1 bytes @ 0x45
   320  0000A5                     	ds	2
   321  0000A7                     main@format:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x47
   325  0000A7                     	ds	1
   326                           tblptru	equ	0xFF8
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           
   330                           	psect	cstackCOMRAM
   331  000001                     __pcstackCOMRAM:
   332                           	opt stack 0
   333  000001                     ??_put_num:
   334  000001                     ??i2_send_command:
   335  000001                     get_num@num:
   336                           	opt stack 0
   337  000001                     get_hour_reg@res:
   338                           	opt stack 0
   339  000001                     i2get_seconds_reg@res:
   340                           	opt stack 0
   341  000001                     ir_get_human_code@code:
   342                           	opt stack 0
   343  000001                     update_point@state:
   344                           	opt stack 0
   345  000001                     update_buzzer@state:
   346                           	opt stack 0
   347  000001                     update_timer1_counter_10@counter:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x0
   351  000001                     	ds	1
   352  000002                     get_hour_reg@hour:
   353                           	opt stack 0
   354  000002                     i2get_seconds_reg@seconds:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x1
   358  000002                     	ds	1
   359  000003                     ??_ir_get_human_code:
   360  000003                     put_num@num:
   361                           	opt stack 0
   362  000003                     update_point@counter:
   363                           	opt stack 0
   364  000003                     update_buzzer@counter:
   365                           	opt stack 0
   366  000003                     i2send_command@command:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x2
   370  000003                     	ds	1
   371  000004                     put_num@mask:
   372                           	opt stack 0
   373  000004                     update_timer1_counter_10@state:
   374                           	opt stack 0
   375  000004                     i2send_command@i:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x3
   379  000004                     	ds	1
   380  000005                     ir_get_human_code@human_read_code:
   381                           	opt stack 0
   382  000005                     _put_num$939:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x4
   386  000005                     	ds	1
   387  000006                     byte_write@value:
   388                           	opt stack 0
   389  000006                     put_num@i:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x5
   393  000006                     	ds	1
   394  000007                     byte_write@address:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x6
   398  000007                     	ds	1
   399  000008                     set_time@minutes:
   400                           	opt stack 0
   401  000008                     put_nums@nums:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x7
   405  000008                     	ds	1
   406  000009                     set_time@hour:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x8
   410  000009                     	ds	1
   411  00000A                     set_time@seconds:
   412                           	opt stack 0
   413  00000A                     put_nums@i:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x9
   417  00000A                     	ds	1
   418  00000B                     set_time@sec_reg:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0xA
   422  00000B                     	ds	1
   423  00000C                     set_time@min_reg:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0xB
   427  00000C                     	ds	1
   428  00000D                     set_time@hour_reg:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0xC
   432  00000D                     	ds	1
   433  00000E                     ?_get_next_state:
   434                           	opt stack 0
   435  00000E                     get_next_state@state:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0xD
   439  00000E                     	ds	2
   440  000010                     get_next_state@code:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0xF
   444  000010                     	ds	2
   445  000012                     get_next_state@seconds:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x11
   449  000012                     	ds	1
   450  000013                     get_next_state@minutes:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x12
   454  000013                     	ds	1
   455  000014                     get_next_state@hour:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x13
   459  000014                     	ds	1
   460  000015                     ??_high_isr:
   461                           
   462                           ; 1 bytes @ 0x14
   463  000015                     	ds	17
   464  000026                     ??_send_command:
   465  000026                     get_seconds_reg@res:
   466                           	opt stack 0
   467  000026                     ir_is_code_number@human_code:
   468                           	opt stack 0
   469  000026                     ___awdiv@counter:
   470                           	opt stack 0
   471  000026                     ___awmod@counter:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x25
   475  000026                     	ds	1
   476  000027                     get_seconds_reg@seconds:
   477                           	opt stack 0
   478  000027                     ___awdiv@sign:
   479                           	opt stack 0
   480  000027                     ___awmod@sign:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x26
   484  000027                     	ds	1
   485  000028                     ??_get_timer1_counter:
   486  000028                     ??_get_timer1_counter_down:
   487  000028                     send_command@command:
   488                           	opt stack 0
   489  000028                     ___awdiv@quotient:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x27
   493  000028                     	ds	1
   494  000029                     send_command@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x28
   498  000029                     	ds	1
   499  00002A                     ??_get_cents_reg:
   500                           
   501                           ; 1 bytes @ 0x29
   502  00002A                     	ds	1
   503  00002B                     ??_byte_read:
   504                           
   505                           ; 1 bytes @ 0x2A
   506  00002B                     	ds	1
   507  00002C                     get_cents_reg@res:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x2B
   511  00002C                     	ds	1
   512  00002D                     byte_read@address:
   513                           	opt stack 0
   514  00002D                     get_cents_reg@cents:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2C
   518  00002D                     	ds	1
   519  00002E                     ??_get_timer1_counter_speed:
   520  00002E                     byte_read@res:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x2D
   524  00002E                     	ds	1
   525  00002F                     byte_read@i:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x2E
   529  00002F                     	ds	2
   530                           tblptru	equ	0xFF8
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           
   534 ;;
   535 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   536 ;;
   537 ;; *************** function _main *****************
   538 ;; Defined at:
   539 ;;		line 37 in file "main.c"
   540 ;; Parameters:    Size  Location     Type
   541 ;;		None
   542 ;; Auto vars:     Size  Location     Type
   543 ;;  format          1   71[BANK0 ] unsigned char 
   544 ;;  temp            1    0        unsigned char 
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   554 ;;      Params:         0       0       0       0       0       0       0       0       0
   555 ;;      Locals:         0       1       0       0       0       0       0       0       0
   556 ;;      Temps:          0       2       0       0       0       0       0       0       0
   557 ;;      Totals:         0       3       0       0       0       0       0       0       0
   558 ;;Total ram usage:        3 bytes
   559 ;; Hardware stack levels required when called:   10
   560 ;; This function calls:
   561 ;;		_ConfigureOscillator
   562 ;;		_InitApp
   563 ;;		_buzzer_disable
   564 ;;		_get_time
   565 ;;		_get_timer1_counter
   566 ;;		_get_timer1_counter_down
   567 ;;		_get_timer1_counter_speed
   568 ;;		_ir_is_code_number
   569 ;;		_timer1_disable
   570 ;;		_timer1_enable
   571 ;; This function is called by:
   572 ;;		Startup code after reset
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           	psect	text0
   577  00047C                     __ptext0:
   578                           	opt stack 0
   579  00047C                     _main:
   580                           	opt stack 21
   581                           
   582                           ;main.c: 40: ConfigureOscillator();
   583                           
   584                           ;incstack = 0
   585  00047C  ECBC  F00B         	call	_ConfigureOscillator	;wreg free
   586                           
   587                           ;main.c: 43: InitApp();
   588  000480  EC84  F009         	call	_InitApp	;wreg free
   589                           
   590                           ;main.c: 48: aux1[0] = 1;
   591  000484  0E01               	movlw	1
   592  000486  0100               	movlb	0	; () banked
   593  000488  6FB1               	movwf	_aux1& (0+255),b
   594                           
   595                           ; BSR set to: 0
   596                           ;main.c: 49: aux1[1] = 2;
   597  00048A  0E02               	movlw	2
   598  00048C  0100               	movlb	0	; () banked
   599  00048E  6FB2               	movwf	(_aux1+1)& (0+255),b
   600                           
   601                           ; BSR set to: 0
   602                           ;main.c: 50: aux1[2] = 3;
   603  000490  0E03               	movlw	3
   604  000492  0100               	movlb	0	; () banked
   605  000494  6FB3               	movwf	(_aux1+2)& (0+255),b
   606                           
   607                           ; BSR set to: 0
   608                           ;main.c: 51: aux1[3] = 4;
   609  000496  0E04               	movlw	4
   610  000498  0100               	movlb	0	; () banked
   611  00049A  6FB4               	movwf	(_aux1+3)& (0+255),b
   612                           
   613                           ; BSR set to: 0
   614                           ;main.c: 52: aux1[4] = 5;
   615  00049C  0E05               	movlw	5
   616  00049E  0100               	movlb	0	; () banked
   617  0004A0  6FB5               	movwf	(_aux1+4)& (0+255),b
   618                           
   619                           ; BSR set to: 0
   620                           ;main.c: 53: aux1[5] = 6;
   621  0004A2  0E06               	movlw	6
   622  0004A4  0100               	movlb	0	; () banked
   623  0004A6  6FB6               	movwf	(_aux1+5)& (0+255),b
   624                           
   625                           ; BSR set to: 0
   626                           ;main.c: 55: char temp;
   627                           ;main.c: 56: char format = 1;
   628  0004A8  0E01               	movlw	1
   629  0004AA  0100               	movlb	0	; () banked
   630  0004AC  6FA7               	movwf	main@format& (0+255),b
   631                           
   632                           ; BSR set to: 0
   633                           ;main.c: 57: buzzer_disable();
   634  0004AE  EC96  F00B         	call	_buzzer_disable	;wreg free
   635  0004B2                     l4465:
   636                           
   637                           ;main.c: 59: {
   638                           ;main.c: 60: state = next;
   639  0004B2  C031  F0B8         	movff	_next,_state
   640  0004B6  C032  F0B9         	movff	_next+1,_state+1
   641                           
   642                           ;main.c: 62: switch(state){
   643  0004BA  D14D               	goto	l4637
   644  0004BC                     l4467:
   645                           
   646                           ;main.c: 65: if(human_code == 13)
   647  0004BC  0E0D               	movlw	13
   648  0004BE  1837               	xorwf	_human_code,w,c
   649  0004C0  A4D8               	btfss	status,2,c
   650  0004C2  D002               	goto	l4471
   651                           
   652                           ;main.c: 66: format = 1;
   653  0004C4  0E01               	movlw	1
   654  0004C6  D005               	goto	L1
   655  0004C8                     l4471:
   656                           
   657                           ;main.c: 67: else if (human_code == 14)
   658  0004C8  0E0E               	movlw	14
   659  0004CA  1837               	xorwf	_human_code,w,c
   660  0004CC  A4D8               	btfss	status,2,c
   661  0004CE  D003               	goto	l4475
   662                           
   663                           ;main.c: 68: format = 0;
   664  0004D0  0E00               	movlw	0
   665  0004D2                     L1:
   666  0004D2  0100               	movlb	0	; () banked
   667  0004D4  6FA7               	movwf	main@format& (0+255),b
   668  0004D6                     l4475:
   669                           
   670                           ;main.c: 69: get_time(aux1,format);
   671  0004D6  0EB1               	movlw	low _aux1
   672  0004D8  0100               	movlb	0	; () banked
   673  0004DA  6F9C               	movwf	get_time@data& (0+255),b
   674  0004DC  0E00               	movlw	high _aux1
   675  0004DE  0100               	movlb	0	; () banked
   676  0004E0  6F9D               	movwf	(get_time@data+1)& (0+255),b
   677  0004E2  C0A7  F09E         	movff	main@format,get_time@format
   678  0004E6  EC47  F006         	call	_get_time	;wreg free
   679                           
   680                           ;main.c: 76: break;
   681  0004EA  D7E3               	goto	l4465
   682  0004EC                     l4477:
   683                           
   684                           ;main.c: 80: if(ir_is_code_number(human_code) && human_code <=2)
   685  0004EC  5037               	movf	_human_code,w,c
   686  0004EE  EC3C  F00A         	call	_ir_is_code_number
   687  0004F2  0900               	iorlw	0
   688  0004F4  B4D8               	btfsc	status,2,c
   689  0004F6  D7DD               	goto	l4465
   690  0004F8  0E03               	movlw	3
   691  0004FA  6037               	cpfslt	_human_code,c
   692  0004FC  D7DA               	goto	l4465
   693                           
   694                           ;main.c: 81: {
   695                           ;main.c: 82: aux1[3] = human_code;
   696  0004FE  C037  F0B4         	movff	_human_code,_aux1+3
   697                           
   698                           ;main.c: 83: next = 2;
   699  000502  0E00               	movlw	0
   700  000504  6E32               	movwf	_next+1,c
   701  000506  0E02               	movlw	2
   702  000508  D0FB               	goto	L12
   703  00050A                     l4485:
   704                           
   705                           ;main.c: 84: human_code = -1;
   706  00050A  6837               	setf	_human_code,c
   707                           
   708                           ;main.c: 85: }
   709                           ;main.c: 86: break;
   710  00050C  D7D2               	goto	l4465
   711  00050E                     l4487:
   712                           
   713                           ;main.c: 89: if(ir_is_code_number(human_code) && ((aux1[2]<2 && human_code <=9) || human
      +                          _code <=3))
   714  00050E  5037               	movf	_human_code,w,c
   715  000510  EC3C  F00A         	call	_ir_is_code_number
   716  000514  0900               	iorlw	0
   717  000516  B4D8               	btfsc	status,2,c
   718  000518  D7CC               	goto	l4465
   719  00051A  0E02               	movlw	2
   720  00051C  0100               	movlb	0	; () banked
   721  00051E  61B3               	cpfslt	(_aux1+2)& (0+255),b
   722  000520  D003               	goto	l4493
   723                           
   724                           ; BSR set to: 0
   725  000522  0E09               	movlw	9
   726  000524  6437               	cpfsgt	_human_code,c
   727  000526  D003               	goto	l159
   728  000528                     l4493:
   729                           
   730                           ; BSR set to: 0
   731  000528  0E04               	movlw	4
   732  00052A  6037               	cpfslt	_human_code,c
   733  00052C  D7C2               	goto	l4465
   734  00052E                     l159:
   735                           
   736                           ; BSR set to: 0
   737                           ;main.c: 90: {
   738                           ;main.c: 91: aux1[2] = human_code;
   739  00052E  C037  F0B3         	movff	_human_code,_aux1+2
   740                           
   741                           ; BSR set to: 0
   742                           ;main.c: 92: next = 3;
   743  000532  0E00               	movlw	0
   744  000534  6E32               	movwf	_next+1,c
   745  000536  0E03               	movlw	3
   746  000538  D0E3               	goto	L12
   747  00053A                     l4499:
   748                           
   749                           ; BSR set to: 0
   750                           ;main.c: 98: if(ir_is_code_number(human_code) && human_code <=5)
   751  00053A  5037               	movf	_human_code,w,c
   752  00053C  EC3C  F00A         	call	_ir_is_code_number
   753  000540  0900               	iorlw	0
   754  000542  B4D8               	btfsc	status,2,c
   755  000544  D7B6               	goto	l4465
   756  000546  0E06               	movlw	6
   757  000548  6037               	cpfslt	_human_code,c
   758  00054A  D7B3               	goto	l4465
   759                           
   760                           ;main.c: 99: {
   761                           ;main.c: 100: aux1[1] = human_code;
   762  00054C  C037  F0B2         	movff	_human_code,_aux1+1
   763                           
   764                           ;main.c: 101: next = 4;
   765  000550  0E00               	movlw	0
   766  000552  6E32               	movwf	_next+1,c
   767  000554  0E04               	movlw	4
   768  000556  D0D4               	goto	L12
   769  000558                     l4509:
   770                           
   771                           ;main.c: 106: if(ir_is_code_number(human_code) && human_code <=9)
   772  000558  5037               	movf	_human_code,w,c
   773  00055A  EC3C  F00A         	call	_ir_is_code_number
   774  00055E  0900               	iorlw	0
   775  000560  B4D8               	btfsc	status,2,c
   776  000562  D7A7               	goto	l4465
   777  000564  0E0A               	movlw	10
   778  000566  6037               	cpfslt	_human_code,c
   779  000568  D7A4               	goto	l4465
   780                           
   781                           ;main.c: 107: {
   782                           ;main.c: 108: aux1[0] = human_code;
   783  00056A  C037  F0B1         	movff	_human_code,_aux1
   784                           
   785                           ;main.c: 109: next = 1;
   786  00056E  0E00               	movlw	0
   787  000570  6E32               	movwf	_next+1,c
   788  000572  0E01               	movlw	1
   789  000574  D0C5               	goto	L12
   790  000576                     l4519:
   791                           
   792                           ;main.c: 115: timer1_counter_10 = 10;
   793  000576  0E0A               	movlw	10
   794  000578  0100               	movlb	0	; () banked
   795  00057A  6FB7               	movwf	_timer1_counter_10& (0+255),b
   796                           
   797                           ; BSR set to: 0
   798                           ;main.c: 116: get_timer1_counter(aux1);
   799  00057C  0EB1               	movlw	low _aux1
   800  00057E  0100               	movlb	0	; () banked
   801  000580  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   802  000582  0E00               	movlw	high _aux1
   803  000584  0100               	movlb	0	; () banked
   804  000586  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   805  000588  EC05  F009         	call	_get_timer1_counter	;wreg free
   806                           
   807                           ;main.c: 118: break;
   808  00058C  D792               	goto	l4465
   809  00058E                     l4523:
   810                           
   811                           ;main.c: 120: get_timer1_counter(aux1);
   812  00058E  0EB1               	movlw	low _aux1
   813  000590  0100               	movlb	0	; () banked
   814  000592  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   815  000594  0E00               	movlw	high _aux1
   816  000596  0100               	movlb	0	; () banked
   817  000598  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   818  00059A  EC05  F009         	call	_get_timer1_counter	;wreg free
   819                           
   820                           ;main.c: 121: break;
   821  00059E  D789               	goto	l4465
   822  0005A0                     l4525:
   823                           
   824                           ;main.c: 123: get_timer1_counter(aux1);
   825  0005A0  0EB1               	movlw	low _aux1
   826  0005A2  0100               	movlb	0	; () banked
   827  0005A4  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   828  0005A6  0E00               	movlw	high _aux1
   829  0005A8  0100               	movlb	0	; () banked
   830  0005AA  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   831  0005AC  EC05  F009         	call	_get_timer1_counter	;wreg free
   832                           
   833                           ;main.c: 124: break;
   834  0005B0  D780               	goto	l4465
   835  0005B2                     l4527:
   836                           
   837                           ;main.c: 126: get_timer1_counter(aux1);
   838  0005B2  0EB1               	movlw	low _aux1
   839  0005B4  0100               	movlb	0	; () banked
   840  0005B6  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   841  0005B8  0E00               	movlw	high _aux1
   842  0005BA  0100               	movlb	0	; () banked
   843  0005BC  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   844  0005BE  EC05  F009         	call	_get_timer1_counter	;wreg free
   845                           
   846                           ;main.c: 127: break;
   847  0005C2  D777               	goto	l4465
   848  0005C4                     l4529:
   849                           
   850                           ;main.c: 131: if(ir_is_code_number(human_code) && human_code <=5)
   851  0005C4  5037               	movf	_human_code,w,c
   852  0005C6  EC3C  F00A         	call	_ir_is_code_number
   853  0005CA  0900               	iorlw	0
   854  0005CC  B4D8               	btfsc	status,2,c
   855  0005CE  D771               	goto	l4465
   856  0005D0  0E06               	movlw	6
   857  0005D2  6037               	cpfslt	_human_code,c
   858  0005D4  D76E               	goto	l4465
   859                           
   860                           ;main.c: 132: {
   861                           ;main.c: 133: aux1[3] = human_code;
   862  0005D6  C037  F0B4         	movff	_human_code,_aux1+3
   863                           
   864                           ;main.c: 134: next = 8;
   865  0005DA  0E00               	movlw	0
   866  0005DC  6E32               	movwf	_next+1,c
   867  0005DE  0E08               	movlw	8
   868  0005E0  D08F               	goto	L12
   869  0005E2                     l4539:
   870                           
   871                           ;main.c: 141: if(ir_is_code_number(human_code) && human_code <=5)
   872  0005E2  5037               	movf	_human_code,w,c
   873  0005E4  EC3C  F00A         	call	_ir_is_code_number
   874  0005E8  0900               	iorlw	0
   875  0005EA  B4D8               	btfsc	status,2,c
   876  0005EC  D762               	goto	l4465
   877  0005EE  0E06               	movlw	6
   878  0005F0  6037               	cpfslt	_human_code,c
   879  0005F2  D75F               	goto	l4465
   880                           
   881                           ;main.c: 142: {
   882                           ;main.c: 143: aux1[2] = human_code;
   883  0005F4  C037  F0B3         	movff	_human_code,_aux1+2
   884                           
   885                           ;main.c: 144: next = 9;
   886  0005F8  0E00               	movlw	0
   887  0005FA  6E32               	movwf	_next+1,c
   888  0005FC  0E09               	movlw	9
   889  0005FE  D080               	goto	L12
   890  000600                     l4549:
   891                           
   892                           ;main.c: 151: if(ir_is_code_number(human_code) && human_code <=5)
   893  000600  5037               	movf	_human_code,w,c
   894  000602  EC3C  F00A         	call	_ir_is_code_number
   895  000606  0900               	iorlw	0
   896  000608  B4D8               	btfsc	status,2,c
   897  00060A  D753               	goto	l4465
   898  00060C  0E06               	movlw	6
   899  00060E  6037               	cpfslt	_human_code,c
   900  000610  D750               	goto	l4465
   901                           
   902                           ;main.c: 152: {
   903                           ;main.c: 153: aux1[1] = human_code;
   904  000612  C037  F0B2         	movff	_human_code,_aux1+1
   905                           
   906                           ;main.c: 154: next = 10;
   907  000616  0E00               	movlw	0
   908  000618  6E32               	movwf	_next+1,c
   909  00061A  0E0A               	movlw	10
   910  00061C  D071               	goto	L12
   911  00061E                     l4559:
   912                           
   913                           ;main.c: 161: if(ir_is_code_number(human_code) && human_code <=5)
   914  00061E  5037               	movf	_human_code,w,c
   915  000620  EC3C  F00A         	call	_ir_is_code_number
   916  000624  0900               	iorlw	0
   917  000626  B4D8               	btfsc	status,2,c
   918  000628  D744               	goto	l4465
   919  00062A  0E06               	movlw	6
   920  00062C  6037               	cpfslt	_human_code,c
   921  00062E  D741               	goto	l4465
   922                           
   923                           ;main.c: 162: {
   924                           ;main.c: 163: aux1[0] = human_code;
   925  000630  C037  F0B1         	movff	_human_code,_aux1
   926                           
   927                           ;main.c: 164: next = 7;
   928  000634  0E00               	movlw	0
   929  000636  6E32               	movwf	_next+1,c
   930  000638  0E07               	movlw	7
   931  00063A  D062               	goto	L12
   932  00063C                     l4569:
   933                           
   934                           ;main.c: 169: timer1_counter_10 = 10;
   935  00063C  0E0A               	movlw	10
   936  00063E  0100               	movlb	0	; () banked
   937  000640  6FB7               	movwf	_timer1_counter_10& (0+255),b
   938                           
   939                           ; BSR set to: 0
   940                           ;main.c: 170: get_timer1_counter_down(aux1);
   941  000642  0EB1               	movlw	low _aux1
   942  000644  0100               	movlb	0	; () banked
   943  000646  6F9C               	movwf	get_timer1_counter_down@data& (0+255),b
   944  000648  0E00               	movlw	high _aux1
   945  00064A  0100               	movlb	0	; () banked
   946  00064C  6F9D               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
   947  00064E  ECBD  F008         	call	_get_timer1_counter_down	;wreg free
   948                           
   949                           ;main.c: 171: break;
   950  000652  D72F               	goto	l4465
   951  000654                     l4573:
   952                           
   953                           ;main.c: 173: get_timer1_counter_down(aux1);
   954  000654  0EB1               	movlw	low _aux1
   955  000656  0100               	movlb	0	; () banked
   956  000658  6F9C               	movwf	get_timer1_counter_down@data& (0+255),b
   957  00065A  0E00               	movlw	high _aux1
   958  00065C  0100               	movlb	0	; () banked
   959  00065E  6F9D               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
   960  000660  ECBD  F008         	call	_get_timer1_counter_down	;wreg free
   961                           
   962                           ;main.c: 174: break;
   963  000664  D726               	goto	l4465
   964  000666                     l4575:
   965                           
   966                           ;main.c: 176: get_timer1_counter_down(aux1);
   967  000666  0EB1               	movlw	low _aux1
   968  000668  0100               	movlb	0	; () banked
   969  00066A  6F9C               	movwf	get_timer1_counter_down@data& (0+255),b
   970  00066C  0E00               	movlw	high _aux1
   971  00066E  0100               	movlb	0	; () banked
   972  000670  6F9D               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
   973  000672  ECBD  F008         	call	_get_timer1_counter_down	;wreg free
   974                           
   975                           ;main.c: 177: break;
   976  000676  D71D               	goto	l4465
   977  000678                     l4577:
   978                           
   979                           ;main.c: 179: get_timer1_counter_down(aux1);
   980  000678  0EB1               	movlw	low _aux1
   981  00067A  0100               	movlb	0	; () banked
   982  00067C  6F9C               	movwf	get_timer1_counter_down@data& (0+255),b
   983  00067E  0E00               	movlw	high _aux1
   984  000680  0100               	movlb	0	; () banked
   985  000682  6F9D               	movwf	(get_timer1_counter_down@data+1)& (0+255),b
   986  000684  ECBD  F008         	call	_get_timer1_counter_down	;wreg free
   987                           
   988                           ;main.c: 180: break;
   989  000688  D714               	goto	l4465
   990  00068A                     l4579:
   991                           
   992                           ;main.c: 183: if(ir_is_code_number(human_code) && human_code <=5)
   993  00068A  5037               	movf	_human_code,w,c
   994  00068C  EC3C  F00A         	call	_ir_is_code_number
   995  000690  0900               	iorlw	0
   996  000692  B4D8               	btfsc	status,2,c
   997  000694  D70E               	goto	l4465
   998  000696  0E06               	movlw	6
   999  000698  6037               	cpfslt	_human_code,c
  1000  00069A  D70B               	goto	l4465
  1001                           
  1002                           ;main.c: 184: {
  1003                           ;main.c: 185: aux1[3] = human_code;
  1004  00069C  C037  F0B4         	movff	_human_code,_aux1+3
  1005                           
  1006                           ;main.c: 186: next = 15;
  1007  0006A0  0E00               	movlw	0
  1008  0006A2  6E32               	movwf	_next+1,c
  1009  0006A4  0E0F               	movlw	15
  1010  0006A6  D02C               	goto	L12
  1011  0006A8                     l4589:
  1012                           
  1013                           ;main.c: 192: if(ir_is_code_number(human_code) && human_code <=9)
  1014  0006A8  5037               	movf	_human_code,w,c
  1015  0006AA  EC3C  F00A         	call	_ir_is_code_number
  1016  0006AE  0900               	iorlw	0
  1017  0006B0  B4D8               	btfsc	status,2,c
  1018  0006B2  D6FF               	goto	l4465
  1019  0006B4  0E0A               	movlw	10
  1020  0006B6  6037               	cpfslt	_human_code,c
  1021  0006B8  D6FC               	goto	l4465
  1022                           
  1023                           ;main.c: 193: {
  1024                           ;main.c: 194: aux1[2] = human_code;
  1025  0006BA  C037  F0B3         	movff	_human_code,_aux1+2
  1026                           
  1027                           ;main.c: 195: next = 16;
  1028  0006BE  0E00               	movlw	0
  1029  0006C0  6E32               	movwf	_next+1,c
  1030  0006C2  0E10               	movlw	16
  1031  0006C4  D01D               	goto	L12
  1032  0006C6                     l4599:
  1033                           
  1034                           ;main.c: 201: if(ir_is_code_number(human_code) && human_code <=5)
  1035  0006C6  5037               	movf	_human_code,w,c
  1036  0006C8  EC3C  F00A         	call	_ir_is_code_number
  1037  0006CC  0900               	iorlw	0
  1038  0006CE  B4D8               	btfsc	status,2,c
  1039  0006D0  D6F0               	goto	l4465
  1040  0006D2  0E06               	movlw	6
  1041  0006D4  6037               	cpfslt	_human_code,c
  1042  0006D6  D6ED               	goto	l4465
  1043                           
  1044                           ;main.c: 202: {
  1045                           ;main.c: 203: aux1[1] = human_code;
  1046  0006D8  C037  F0B2         	movff	_human_code,_aux1+1
  1047                           
  1048                           ;main.c: 204: next = 17;
  1049  0006DC  0E00               	movlw	0
  1050  0006DE  6E32               	movwf	_next+1,c
  1051  0006E0  0E11               	movlw	17
  1052  0006E2  D00E               	goto	L12
  1053  0006E4                     l4609:
  1054                           
  1055                           ;main.c: 210: if(ir_is_code_number(human_code) && human_code <=9)
  1056  0006E4  5037               	movf	_human_code,w,c
  1057  0006E6  EC3C  F00A         	call	_ir_is_code_number
  1058  0006EA  0900               	iorlw	0
  1059  0006EC  B4D8               	btfsc	status,2,c
  1060  0006EE  D6E1               	goto	l4465
  1061  0006F0  0E0A               	movlw	10
  1062  0006F2  6037               	cpfslt	_human_code,c
  1063  0006F4  D6DE               	goto	l4465
  1064                           
  1065                           ;main.c: 211: {
  1066                           ;main.c: 212: aux1[0] = human_code;
  1067  0006F6  C037  F0B1         	movff	_human_code,_aux1
  1068                           
  1069                           ;main.c: 213: next = 14;
  1070  0006FA  0E00               	movlw	0
  1071  0006FC  6E32               	movwf	_next+1,c
  1072  0006FE  0E0E               	movlw	14
  1073  000700                     L12:
  1074  000700  6E31               	movwf	_next,c
  1075  000702  D703               	goto	l4485
  1076  000704                     l4619:
  1077                           
  1078                           ;main.c: 218: timer1_disable();
  1079  000704  ECAA  F00B         	call	_timer1_disable	;wreg free
  1080                           
  1081                           ;main.c: 219: timer1_counter_10 = 0;
  1082  000708  0E00               	movlw	0
  1083  00070A  0100               	movlb	0	; () banked
  1084  00070C  6FB7               	movwf	_timer1_counter_10& (0+255),b
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;main.c: 220: timer1_counter_min = 0;
  1088  00070E  0E00               	movlw	0
  1089  000710  6E36               	movwf	_timer1_counter_min,c
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 221: timer1_counter = 0;
  1093  000712  0E00               	movlw	0
  1094  000714  0100               	movlb	0	; () banked
  1095  000716  6FA9               	movwf	_timer1_counter& (0+255),b
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;main.c: 222: get_timer1_counter_speed(aux1);
  1099  000718  0EB1               	movlw	low _aux1
  1100  00071A  0100               	movlb	0	; () banked
  1101  00071C  6FA0               	movwf	get_timer1_counter_speed@data& (0+255),b
  1102  00071E  0E00               	movlw	high _aux1
  1103  000720  0100               	movlb	0	; () banked
  1104  000722  6FA1               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1105  000724  ECCD  F007         	call	_get_timer1_counter_speed	;wreg free
  1106                           
  1107                           ;main.c: 223: break;
  1108  000728  D6C4               	goto	l4465
  1109  00072A                     l4629:
  1110                           
  1111                           ;main.c: 225: timer1_enable();
  1112  00072A  ECA8  F00B         	call	_timer1_enable	;wreg free
  1113                           
  1114                           ;main.c: 226: get_timer1_counter_speed(aux1);
  1115  00072E  0EB1               	movlw	low _aux1
  1116  000730  0100               	movlb	0	; () banked
  1117  000732  6FA0               	movwf	get_timer1_counter_speed@data& (0+255),b
  1118  000734  0E00               	movlw	high _aux1
  1119  000736  0100               	movlb	0	; () banked
  1120  000738  6FA1               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1121  00073A  ECCD  F007         	call	_get_timer1_counter_speed	;wreg free
  1122                           
  1123                           ;main.c: 227: break;
  1124  00073E  D6B9               	goto	l4465
  1125  000740                     l4633:
  1126                           
  1127                           ;main.c: 229: timer1_disable();
  1128  000740  ECAA  F00B         	call	_timer1_disable	;wreg free
  1129                           
  1130                           ;main.c: 230: get_timer1_counter_speed(aux1);
  1131  000744  0EB1               	movlw	low _aux1
  1132  000746  0100               	movlb	0	; () banked
  1133  000748  6FA0               	movwf	get_timer1_counter_speed@data& (0+255),b
  1134  00074A  0E00               	movlw	high _aux1
  1135  00074C  0100               	movlb	0	; () banked
  1136  00074E  6FA1               	movwf	(get_timer1_counter_speed@data+1)& (0+255),b
  1137  000750  ECCD  F007         	call	_get_timer1_counter_speed	;wreg free
  1138                           
  1139                           ;main.c: 234: }
  1140                           
  1141                           ;main.c: 232: default: ;
  1142                           
  1143                           ;main.c: 231: break;
  1144  000754  D6AE               	goto	l4465
  1145  000756                     l4637:
  1146  000756  C0B8  F0A5         	movff	_state,??_main
  1147  00075A  C0B9  F0A6         	movff	_state+1,??_main+1
  1148                           
  1149                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1150                           ; Switch size 1, requested type "space"
  1151                           ; Number of cases is 1, Range of values is 0 to 0
  1152                           ; switch strategies available:
  1153                           ; Name         Instructions Cycles
  1154                           ; simple_byte            4     3 (average)
  1155                           ;	Chosen strategy is simple_byte
  1156  00075E  0100               	movlb	0	; () banked
  1157  000760  51A6               	movf	(??_main+1)& (0+255),w,b
  1158  000762  0A00               	xorlw	0	; case 0
  1159  000764  A4D8               	btfss	status,2,c
  1160  000766  D6A5               	goto	l4465
  1161                           
  1162                           ; BSR set to: 0
  1163                           ; Switch size 1, requested type "space"
  1164                           ; Number of cases is 24, Range of values is 0 to 23
  1165                           ; switch strategies available:
  1166                           ; Name         Instructions Cycles
  1167                           ; simple_byte           73    37 (average)
  1168                           ;	Chosen strategy is simple_byte
  1169  000768  0100               	movlb	0	; () banked
  1170  00076A  51A5               	movf	??_main& (0+255),w,b
  1171  00076C  0A00               	xorlw	0	; case 0
  1172  00076E  B4D8               	btfsc	status,2,c
  1173  000770  D6A5               	goto	l4467
  1174  000772  0A01               	xorlw	1	; case 1
  1175  000774  B4D8               	btfsc	status,2,c
  1176  000776  D6BA               	goto	l4477
  1177  000778  0A03               	xorlw	3	; case 2
  1178  00077A  B4D8               	btfsc	status,2,c
  1179  00077C  D6C8               	goto	l4487
  1180  00077E  0A01               	xorlw	1	; case 3
  1181  000780  B4D8               	btfsc	status,2,c
  1182  000782  D6DB               	goto	l4499
  1183  000784  0A07               	xorlw	7	; case 4
  1184  000786  B4D8               	btfsc	status,2,c
  1185  000788  D6E7               	goto	l4509
  1186  00078A  0A01               	xorlw	1	; case 5
  1187  00078C  B4D8               	btfsc	status,2,c
  1188  00078E  D6F3               	goto	l4519
  1189  000790  0A03               	xorlw	3	; case 6
  1190  000792  B4D8               	btfsc	status,2,c
  1191  000794  D753               	goto	l4569
  1192  000796  0A01               	xorlw	1	; case 7
  1193  000798  B4D8               	btfsc	status,2,c
  1194  00079A  D714               	goto	l4529
  1195  00079C  0A0F               	xorlw	15	; case 8
  1196  00079E  B4D8               	btfsc	status,2,c
  1197  0007A0  D720               	goto	l4539
  1198  0007A2  0A01               	xorlw	1	; case 9
  1199  0007A4  B4D8               	btfsc	status,2,c
  1200  0007A6  D72C               	goto	l4549
  1201  0007A8  0A03               	xorlw	3	; case 10
  1202  0007AA  B4D8               	btfsc	status,2,c
  1203  0007AC  D738               	goto	l4559
  1204  0007AE  0A01               	xorlw	1	; case 11
  1205  0007B0  B4D8               	btfsc	status,2,c
  1206  0007B2  D6ED               	goto	l4523
  1207  0007B4  0A07               	xorlw	7	; case 12
  1208  0007B6  B4D8               	btfsc	status,2,c
  1209  0007B8  D6F3               	goto	l4525
  1210  0007BA  0A01               	xorlw	1	; case 13
  1211  0007BC  B4D8               	btfsc	status,2,c
  1212  0007BE  D6F9               	goto	l4527
  1213  0007C0  0A03               	xorlw	3	; case 14
  1214  0007C2  B4D8               	btfsc	status,2,c
  1215  0007C4  D762               	goto	l4579
  1216  0007C6  0A01               	xorlw	1	; case 15
  1217  0007C8  B4D8               	btfsc	status,2,c
  1218  0007CA  D76E               	goto	l4589
  1219  0007CC  0A1F               	xorlw	31	; case 16
  1220  0007CE  B4D8               	btfsc	status,2,c
  1221  0007D0  D77A               	goto	l4599
  1222  0007D2  0A01               	xorlw	1	; case 17
  1223  0007D4  B4D8               	btfsc	status,2,c
  1224  0007D6  D786               	goto	l4609
  1225  0007D8  0A03               	xorlw	3	; case 18
  1226  0007DA  B4D8               	btfsc	status,2,c
  1227  0007DC  D73B               	goto	l4573
  1228  0007DE  0A01               	xorlw	1	; case 19
  1229  0007E0  B4D8               	btfsc	status,2,c
  1230  0007E2  D741               	goto	l4575
  1231  0007E4  0A07               	xorlw	7	; case 20
  1232  0007E6  B4D8               	btfsc	status,2,c
  1233  0007E8  D747               	goto	l4577
  1234  0007EA  0A01               	xorlw	1	; case 21
  1235  0007EC  B4D8               	btfsc	status,2,c
  1236  0007EE  D78A               	goto	l4619
  1237  0007F0  0A03               	xorlw	3	; case 22
  1238  0007F2  B4D8               	btfsc	status,2,c
  1239  0007F4  D79A               	goto	l4629
  1240  0007F6  0A01               	xorlw	1	; case 23
  1241  0007F8  B4D8               	btfsc	status,2,c
  1242  0007FA  D7A2               	goto	l4633
  1243                           
  1244                           ; BSR set to: 0
  1245                           
  1246                           ; BSR set to: 0
  1247  0007FC  D65A               	goto	l4465
  1248  0007FE                     __end_of_main:
  1249                           	opt stack 0
  1250                           tblptru	equ	0xFF8
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           status	equ	0xFD8
  1254                           
  1255 ;; *************** function _timer1_enable *****************
  1256 ;; Defined at:
  1257 ;;		line 628 in file "user.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;		None
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		status,2, status,0
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1271 ;;      Params:         0       0       0       0       0       0       0       0       0
  1272 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1274 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1275 ;;Total ram usage:        0 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:    6
  1278 ;; This function calls:
  1279 ;;		Nothing
  1280 ;; This function is called by:
  1281 ;;		_main
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text1
  1286  001750                     __ptext1:
  1287                           	opt stack 0
  1288  001750                     _timer1_enable:
  1289                           	opt stack 24
  1290                           
  1291                           ;user.c: 630: T1CON |= 1 << 0;
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;incstack = 0
  1295  001750  80CD               	bsf	4045,0,c	;volatile
  1296  001752  0012               	return		;funcret
  1297  001754                     __end_of_timer1_enable:
  1298                           	opt stack 0
  1299                           tblptru	equ	0xFF8
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           status	equ	0xFD8
  1303                           
  1304 ;; *************** function _timer1_disable *****************
  1305 ;; Defined at:
  1306 ;;		line 633 in file "user.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;		None
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;		None
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      void 
  1313 ;; Registers used:
  1314 ;;		status,2, status,0
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1320 ;;      Params:         0       0       0       0       0       0       0       0       0
  1321 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1322 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1323 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1324 ;;Total ram usage:        0 bytes
  1325 ;; Hardware stack levels used:    1
  1326 ;; Hardware stack levels required when called:    6
  1327 ;; This function calls:
  1328 ;;		Nothing
  1329 ;; This function is called by:
  1330 ;;		_main
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           	psect	text2
  1335  001754                     __ptext2:
  1336                           	opt stack 0
  1337  001754                     _timer1_disable:
  1338                           	opt stack 24
  1339                           
  1340                           ;user.c: 635: T1CON &= ~(1 << 0);
  1341                           
  1342                           ;incstack = 0
  1343  001754  90CD               	bcf	4045,0,c	;volatile
  1344  001756  0012               	return		;funcret
  1345  001758                     __end_of_timer1_disable:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           postinc0	equ	0xFEE
  1349                           wreg	equ	0xFE8
  1350                           status	equ	0xFD8
  1351                           
  1352 ;; *************** function _ir_is_code_number *****************
  1353 ;; Defined at:
  1354 ;;		line 497 in file "user.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;  human_code      1    wreg     unsigned char 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  human_code      1   37[COMRAM] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      unsigned char 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2, status,0
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1368 ;;      Params:         0       0       0       0       0       0       0       0       0
  1369 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1371 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1372 ;;Total ram usage:        1 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    6
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text3
  1383  001478                     __ptext3:
  1384                           	opt stack 0
  1385  001478                     _ir_is_code_number:
  1386                           	opt stack 24
  1387                           
  1388                           ;incstack = 0
  1389                           ;ir_is_code_number@human_code stored from wreg
  1390  001478  6E26               	movwf	ir_is_code_number@human_code,c
  1391                           
  1392                           ;user.c: 499: if(human_code == 0 || human_code == 1 || human_code == 2 || human_code == 
      +                          3 || human_code == 4
  1393                           ;user.c: 500: || human_code == 5 || human_code == 6 || human_code == 7 || human_code == 
      +                          8 || human_code == 9)
  1394  00147A  5026               	movf	ir_is_code_number@human_code,w,c
  1395  00147C  B4D8               	btfsc	status,2,c
  1396  00147E  D023               	goto	l4417
  1397  001480  0426               	decf	ir_is_code_number@human_code,w,c
  1398  001482  B4D8               	btfsc	status,2,c
  1399  001484  D020               	goto	l4417
  1400  001486  0E02               	movlw	2
  1401  001488  1826               	xorwf	ir_is_code_number@human_code,w,c
  1402  00148A  B4D8               	btfsc	status,2,c
  1403  00148C  D01C               	goto	l4417
  1404  00148E  0E03               	movlw	3
  1405  001490  1826               	xorwf	ir_is_code_number@human_code,w,c
  1406  001492  B4D8               	btfsc	status,2,c
  1407  001494  D018               	goto	l4417
  1408  001496  0E04               	movlw	4
  1409  001498  1826               	xorwf	ir_is_code_number@human_code,w,c
  1410  00149A  B4D8               	btfsc	status,2,c
  1411  00149C  D014               	goto	l4417
  1412  00149E  0E05               	movlw	5
  1413  0014A0  1826               	xorwf	ir_is_code_number@human_code,w,c
  1414  0014A2  B4D8               	btfsc	status,2,c
  1415  0014A4  D010               	goto	l4417
  1416  0014A6  0E06               	movlw	6
  1417  0014A8  1826               	xorwf	ir_is_code_number@human_code,w,c
  1418  0014AA  B4D8               	btfsc	status,2,c
  1419  0014AC  D00C               	goto	l4417
  1420  0014AE  0E07               	movlw	7
  1421  0014B0  1826               	xorwf	ir_is_code_number@human_code,w,c
  1422  0014B2  B4D8               	btfsc	status,2,c
  1423  0014B4  D008               	goto	l4417
  1424  0014B6  0E08               	movlw	8
  1425  0014B8  1826               	xorwf	ir_is_code_number@human_code,w,c
  1426  0014BA  B4D8               	btfsc	status,2,c
  1427  0014BC  D004               	goto	l4417
  1428  0014BE  0E09               	movlw	9
  1429  0014C0  1826               	xorwf	ir_is_code_number@human_code,w,c
  1430  0014C2  A4D8               	btfss	status,2,c
  1431  0014C4  D002               	goto	l4423
  1432  0014C6                     l4417:
  1433                           
  1434                           ;user.c: 501: return 1;
  1435  0014C6  0E01               	movlw	1
  1436  0014C8  0012               	return	
  1437  0014CA                     l4423:
  1438                           
  1439                           ;user.c: 502: else
  1440                           ;user.c: 503: return 0;
  1441  0014CA  0E00               	movlw	0
  1442  0014CC  0012               	return	
  1443  0014CE                     __end_of_ir_is_code_number:
  1444                           	opt stack 0
  1445                           tblptru	equ	0xFF8
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           status	equ	0xFD8
  1449                           
  1450 ;; *************** function _get_timer1_counter_speed *****************
  1451 ;; Defined at:
  1452 ;;		line 617 in file "user.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  data            2   64[BANK0 ] PTR unsigned char 
  1455 ;;		 -> aux1(6), 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1467 ;;      Params:         0       2       0       0       0       0       0       0       0
  1468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1469 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1470 ;;      Totals:         1       2       0       0       0       0       0       0       0
  1471 ;;Total ram usage:        3 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    8
  1474 ;; This function calls:
  1475 ;;		_get_cents_reg
  1476 ;;		_get_seconds_reg
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text4
  1483  000F9A                     __ptext4:
  1484                           	opt stack 0
  1485  000F9A                     _get_timer1_counter_speed:
  1486                           	opt stack 22
  1487                           
  1488                           ;user.c: 619: data[0] = get_cents_reg(timer1_counter) & 0x0f;
  1489                           
  1490                           ;incstack = 0
  1491  000F9A  0100               	movlb	0	; () banked
  1492  000F9C  51A9               	movf	_timer1_counter& (0+255),w,b
  1493  000F9E  ECBD  F00A         	call	_get_cents_reg
  1494  000FA2  0B0F               	andlw	15
  1495  000FA4  C0A0  FFD9         	movff	get_timer1_counter_speed@data,fsr2l
  1496  000FA8  C0A1  FFDA         	movff	get_timer1_counter_speed@data+1,fsr2h
  1497  000FAC  6EDF               	movwf	indf2,c
  1498                           
  1499                           ;user.c: 620: data[1] = (get_cents_reg(timer1_counter) & 0xf0)>>4;
  1500  000FAE  0100               	movlb	0	; () banked
  1501  000FB0  EE20 F001          	lfsr	2,1
  1502  000FB4  51A0               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1503  000FB6  26D9               	addwf	fsr2l,f,c
  1504  000FB8  51A1               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1505  000FBA  22DA               	addwfc	fsr2h,f,c
  1506  000FBC  0100               	movlb	0	; () banked
  1507  000FBE  51A9               	movf	_timer1_counter& (0+255),w,b
  1508  000FC0  ECBD  F00A         	call	_get_cents_reg
  1509  000FC4  6E2E               	movwf	??_get_timer1_counter_speed& (0+255),c
  1510  000FC6  382E               	swapf	??_get_timer1_counter_speed,w,c
  1511  000FC8  0B0F               	andlw	15
  1512  000FCA  0B0F               	andlw	15
  1513  000FCC  6EDF               	movwf	indf2,c
  1514                           
  1515                           ;user.c: 621: data[2] = get_seconds_reg(timer1_counter_10) & 0x0f;
  1516  000FCE  0100               	movlb	0	; () banked
  1517  000FD0  EE20 F002          	lfsr	2,2
  1518  000FD4  51A0               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1519  000FD6  26D9               	addwf	fsr2l,f,c
  1520  000FD8  51A1               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1521  000FDA  22DA               	addwfc	fsr2h,f,c
  1522  000FDC  0100               	movlb	0	; () banked
  1523  000FDE  51B7               	movf	_timer1_counter_10& (0+255),w,b
  1524  000FE0  EC67  F00A         	call	_get_seconds_reg
  1525  000FE4  0B0F               	andlw	15
  1526  000FE6  6EDF               	movwf	indf2,c
  1527                           
  1528                           ;user.c: 622: data[3] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  1529  000FE8  0100               	movlb	0	; () banked
  1530  000FEA  EE20 F003          	lfsr	2,3
  1531  000FEE  51A0               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1532  000FF0  26D9               	addwf	fsr2l,f,c
  1533  000FF2  51A1               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1534  000FF4  22DA               	addwfc	fsr2h,f,c
  1535  000FF6  0100               	movlb	0	; () banked
  1536  000FF8  51B7               	movf	_timer1_counter_10& (0+255),w,b
  1537  000FFA  EC67  F00A         	call	_get_seconds_reg
  1538  000FFE  6E2E               	movwf	??_get_timer1_counter_speed& (0+255),c
  1539  001000  382E               	swapf	??_get_timer1_counter_speed,w,c
  1540  001002  0B0F               	andlw	15
  1541  001004  0B0F               	andlw	15
  1542  001006  6EDF               	movwf	indf2,c
  1543                           
  1544                           ;user.c: 623: data[4] = get_seconds_reg(timer1_counter_min) & 0x0f;
  1545  001008  0100               	movlb	0	; () banked
  1546  00100A  EE20 F004          	lfsr	2,4
  1547  00100E  51A0               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1548  001010  26D9               	addwf	fsr2l,f,c
  1549  001012  51A1               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1550  001014  22DA               	addwfc	fsr2h,f,c
  1551  001016  5036               	movf	_timer1_counter_min,w,c
  1552  001018  EC67  F00A         	call	_get_seconds_reg
  1553  00101C  0B0F               	andlw	15
  1554  00101E  6EDF               	movwf	indf2,c
  1555                           
  1556                           ;user.c: 624: data[5] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  1557  001020  0100               	movlb	0	; () banked
  1558  001022  EE20 F005          	lfsr	2,5
  1559  001026  51A0               	movf	get_timer1_counter_speed@data& (0+255),w,b
  1560  001028  26D9               	addwf	fsr2l,f,c
  1561  00102A  51A1               	movf	(get_timer1_counter_speed@data+1)& (0+255),w,b
  1562  00102C  22DA               	addwfc	fsr2h,f,c
  1563  00102E  5036               	movf	_timer1_counter_min,w,c
  1564  001030  EC67  F00A         	call	_get_seconds_reg
  1565  001034  6E2E               	movwf	??_get_timer1_counter_speed& (0+255),c
  1566  001036  382E               	swapf	??_get_timer1_counter_speed,w,c
  1567  001038  0B0F               	andlw	15
  1568  00103A  0B0F               	andlw	15
  1569  00103C  6EDF               	movwf	indf2,c
  1570  00103E  0012               	return		;funcret
  1571  001040                     __end_of_get_timer1_counter_speed:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           indf2	equ	0xFDF
  1577                           fsr2h	equ	0xFDA
  1578                           fsr2l	equ	0xFD9
  1579                           status	equ	0xFD8
  1580                           
  1581 ;; *************** function _get_cents_reg *****************
  1582 ;; Defined at:
  1583 ;;		line 323 in file "user.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;  cents           1    wreg     unsigned char 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  cents           1   44[COMRAM] unsigned char 
  1588 ;;  res             1   43[COMRAM] unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      unsigned char 
  1591 ;; Registers used:
  1592 ;;		wreg, status,2, status,0, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1598 ;;      Params:         0       0       0       0       0       0       0       0       0
  1599 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1600 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1601 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1602 ;;Total ram usage:        4 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    7
  1605 ;; This function calls:
  1606 ;;		___awdiv
  1607 ;;		___awmod
  1608 ;; This function is called by:
  1609 ;;		_get_timer1_counter_speed
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text5
  1614  00157A                     __ptext5:
  1615                           	opt stack 0
  1616  00157A                     _get_cents_reg:
  1617                           	opt stack 22
  1618                           
  1619                           ;incstack = 0
  1620                           ;get_cents_reg@cents stored from wreg
  1621  00157A  6E2D               	movwf	get_cents_reg@cents,c
  1622                           
  1623                           ;user.c: 325: char res = 0;
  1624  00157C  0E00               	movlw	0
  1625  00157E  6E2C               	movwf	get_cents_reg@res,c
  1626                           
  1627                           ;user.c: 326: res = (cents/10)<<4 | (cents % 10);
  1628  001580  C02D  F09C         	movff	get_cents_reg@cents,___awmod@dividend
  1629  001584  0100               	movlb	0	; () banked
  1630  001586  6B9D               	clrf	(___awmod@dividend+1)& (0+255),b
  1631  001588  0E00               	movlw	0
  1632  00158A  0100               	movlb	0	; () banked
  1633  00158C  6F9F               	movwf	(___awmod@divisor+1)& (0+255),b
  1634  00158E  0E0A               	movlw	10
  1635  001590  6F9E               	movwf	___awmod@divisor& (0+255),b
  1636  001592  EC73  F008         	call	___awmod	;wreg free
  1637  001596  C09C  F02A         	movff	?___awmod,??_get_cents_reg
  1638  00159A  C09D  F02B         	movff	?___awmod+1,??_get_cents_reg+1
  1639  00159E  C02D  F09C         	movff	get_cents_reg@cents,___awdiv@dividend
  1640  0015A2  0100               	movlb	0	; () banked
  1641  0015A4  6B9D               	clrf	(___awdiv@dividend+1)& (0+255),b
  1642  0015A6  0E00               	movlw	0
  1643  0015A8  0100               	movlb	0	; () banked
  1644  0015AA  6F9F               	movwf	(___awdiv@divisor+1)& (0+255),b
  1645  0015AC  0E0A               	movlw	10
  1646  0015AE  6F9E               	movwf	___awdiv@divisor& (0+255),b
  1647  0015B0  EC20  F008         	call	___awdiv	;wreg free
  1648  0015B4  0100               	movlb	0	; () banked
  1649  0015B6  399C               	swapf	?___awdiv& (0+255),w,b
  1650  0015B8  0BF0               	andlw	240
  1651  0015BA  102A               	iorwf	??_get_cents_reg,w,c
  1652  0015BC  6E2C               	movwf	get_cents_reg@res,c
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;user.c: 327: return res;
  1656  0015BE  502C               	movf	get_cents_reg@res,w,c
  1657  0015C0  0012               	return	
  1658  0015C2                     __end_of_get_cents_reg:
  1659                           	opt stack 0
  1660                           tblptru	equ	0xFF8
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           indf2	equ	0xFDF
  1664                           fsr2h	equ	0xFDA
  1665                           fsr2l	equ	0xFD9
  1666                           status	equ	0xFD8
  1667                           
  1668 ;; *************** function ___awmod *****************
  1669 ;; Defined at:
  1670 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awmod.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  dividend        2   60[BANK0 ] int 
  1673 ;;  divisor         2   62[BANK0 ] int 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  sign            1   38[COMRAM] unsigned char 
  1676 ;;  counter         1   37[COMRAM] unsigned char 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  2   60[BANK0 ] int 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1686 ;;      Params:         0       4       0       0       0       0       0       0       0
  1687 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1689 ;;      Totals:         2       4       0       0       0       0       0       0       0
  1690 ;;Total ram usage:        6 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    6
  1693 ;; This function calls:
  1694 ;;		Nothing
  1695 ;; This function is called by:
  1696 ;;		_get_cents_reg
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text6
  1701  0010E6                     __ptext6:
  1702                           	opt stack 0
  1703  0010E6                     ___awmod:
  1704                           	opt stack 22
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;incstack = 0
  1708  0010E6  0E00               	movlw	0
  1709  0010E8  6E27               	movwf	___awmod@sign,c
  1710  0010EA  0100               	movlb	0	; () banked
  1711  0010EC  AF9D               	btfss	(___awmod@dividend+1)& (0+255),7,b
  1712  0010EE  D007               	goto	l4221
  1713                           
  1714                           ; BSR set to: 0
  1715  0010F0  0100               	movlb	0	; () banked
  1716  0010F2  6D9C               	negf	___awmod@dividend& (0+255),b
  1717  0010F4  1F9D               	comf	(___awmod@dividend+1)& (0+255),f,b
  1718  0010F6  B0D8               	btfsc	status,0,c
  1719  0010F8  2B9D               	incf	(___awmod@dividend+1)& (0+255),f,b
  1720                           
  1721                           ; BSR set to: 0
  1722  0010FA  0E01               	movlw	1
  1723  0010FC  6E27               	movwf	___awmod@sign,c
  1724  0010FE                     l4221:
  1725                           
  1726                           ; BSR set to: 0
  1727  0010FE  0100               	movlb	0	; () banked
  1728  001100  AF9F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1729  001102  D005               	goto	l4225
  1730                           
  1731                           ; BSR set to: 0
  1732  001104  0100               	movlb	0	; () banked
  1733  001106  6D9E               	negf	___awmod@divisor& (0+255),b
  1734  001108  1F9F               	comf	(___awmod@divisor+1)& (0+255),f,b
  1735  00110A  B0D8               	btfsc	status,0,c
  1736  00110C  2B9F               	incf	(___awmod@divisor+1)& (0+255),f,b
  1737  00110E                     l4225:
  1738                           
  1739                           ; BSR set to: 0
  1740  00110E  0100               	movlb	0	; () banked
  1741  001110  519E               	movf	___awmod@divisor& (0+255),w,b
  1742  001112  0100               	movlb	0	; () banked
  1743  001114  119F               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  1744  001116  B4D8               	btfsc	status,2,c
  1745  001118  D023               	goto	l4241
  1746                           
  1747                           ; BSR set to: 0
  1748  00111A  0E01               	movlw	1
  1749  00111C  6E26               	movwf	___awmod@counter,c
  1750  00111E  D005               	goto	l4231
  1751  001120                     l4229:
  1752                           
  1753                           ; BSR set to: 0
  1754  001120  0100               	movlb	0	; () banked
  1755  001122  90D8               	bcf	status,0,c
  1756  001124  379E               	rlcf	___awmod@divisor& (0+255),f,b
  1757  001126  379F               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1758  001128  2A26               	incf	___awmod@counter,f,c
  1759  00112A                     l4231:
  1760                           
  1761                           ; BSR set to: 0
  1762  00112A  0100               	movlb	0	; () banked
  1763  00112C  AF9F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1764  00112E  D7F8               	goto	l4229
  1765  001130                     l4233:
  1766                           
  1767                           ; BSR set to: 0
  1768  001130  0100               	movlb	0	; () banked
  1769  001132  519E               	movf	___awmod@divisor& (0+255),w,b
  1770  001134  0100               	movlb	0	; () banked
  1771  001136  5D9C               	subwf	___awmod@dividend& (0+255),w,b
  1772  001138  0100               	movlb	0	; () banked
  1773  00113A  519F               	movf	(___awmod@divisor+1)& (0+255),w,b
  1774  00113C  0100               	movlb	0	; () banked
  1775  00113E  599D               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  1776  001140  A0D8               	btfss	status,0,c
  1777  001142  D008               	goto	l4237
  1778                           
  1779                           ; BSR set to: 0
  1780  001144  0100               	movlb	0	; () banked
  1781  001146  519E               	movf	___awmod@divisor& (0+255),w,b
  1782  001148  0100               	movlb	0	; () banked
  1783  00114A  5F9C               	subwf	___awmod@dividend& (0+255),f,b
  1784  00114C  0100               	movlb	0	; () banked
  1785  00114E  519F               	movf	(___awmod@divisor+1)& (0+255),w,b
  1786  001150  0100               	movlb	0	; () banked
  1787  001152  5B9D               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  1788  001154                     l4237:
  1789                           
  1790                           ; BSR set to: 0
  1791  001154  0100               	movlb	0	; () banked
  1792  001156  90D8               	bcf	status,0,c
  1793  001158  339F               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  1794  00115A  339E               	rrcf	___awmod@divisor& (0+255),f,b
  1795                           
  1796                           ; BSR set to: 0
  1797  00115C  2E26               	decfsz	___awmod@counter,f,c
  1798  00115E  D7E8               	goto	l4233
  1799  001160                     l4241:
  1800                           
  1801                           ; BSR set to: 0
  1802  001160  5027               	movf	___awmod@sign,w,c
  1803  001162  B4D8               	btfsc	status,2,c
  1804  001164  D005               	goto	l4245
  1805                           
  1806                           ; BSR set to: 0
  1807  001166  0100               	movlb	0	; () banked
  1808  001168  6D9C               	negf	___awmod@dividend& (0+255),b
  1809  00116A  1F9D               	comf	(___awmod@dividend+1)& (0+255),f,b
  1810  00116C  B0D8               	btfsc	status,0,c
  1811  00116E  2B9D               	incf	(___awmod@dividend+1)& (0+255),f,b
  1812  001170                     l4245:
  1813                           
  1814                           ; BSR set to: 0
  1815  001170  C09C  F09C         	movff	___awmod@dividend,?___awmod
  1816  001174  C09D  F09D         	movff	___awmod@dividend+1,?___awmod+1
  1817  001178  0012               	return	
  1818  00117A                     __end_of___awmod:
  1819                           	opt stack 0
  1820                           tblptru	equ	0xFF8
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           indf2	equ	0xFDF
  1824                           fsr2h	equ	0xFDA
  1825                           fsr2l	equ	0xFD9
  1826                           status	equ	0xFD8
  1827                           
  1828 ;; *************** function ___awdiv *****************
  1829 ;; Defined at:
  1830 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/awdiv.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  dividend        2   60[BANK0 ] int 
  1833 ;;  divisor         2   62[BANK0 ] int 
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;  quotient        2   39[COMRAM] int 
  1836 ;;  sign            1   38[COMRAM] unsigned char 
  1837 ;;  counter         1   37[COMRAM] unsigned char 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  2   60[BANK0 ] int 
  1840 ;; Registers used:
  1841 ;;		wreg, status,2, status,0
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1847 ;;      Params:         0       4       0       0       0       0       0       0       0
  1848 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1850 ;;      Totals:         4       4       0       0       0       0       0       0       0
  1851 ;;Total ram usage:        8 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    6
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_get_cents_reg
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text7
  1862  001040                     __ptext7:
  1863                           	opt stack 0
  1864  001040                     ___awdiv:
  1865                           	opt stack 22
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;incstack = 0
  1869  001040  0E00               	movlw	0
  1870  001042  6E27               	movwf	___awdiv@sign,c
  1871  001044  0100               	movlb	0	; () banked
  1872  001046  AF9F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1873  001048  D007               	goto	l4177
  1874                           
  1875                           ; BSR set to: 0
  1876  00104A  0100               	movlb	0	; () banked
  1877  00104C  6D9E               	negf	___awdiv@divisor& (0+255),b
  1878  00104E  1F9F               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1879  001050  B0D8               	btfsc	status,0,c
  1880  001052  2B9F               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1881                           
  1882                           ; BSR set to: 0
  1883  001054  0E01               	movlw	1
  1884  001056  6E27               	movwf	___awdiv@sign,c
  1885  001058                     l4177:
  1886                           
  1887                           ; BSR set to: 0
  1888  001058  0100               	movlb	0	; () banked
  1889  00105A  AF9D               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1890  00105C  D007               	goto	l4183
  1891                           
  1892                           ; BSR set to: 0
  1893  00105E  0100               	movlb	0	; () banked
  1894  001060  6D9C               	negf	___awdiv@dividend& (0+255),b
  1895  001062  1F9D               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1896  001064  B0D8               	btfsc	status,0,c
  1897  001066  2B9D               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1898                           
  1899                           ; BSR set to: 0
  1900  001068  0E01               	movlw	1
  1901  00106A  1A27               	xorwf	___awdiv@sign,f,c
  1902  00106C                     l4183:
  1903                           
  1904                           ; BSR set to: 0
  1905  00106C  0E00               	movlw	0
  1906  00106E  6E29               	movwf	___awdiv@quotient+1,c
  1907  001070  0E00               	movlw	0
  1908  001072  6E28               	movwf	___awdiv@quotient,c
  1909                           
  1910                           ; BSR set to: 0
  1911  001074  0100               	movlb	0	; () banked
  1912  001076  519E               	movf	___awdiv@divisor& (0+255),w,b
  1913  001078  0100               	movlb	0	; () banked
  1914  00107A  119F               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1915  00107C  B4D8               	btfsc	status,2,c
  1916  00107E  D027               	goto	l4205
  1917                           
  1918                           ; BSR set to: 0
  1919  001080  0E01               	movlw	1
  1920  001082  6E26               	movwf	___awdiv@counter,c
  1921  001084  D005               	goto	l4191
  1922  001086                     l4189:
  1923                           
  1924                           ; BSR set to: 0
  1925  001086  0100               	movlb	0	; () banked
  1926  001088  90D8               	bcf	status,0,c
  1927  00108A  379E               	rlcf	___awdiv@divisor& (0+255),f,b
  1928  00108C  379F               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1929  00108E  2A26               	incf	___awdiv@counter,f,c
  1930  001090                     l4191:
  1931                           
  1932                           ; BSR set to: 0
  1933  001090  0100               	movlb	0	; () banked
  1934  001092  AF9F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1935  001094  D7F8               	goto	l4189
  1936  001096                     l4193:
  1937                           
  1938                           ; BSR set to: 0
  1939  001096  90D8               	bcf	status,0,c
  1940  001098  3628               	rlcf	___awdiv@quotient,f,c
  1941  00109A  3629               	rlcf	___awdiv@quotient+1,f,c
  1942                           
  1943                           ; BSR set to: 0
  1944  00109C  0100               	movlb	0	; () banked
  1945  00109E  519E               	movf	___awdiv@divisor& (0+255),w,b
  1946  0010A0  0100               	movlb	0	; () banked
  1947  0010A2  5D9C               	subwf	___awdiv@dividend& (0+255),w,b
  1948  0010A4  0100               	movlb	0	; () banked
  1949  0010A6  519F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1950  0010A8  0100               	movlb	0	; () banked
  1951  0010AA  599D               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1952  0010AC  A0D8               	btfss	status,0,c
  1953  0010AE  D009               	goto	l4201
  1954                           
  1955                           ; BSR set to: 0
  1956  0010B0  0100               	movlb	0	; () banked
  1957  0010B2  519E               	movf	___awdiv@divisor& (0+255),w,b
  1958  0010B4  0100               	movlb	0	; () banked
  1959  0010B6  5F9C               	subwf	___awdiv@dividend& (0+255),f,b
  1960  0010B8  0100               	movlb	0	; () banked
  1961  0010BA  519F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1962  0010BC  0100               	movlb	0	; () banked
  1963  0010BE  5B9D               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1964                           
  1965                           ; BSR set to: 0
  1966  0010C0  8028               	bsf	___awdiv@quotient,0,c
  1967  0010C2                     l4201:
  1968                           
  1969                           ; BSR set to: 0
  1970  0010C2  0100               	movlb	0	; () banked
  1971  0010C4  90D8               	bcf	status,0,c
  1972  0010C6  339F               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1973  0010C8  339E               	rrcf	___awdiv@divisor& (0+255),f,b
  1974                           
  1975                           ; BSR set to: 0
  1976  0010CA  2E26               	decfsz	___awdiv@counter,f,c
  1977  0010CC  D7E4               	goto	l4193
  1978  0010CE                     l4205:
  1979                           
  1980                           ; BSR set to: 0
  1981  0010CE  5027               	movf	___awdiv@sign,w,c
  1982  0010D0  B4D8               	btfsc	status,2,c
  1983  0010D2  D004               	goto	l4209
  1984                           
  1985                           ; BSR set to: 0
  1986  0010D4  6C28               	negf	___awdiv@quotient,c
  1987  0010D6  1E29               	comf	___awdiv@quotient+1,f,c
  1988  0010D8  B0D8               	btfsc	status,0,c
  1989  0010DA  2A29               	incf	___awdiv@quotient+1,f,c
  1990  0010DC                     l4209:
  1991                           
  1992                           ; BSR set to: 0
  1993  0010DC  C028  F09C         	movff	___awdiv@quotient,?___awdiv
  1994  0010E0  C029  F09D         	movff	___awdiv@quotient+1,?___awdiv+1
  1995  0010E4  0012               	return	
  1996  0010E6                     __end_of___awdiv:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           indf2	equ	0xFDF
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function _get_timer1_counter_down *****************
  2007 ;; Defined at:
  2008 ;;		line 607 in file "user.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  data            2   60[BANK0 ] PTR unsigned char 
  2011 ;;		 -> aux1(6), 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2023 ;;      Params:         0       2       0       0       0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2025 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2026 ;;      Totals:         1       2       0       0       0       0       0       0       0
  2027 ;;Total ram usage:        3 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    7
  2030 ;; This function calls:
  2031 ;;		_get_seconds_reg
  2032 ;; This function is called by:
  2033 ;;		_main
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text8
  2038  00117A                     __ptext8:
  2039                           	opt stack 0
  2040  00117A                     _get_timer1_counter_down:
  2041                           	opt stack 23
  2042                           
  2043                           ;user.c: 609: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;incstack = 0
  2047  00117A  0100               	movlb	0	; () banked
  2048  00117C  51B7               	movf	_timer1_counter_10& (0+255),w,b
  2049  00117E  EC67  F00A         	call	_get_seconds_reg
  2050  001182  0B0F               	andlw	15
  2051  001184  C09C  FFD9         	movff	get_timer1_counter_down@data,fsr2l
  2052  001188  C09D  FFDA         	movff	get_timer1_counter_down@data+1,fsr2h
  2053  00118C  6EDF               	movwf	indf2,c
  2054                           
  2055                           ;user.c: 610: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  2056  00118E  0100               	movlb	0	; () banked
  2057  001190  EE20 F001          	lfsr	2,1
  2058  001194  519C               	movf	get_timer1_counter_down@data& (0+255),w,b
  2059  001196  26D9               	addwf	fsr2l,f,c
  2060  001198  519D               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2061  00119A  22DA               	addwfc	fsr2h,f,c
  2062  00119C  0100               	movlb	0	; () banked
  2063  00119E  51B7               	movf	_timer1_counter_10& (0+255),w,b
  2064  0011A0  EC67  F00A         	call	_get_seconds_reg
  2065  0011A4  6E28               	movwf	??_get_timer1_counter_down& (0+255),c
  2066  0011A6  3828               	swapf	??_get_timer1_counter_down,w,c
  2067  0011A8  0B0F               	andlw	15
  2068  0011AA  0B0F               	andlw	15
  2069  0011AC  6EDF               	movwf	indf2,c
  2070                           
  2071                           ;user.c: 611: data[2] = get_seconds_reg(timer1_counter_min) & 0x0f;
  2072  0011AE  0100               	movlb	0	; () banked
  2073  0011B0  EE20 F002          	lfsr	2,2
  2074  0011B4  519C               	movf	get_timer1_counter_down@data& (0+255),w,b
  2075  0011B6  26D9               	addwf	fsr2l,f,c
  2076  0011B8  519D               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2077  0011BA  22DA               	addwfc	fsr2h,f,c
  2078  0011BC  5036               	movf	_timer1_counter_min,w,c
  2079  0011BE  EC67  F00A         	call	_get_seconds_reg
  2080  0011C2  0B0F               	andlw	15
  2081  0011C4  6EDF               	movwf	indf2,c
  2082                           
  2083                           ;user.c: 612: data[3] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  2084  0011C6  0100               	movlb	0	; () banked
  2085  0011C8  EE20 F003          	lfsr	2,3
  2086  0011CC  519C               	movf	get_timer1_counter_down@data& (0+255),w,b
  2087  0011CE  26D9               	addwf	fsr2l,f,c
  2088  0011D0  519D               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2089  0011D2  22DA               	addwfc	fsr2h,f,c
  2090  0011D4  5036               	movf	_timer1_counter_min,w,c
  2091  0011D6  EC67  F00A         	call	_get_seconds_reg
  2092  0011DA  6E28               	movwf	??_get_timer1_counter_down& (0+255),c
  2093  0011DC  3828               	swapf	??_get_timer1_counter_down,w,c
  2094  0011DE  0B0F               	andlw	15
  2095  0011E0  0B0F               	andlw	15
  2096  0011E2  6EDF               	movwf	indf2,c
  2097                           
  2098                           ;user.c: 613: data[4] = 'N';
  2099  0011E4  0100               	movlb	0	; () banked
  2100  0011E6  EE20 F004          	lfsr	2,4
  2101  0011EA  519C               	movf	get_timer1_counter_down@data& (0+255),w,b
  2102  0011EC  26D9               	addwf	fsr2l,f,c
  2103  0011EE  519D               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2104  0011F0  22DA               	addwfc	fsr2h,f,c
  2105  0011F2  0E4E               	movlw	78
  2106  0011F4  6EDF               	movwf	indf2,c
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;user.c: 614: data[5] = 'D';
  2110  0011F6  0100               	movlb	0	; () banked
  2111  0011F8  EE20 F005          	lfsr	2,5
  2112  0011FC  519C               	movf	get_timer1_counter_down@data& (0+255),w,b
  2113  0011FE  26D9               	addwf	fsr2l,f,c
  2114  001200  519D               	movf	(get_timer1_counter_down@data+1)& (0+255),w,b
  2115  001202  22DA               	addwfc	fsr2h,f,c
  2116  001204  0E44               	movlw	68
  2117  001206  6EDF               	movwf	indf2,c
  2118                           
  2119                           ; BSR set to: 0
  2120  001208  0012               	return		;funcret
  2121  00120A                     __end_of_get_timer1_counter_down:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf2	equ	0xFDF
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _get_timer1_counter *****************
  2132 ;; Defined at:
  2133 ;;		line 596 in file "user.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  data            2   60[BANK0 ] PTR unsigned char 
  2136 ;;		 -> aux1(6), 
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2148 ;;      Params:         0       2       0       0       0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2150 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2151 ;;      Totals:         1       2       0       0       0       0       0       0       0
  2152 ;;Total ram usage:        3 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    7
  2155 ;; This function calls:
  2156 ;;		_get_seconds_reg
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text9
  2163  00120A                     __ptext9:
  2164                           	opt stack 0
  2165  00120A                     _get_timer1_counter:
  2166                           	opt stack 23
  2167                           
  2168                           ;user.c: 598: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;incstack = 0
  2172  00120A  0100               	movlb	0	; () banked
  2173  00120C  51B7               	movf	_timer1_counter_10& (0+255),w,b
  2174  00120E  EC67  F00A         	call	_get_seconds_reg
  2175  001212  0B0F               	andlw	15
  2176  001214  C09C  FFD9         	movff	get_timer1_counter@data,fsr2l
  2177  001218  C09D  FFDA         	movff	get_timer1_counter@data+1,fsr2h
  2178  00121C  6EDF               	movwf	indf2,c
  2179                           
  2180                           ;user.c: 599: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
  2181  00121E  0100               	movlb	0	; () banked
  2182  001220  EE20 F001          	lfsr	2,1
  2183  001224  519C               	movf	get_timer1_counter@data& (0+255),w,b
  2184  001226  26D9               	addwf	fsr2l,f,c
  2185  001228  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2186  00122A  22DA               	addwfc	fsr2h,f,c
  2187  00122C  0100               	movlb	0	; () banked
  2188  00122E  51B7               	movf	_timer1_counter_10& (0+255),w,b
  2189  001230  EC67  F00A         	call	_get_seconds_reg
  2190  001234  6E28               	movwf	??_get_timer1_counter& (0+255),c
  2191  001236  3828               	swapf	??_get_timer1_counter,w,c
  2192  001238  0B0F               	andlw	15
  2193  00123A  0B0F               	andlw	15
  2194  00123C  6EDF               	movwf	indf2,c
  2195                           
  2196                           ;user.c: 600: data[2] = get_seconds_reg(timer1_counter_min) & 0x0f;
  2197  00123E  0100               	movlb	0	; () banked
  2198  001240  EE20 F002          	lfsr	2,2
  2199  001244  519C               	movf	get_timer1_counter@data& (0+255),w,b
  2200  001246  26D9               	addwf	fsr2l,f,c
  2201  001248  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2202  00124A  22DA               	addwfc	fsr2h,f,c
  2203  00124C  5036               	movf	_timer1_counter_min,w,c
  2204  00124E  EC67  F00A         	call	_get_seconds_reg
  2205  001252  0B0F               	andlw	15
  2206  001254  6EDF               	movwf	indf2,c
  2207                           
  2208                           ;user.c: 601: data[3] = (get_seconds_reg(timer1_counter_min) & 0xf0)>>4;
  2209  001256  0100               	movlb	0	; () banked
  2210  001258  EE20 F003          	lfsr	2,3
  2211  00125C  519C               	movf	get_timer1_counter@data& (0+255),w,b
  2212  00125E  26D9               	addwf	fsr2l,f,c
  2213  001260  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2214  001262  22DA               	addwfc	fsr2h,f,c
  2215  001264  5036               	movf	_timer1_counter_min,w,c
  2216  001266  EC67  F00A         	call	_get_seconds_reg
  2217  00126A  6E28               	movwf	??_get_timer1_counter& (0+255),c
  2218  00126C  3828               	swapf	??_get_timer1_counter,w,c
  2219  00126E  0B0F               	andlw	15
  2220  001270  0B0F               	andlw	15
  2221  001272  6EDF               	movwf	indf2,c
  2222                           
  2223                           ;user.c: 602: data[4] = 'P';
  2224  001274  0100               	movlb	0	; () banked
  2225  001276  EE20 F004          	lfsr	2,4
  2226  00127A  519C               	movf	get_timer1_counter@data& (0+255),w,b
  2227  00127C  26D9               	addwf	fsr2l,f,c
  2228  00127E  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2229  001280  22DA               	addwfc	fsr2h,f,c
  2230  001282  0E50               	movlw	80
  2231  001284  6EDF               	movwf	indf2,c
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;user.c: 603: data[5] = 'U';
  2235  001286  0100               	movlb	0	; () banked
  2236  001288  EE20 F005          	lfsr	2,5
  2237  00128C  519C               	movf	get_timer1_counter@data& (0+255),w,b
  2238  00128E  26D9               	addwf	fsr2l,f,c
  2239  001290  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  2240  001292  22DA               	addwfc	fsr2h,f,c
  2241  001294  0E55               	movlw	85
  2242  001296  6EDF               	movwf	indf2,c
  2243                           
  2244                           ; BSR set to: 0
  2245  001298  0012               	return		;funcret
  2246  00129A                     __end_of_get_timer1_counter:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           indf2	equ	0xFDF
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _get_seconds_reg *****************
  2257 ;; Defined at:
  2258 ;;		line 292 in file "user.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  seconds         1    wreg     unsigned char 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  seconds         1   38[COMRAM] unsigned char 
  2263 ;;  res             1   37[COMRAM] unsigned char 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      unsigned char 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2, status,0
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2273 ;;      Params:         0       0       0       0       0       0       0       0       0
  2274 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2276 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2277 ;;Total ram usage:        2 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    6
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_get_timer1_counter
  2284 ;;		_get_timer1_counter_down
  2285 ;;		_get_timer1_counter_speed
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text10
  2290  0014CE                     __ptext10:
  2291                           	opt stack 0
  2292  0014CE                     _get_seconds_reg:
  2293                           	opt stack 23
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;incstack = 0
  2297                           ;get_seconds_reg@seconds stored from wreg
  2298  0014CE  6E27               	movwf	get_seconds_reg@seconds,c
  2299                           
  2300                           ;user.c: 294: char res = 0;
  2301  0014D0  0E00               	movlw	0
  2302  0014D2  6E26               	movwf	get_seconds_reg@res,c
  2303                           
  2304                           ;user.c: 295: if(seconds<10)
  2305  0014D4  0E0A               	movlw	10
  2306  0014D6  6027               	cpfslt	get_seconds_reg@seconds,c
  2307  0014D8  D003               	goto	l4287
  2308                           
  2309                           ;user.c: 296: {
  2310                           ;user.c: 297: res = seconds;
  2311  0014DA  C027  F026         	movff	get_seconds_reg@seconds,get_seconds_reg@res
  2312                           
  2313                           ;user.c: 298: }
  2314  0014DE  D020               	goto	l4305
  2315  0014E0                     l4287:
  2316                           
  2317                           ;user.c: 299: else if(seconds <20)
  2318  0014E0  0E14               	movlw	20
  2319  0014E2  6027               	cpfslt	get_seconds_reg@seconds,c
  2320  0014E4  D004               	goto	l4291
  2321                           
  2322                           ;user.c: 300: {
  2323                           ;user.c: 301: res = 1<<4 | (seconds - 10);
  2324  0014E6  5027               	movf	get_seconds_reg@seconds,w,c
  2325  0014E8  0FF6               	addlw	246
  2326  0014EA  0910               	iorlw	16
  2327  0014EC  D018               	goto	L16
  2328  0014EE                     l4291:
  2329                           
  2330                           ;user.c: 303: else if(seconds <30)
  2331  0014EE  0E1E               	movlw	30
  2332  0014F0  6027               	cpfslt	get_seconds_reg@seconds,c
  2333  0014F2  D004               	goto	l4295
  2334                           
  2335                           ;user.c: 304: {
  2336                           ;user.c: 305: res = 2<<4 | (seconds -20);
  2337  0014F4  5027               	movf	get_seconds_reg@seconds,w,c
  2338  0014F6  0FEC               	addlw	236
  2339  0014F8  0920               	iorlw	32
  2340  0014FA  D011               	goto	L16
  2341  0014FC                     l4295:
  2342                           
  2343                           ;user.c: 307: else if(seconds <40)
  2344  0014FC  0E28               	movlw	40
  2345  0014FE  6027               	cpfslt	get_seconds_reg@seconds,c
  2346  001500  D004               	goto	l4299
  2347                           
  2348                           ;user.c: 308: {
  2349                           ;user.c: 309: res = 3<<4 | (seconds - 30);
  2350  001502  5027               	movf	get_seconds_reg@seconds,w,c
  2351  001504  0FE2               	addlw	226
  2352  001506  0930               	iorlw	48
  2353  001508  D00A               	goto	L16
  2354  00150A                     l4299:
  2355                           
  2356                           ;user.c: 311: else if(seconds <50)
  2357  00150A  0E32               	movlw	50
  2358  00150C  6027               	cpfslt	get_seconds_reg@seconds,c
  2359  00150E  D004               	goto	l4303
  2360                           
  2361                           ;user.c: 312: {
  2362                           ;user.c: 313: res = 4<<4 | (seconds - 40);
  2363  001510  5027               	movf	get_seconds_reg@seconds,w,c
  2364  001512  0FD8               	addlw	216
  2365  001514  0940               	iorlw	64
  2366  001516  D003               	goto	L16
  2367  001518                     l4303:
  2368                           
  2369                           ;user.c: 315: else
  2370                           ;user.c: 316: {
  2371                           ;user.c: 317: res = 5<<4 | (seconds -50);
  2372  001518  5027               	movf	get_seconds_reg@seconds,w,c
  2373  00151A  0FCE               	addlw	206
  2374  00151C  0950               	iorlw	80
  2375  00151E                     L16:
  2376  00151E  6E26               	movwf	get_seconds_reg@res,c
  2377  001520                     l4305:
  2378                           
  2379                           ;user.c: 318: }
  2380                           ;user.c: 320: return res;
  2381  001520  5026               	movf	get_seconds_reg@res,w,c
  2382  001522  0012               	return	
  2383  001524                     __end_of_get_seconds_reg:
  2384                           	opt stack 0
  2385                           tblptru	equ	0xFF8
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           indf2	equ	0xFDF
  2389                           fsr2h	equ	0xFDA
  2390                           fsr2l	equ	0xFD9
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function _get_time *****************
  2394 ;; Defined at:
  2395 ;;		line 248 in file "user.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  data            2   60[BANK0 ] PTR unsigned char 
  2398 ;;		 -> aux1(6), 
  2399 ;;  format          1   62[BANK0 ] unsigned char 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  aux_hour        1   65[BANK0 ] unsigned char 
  2402 ;;  hours           1   68[BANK0 ] unsigned char 
  2403 ;;  aux             1   67[BANK0 ] unsigned char 
  2404 ;;  minutes         1   66[BANK0 ] unsigned char 
  2405 ;;  seconds         1   64[BANK0 ] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2415 ;;      Params:         0       3       0       0       0       0       0       0       0
  2416 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2417 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2418 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2419 ;;Total ram usage:        9 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    9
  2422 ;; This function calls:
  2423 ;;		_byte_read
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text11
  2430  000C8E                     __ptext11:
  2431                           	opt stack 0
  2432  000C8E                     _get_time:
  2433                           	opt stack 21
  2434                           
  2435                           ;user.c: 250: char aux = 0x81;
  2436                           
  2437                           ;incstack = 0
  2438  000C8E  0E81               	movlw	129
  2439  000C90  0100               	movlb	0	; () banked
  2440  000C92  6FA3               	movwf	get_time@aux& (0+255),b
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;user.c: 251: char seconds = byte_read(aux);
  2444  000C94  0100               	movlb	0	; () banked
  2445  000C96  51A3               	movf	get_time@aux& (0+255),w,b
  2446  000C98  EC4D  F009         	call	_byte_read
  2447  000C9C  0100               	movlb	0	; () banked
  2448  000C9E  6FA0               	movwf	get_time@seconds& (0+255),b
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;user.c: 252: aux = 0x83;
  2452  000CA0  0E83               	movlw	131
  2453  000CA2  0100               	movlb	0	; () banked
  2454  000CA4  6FA3               	movwf	get_time@aux& (0+255),b
  2455                           
  2456                           ;user.c: 253: char minutes = byte_read(aux);
  2457  000CA6  0100               	movlb	0	; () banked
  2458  000CA8  51A3               	movf	get_time@aux& (0+255),w,b
  2459  000CAA  EC4D  F009         	call	_byte_read
  2460  000CAE  0100               	movlb	0	; () banked
  2461  000CB0  6FA2               	movwf	get_time@minutes& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;user.c: 254: aux = 0x85;
  2465  000CB2  0E85               	movlw	133
  2466  000CB4  0100               	movlb	0	; () banked
  2467  000CB6  6FA3               	movwf	get_time@aux& (0+255),b
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;user.c: 255: char hours = byte_read(aux);
  2471  000CB8  0100               	movlb	0	; () banked
  2472  000CBA  51A3               	movf	get_time@aux& (0+255),w,b
  2473  000CBC  EC4D  F009         	call	_byte_read
  2474  000CC0  0100               	movlb	0	; () banked
  2475  000CC2  6FA4               	movwf	get_time@hours& (0+255),b
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;user.c: 258: data[0] = minutes & 0x0f;
  2479  000CC4  0100               	movlb	0	; () banked
  2480  000CC6  51A2               	movf	get_time@minutes& (0+255),w,b
  2481  000CC8  0B0F               	andlw	15
  2482  000CCA  C09C  FFD9         	movff	get_time@data,fsr2l
  2483  000CCE  C09D  FFDA         	movff	get_time@data+1,fsr2h
  2484  000CD2  6EDF               	movwf	indf2,c
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;user.c: 259: data[1] = (minutes & 0xf0)>>4;
  2488  000CD4  0100               	movlb	0	; () banked
  2489  000CD6  EE20 F001          	lfsr	2,1
  2490  000CDA  519C               	movf	get_time@data& (0+255),w,b
  2491  000CDC  26D9               	addwf	fsr2l,f,c
  2492  000CDE  519D               	movf	(get_time@data+1)& (0+255),w,b
  2493  000CE0  22DA               	addwfc	fsr2h,f,c
  2494  000CE2  0100               	movlb	0	; () banked
  2495  000CE4  39A2               	swapf	get_time@minutes& (0+255),w,b
  2496  000CE6  0B0F               	andlw	15
  2497  000CE8  0B0F               	andlw	15
  2498  000CEA  6EDF               	movwf	indf2,c
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;user.c: 261: if(format == 1)
  2502  000CEC  0100               	movlb	0	; () banked
  2503  000CEE  059E               	decf	get_time@format& (0+255),w,b
  2504  000CF0  A4D8               	btfss	status,2,c
  2505  000CF2  D00A               	goto	l4387
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;user.c: 262: {
  2509                           ;user.c: 264: data[4] = 1;
  2510  000CF4  0100               	movlb	0	; () banked
  2511  000CF6  EE20 F004          	lfsr	2,4
  2512  000CFA  519C               	movf	get_time@data& (0+255),w,b
  2513  000CFC  26D9               	addwf	fsr2l,f,c
  2514  000CFE  519D               	movf	(get_time@data+1)& (0+255),w,b
  2515  000D00  22DA               	addwfc	fsr2h,f,c
  2516  000D02  0E01               	movlw	1
  2517  000D04  6EDF               	movwf	indf2,c
  2518  000D06  D01C               	goto	l4393
  2519  000D08                     l4387:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;user.c: 269: else
  2523                           ;user.c: 270: {
  2524                           ;user.c: 271: data[4] = 2;
  2525  000D08  0100               	movlb	0	; () banked
  2526  000D0A  EE20 F004          	lfsr	2,4
  2527  000D0E  519C               	movf	get_time@data& (0+255),w,b
  2528  000D10  26D9               	addwf	fsr2l,f,c
  2529  000D12  519D               	movf	(get_time@data+1)& (0+255),w,b
  2530  000D14  22DA               	addwfc	fsr2h,f,c
  2531  000D16  0E02               	movlw	2
  2532  000D18  6EDF               	movwf	indf2,c
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;user.c: 272: char aux_hour = (hours>>4 & 0x0f)*10 + (hours & 0x0f);
  2536  000D1A  C0A4  F09F         	movff	get_time@hours,??_get_time
  2537  000D1E  0E0F               	movlw	15
  2538  000D20  0100               	movlb	0	; () banked
  2539  000D22  179F               	andwf	??_get_time& (0+255),f,b
  2540  000D24  0100               	movlb	0	; () banked
  2541  000D26  39A4               	swapf	get_time@hours& (0+255),w,b
  2542  000D28  0B0F               	andlw	15
  2543  000D2A  0B0F               	andlw	15
  2544  000D2C  0D0A               	mullw	10
  2545  000D2E  50F3               	movf	prodl,w,c
  2546  000D30  0100               	movlb	0	; () banked
  2547  000D32  259F               	addwf	??_get_time& (0+255),w,b
  2548  000D34  0100               	movlb	0	; () banked
  2549  000D36  6FA1               	movwf	get_time@aux_hour& (0+255),b
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;user.c: 273: if(aux_hour<=12)
  2553  000D38  0E0D               	movlw	13
  2554  000D3A  0100               	movlb	0	; () banked
  2555  000D3C  61A1               	cpfslt	get_time@aux_hour& (0+255),b
  2556  000D3E  D017               	goto	l4395
  2557  000D40                     l4393:
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;user.c: 274: {
  2561                           ;user.c: 275: data[2] = hours & 0x0f;
  2562  000D40  0100               	movlb	0	; () banked
  2563  000D42  EE20 F002          	lfsr	2,2
  2564  000D46  519C               	movf	get_time@data& (0+255),w,b
  2565  000D48  26D9               	addwf	fsr2l,f,c
  2566  000D4A  519D               	movf	(get_time@data+1)& (0+255),w,b
  2567  000D4C  22DA               	addwfc	fsr2h,f,c
  2568  000D4E  0100               	movlb	0	; () banked
  2569  000D50  51A4               	movf	get_time@hours& (0+255),w,b
  2570  000D52  0B0F               	andlw	15
  2571  000D54  6EDF               	movwf	indf2,c
  2572                           
  2573                           ;user.c: 276: data[3] = (hours & 0xf0)>>4;
  2574  000D56  0100               	movlb	0	; () banked
  2575  000D58  EE20 F003          	lfsr	2,3
  2576  000D5C  519C               	movf	get_time@data& (0+255),w,b
  2577  000D5E  26D9               	addwf	fsr2l,f,c
  2578  000D60  519D               	movf	(get_time@data+1)& (0+255),w,b
  2579  000D62  22DA               	addwfc	fsr2h,f,c
  2580  000D64  0100               	movlb	0	; () banked
  2581  000D66  39A4               	swapf	get_time@hours& (0+255),w,b
  2582  000D68  0B0F               	andlw	15
  2583  000D6A  0B0F               	andlw	15
  2584  000D6C  D01E               	goto	L17
  2585  000D6E                     l4395:
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;user.c: 278: else
  2589                           ;user.c: 279: {
  2590                           ;user.c: 280: data[2] = (hours & 0x0f) - 2;
  2591  000D6E  0100               	movlb	0	; () banked
  2592  000D70  EE20 F002          	lfsr	2,2
  2593  000D74  519C               	movf	get_time@data& (0+255),w,b
  2594  000D76  26D9               	addwf	fsr2l,f,c
  2595  000D78  519D               	movf	(get_time@data+1)& (0+255),w,b
  2596  000D7A  22DA               	addwfc	fsr2h,f,c
  2597  000D7C  0100               	movlb	0	; () banked
  2598  000D7E  51A4               	movf	get_time@hours& (0+255),w,b
  2599  000D80  0B0F               	andlw	15
  2600  000D82  0FFE               	addlw	254
  2601  000D84  6EDF               	movwf	indf2,c
  2602                           
  2603                           ;user.c: 281: data[3] = (hours>>4 & 0x0f)-1;
  2604  000D86  0100               	movlb	0	; () banked
  2605  000D88  EE20 F003          	lfsr	2,3
  2606  000D8C  519C               	movf	get_time@data& (0+255),w,b
  2607  000D8E  26D9               	addwf	fsr2l,f,c
  2608  000D90  519D               	movf	(get_time@data+1)& (0+255),w,b
  2609  000D92  22DA               	addwfc	fsr2h,f,c
  2610  000D94  C0A4  F09F         	movff	get_time@hours,??_get_time
  2611  000D98  0100               	movlb	0	; () banked
  2612  000D9A  3B9F               	swapf	??_get_time& (0+255),f,b
  2613  000D9C  0E0F               	movlw	15
  2614  000D9E  179F               	andwf	??_get_time& (0+255),f,b
  2615  000DA0  0E0F               	movlw	15
  2616  000DA2  0100               	movlb	0	; () banked
  2617  000DA4  179F               	andwf	??_get_time& (0+255),f,b
  2618  000DA6  0100               	movlb	0	; () banked
  2619  000DA8  059F               	decf	??_get_time& (0+255),w,b
  2620  000DAA                     L17:
  2621  000DAA  6EDF               	movwf	indf2,c
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;user.c: 282: }
  2625                           ;user.c: 284: }
  2626                           ;user.c: 287: data[5] = 'H';
  2627                           
  2628                           ; BSR set to: 0
  2629  000DAC  0100               	movlb	0	; () banked
  2630  000DAE  EE20 F005          	lfsr	2,5
  2631  000DB2  519C               	movf	get_time@data& (0+255),w,b
  2632  000DB4  26D9               	addwf	fsr2l,f,c
  2633  000DB6  519D               	movf	(get_time@data+1)& (0+255),w,b
  2634  000DB8  22DA               	addwfc	fsr2h,f,c
  2635  000DBA  0E48               	movlw	72
  2636  000DBC  6EDF               	movwf	indf2,c
  2637                           
  2638                           ; BSR set to: 0
  2639  000DBE  0012               	return		;funcret
  2640  000DC0                     __end_of_get_time:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           prodl	equ	0xFF3
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           indf2	equ	0xFDF
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _byte_read *****************
  2652 ;; Defined at:
  2653 ;;		line 192 in file "user.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  address         1    wreg     unsigned char 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  address         1   44[COMRAM] unsigned char 
  2658 ;;  i               2   46[COMRAM] int 
  2659 ;;  res             1   45[COMRAM] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      unsigned char 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0
  2670 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2671 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2672 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2673 ;;Total ram usage:        6 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    8
  2676 ;; This function calls:
  2677 ;;		_ce_disable
  2678 ;;		_ce_enable
  2679 ;;		_io_as_input
  2680 ;;		_send_command
  2681 ;; This function is called by:
  2682 ;;		_get_time
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           	psect	text12
  2687  00129A                     __ptext12:
  2688                           	opt stack 0
  2689  00129A                     _byte_read:
  2690                           	opt stack 21
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;incstack = 0
  2694                           ;byte_read@address stored from wreg
  2695  00129A  6E2D               	movwf	byte_read@address,c
  2696                           
  2697                           ;user.c: 194: char res = 0;
  2698  00129C  0E00               	movlw	0
  2699  00129E  6E2E               	movwf	byte_read@res,c
  2700                           
  2701                           ;user.c: 197: ce_enable();
  2702  0012A0  ECB0  F00B         	call	_ce_enable	;wreg free
  2703                           
  2704                           ;user.c: 199: send_command(address);
  2705  0012A4  502D               	movf	byte_read@address,w,c
  2706  0012A6  ECB6  F009         	call	_send_command
  2707                           
  2708                           ;user.c: 200: io_as_input();
  2709  0012AA  ECAE  F00B         	call	_io_as_input	;wreg free
  2710                           
  2711                           ;user.c: 201: int i;
  2712                           ;user.c: 202: for(i=0;i<8;i++)
  2713  0012AE  0E00               	movlw	0
  2714  0012B0  6E30               	movwf	byte_read@i+1,c
  2715  0012B2  0E00               	movlw	0
  2716  0012B4  6E2F               	movwf	byte_read@i,c
  2717  0012B6                     l4259:
  2718  0012B6  BE30               	btfsc	byte_read@i+1,7,c
  2719  0012B8  D006               	goto	l350
  2720  0012BA  5030               	movf	byte_read@i+1,w,c
  2721  0012BC  E121               	bnz	l4275
  2722  0012BE  0E08               	movlw	8
  2723  0012C0  5C2F               	subwf	byte_read@i,w,c
  2724  0012C2  B0D8               	btfsc	status,0,c
  2725  0012C4  D01D               	goto	l4275
  2726  0012C6                     l350:
  2727                           
  2728                           ;user.c: 203: {
  2729                           ;user.c: 204: RA2 = 0;
  2730  0012C6  9480               	bcf	3968,2,c	;volatile
  2731                           
  2732                           ;user.c: 205: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  2733  0012C8  0E06               	movlw	6
  2734  0012CA                     u5037:
  2735  0012CA  2EE8               	decfsz	wreg,f,c
  2736  0012CC  D7FE               	bra	u5037
  2737  0012CE  D000               	nop2	
  2738                           
  2739                           ;user.c: 206: res |= RA3<<i;
  2740  0012D0  C02F  F02B         	movff	byte_read@i,??_byte_read
  2741  0012D4  A680               	btfss	3968,3,c	;volatile
  2742  0012D6  D003               	goto	u4530
  2743  0012D8  6A2C               	clrf	(??_byte_read+1)& (0+255),c
  2744  0012DA  2A2C               	incf	(??_byte_read+1)& (0+255),f,c
  2745  0012DC  D001               	goto	u4548
  2746  0012DE                     u4530:
  2747  0012DE  6A2C               	clrf	(??_byte_read+1)& (0+255),c
  2748  0012E0                     u4548:
  2749  0012E0  2A2B               	incf	??_byte_read,f,c
  2750  0012E2  D002               	goto	u4554
  2751  0012E4                     u4555:
  2752  0012E4  90D8               	bcf	status,0,c
  2753  0012E6  362C               	rlcf	??_byte_read+1,f,c
  2754  0012E8                     u4554:
  2755  0012E8  2E2B               	decfsz	??_byte_read,f,c
  2756  0012EA  D7FC               	goto	u4555
  2757  0012EC  502C               	movf	??_byte_read+1,w,c
  2758  0012EE  122E               	iorwf	byte_read@res,f,c
  2759                           
  2760                           ;user.c: 207: RA2 = 1;
  2761  0012F0  8480               	bsf	3968,2,c	;volatile
  2762                           
  2763                           ;user.c: 208: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  2764  0012F2  0E10               	movlw	16
  2765  0012F4                     u5047:
  2766  0012F4  2EE8               	decfsz	wreg,f,c
  2767  0012F6  D7FE               	bra	u5047
  2768  0012F8  D000               	nop2	
  2769  0012FA  4A2F               	infsnz	byte_read@i,f,c
  2770  0012FC  2A30               	incf	byte_read@i+1,f,c
  2771  0012FE  D7DB               	goto	l4259
  2772  001300                     l4275:
  2773                           
  2774                           ;user.c: 210: }
  2775                           ;user.c: 212: ce_disable();
  2776  001300  ECA2  F00B         	call	_ce_disable	;wreg free
  2777                           
  2778                           ;user.c: 215: return res;
  2779  001304  502E               	movf	byte_read@res,w,c
  2780  001306  0012               	return	
  2781  001308                     __end_of_byte_read:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           prodl	equ	0xFF3
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           indf2	equ	0xFDF
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _send_command *****************
  2793 ;; Defined at:
  2794 ;;		line 352 in file "user.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  command         1    wreg     unsigned char 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  command         1   39[COMRAM] unsigned char 
  2799 ;;  i               2   40[COMRAM] int 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2809 ;;      Params:         0       0       0       0       0       0       0       0       0
  2810 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2811 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2812 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2813 ;;Total ram usage:        5 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    7
  2816 ;; This function calls:
  2817 ;;		_io_as_output
  2818 ;; This function is called by:
  2819 ;;		_byte_read
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text13
  2824  00136C                     __ptext13:
  2825                           	opt stack 0
  2826  00136C                     _send_command:
  2827                           	opt stack 21
  2828                           
  2829                           ;incstack = 0
  2830                           ;send_command@command stored from wreg
  2831  00136C  6E28               	movwf	send_command@command,c
  2832                           
  2833                           ;user.c: 354: int i;
  2834                           ;user.c: 355: io_as_output();
  2835  00136E  ECAC  F00B         	call	_io_as_output	;wreg free
  2836                           
  2837                           ;user.c: 356: for(i=0; i<8; i++)
  2838  001372  0E00               	movlw	0
  2839  001374  6E2A               	movwf	send_command@i+1,c
  2840  001376  0E00               	movlw	0
  2841  001378  6E29               	movwf	send_command@i,c
  2842  00137A                     l4149:
  2843  00137A  BE2A               	btfsc	send_command@i+1,7,c
  2844  00137C  D006               	goto	l4153
  2845  00137E  502A               	movf	send_command@i+1,w,c
  2846  001380  E121               	bnz	l393
  2847  001382  0E08               	movlw	8
  2848  001384  5C29               	subwf	send_command@i,w,c
  2849  001386  B0D8               	btfsc	status,0,c
  2850  001388  0012               	return	
  2851  00138A                     l4153:
  2852                           
  2853                           ;user.c: 357: {
  2854                           ;user.c: 358: RA3 = command>>i & 0x01;
  2855  00138A  C029  F026         	movff	send_command@i,??_send_command
  2856  00138E  C028  F027         	movff	send_command@command,??_send_command+1
  2857  001392  2A26               	incf	??_send_command,f,c
  2858  001394  D002               	goto	u4364
  2859  001396                     u4365:
  2860  001396  90D8               	bcf	status,0,c
  2861  001398  3227               	rrcf	??_send_command+1,f,c
  2862  00139A                     u4364:
  2863  00139A  2E26               	decfsz	??_send_command,f,c
  2864  00139C  D7FC               	goto	u4365
  2865  00139E  3027               	rrcf	??_send_command+1,w,c
  2866  0013A0  A0D8               	btfss	status,0,c
  2867  0013A2  D002               	goto	u4370
  2868  0013A4  8680               	bsf	3968,3,c	;volatile
  2869  0013A6  D001               	goto	l4155
  2870  0013A8                     u4370:
  2871  0013A8  9680               	bcf	3968,3,c	;volatile
  2872  0013AA                     l4155:
  2873                           
  2874                           ;user.c: 359: RA2 = 1;
  2875  0013AA  8480               	bsf	3968,2,c	;volatile
  2876                           
  2877                           ;user.c: 360: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  2878  0013AC  0E10               	movlw	16
  2879  0013AE                     u5057:
  2880  0013AE  2EE8               	decfsz	wreg,f,c
  2881  0013B0  D7FE               	bra	u5057
  2882  0013B2  D000               	nop2	
  2883                           
  2884                           ;user.c: 361: RA2 = 0;
  2885  0013B4  9480               	bcf	3968,2,c	;volatile
  2886                           
  2887                           ;user.c: 362: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  2888  0013B6  0E06               	movlw	6
  2889  0013B8                     u5067:
  2890  0013B8  2EE8               	decfsz	wreg,f,c
  2891  0013BA  D7FE               	bra	u5067
  2892  0013BC  D000               	nop2	
  2893  0013BE  4A29               	infsnz	send_command@i,f,c
  2894  0013C0  2A2A               	incf	send_command@i+1,f,c
  2895  0013C2  D7DB               	goto	l4149
  2896  0013C4                     l393:
  2897  0013C4  0012               	return		;funcret
  2898  0013C6                     __end_of_send_command:
  2899                           	opt stack 0
  2900                           tblptru	equ	0xFF8
  2901                           prodl	equ	0xFF3
  2902                           postinc0	equ	0xFEE
  2903                           wreg	equ	0xFE8
  2904                           indf2	equ	0xFDF
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _io_as_output *****************
  2910 ;; Defined at:
  2911 ;;		line 374 in file "user.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;		None
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		None
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2925 ;;      Params:         0       0       0       0       0       0       0       0       0
  2926 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2928 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2929 ;;Total ram usage:        0 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    6
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_send_command
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text14
  2940  001758                     __ptext14:
  2941                           	opt stack 0
  2942  001758                     _io_as_output:
  2943                           	opt stack 21
  2944                           
  2945                           ;user.c: 376: TRISA3 = 0;
  2946                           
  2947                           ;incstack = 0
  2948  001758  9692               	bcf	3986,3,c	;volatile
  2949  00175A  0012               	return		;funcret
  2950  00175C                     __end_of_io_as_output:
  2951                           	opt stack 0
  2952                           tblptru	equ	0xFF8
  2953                           prodl	equ	0xFF3
  2954                           postinc0	equ	0xFEE
  2955                           wreg	equ	0xFE8
  2956                           indf2	equ	0xFDF
  2957                           fsr2h	equ	0xFDA
  2958                           fsr2l	equ	0xFD9
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _io_as_input *****************
  2962 ;; Defined at:
  2963 ;;		line 368 in file "user.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		None
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2977 ;;      Params:         0       0       0       0       0       0       0       0       0
  2978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2979 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2980 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2981 ;;Total ram usage:        0 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    6
  2984 ;; This function calls:
  2985 ;;		Nothing
  2986 ;; This function is called by:
  2987 ;;		_byte_read
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text15
  2992  00175C                     __ptext15:
  2993                           	opt stack 0
  2994  00175C                     _io_as_input:
  2995                           	opt stack 22
  2996                           
  2997                           ;user.c: 370: TRISA3 = 1;
  2998                           
  2999                           ;incstack = 0
  3000  00175C  8692               	bsf	3986,3,c	;volatile
  3001  00175E  0012               	return		;funcret
  3002  001760                     __end_of_io_as_input:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           prodl	equ	0xFF3
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           indf2	equ	0xFDF
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _ce_enable *****************
  3014 ;; Defined at:
  3015 ;;		line 178 in file "user.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;		None
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;		None
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		None
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3029 ;;      Params:         0       0       0       0       0       0       0       0       0
  3030 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3032 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3033 ;;Total ram usage:        0 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    6
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_byte_read
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text16
  3044  001760                     __ptext16:
  3045                           	opt stack 0
  3046  001760                     _ce_enable:
  3047                           	opt stack 22
  3048                           
  3049                           ;user.c: 181: RA5 = 1;
  3050                           
  3051                           ;incstack = 0
  3052  001760  8A80               	bsf	3968,5,c	;volatile
  3053  001762  0012               	return		;funcret
  3054  001764                     __end_of_ce_enable:
  3055                           	opt stack 0
  3056                           tblptru	equ	0xFF8
  3057                           prodl	equ	0xFF3
  3058                           postinc0	equ	0xFEE
  3059                           wreg	equ	0xFE8
  3060                           indf2	equ	0xFDF
  3061                           fsr2h	equ	0xFDA
  3062                           fsr2l	equ	0xFD9
  3063                           status	equ	0xFD8
  3064                           
  3065 ;; *************** function _ce_disable *****************
  3066 ;; Defined at:
  3067 ;;		line 185 in file "user.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;		None
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;		None
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      void 
  3074 ;; Registers used:
  3075 ;;		None
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3081 ;;      Params:         0       0       0       0       0       0       0       0       0
  3082 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3084 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3085 ;;Total ram usage:        0 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    6
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_byte_read
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text17
  3096  001744                     __ptext17:
  3097                           	opt stack 0
  3098  001744                     _ce_disable:
  3099                           	opt stack 22
  3100                           
  3101                           ;user.c: 187: RA5 = 0;
  3102                           
  3103                           ;incstack = 0
  3104  001744  9A80               	bcf	3968,5,c	;volatile
  3105                           
  3106                           ;user.c: 188: RA2 = 0;
  3107  001746  9480               	bcf	3968,2,c	;volatile
  3108  001748  0012               	return		;funcret
  3109  00174A                     __end_of_ce_disable:
  3110                           	opt stack 0
  3111                           tblptru	equ	0xFF8
  3112                           prodl	equ	0xFF3
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           indf2	equ	0xFDF
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _buzzer_disable *****************
  3121 ;; Defined at:
  3122 ;;		line 164 in file "user.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3136 ;;      Params:         0       0       0       0       0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3139 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3140 ;;Total ram usage:        0 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    6
  3143 ;; This function calls:
  3144 ;;		Nothing
  3145 ;; This function is called by:
  3146 ;;		_main
  3147 ;;		_buzzer_toggle
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text18
  3152  00172C                     __ptext18:
  3153                           	opt stack 0
  3154  00172C                     _buzzer_disable:
  3155                           	opt stack 24
  3156                           
  3157                           ;user.c: 166: buzzer_status= 0;
  3158                           
  3159                           ;incstack = 0
  3160  00172C  0E00               	movlw	0
  3161  00172E  0100               	movlb	0	; () banked
  3162  001730  6FAA               	movwf	_buzzer_status& (0+255),b
  3163                           
  3164                           ; BSR set to: 0
  3165  001732  0012               	return		;funcret
  3166  001734                     __end_of_buzzer_disable:
  3167                           	opt stack 0
  3168                           tblptru	equ	0xFF8
  3169                           prodl	equ	0xFF3
  3170                           postinc0	equ	0xFEE
  3171                           wreg	equ	0xFE8
  3172                           indf2	equ	0xFDF
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function _InitApp *****************
  3178 ;; Defined at:
  3179 ;;		line 28 in file "user.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3193 ;;      Params:         0       0       0       0       0       0       0       0       0
  3194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3196 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3197 ;;Total ram usage:        0 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    6
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text19
  3208  001308                     __ptext19:
  3209                           	opt stack 0
  3210  001308                     _InitApp:
  3211                           	opt stack 24
  3212                           
  3213                           ;user.c: 32: TRISB3 = 0;
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;incstack = 0
  3217  001308  9693               	bcf	3987,3,c	;volatile
  3218                           
  3219                           ;user.c: 33: TRISB4 = 0;
  3220  00130A  9893               	bcf	3987,4,c	;volatile
  3221                           
  3222                           ;user.c: 35: CCP2CON = 0x00;
  3223  00130C  0E00               	movlw	0
  3224  00130E  6EBA               	movwf	4026,c	;volatile
  3225                           
  3226                           ;user.c: 36: SSPCON1 = 0X00;
  3227  001310  0E00               	movlw	0
  3228  001312  6EC6               	movwf	4038,c	;volatile
  3229                           
  3230                           ;user.c: 37: ADCON1 = 0X0F;
  3231  001314  0E0F               	movlw	15
  3232  001316  6EC1               	movwf	4033,c	;volatile
  3233                           
  3234                           ;user.c: 38: INTCON = 0b10001000;
  3235  001318  0E88               	movlw	136
  3236  00131A  6EF2               	movwf	intcon,c	;volatile
  3237                           
  3238                           ;user.c: 39: INTCON = 0b0;
  3239  00131C  0E00               	movlw	0
  3240  00131E  6EF2               	movwf	intcon,c	;volatile
  3241                           
  3242                           ;user.c: 40: INTCON |= 1<<7;
  3243  001320  8EF2               	bsf	intcon,7,c	;volatile
  3244                           
  3245                           ;user.c: 41: INTCON |= 1<<6;
  3246  001322  8CF2               	bsf	intcon,6,c	;volatile
  3247                           
  3248                           ;user.c: 42: INTCON |= 1<<3;
  3249  001324  86F2               	bsf	intcon,3,c	;volatile
  3250                           
  3251                           ;user.c: 43: INTCON |= 1<<5;
  3252  001326  8AF2               	bsf	intcon,5,c	;volatile
  3253                           
  3254                           ;user.c: 44: INTCON2 = 0b10000101;
  3255  001328  0E85               	movlw	133
  3256  00132A  6EF1               	movwf	intcon2,c	;volatile
  3257                           
  3258                           ;user.c: 45: INTCON2 |= 1<2;
  3259  00132C  80F1               	bsf	intcon2,0,c	;volatile
  3260                           
  3261                           ;user.c: 47: T0CON = 0b10000010;
  3262  00132E  0E82               	movlw	130
  3263  001330  6ED5               	movwf	4053,c	;volatile
  3264                           
  3265                           ;user.c: 50: T1CON = 0x00;
  3266  001332  0E00               	movlw	0
  3267  001334  6ECD               	movwf	4045,c	;volatile
  3268                           
  3269                           ;user.c: 51: T1CON |= 1<<7;
  3270  001336  8ECD               	bsf	4045,7,c	;volatile
  3271                           
  3272                           ;user.c: 52: T1CON |= 0<<5;
  3273  001338  50CD               	movf	4045,w,c	;volatile
  3274                           
  3275                           ;user.c: 53: T1CON |= 0<<4;
  3276  00133A  50CD               	movf	4045,w,c	;volatile
  3277                           
  3278                           ;user.c: 54: T1CON |= 0<<3;
  3279  00133C  50CD               	movf	4045,w,c	;volatile
  3280                           
  3281                           ;user.c: 55: T1CON |= 0 << 1;
  3282  00133E  50CD               	movf	4045,w,c	;volatile
  3283                           
  3284                           ;user.c: 56: T1CON |= 0 << 0;
  3285  001340  50CD               	movf	4045,w,c	;volatile
  3286                           
  3287                           ;user.c: 58: PIE1 = 0x00;
  3288  001342  0E00               	movlw	0
  3289  001344  6E9D               	movwf	3997,c	;volatile
  3290                           
  3291                           ;user.c: 59: PIE1 |= 1 << 0;
  3292  001346  809D               	bsf	3997,0,c	;volatile
  3293                           
  3294                           ;user.c: 61: TRISB1 = 0;
  3295  001348  9293               	bcf	3987,1,c	;volatile
  3296                           
  3297                           ;user.c: 62: TRISA2 = 0;
  3298  00134A  9492               	bcf	3986,2,c	;volatile
  3299                           
  3300                           ;user.c: 63: TRISA5 = 0;
  3301  00134C  9A92               	bcf	3986,5,c	;volatile
  3302                           
  3303                           ;user.c: 64: TRISA3 = 0;
  3304  00134E  9692               	bcf	3986,3,c	;volatile
  3305                           
  3306                           ;user.c: 68: state = 0;
  3307  001350  0E00               	movlw	0
  3308  001352  0100               	movlb	0	; () banked
  3309  001354  6FB9               	movwf	(_state+1)& (0+255),b
  3310  001356  0E00               	movlw	0
  3311  001358  6FB8               	movwf	_state& (0+255),b
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;user.c: 69: next = 0;
  3315  00135A  0E00               	movlw	0
  3316  00135C  6E32               	movwf	_next+1,c
  3317  00135E  0E00               	movlw	0
  3318  001360  6E31               	movwf	_next,c
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;user.c: 73: timer1_up_limit_sec = 59;
  3322  001362  0E3B               	movlw	59
  3323  001364  6E39               	movwf	_timer1_up_limit_sec,c
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;user.c: 74: timer1_up_limit_min = 59;
  3327  001366  0E3B               	movlw	59
  3328  001368  6E38               	movwf	_timer1_up_limit_min,c
  3329                           
  3330                           ; BSR set to: 0
  3331  00136A  0012               	return		;funcret
  3332  00136C                     __end_of_InitApp:
  3333                           	opt stack 0
  3334                           tblptru	equ	0xFF8
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           intcon2	equ	0xFF1
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           indf2	equ	0xFDF
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function _ConfigureOscillator *****************
  3346 ;; Defined at:
  3347 ;;		line 24 in file "system.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		None
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3361 ;;      Params:         0       0       0       0       0       0       0       0       0
  3362 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3364 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3365 ;;Total ram usage:        0 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    6
  3368 ;; This function calls:
  3369 ;;		Nothing
  3370 ;; This function is called by:
  3371 ;;		_main
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text20
  3376  001778                     __ptext20:
  3377                           	opt stack 0
  3378  001778                     _ConfigureOscillator:
  3379                           	opt stack 24
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;incstack = 0
  3383  001778  0012               	return		;funcret
  3384  00177A                     __end_of_ConfigureOscillator:
  3385                           	opt stack 0
  3386                           tblptru	equ	0xFF8
  3387                           prodl	equ	0xFF3
  3388                           intcon	equ	0xFF2
  3389                           intcon2	equ	0xFF1
  3390                           postinc0	equ	0xFEE
  3391                           wreg	equ	0xFE8
  3392                           indf2	equ	0xFDF
  3393                           fsr2h	equ	0xFDA
  3394                           fsr2l	equ	0xFD9
  3395                           status	equ	0xFD8
  3396                           
  3397 ;; *************** function _high_isr *****************
  3398 ;; Defined at:
  3399 ;;		line 32 in file "interrupts.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  digits          6   47[BANK0 ] unsigned char [6]
  3404 ;;  i               2   58[BANK0 ] int 
  3405 ;;  code           47    0[BANK0 ] unsigned char [47]
  3406 ;;  i               2   56[BANK0 ] int 
  3407 ;;  final_code      2   54[BANK0 ] int 
  3408 ;;  aux             1   53[BANK0 ] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3418 ;;      Params:         0       0       0       0       0       0       0       0       0
  3419 ;;      Locals:         0      60       0       0       0       0       0       0       0
  3420 ;;      Temps:         17       0       0       0       0       0       0       0       0
  3421 ;;      Totals:        17      60       0       0       0       0       0       0       0
  3422 ;;Total ram usage:       77 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    5
  3425 ;; This function calls:
  3426 ;;		_get_next_state
  3427 ;;		_ir_get_human_code
  3428 ;;		_point_disable
  3429 ;;		_point_enable
  3430 ;;		_put_nums
  3431 ;;		_update_buzzer
  3432 ;;		_update_point
  3433 ;;		_update_timer1_counter_10
  3434 ;; This function is called by:
  3435 ;;		Interrupt level 2
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	intcode
  3440  000008                     __pintcode:
  3441                           	opt stack 0
  3442  000008                     _high_isr:
  3443                           	opt stack 21
  3444                           
  3445                           ;incstack = 0
  3446  000008  823A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3447  00000A  EDFF  F003         	call	int_func,f	;refresh shadow registers
  3448                           tblptru	equ	0xFF8
  3449                           prodl	equ	0xFF3
  3450                           intcon	equ	0xFF2
  3451                           intcon2	equ	0xFF1
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           indf2	equ	0xFDF
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459                           	psect	intcode_body
  3460  0007FE                     __pintcode_body:
  3461                           	opt stack 21
  3462  0007FE                     int_func:
  3463                           	opt stack 21
  3464  0007FE  0006               	pop		; remove dummy address from shadow register refresh
  3465  000800  CFFA F018          	movff	pclath,??_high_isr+3
  3466  000804  CFFB F019          	movff	pclatu,??_high_isr+4
  3467  000808  CFE9 F01A          	movff	fsr0l,??_high_isr+5
  3468  00080C  CFEA F01B          	movff	fsr0h,??_high_isr+6
  3469  000810  CFE1 F01C          	movff	fsr1l,??_high_isr+7
  3470  000814  CFE2 F01D          	movff	fsr1h,??_high_isr+8
  3471  000818  CFD9 F01E          	movff	fsr2l,??_high_isr+9
  3472  00081C  CFDA F01F          	movff	fsr2h,??_high_isr+10
  3473  000820  CFF3 F020          	movff	prodl,??_high_isr+11
  3474  000824  CFF4 F021          	movff	prodh,??_high_isr+12
  3475  000828  CFF6 F022          	movff	tblptrl,??_high_isr+13
  3476  00082C  CFF7 F023          	movff	tblptrh,??_high_isr+14
  3477  000830  CFF8 F024          	movff	tblptru,??_high_isr+15
  3478  000834  CFF5 F025          	movff	tablat,??_high_isr+16
  3479                           
  3480                           ;interrupts.c: 68: if (RBIF == 1)
  3481  000838  A0F2               	btfss	intcon,0,c	;volatile
  3482  00083A  D089               	goto	i2l65
  3483                           
  3484                           ;interrupts.c: 69: {
  3485                           ;interrupts.c: 71: INTCONbits.GIE = 0;
  3486  00083C  9EF2               	bcf	intcon,7,c	;volatile
  3487                           
  3488                           ;interrupts.c: 72: char aux = 0;
  3489  00083E  0E00               	movlw	0
  3490  000840  0100               	movlb	0	; () banked
  3491  000842  6F95               	movwf	high_isr@aux& (0+255),b
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;interrupts.c: 74: int i;
  3495                           ;interrupts.c: 75: char code[47];
  3496                           ;interrupts.c: 77: _delay((unsigned long)((40.63)*(20000000L/4000.0)));
  3497  000844  0E02               	movlw	2
  3498  000846  6E16               	movwf	(??_high_isr+1)& (0+255),c
  3499  000848  0E08               	movlw	8
  3500  00084A  6E15               	movwf	??_high_isr& (0+255),c
  3501  00084C  0ED2               	movlw	210
  3502  00084E                     i2u507_47:
  3503  00084E  2EE8               	decfsz	wreg,f,c
  3504  000850  D7FE               	bra	i2u507_47
  3505  000852  2E15               	decfsz	??_high_isr& (0+255),f,c
  3506  000854  D7FC               	bra	i2u507_47
  3507  000856  2E16               	decfsz	(??_high_isr+1)& (0+255),f,c
  3508  000858  D7FA               	bra	i2u507_47
  3509                           
  3510                           ;interrupts.c: 78: for(i = 0; i < 47 ; i ++)
  3511  00085A  0E00               	movlw	0
  3512  00085C  0100               	movlb	0	; () banked
  3513  00085E  6F99               	movwf	(high_isr@i+1)& (0+255),b
  3514  000860  0E00               	movlw	0
  3515  000862  6F98               	movwf	high_isr@i& (0+255),b
  3516  000864                     i2l3601:
  3517                           
  3518                           ; BSR set to: 0
  3519  000864  0100               	movlb	0	; () banked
  3520  000866  BF99               	btfsc	(high_isr@i+1)& (0+255),7,b
  3521  000868  D008               	goto	i2l3605
  3522  00086A  0100               	movlb	0	; () banked
  3523  00086C  5199               	movf	(high_isr@i+1)& (0+255),w,b
  3524  00086E  E11D               	bnz	i2l3613
  3525  000870  0E2F               	movlw	47
  3526  000872  0100               	movlb	0	; () banked
  3527  000874  5D98               	subwf	high_isr@i& (0+255),w,b
  3528  000876  B0D8               	btfsc	status,0,c
  3529  000878  D018               	goto	i2l3613
  3530  00087A                     i2l3605:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;interrupts.c: 79: {
  3534                           ;interrupts.c: 80: code[i] = RB5;
  3535  00087A  0E60               	movlw	low high_isr@code
  3536  00087C  0100               	movlb	0	; () banked
  3537  00087E  2598               	addwf	high_isr@i& (0+255),w,b
  3538  000880  6ED9               	movwf	fsr2l,c
  3539  000882  0E00               	movlw	high high_isr@code
  3540  000884  0100               	movlb	0	; () banked
  3541  000886  2199               	addwfc	(high_isr@i+1)& (0+255),w,b
  3542  000888  6EDA               	movwf	fsr2h,c
  3543  00088A  0E00               	movlw	0
  3544  00088C  BA81               	btfsc	3969,5,c	;volatile
  3545  00088E  0E01               	movlw	1
  3546  000890  6EDF               	movwf	indf2,c
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;interrupts.c: 81: _delay((unsigned long)((580)*(20000000L/4000000.0)));
  3550  000892  0E04               	movlw	4
  3551  000894  6E15               	movwf	??_high_isr& (0+255),c
  3552  000896  0EC3               	movlw	195
  3553  000898                     i2u508_47:
  3554  000898  2EE8               	decfsz	wreg,f,c
  3555  00089A  D7FE               	bra	i2u508_47
  3556  00089C  2E15               	decfsz	??_high_isr& (0+255),f,c
  3557  00089E  D7FC               	bra	i2u508_47
  3558  0008A0  F000               	nop	
  3559  0008A2  0100               	movlb	0	; () banked
  3560  0008A4  4B98               	infsnz	high_isr@i& (0+255),f,b
  3561  0008A6  2B99               	incf	(high_isr@i+1)& (0+255),f,b
  3562  0008A8  D7DD               	goto	i2l3601
  3563  0008AA                     i2l3613:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;interrupts.c: 82: }
  3567                           ;interrupts.c: 83: int final_code = 0;
  3568  0008AA  0E00               	movlw	0
  3569  0008AC  0100               	movlb	0	; () banked
  3570  0008AE  6F97               	movwf	(high_isr@final_code+1)& (0+255),b
  3571  0008B0  0E00               	movlw	0
  3572  0008B2  6F96               	movwf	high_isr@final_code& (0+255),b
  3573                           
  3574                           ;interrupts.c: 84: for(i = 0; i<16;i++)
  3575  0008B4  0E00               	movlw	0
  3576  0008B6  0100               	movlb	0	; () banked
  3577  0008B8  6F99               	movwf	(high_isr@i+1)& (0+255),b
  3578  0008BA  0E00               	movlw	0
  3579  0008BC  6F98               	movwf	high_isr@i& (0+255),b
  3580  0008BE                     i2l3615:
  3581                           
  3582                           ; BSR set to: 0
  3583  0008BE  0100               	movlb	0	; () banked
  3584  0008C0  BF99               	btfsc	(high_isr@i+1)& (0+255),7,b
  3585  0008C2  D008               	goto	i2l3619
  3586  0008C4  0100               	movlb	0	; () banked
  3587  0008C6  5199               	movf	(high_isr@i+1)& (0+255),w,b
  3588  0008C8  E123               	bnz	i2l3625
  3589  0008CA  0E10               	movlw	16
  3590  0008CC  0100               	movlb	0	; () banked
  3591  0008CE  5D98               	subwf	high_isr@i& (0+255),w,b
  3592  0008D0  B0D8               	btfsc	status,0,c
  3593  0008D2  D01E               	goto	i2l3625
  3594  0008D4                     i2l3619:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;interrupts.c: 85: {
  3598                           ;interrupts.c: 86: final_code |= code[i]<<i;
  3599  0008D4  C098  F015         	movff	high_isr@i,??_high_isr
  3600  0008D8  0E60               	movlw	low high_isr@code
  3601  0008DA  0100               	movlb	0	; () banked
  3602  0008DC  2598               	addwf	high_isr@i& (0+255),w,b
  3603  0008DE  6ED9               	movwf	fsr2l,c
  3604  0008E0  0E00               	movlw	high high_isr@code
  3605  0008E2  0100               	movlb	0	; () banked
  3606  0008E4  2199               	addwfc	(high_isr@i+1)& (0+255),w,b
  3607  0008E6  6EDA               	movwf	fsr2h,c
  3608  0008E8  50DF               	movf	indf2,w,c
  3609  0008EA  6E16               	movwf	(??_high_isr+1)& (0+255),c
  3610  0008EC  6A17               	clrf	(??_high_isr+2)& (0+255),c
  3611  0008EE  2A15               	incf	??_high_isr,f,c
  3612  0008F0  D003               	goto	i2u388_44
  3613  0008F2                     i2u388_45:
  3614  0008F2  90D8               	bcf	status,0,c
  3615  0008F4  3616               	rlcf	??_high_isr+1,f,c
  3616  0008F6  3617               	rlcf	??_high_isr+2,f,c
  3617  0008F8                     i2u388_44:
  3618  0008F8  2E15               	decfsz	??_high_isr,f,c
  3619  0008FA  D7FB               	goto	i2u388_45
  3620  0008FC  5016               	movf	??_high_isr+1,w,c
  3621  0008FE  0100               	movlb	0	; () banked
  3622  000900  1396               	iorwf	high_isr@final_code& (0+255),f,b
  3623  000902  5017               	movf	??_high_isr+2,w,c
  3624  000904  0100               	movlb	0	; () banked
  3625  000906  1397               	iorwf	(high_isr@final_code+1)& (0+255),f,b
  3626                           
  3627                           ; BSR set to: 0
  3628  000908  0100               	movlb	0	; () banked
  3629  00090A  4B98               	infsnz	high_isr@i& (0+255),f,b
  3630  00090C  2B99               	incf	(high_isr@i+1)& (0+255),f,b
  3631  00090E  D7D7               	goto	i2l3615
  3632  000910                     i2l3625:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;interrupts.c: 87: }
  3636                           ;interrupts.c: 92: if(final_code !=0xffff)
  3637  000910  0100               	movlb	0	; () banked
  3638  000912  2996               	incf	high_isr@final_code& (0+255),w,b
  3639  000914  E104               	bnz	i2u390_40
  3640  000916  0100               	movlb	0	; () banked
  3641  000918  2997               	incf	(high_isr@final_code+1)& (0+255),w,b
  3642  00091A  B4D8               	btfsc	status,2,c
  3643  00091C  D015               	goto	i2l3631
  3644  00091E                     i2u390_40:
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;interrupts.c: 93: {
  3648                           ;interrupts.c: 94: human_code = ir_get_human_code(final_code);
  3649  00091E  C096  F001         	movff	high_isr@final_code,ir_get_human_code@code
  3650  000922  C097  F002         	movff	high_isr@final_code+1,ir_get_human_code@code+1
  3651  000926  ECE0  F006         	call	_ir_get_human_code	;wreg free
  3652  00092A  6E37               	movwf	_human_code,c
  3653                           
  3654                           ;interrupts.c: 95: next = get_next_state(state,final_code);
  3655  00092C  C0B8  F00E         	movff	_state,get_next_state@state
  3656  000930  C0B9  F00F         	movff	_state+1,get_next_state@state+1
  3657  000934  C096  F010         	movff	high_isr@final_code,get_next_state@code
  3658  000938  C097  F011         	movff	high_isr@final_code+1,get_next_state@code+1
  3659  00093C  EC09  F000         	call	_get_next_state	;wreg free
  3660  000940  C00E  F031         	movff	?_get_next_state,_next
  3661  000944  C00F  F032         	movff	?_get_next_state+1,_next+1
  3662  000948                     i2l3631:
  3663                           
  3664                           ;interrupts.c: 96: }
  3665                           ;interrupts.c: 98: RBIF = 0;
  3666  000948  90F2               	bcf	intcon,0,c	;volatile
  3667                           
  3668                           ;interrupts.c: 99: INTCONbits.GIE = 1;
  3669  00094A  8EF2               	bsf	intcon,7,c	;volatile
  3670                           
  3671                           ;interrupts.c: 100: }
  3672  00094C  D0C9               	goto	i2l96
  3673  00094E                     i2l65:
  3674                           
  3675                           ;interrupts.c: 101: else if (TMR0IF == 1)
  3676  00094E  A4F2               	btfss	intcon,2,c	;volatile
  3677  000950  D0A4               	goto	i2l72
  3678                           
  3679                           ;interrupts.c: 102: {
  3680                           ;interrupts.c: 104: int i;
  3681                           ;interrupts.c: 105: for(i=0; i<6;i++)
  3682  000952  0E00               	movlw	0
  3683  000954  0100               	movlb	0	; () banked
  3684  000956  6F9B               	movwf	(high_isr@i_156+1)& (0+255),b
  3685  000958  0E00               	movlw	0
  3686  00095A  6F9A               	movwf	high_isr@i_156& (0+255),b
  3687  00095C                     i2l3637:
  3688                           
  3689                           ; BSR set to: 0
  3690  00095C  0100               	movlb	0	; () banked
  3691  00095E  BF9B               	btfsc	(high_isr@i_156+1)& (0+255),7,b
  3692  000960  D008               	goto	i2l3641
  3693  000962  0100               	movlb	0	; () banked
  3694  000964  519B               	movf	(high_isr@i_156+1)& (0+255),w,b
  3695  000966  E11B               	bnz	i2l3647
  3696  000968  0E06               	movlw	6
  3697  00096A  0100               	movlb	0	; () banked
  3698  00096C  5D9A               	subwf	high_isr@i_156& (0+255),w,b
  3699  00096E  B0D8               	btfsc	status,0,c
  3700  000970  D016               	goto	i2l3647
  3701  000972                     i2l3641:
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;interrupts.c: 106: {
  3705                           ;interrupts.c: 107: masked_digits[i] = aux1[i];
  3706  000972  0EB1               	movlw	low _aux1
  3707  000974  0100               	movlb	0	; () banked
  3708  000976  259A               	addwf	high_isr@i_156& (0+255),w,b
  3709  000978  6ED9               	movwf	fsr2l,c
  3710  00097A  0E00               	movlw	high _aux1
  3711  00097C  0100               	movlb	0	; () banked
  3712  00097E  219B               	addwfc	(high_isr@i_156+1)& (0+255),w,b
  3713  000980  6EDA               	movwf	fsr2h,c
  3714  000982  0EAB               	movlw	low _masked_digits
  3715  000984  0100               	movlb	0	; () banked
  3716  000986  259A               	addwf	high_isr@i_156& (0+255),w,b
  3717  000988  6EE1               	movwf	fsr1l,c
  3718  00098A  0E00               	movlw	high _masked_digits
  3719  00098C  0100               	movlb	0	; () banked
  3720  00098E  219B               	addwfc	(high_isr@i_156+1)& (0+255),w,b
  3721  000990  6EE2               	movwf	fsr1h,c
  3722  000992  CFDF FFE7          	movff	indf2,indf1
  3723                           
  3724                           ; BSR set to: 0
  3725  000996  0100               	movlb	0	; () banked
  3726  000998  4B9A               	infsnz	high_isr@i_156& (0+255),f,b
  3727  00099A  2B9B               	incf	(high_isr@i_156+1)& (0+255),f,b
  3728  00099C  D7DF               	goto	i2l3637
  3729  00099E                     i2l3647:
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;interrupts.c: 108: }
  3733                           ;interrupts.c: 111: if(counter < 10 - 1)
  3734  00099E  0E09               	movlw	9
  3735  0009A0  0100               	movlb	0	; () banked
  3736  0009A2  61A8               	cpfslt	_counter& (0+255),b
  3737  0009A4  D003               	goto	i2l3651
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;interrupts.c: 112: {
  3741                           ;interrupts.c: 113: counter = counter + 1;
  3742  0009A6  0100               	movlb	0	; () banked
  3743  0009A8  29A8               	incf	_counter& (0+255),w,b
  3744  0009AA  D001               	goto	L18
  3745  0009AC                     i2l3651:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;interrupts.c: 115: else
  3749                           ;interrupts.c: 116: {
  3750                           ;interrupts.c: 117: counter = 0;
  3751  0009AC  0E00               	movlw	0
  3752  0009AE                     L18:
  3753  0009AE  0100               	movlb	0	; () banked
  3754  0009B0  6FA8               	movwf	_counter& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;interrupts.c: 118: }
  3758                           ;interrupts.c: 120: char digits[6];
  3759                           ;interrupts.c: 121: int i;
  3760                           ;interrupts.c: 123: for (i=0; i<6;i++)
  3761  0009B2  0E00               	movlw	0
  3762  0009B4  0100               	movlb	0	; () banked
  3763  0009B6  6F9B               	movwf	(high_isr@i_156+1)& (0+255),b
  3764  0009B8  0E00               	movlw	0
  3765  0009BA  6F9A               	movwf	high_isr@i_156& (0+255),b
  3766  0009BC                     i2l3653:
  3767                           
  3768                           ; BSR set to: 0
  3769  0009BC  0100               	movlb	0	; () banked
  3770  0009BE  BF9B               	btfsc	(high_isr@i_156+1)& (0+255),7,b
  3771  0009C0  D008               	goto	i2l77
  3772  0009C2  0100               	movlb	0	; () banked
  3773  0009C4  519B               	movf	(high_isr@i_156+1)& (0+255),w,b
  3774  0009C6  E10B               	bnz	i2l3661
  3775  0009C8  0E06               	movlw	6
  3776  0009CA  0100               	movlb	0	; () banked
  3777  0009CC  5D9A               	subwf	high_isr@i_156& (0+255),w,b
  3778  0009CE  B0D8               	btfsc	status,0,c
  3779  0009D0  D006               	goto	i2l3661
  3780  0009D2                     i2l77:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;interrupts.c: 124: digits[6] = i;
  3784  0009D2  C09A  F095         	movff	high_isr@i_156,high_isr@digits+6
  3785                           
  3786                           ; BSR set to: 0
  3787  0009D6  0100               	movlb	0	; () banked
  3788  0009D8  4B9A               	infsnz	high_isr@i_156& (0+255),f,b
  3789  0009DA  2B9B               	incf	(high_isr@i_156+1)& (0+255),f,b
  3790  0009DC  D7EF               	goto	i2l3653
  3791  0009DE                     i2l3661:
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;interrupts.c: 127: update_point(state,counter);
  3795  0009DE  C0B8  F001         	movff	_state,update_point@state
  3796  0009E2  C0B9  F002         	movff	_state+1,update_point@state+1
  3797  0009E6  C0A8  F003         	movff	_counter,update_point@counter
  3798  0009EA  ECE1  F00A         	call	_update_point	;wreg free
  3799                           
  3800                           ;interrupts.c: 128: update_buzzer(state,counter);
  3801  0009EE  C0B8  F001         	movff	_state,update_buzzer@state
  3802  0009F2  C0B9  F002         	movff	_state+1,update_buzzer@state+1
  3803  0009F6  C0A8  F003         	movff	_counter,update_buzzer@counter
  3804  0009FA  EC05  F00B         	call	_update_buzzer	;wreg free
  3805                           
  3806                           ;interrupts.c: 130: if(counter == 0 )
  3807  0009FE  0100               	movlb	0	; () banked
  3808  000A00  51A8               	movf	_counter& (0+255),w,b
  3809  000A02  A4D8               	btfss	status,2,c
  3810  000A04  D003               	goto	i2l3667
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;interrupts.c: 131: {
  3814                           ;interrupts.c: 132: point_enable();
  3815  000A06  ECB2  F00B         	call	_point_enable	;wreg free
  3816                           
  3817                           ;interrupts.c: 133: }
  3818  000A0A  D00C               	goto	i2l3673
  3819  000A0C                     i2l3667:
  3820                           
  3821                           ;interrupts.c: 134: else if(counter == 5 && state == 0)
  3822  000A0C  0E05               	movlw	5
  3823  000A0E  0100               	movlb	0	; () banked
  3824  000A10  19A8               	xorwf	_counter& (0+255),w,b
  3825  000A12  A4D8               	btfss	status,2,c
  3826  000A14  D007               	goto	i2l3673
  3827                           
  3828                           ; BSR set to: 0
  3829  000A16  0100               	movlb	0	; () banked
  3830  000A18  51B8               	movf	_state& (0+255),w,b
  3831  000A1A  0100               	movlb	0	; () banked
  3832  000A1C  11B9               	iorwf	(_state+1)& (0+255),w,b
  3833  000A1E  B4D8               	btfsc	status,2,c
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;interrupts.c: 135: {
  3837                           ;interrupts.c: 136: point_disable();
  3838  000A20  ECB4  F00B         	call	_point_disable	;wreg free
  3839  000A24                     i2l3673:
  3840                           
  3841                           ;interrupts.c: 137: }
  3842                           ;interrupts.c: 140: if(buzzer_status)
  3843  000A24  0100               	movlb	0	; () banked
  3844  000A26  51AA               	movf	_buzzer_status& (0+255),w,b
  3845  000A28  B4D8               	btfsc	status,2,c
  3846  000A2A  D005               	goto	i2l3679
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;interrupts.c: 141: {
  3850                           ;interrupts.c: 142: if(RB0 == 1)
  3851  000A2C  A081               	btfss	3969,0,c	;volatile
  3852  000A2E  D002               	goto	i2l83
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;interrupts.c: 143: RB0 = 0;
  3856  000A30  9081               	bcf	3969,0,c	;volatile
  3857  000A32  D001               	goto	i2l3679
  3858  000A34                     i2l83:
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;interrupts.c: 144: else
  3862                           ;interrupts.c: 145: RB0 = 1;
  3863  000A34  8081               	bsf	3969,0,c	;volatile
  3864  000A36                     i2l3679:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;interrupts.c: 146: }
  3868                           ;interrupts.c: 147: if(counter >= 5)
  3869  000A36  0E04               	movlw	4
  3870  000A38  0100               	movlb	0	; () banked
  3871  000A3A  65A8               	cpfsgt	_counter& (0+255),b
  3872  000A3C  D026               	goto	i2l3695
  3873  000A3E  D010               	goto	i2l3693
  3874  000A40                     i2l3683:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;interrupts.c: 152: masked_digits[3] = 'V';
  3878  000A40  0E56               	movlw	86
  3879  000A42  0100               	movlb	0	; () banked
  3880  000A44  6FAE               	movwf	(_masked_digits+3)& (0+255),b
  3881                           
  3882                           ;interrupts.c: 153: break;
  3883  000A46  D021               	goto	i2l3695
  3884  000A48                     i2l3685:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;interrupts.c: 155: masked_digits[2] = 'V';
  3888  000A48  0E56               	movlw	86
  3889  000A4A  0100               	movlb	0	; () banked
  3890  000A4C  6FAD               	movwf	(_masked_digits+2)& (0+255),b
  3891                           
  3892                           ;interrupts.c: 156: break;
  3893  000A4E  D01D               	goto	i2l3695
  3894  000A50                     i2l3687:
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;interrupts.c: 158: masked_digits[1] = 'V';
  3898  000A50  0E56               	movlw	86
  3899  000A52  0100               	movlb	0	; () banked
  3900  000A54  6FAC               	movwf	(_masked_digits+1)& (0+255),b
  3901                           
  3902                           ;interrupts.c: 159: break;
  3903  000A56  D019               	goto	i2l3695
  3904  000A58                     i2l3689:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;interrupts.c: 161: masked_digits[0] = 'V';
  3908  000A58  0E56               	movlw	86
  3909  000A5A  0100               	movlb	0	; () banked
  3910  000A5C  6FAB               	movwf	_masked_digits& (0+255),b
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;interrupts.c: 163: }
  3914                           
  3915                           ;interrupts.c: 162: break;
  3916  000A5E  D015               	goto	i2l3695
  3917  000A60                     i2l3693:
  3918                           
  3919                           ; BSR set to: 0
  3920  000A60  C0B8  F015         	movff	_state,??_high_isr
  3921  000A64  C0B9  F016         	movff	_state+1,??_high_isr+1
  3922                           
  3923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3924                           ; Switch size 1, requested type "space"
  3925                           ; Number of cases is 1, Range of values is 0 to 0
  3926                           ; switch strategies available:
  3927                           ; Name         Instructions Cycles
  3928                           ; simple_byte            4     3 (average)
  3929                           ;	Chosen strategy is simple_byte
  3930  000A68  5016               	movf	??_high_isr+1,w,c
  3931  000A6A  0A00               	xorlw	0	; case 0
  3932  000A6C  A4D8               	btfss	status,2,c
  3933  000A6E  D00D               	goto	i2l3695
  3934                           
  3935                           ; BSR set to: 0
  3936                           ; Switch size 1, requested type "space"
  3937                           ; Number of cases is 4, Range of values is 1 to 4
  3938                           ; switch strategies available:
  3939                           ; Name         Instructions Cycles
  3940                           ; simple_byte           13     7 (average)
  3941                           ;	Chosen strategy is simple_byte
  3942  000A70  5015               	movf	??_high_isr,w,c
  3943  000A72  0A01               	xorlw	1	; case 1
  3944  000A74  B4D8               	btfsc	status,2,c
  3945  000A76  D7E4               	goto	i2l3683
  3946  000A78  0A03               	xorlw	3	; case 2
  3947  000A7A  B4D8               	btfsc	status,2,c
  3948  000A7C  D7E5               	goto	i2l3685
  3949  000A7E  0A01               	xorlw	1	; case 3
  3950  000A80  B4D8               	btfsc	status,2,c
  3951  000A82  D7E6               	goto	i2l3687
  3952  000A84  0A07               	xorlw	7	; case 4
  3953  000A86  B4D8               	btfsc	status,2,c
  3954  000A88  D7E7               	goto	i2l3689
  3955  000A8A                     i2l3695:
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;interrupts.c: 164: }
  3959                           ;interrupts.c: 167: put_nums(masked_digits);
  3960  000A8A  0EAB               	movlw	low _masked_digits
  3961  000A8C  6E08               	movwf	put_nums@nums,c
  3962  000A8E  0E00               	movlw	high _masked_digits
  3963  000A90  6E09               	movwf	put_nums@nums+1,c
  3964  000A92  EC46  F00B         	call	_put_nums	;wreg free
  3965                           
  3966                           ;interrupts.c: 168: TMR0IF = 0;
  3967  000A96  94F2               	bcf	intcon,2,c	;volatile
  3968                           
  3969                           ;interrupts.c: 169: }
  3970  000A98  D023               	goto	i2l96
  3971  000A9A                     i2l72:
  3972                           
  3973                           ;interrupts.c: 171: else if (TMR1IF == 1)
  3974  000A9A  A09E               	btfss	3998,0,c	;volatile
  3975  000A9C  D021               	goto	i2l96
  3976                           
  3977                           ;interrupts.c: 172: {
  3978                           ;interrupts.c: 174: if(timer1_counter <99)
  3979  000A9E  0E63               	movlw	99
  3980  000AA0  0100               	movlb	0	; () banked
  3981  000AA2  61A9               	cpfslt	_timer1_counter& (0+255),b
  3982  000AA4  D003               	goto	i2l3703
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;interrupts.c: 175: {
  3986                           ;interrupts.c: 176: timer1_counter += 1;
  3987  000AA6  0100               	movlb	0	; () banked
  3988  000AA8  2BA9               	incf	_timer1_counter& (0+255),f,b
  3989                           
  3990                           ;interrupts.c: 179: }
  3991  000AAA  D019               	goto	i2l3709
  3992  000AAC                     i2l3703:
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;interrupts.c: 181: else
  3996                           ;interrupts.c: 182: {
  3997                           ;interrupts.c: 183: timer1_counter = 0;
  3998  000AAC  0E00               	movlw	0
  3999  000AAE  0100               	movlb	0	; () banked
  4000  000AB0  6FA9               	movwf	_timer1_counter& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;interrupts.c: 184: update_timer1_counter_10(state,&timer1_counter_10);
  4004  000AB2  0EB7               	movlw	low _timer1_counter_10
  4005  000AB4  6E01               	movwf	update_timer1_counter_10@counter,c
  4006  000AB6  0E00               	movlw	high _timer1_counter_10
  4007  000AB8  6E02               	movwf	update_timer1_counter_10@counter+1,c
  4008  000ABA  0100               	movlb	0	; () banked
  4009  000ABC  51B8               	movf	_state& (0+255),w,b
  4010  000ABE  EC8E  F005         	call	_update_timer1_counter_10
  4011                           
  4012                           ;interrupts.c: 187: next = get_next_state(state,0);
  4013  000AC2  C0B8  F00E         	movff	_state,get_next_state@state
  4014  000AC6  C0B9  F00F         	movff	_state+1,get_next_state@state+1
  4015  000ACA  0E00               	movlw	0
  4016  000ACC  6E11               	movwf	get_next_state@code+1,c
  4017  000ACE  0E00               	movlw	0
  4018  000AD0  6E10               	movwf	get_next_state@code,c
  4019  000AD2  EC09  F000         	call	_get_next_state	;wreg free
  4020  000AD6  C00E  F031         	movff	?_get_next_state,_next
  4021  000ADA  C00F  F032         	movff	?_get_next_state+1,_next+1
  4022  000ADE                     i2l3709:
  4023                           
  4024                           ;interrupts.c: 188: }
  4025                           ;interrupts.c: 190: TMR1IF = 0;
  4026  000ADE  909E               	bcf	3998,0,c	;volatile
  4027  000AE0                     i2l96:
  4028  000AE0  C025  FFF5         	movff	??_high_isr+16,tablat
  4029  000AE4  C024  FFF8         	movff	??_high_isr+15,tblptru
  4030  000AE8  C023  FFF7         	movff	??_high_isr+14,tblptrh
  4031  000AEC  C022  FFF6         	movff	??_high_isr+13,tblptrl
  4032  000AF0  C021  FFF4         	movff	??_high_isr+12,prodh
  4033  000AF4  C020  FFF3         	movff	??_high_isr+11,prodl
  4034  000AF8  C01F  FFDA         	movff	??_high_isr+10,fsr2h
  4035  000AFC  C01E  FFD9         	movff	??_high_isr+9,fsr2l
  4036  000B00  C01D  FFE2         	movff	??_high_isr+8,fsr1h
  4037  000B04  C01C  FFE1         	movff	??_high_isr+7,fsr1l
  4038  000B08  C01B  FFEA         	movff	??_high_isr+6,fsr0h
  4039  000B0C  C01A  FFE9         	movff	??_high_isr+5,fsr0l
  4040  000B10  C019  FFFB         	movff	??_high_isr+4,pclatu
  4041  000B14  C018  FFFA         	movff	??_high_isr+3,pclath
  4042  000B18  923A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4043  000B1A  0011               	retfie		f
  4044  000B1C                     __end_of_high_isr:
  4045                           	opt stack 0
  4046                           pclatu	equ	0xFFB
  4047                           pclath	equ	0xFFA
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           prodh	equ	0xFF4
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           intcon2	equ	0xFF1
  4056                           postinc0	equ	0xFEE
  4057                           fsr0h	equ	0xFEA
  4058                           fsr0l	equ	0xFE9
  4059                           wreg	equ	0xFE8
  4060                           indf1	equ	0xFE7
  4061                           fsr1h	equ	0xFE2
  4062                           fsr1l	equ	0xFE1
  4063                           indf2	equ	0xFDF
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function _update_timer1_counter_10 *****************
  4069 ;; Defined at:
  4070 ;;		line 638 in file "user.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  state           1    wreg     unsigned char 
  4073 ;;  counter         2    0[COMRAM] PTR unsigned char 
  4074 ;;		 -> timer1_counter_10(1), 
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;  state           1    3[COMRAM] unsigned char 
  4077 ;; Return value:  Size  Location     Type
  4078 ;;                  1    wreg      void 
  4079 ;; Registers used:
  4080 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4086 ;;      Params:         2       0       0       0       0       0       0       0       0
  4087 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4088 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4089 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4090 ;;Total ram usage:        4 bytes
  4091 ;; Hardware stack levels used:    1
  4092 ;; This function calls:
  4093 ;;		Nothing
  4094 ;; This function is called by:
  4095 ;;		_high_isr
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text22
  4100  000B1C                     __ptext22:
  4101                           	opt stack 0
  4102  000B1C                     _update_timer1_counter_10:
  4103                           	opt stack 25
  4104                           
  4105                           ;incstack = 0
  4106                           ;update_timer1_counter_10@state stored from wreg
  4107  000B1C  6E04               	movwf	update_timer1_counter_10@state,c
  4108                           
  4109                           ;user.c: 640: if(state == 5)
  4110  000B1E  0E05               	movlw	5
  4111  000B20  1804               	xorwf	update_timer1_counter_10@state,w,c
  4112  000B22  A4D8               	btfss	status,2,c
  4113  000B24  D007               	goto	i2l3393
  4114                           
  4115                           ;user.c: 641: *counter = 10;
  4116  000B26  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4117  000B2A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4118  000B2E  0E0A               	movlw	10
  4119  000B30  6EDF               	movwf	indf2,c
  4120  000B32  0012               	return	
  4121  000B34                     i2l3393:
  4122                           
  4123                           ;user.c: 642: else if(state == 11)
  4124  000B34  0E0B               	movlw	11
  4125  000B36  1804               	xorwf	update_timer1_counter_10@state,w,c
  4126  000B38  A4D8               	btfss	status,2,c
  4127  000B3A  D01A               	goto	i2l3403
  4128                           
  4129                           ;user.c: 643: {
  4130                           ;user.c: 644: if(*counter>0)
  4131  000B3C  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4132  000B40  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4133  000B44  50DF               	movf	indf2,w,c
  4134  000B46  B4D8               	btfsc	status,2,c
  4135  000B48  0012               	return	
  4136                           
  4137                           ;user.c: 645: {
  4138                           ;user.c: 646: if (*counter>3)
  4139  000B4A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4140  000B4E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4141  000B52  0E03               	movlw	3
  4142  000B54  64DF               	cpfsgt	indf2,c
  4143  000B56  D006               	goto	i2l3401
  4144                           
  4145                           ;user.c: 647: {
  4146                           ;user.c: 648: *counter-=1;
  4147  000B58  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4148  000B5C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4149  000B60  06DF               	decf	indf2,f,c
  4150                           
  4151                           ;user.c: 649: }
  4152  000B62  0012               	return	
  4153  000B64                     i2l3401:
  4154                           
  4155                           ;user.c: 650: else
  4156                           ;user.c: 651: {
  4157                           ;user.c: 652: *counter-=1;
  4158  000B64  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4159  000B68  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4160  000B6C  06DF               	decf	indf2,f,c
  4161                           
  4162                           ;user.c: 654: }
  4163                           ;user.c: 655: }
  4164                           ;user.c: 658: }
  4165  000B6E  0012               	return	
  4166  000B70                     i2l3403:
  4167                           
  4168                           ;user.c: 659: else if(state == 12)
  4169  000B70  0E0C               	movlw	12
  4170  000B72  1804               	xorwf	update_timer1_counter_10@state,w,c
  4171  000B74  A4D8               	btfss	status,2,c
  4172  000B76  D01B               	goto	i2l3417
  4173                           
  4174                           ;user.c: 660: if(*counter<59)
  4175  000B78  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4176  000B7C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4177  000B80  0E3B               	movlw	59
  4178  000B82  60DF               	cpfslt	indf2,c
  4179  000B84  D006               	goto	i2l3409
  4180                           
  4181                           ;user.c: 661: {
  4182                           ;user.c: 662: *counter+=1;
  4183  000B86  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4184  000B8A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4185  000B8E  2ADF               	incf	indf2,f,c
  4186                           
  4187                           ;user.c: 663: }
  4188  000B90  0012               	return	
  4189  000B92                     i2l3409:
  4190                           
  4191                           ;user.c: 664: else
  4192                           ;user.c: 665: {
  4193                           ;user.c: 666: *counter= 0;
  4194  000B92  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4195  000B96  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4196  000B9A  0E00               	movlw	0
  4197  000B9C  6EDF               	movwf	indf2,c
  4198                           
  4199                           ;user.c: 668: if(timer1_counter_min < 59)
  4200  000B9E  0E3B               	movlw	59
  4201  000BA0  6036               	cpfslt	_timer1_counter_min,c
  4202  000BA2  D002               	goto	i2l3415
  4203                           
  4204                           ;user.c: 669: timer1_counter_min +=1;
  4205  000BA4  2A36               	incf	_timer1_counter_min,f,c
  4206  000BA6  0012               	return	
  4207  000BA8                     i2l3415:
  4208                           
  4209                           ;user.c: 670: else
  4210                           ;user.c: 671: timer1_counter_min = 0;
  4211  000BA8  0E00               	movlw	0
  4212  000BAA  6E36               	movwf	_timer1_counter_min,c
  4213                           
  4214                           ;user.c: 672: }
  4215  000BAC  0012               	return	
  4216  000BAE                     i2l3417:
  4217                           
  4218                           ;user.c: 673: else if(state == 6)
  4219  000BAE  0E06               	movlw	6
  4220  000BB0  1804               	xorwf	update_timer1_counter_10@state,w,c
  4221  000BB2  A4D8               	btfss	status,2,c
  4222  000BB4  D007               	goto	i2l3421
  4223                           
  4224                           ;user.c: 674: *counter = 10;
  4225  000BB6  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4226  000BBA  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4227  000BBE  0E0A               	movlw	10
  4228  000BC0  6EDF               	movwf	indf2,c
  4229  000BC2  0012               	return	
  4230  000BC4                     i2l3421:
  4231                           
  4232                           ;user.c: 675: else if(state == 18)
  4233  000BC4  0E12               	movlw	18
  4234  000BC6  1804               	xorwf	update_timer1_counter_10@state,w,c
  4235  000BC8  A4D8               	btfss	status,2,c
  4236  000BCA  D01A               	goto	i2l3431
  4237                           
  4238                           ;user.c: 676: {
  4239                           ;user.c: 677: if(*counter >0)
  4240  000BCC  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4241  000BD0  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4242  000BD4  50DF               	movf	indf2,w,c
  4243  000BD6  B4D8               	btfsc	status,2,c
  4244  000BD8  0012               	return	
  4245                           
  4246                           ;user.c: 678: {
  4247                           ;user.c: 679: if(*counter>3)
  4248  000BDA  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4249  000BDE  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4250  000BE2  0E03               	movlw	3
  4251  000BE4  64DF               	cpfsgt	indf2,c
  4252  000BE6  D006               	goto	i2l3429
  4253                           
  4254                           ;user.c: 680: {
  4255                           ;user.c: 681: *counter -=1;
  4256  000BE8  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4257  000BEC  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4258  000BF0  06DF               	decf	indf2,f,c
  4259                           
  4260                           ;user.c: 682: }
  4261  000BF2  0012               	return	
  4262  000BF4                     i2l3429:
  4263                           
  4264                           ;user.c: 683: else
  4265                           ;user.c: 684: {
  4266                           ;user.c: 685: *counter -=1;
  4267  000BF4  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4268  000BF8  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4269  000BFC  06DF               	decf	indf2,f,c
  4270                           
  4271                           ;user.c: 687: }
  4272                           ;user.c: 688: }
  4273                           ;user.c: 689: }
  4274  000BFE  0012               	return	
  4275  000C00                     i2l3431:
  4276                           
  4277                           ;user.c: 690: else if(state == 19)
  4278  000C00  0E13               	movlw	19
  4279  000C02  1804               	xorwf	update_timer1_counter_10@state,w,c
  4280  000C04  A4D8               	btfss	status,2,c
  4281  000C06  D018               	goto	i2l3443
  4282                           
  4283                           ;user.c: 691: {
  4284                           ;user.c: 692: if(*counter>0)
  4285  000C08  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4286  000C0C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4287  000C10  50DF               	movf	indf2,w,c
  4288  000C12  B4D8               	btfsc	status,2,c
  4289  000C14  D006               	goto	i2l3437
  4290                           
  4291                           ;user.c: 693: {
  4292                           ;user.c: 694: *counter -=1;
  4293  000C16  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4294  000C1A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4295  000C1E  06DF               	decf	indf2,f,c
  4296                           
  4297                           ;user.c: 695: }
  4298  000C20  0012               	return	
  4299  000C22                     i2l3437:
  4300                           
  4301                           ;user.c: 696: else
  4302                           ;user.c: 697: {
  4303                           ;user.c: 698: if(timer1_counter_min > 0)
  4304  000C22  5036               	movf	_timer1_counter_min,w,c
  4305  000C24  B4D8               	btfsc	status,2,c
  4306  000C26  0012               	return	
  4307                           
  4308                           ;user.c: 699: {
  4309                           ;user.c: 700: timer1_counter_min -=1;
  4310  000C28  0636               	decf	_timer1_counter_min,f,c
  4311                           
  4312                           ;user.c: 701: *counter = 59;
  4313  000C2A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4314  000C2E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4315  000C32  0E3B               	movlw	59
  4316  000C34  6EDF               	movwf	indf2,c
  4317                           
  4318                           ;user.c: 702: }
  4319                           ;user.c: 704: }
  4320                           ;user.c: 705: }
  4321  000C36  0012               	return	
  4322  000C38                     i2l3443:
  4323                           
  4324                           ;user.c: 706: else if(state == 21)
  4325  000C38  0E15               	movlw	21
  4326  000C3A  1804               	xorwf	update_timer1_counter_10@state,w,c
  4327  000C3C  A4D8               	btfss	status,2,c
  4328  000C3E  D00B               	goto	i2l3451
  4329                           
  4330                           ;user.c: 707: {
  4331                           ;user.c: 708: *counter = 0;
  4332  000C40  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4333  000C44  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4334  000C48  0E00               	movlw	0
  4335  000C4A  6EDF               	movwf	indf2,c
  4336                           
  4337                           ;user.c: 709: timer1_speed_cents = 0;
  4338  000C4C  0E00               	movlw	0
  4339  000C4E  6E33               	movwf	_timer1_speed_cents,c
  4340                           
  4341                           ;user.c: 710: timer1_counter_min = 0;
  4342  000C50  0E00               	movlw	0
  4343  000C52  6E36               	movwf	_timer1_counter_min,c
  4344                           
  4345                           ;user.c: 711: }
  4346  000C54  0012               	return	
  4347  000C56                     i2l3451:
  4348                           
  4349                           ;user.c: 712: else if(state == 22)
  4350  000C56  0E16               	movlw	22
  4351  000C58  1804               	xorwf	update_timer1_counter_10@state,w,c
  4352  000C5A  A4D8               	btfss	status,2,c
  4353  000C5C  0012               	return	
  4354                           
  4355                           ;user.c: 713: {
  4356                           ;user.c: 714: if(*counter<59)
  4357  000C5E  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4358  000C62  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4359  000C66  0E3B               	movlw	59
  4360  000C68  60DF               	cpfslt	indf2,c
  4361  000C6A  D006               	goto	i2l3457
  4362                           
  4363                           ;user.c: 715: {
  4364                           ;user.c: 716: *counter +=1;
  4365  000C6C  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4366  000C70  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4367  000C74  2ADF               	incf	indf2,f,c
  4368                           
  4369                           ;user.c: 717: }
  4370  000C76  0012               	return	
  4371  000C78                     i2l3457:
  4372                           
  4373                           ;user.c: 718: else
  4374                           ;user.c: 719: {
  4375                           ;user.c: 720: *counter = 0;
  4376  000C78  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  4377  000C7C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  4378  000C80  0E00               	movlw	0
  4379  000C82  6EDF               	movwf	indf2,c
  4380                           
  4381                           ;user.c: 721: if(timer1_counter_min<59)
  4382  000C84  0E3B               	movlw	59
  4383  000C86  6036               	cpfslt	_timer1_counter_min,c
  4384  000C88  0012               	return	
  4385                           
  4386                           ;user.c: 722: {
  4387                           ;user.c: 723: timer1_counter_min +=1;
  4388  000C8A  2A36               	incf	_timer1_counter_min,f,c
  4389  000C8C  0012               	return	
  4390  000C8E                     __end_of_update_timer1_counter_10:
  4391                           	opt stack 0
  4392                           pclatu	equ	0xFFB
  4393                           pclath	equ	0xFFA
  4394                           tblptru	equ	0xFF8
  4395                           tblptrh	equ	0xFF7
  4396                           tblptrl	equ	0xFF6
  4397                           tablat	equ	0xFF5
  4398                           prodh	equ	0xFF4
  4399                           prodl	equ	0xFF3
  4400                           intcon	equ	0xFF2
  4401                           intcon2	equ	0xFF1
  4402                           postinc0	equ	0xFEE
  4403                           fsr0h	equ	0xFEA
  4404                           fsr0l	equ	0xFE9
  4405                           wreg	equ	0xFE8
  4406                           indf1	equ	0xFE7
  4407                           fsr1h	equ	0xFE2
  4408                           fsr1l	equ	0xFE1
  4409                           indf2	equ	0xFDF
  4410                           fsr2h	equ	0xFDA
  4411                           fsr2l	equ	0xFD9
  4412                           status	equ	0xFD8
  4413                           
  4414 ;; *************** function _update_point *****************
  4415 ;; Defined at:
  4416 ;;		line 571 in file "user.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;  state           2    0[COMRAM] int 
  4419 ;;  counter         1    2[COMRAM] unsigned char 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;		None
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4431 ;;      Params:         3       0       0       0       0       0       0       0       0
  4432 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4434 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4435 ;;Total ram usage:        3 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    1
  4438 ;; This function calls:
  4439 ;;		_point_disable
  4440 ;;		_point_enable
  4441 ;; This function is called by:
  4442 ;;		_high_isr
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text23
  4447  0015C2                     __ptext23:
  4448                           	opt stack 0
  4449  0015C2                     _update_point:
  4450                           	opt stack 24
  4451                           
  4452                           ;user.c: 573: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  4453                           
  4454                           ;incstack = 0
  4455  0015C2  5003               	movf	update_point@counter,w,c
  4456  0015C4  A4D8               	btfss	status,2,c
  4457  0015C6  D011               	goto	i2l3351
  4458  0015C8  5001               	movf	update_point@state,w,c
  4459  0015CA  1002               	iorwf	update_point@state+1,w,c
  4460  0015CC  B4D8               	btfsc	status,2,c
  4461  0015CE  D00A               	goto	i2l3349
  4462  0015D0  0E05               	movlw	5
  4463  0015D2  1801               	xorwf	update_point@state,w,c
  4464  0015D4  1002               	iorwf	update_point@state+1,w,c
  4465  0015D6  B4D8               	btfsc	status,2,c
  4466  0015D8  D005               	goto	i2l3349
  4467  0015DA  0E0C               	movlw	12
  4468  0015DC  1801               	xorwf	update_point@state,w,c
  4469  0015DE  1002               	iorwf	update_point@state+1,w,c
  4470  0015E0  A4D8               	btfss	status,2,c
  4471  0015E2  D003               	goto	i2l3351
  4472  0015E4                     i2l3349:
  4473                           
  4474                           ;user.c: 574: {
  4475                           ;user.c: 575: point_enable();
  4476  0015E4  ECB2  F00B         	call	_point_enable	;wreg free
  4477                           
  4478                           ;user.c: 576: }
  4479  0015E8  0012               	return	
  4480  0015EA                     i2l3351:
  4481                           
  4482                           ;user.c: 577: else if(counter == 5 && state == 0 && state != 5)
  4483  0015EA  0E05               	movlw	5
  4484  0015EC  1803               	xorwf	update_point@counter,w,c
  4485  0015EE  A4D8               	btfss	status,2,c
  4486  0015F0  0012               	return	
  4487  0015F2  5001               	movf	update_point@state,w,c
  4488  0015F4  1002               	iorwf	update_point@state+1,w,c
  4489  0015F6  A4D8               	btfss	status,2,c
  4490  0015F8  0012               	return	
  4491  0015FA  0E05               	movlw	5
  4492  0015FC  1801               	xorwf	update_point@state,w,c
  4493  0015FE  1002               	iorwf	update_point@state+1,w,c
  4494  001600  B4D8               	btfsc	status,2,c
  4495  001602  0012               	return	
  4496                           
  4497                           ;user.c: 578: {
  4498                           ;user.c: 579: point_disable();
  4499  001604  ECB4  F00B         	call	_point_disable	;wreg free
  4500  001608  0012               	return	
  4501  00160A                     __end_of_update_point:
  4502                           	opt stack 0
  4503                           pclatu	equ	0xFFB
  4504                           pclath	equ	0xFFA
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           intcon2	equ	0xFF1
  4513                           postinc0	equ	0xFEE
  4514                           fsr0h	equ	0xFEA
  4515                           fsr0l	equ	0xFE9
  4516                           wreg	equ	0xFE8
  4517                           indf1	equ	0xFE7
  4518                           fsr1h	equ	0xFE2
  4519                           fsr1l	equ	0xFE1
  4520                           indf2	equ	0xFDF
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8
  4524                           
  4525 ;; *************** function _point_enable *****************
  4526 ;; Defined at:
  4527 ;;		line 138 in file "user.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;		None
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;		None
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      void 
  4534 ;; Registers used:
  4535 ;;		None
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4541 ;;      Params:         0       0       0       0       0       0       0       0       0
  4542 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4544 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4545 ;;Total ram usage:        0 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; This function calls:
  4548 ;;		Nothing
  4549 ;; This function is called by:
  4550 ;;		_high_isr
  4551 ;;		_update_point
  4552 ;;		_point_toggle
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text24
  4557  001764                     __ptext24:
  4558                           	opt stack 0
  4559  001764                     _point_enable:
  4560                           	opt stack 24
  4561                           
  4562                           ;user.c: 140: RB1 = 1;
  4563                           
  4564                           ;incstack = 0
  4565  001764  8281               	bsf	3969,1,c	;volatile
  4566  001766  0012               	return		;funcret
  4567  001768                     __end_of_point_enable:
  4568                           	opt stack 0
  4569                           pclatu	equ	0xFFB
  4570                           pclath	equ	0xFFA
  4571                           tblptru	equ	0xFF8
  4572                           tblptrh	equ	0xFF7
  4573                           tblptrl	equ	0xFF6
  4574                           tablat	equ	0xFF5
  4575                           prodh	equ	0xFF4
  4576                           prodl	equ	0xFF3
  4577                           intcon	equ	0xFF2
  4578                           intcon2	equ	0xFF1
  4579                           postinc0	equ	0xFEE
  4580                           fsr0h	equ	0xFEA
  4581                           fsr0l	equ	0xFE9
  4582                           wreg	equ	0xFE8
  4583                           indf1	equ	0xFE7
  4584                           fsr1h	equ	0xFE2
  4585                           fsr1l	equ	0xFE1
  4586                           indf2	equ	0xFDF
  4587                           fsr2h	equ	0xFDA
  4588                           fsr2l	equ	0xFD9
  4589                           status	equ	0xFD8
  4590                           
  4591 ;; *************** function _point_disable *****************
  4592 ;; Defined at:
  4593 ;;		line 144 in file "user.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;		None
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		None
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4607 ;;      Params:         0       0       0       0       0       0       0       0       0
  4608 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4609 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4610 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4611 ;;Total ram usage:        0 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; This function calls:
  4614 ;;		Nothing
  4615 ;; This function is called by:
  4616 ;;		_high_isr
  4617 ;;		_update_point
  4618 ;;		_point_toggle
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text25
  4623  001768                     __ptext25:
  4624                           	opt stack 0
  4625  001768                     _point_disable:
  4626                           	opt stack 24
  4627                           
  4628                           ;user.c: 146: RB1 = 0;
  4629                           
  4630                           ;incstack = 0
  4631  001768  9281               	bcf	3969,1,c	;volatile
  4632  00176A  0012               	return		;funcret
  4633  00176C                     __end_of_point_disable:
  4634                           	opt stack 0
  4635                           pclatu	equ	0xFFB
  4636                           pclath	equ	0xFFA
  4637                           tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           intcon	equ	0xFF2
  4644                           intcon2	equ	0xFF1
  4645                           postinc0	equ	0xFEE
  4646                           fsr0h	equ	0xFEA
  4647                           fsr0l	equ	0xFE9
  4648                           wreg	equ	0xFE8
  4649                           indf1	equ	0xFE7
  4650                           fsr1h	equ	0xFE2
  4651                           fsr1l	equ	0xFE1
  4652                           indf2	equ	0xFDF
  4653                           fsr2h	equ	0xFDA
  4654                           fsr2l	equ	0xFD9
  4655                           status	equ	0xFD8
  4656                           
  4657 ;; *************** function _update_buzzer *****************
  4658 ;; Defined at:
  4659 ;;		line 584 in file "user.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;  state           2    0[COMRAM] int 
  4662 ;;  counter         1    2[COMRAM] unsigned char 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;		None
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      void 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2, status,0, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4674 ;;      Params:         3       0       0       0       0       0       0       0       0
  4675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4677 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4678 ;;Total ram usage:        3 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    1
  4681 ;; This function calls:
  4682 ;;		_buzzer_enable
  4683 ;;		i2_buzzer_disable
  4684 ;; This function is called by:
  4685 ;;		_high_isr
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text26
  4690  00160A                     __ptext26:
  4691                           	opt stack 0
  4692  00160A                     _update_buzzer:
  4693                           	opt stack 24
  4694                           
  4695                           ;user.c: 586: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  4696                           
  4697                           ;incstack = 0
  4698  00160A  5003               	movf	update_buzzer@counter,w,c
  4699  00160C  A4D8               	btfss	status,2,c
  4700  00160E  D011               	goto	i2l3369
  4701  001610  5001               	movf	update_buzzer@state,w,c
  4702  001612  1002               	iorwf	update_buzzer@state+1,w,c
  4703  001614  B4D8               	btfsc	status,2,c
  4704  001616  D00A               	goto	i2l3367
  4705  001618  0E05               	movlw	5
  4706  00161A  1801               	xorwf	update_buzzer@state,w,c
  4707  00161C  1002               	iorwf	update_buzzer@state+1,w,c
  4708  00161E  B4D8               	btfsc	status,2,c
  4709  001620  D005               	goto	i2l3367
  4710  001622  0E0C               	movlw	12
  4711  001624  1801               	xorwf	update_buzzer@state,w,c
  4712  001626  1002               	iorwf	update_buzzer@state+1,w,c
  4713  001628  A4D8               	btfss	status,2,c
  4714  00162A  D003               	goto	i2l3369
  4715  00162C                     i2l3367:
  4716                           
  4717                           ;user.c: 587: {
  4718                           ;user.c: 588: buzzer_enable();
  4719  00162C  EC9E  F00B         	call	_buzzer_enable	;wreg free
  4720                           
  4721                           ;user.c: 589: }
  4722  001630  0012               	return	
  4723  001632                     i2l3369:
  4724                           
  4725                           ;user.c: 590: else if(counter == 5 && state == 0 && state != 5)
  4726  001632  0E05               	movlw	5
  4727  001634  1803               	xorwf	update_buzzer@counter,w,c
  4728  001636  A4D8               	btfss	status,2,c
  4729  001638  0012               	return	
  4730  00163A  5001               	movf	update_buzzer@state,w,c
  4731  00163C  1002               	iorwf	update_buzzer@state+1,w,c
  4732  00163E  A4D8               	btfss	status,2,c
  4733  001640  0012               	return	
  4734  001642  0E05               	movlw	5
  4735  001644  1801               	xorwf	update_buzzer@state,w,c
  4736  001646  1002               	iorwf	update_buzzer@state+1,w,c
  4737  001648  B4D8               	btfsc	status,2,c
  4738  00164A  0012               	return	
  4739                           
  4740                           ;user.c: 591: {
  4741                           ;user.c: 592: buzzer_disable();
  4742  00164C  EC9A  F00B         	call	i2_buzzer_disable	;wreg free
  4743  001650  0012               	return	
  4744  001652                     __end_of_update_buzzer:
  4745                           	opt stack 0
  4746                           pclatu	equ	0xFFB
  4747                           pclath	equ	0xFFA
  4748                           tblptru	equ	0xFF8
  4749                           tblptrh	equ	0xFF7
  4750                           tblptrl	equ	0xFF6
  4751                           tablat	equ	0xFF5
  4752                           prodh	equ	0xFF4
  4753                           prodl	equ	0xFF3
  4754                           intcon	equ	0xFF2
  4755                           intcon2	equ	0xFF1
  4756                           postinc0	equ	0xFEE
  4757                           fsr0h	equ	0xFEA
  4758                           fsr0l	equ	0xFE9
  4759                           wreg	equ	0xFE8
  4760                           indf1	equ	0xFE7
  4761                           fsr1h	equ	0xFE2
  4762                           fsr1l	equ	0xFE1
  4763                           indf2	equ	0xFDF
  4764                           fsr2h	equ	0xFDA
  4765                           fsr2l	equ	0xFD9
  4766                           status	equ	0xFD8
  4767                           
  4768 ;; *************** function i2_buzzer_disable *****************
  4769 ;; Defined at:
  4770 ;;		line 164 in file "user.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4784 ;;      Params:         0       0       0       0       0       0       0       0       0
  4785 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4787 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4788 ;;Total ram usage:        0 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; This function calls:
  4791 ;;		Nothing
  4792 ;; This function is called by:
  4793 ;;		_update_buzzer
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text27
  4798  001734                     __ptext27:
  4799                           	opt stack 0
  4800  001734                     i2_buzzer_disable:
  4801                           	opt stack 24
  4802                           
  4803                           ;user.c: 166: buzzer_status= 0;
  4804                           
  4805                           ;incstack = 0
  4806  001734  0E00               	movlw	0
  4807  001736  0100               	movlb	0	; () banked
  4808  001738  6FAA               	movwf	_buzzer_status& (0+255),b
  4809                           
  4810                           ; BSR set to: 0
  4811  00173A  0012               	return		;funcret
  4812  00173C                     __end_ofi2_buzzer_disable:
  4813                           	opt stack 0
  4814                           pclatu	equ	0xFFB
  4815                           pclath	equ	0xFFA
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           intcon2	equ	0xFF1
  4824                           postinc0	equ	0xFEE
  4825                           fsr0h	equ	0xFEA
  4826                           fsr0l	equ	0xFE9
  4827                           wreg	equ	0xFE8
  4828                           indf1	equ	0xFE7
  4829                           fsr1h	equ	0xFE2
  4830                           fsr1l	equ	0xFE1
  4831                           indf2	equ	0xFDF
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function _buzzer_enable *****************
  4837 ;; Defined at:
  4838 ;;		line 159 in file "user.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4852 ;;      Params:         0       0       0       0       0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4855 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4856 ;;Total ram usage:        0 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; This function calls:
  4859 ;;		Nothing
  4860 ;; This function is called by:
  4861 ;;		_update_buzzer
  4862 ;;		_buzzer_toggle
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text28
  4867  00173C                     __ptext28:
  4868                           	opt stack 0
  4869  00173C                     _buzzer_enable:
  4870                           	opt stack 24
  4871                           
  4872                           ;user.c: 161: buzzer_status= 1;
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;incstack = 0
  4876  00173C  0E01               	movlw	1
  4877  00173E  0100               	movlb	0	; () banked
  4878  001740  6FAA               	movwf	_buzzer_status& (0+255),b
  4879                           
  4880                           ; BSR set to: 0
  4881  001742  0012               	return		;funcret
  4882  001744                     __end_of_buzzer_enable:
  4883                           	opt stack 0
  4884                           pclatu	equ	0xFFB
  4885                           pclath	equ	0xFFA
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           intcon2	equ	0xFF1
  4894                           postinc0	equ	0xFEE
  4895                           fsr0h	equ	0xFEA
  4896                           fsr0l	equ	0xFE9
  4897                           wreg	equ	0xFE8
  4898                           indf1	equ	0xFE7
  4899                           fsr1h	equ	0xFE2
  4900                           fsr1l	equ	0xFE1
  4901                           indf2	equ	0xFDF
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _put_nums *****************
  4907 ;; Defined at:
  4908 ;;		line 93 in file "user.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  nums            2    7[COMRAM] PTR unsigned char 
  4911 ;;		 -> masked_digits(6), 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;  i               2    9[COMRAM] int 
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      void 
  4916 ;; Registers used:
  4917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4923 ;;      Params:         2       0       0       0       0       0       0       0       0
  4924 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4926 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4927 ;;Total ram usage:        4 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    1
  4930 ;; This function calls:
  4931 ;;		_get_num
  4932 ;;		_put_num
  4933 ;; This function is called by:
  4934 ;;		_high_isr
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text29
  4939  00168C                     __ptext29:
  4940                           	opt stack 0
  4941  00168C                     _put_nums:
  4942                           	opt stack 24
  4943                           
  4944                           ;user.c: 95: int i;
  4945                           ;user.c: 96: for(i=0;i<6;i++)
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;incstack = 0
  4949  00168C  0E00               	movlw	0
  4950  00168E  6E0B               	movwf	put_nums@i+1,c
  4951  001690  0E00               	movlw	0
  4952  001692  6E0A               	movwf	put_nums@i,c
  4953  001694                     i2l3379:
  4954  001694  BE0B               	btfsc	put_nums@i+1,7,c
  4955  001696  D006               	goto	i2l3383
  4956  001698  500B               	movf	put_nums@i+1,w,c
  4957  00169A  E112               	bnz	i2l294
  4958  00169C  0E06               	movlw	6
  4959  00169E  5C0A               	subwf	put_nums@i,w,c
  4960  0016A0  B0D8               	btfsc	status,0,c
  4961  0016A2  0012               	return	
  4962  0016A4                     i2l3383:
  4963                           
  4964                           ;user.c: 97: {
  4965                           ;user.c: 98: put_num(get_num(nums[i]));
  4966  0016A4  500A               	movf	put_nums@i,w,c
  4967  0016A6  2408               	addwf	put_nums@nums,w,c
  4968  0016A8  6ED9               	movwf	fsr2l,c
  4969  0016AA  500B               	movf	put_nums@i+1,w,c
  4970  0016AC  2009               	addwfc	put_nums@nums+1,w,c
  4971  0016AE  6EDA               	movwf	fsr2h,c
  4972  0016B0  50DF               	movf	indf2,w,c
  4973  0016B2  EC77  F007         	call	_get_num
  4974  0016B6  EC10  F00A         	call	_put_num
  4975  0016BA  4A0A               	infsnz	put_nums@i,f,c
  4976  0016BC  2A0B               	incf	put_nums@i+1,f,c
  4977  0016BE  D7EA               	goto	i2l3379
  4978  0016C0                     i2l294:
  4979  0016C0  0012               	return		;funcret
  4980  0016C2                     __end_of_put_nums:
  4981                           	opt stack 0
  4982                           pclatu	equ	0xFFB
  4983                           pclath	equ	0xFFA
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           prodh	equ	0xFF4
  4989                           prodl	equ	0xFF3
  4990                           intcon	equ	0xFF2
  4991                           intcon2	equ	0xFF1
  4992                           postinc0	equ	0xFEE
  4993                           fsr0h	equ	0xFEA
  4994                           fsr0l	equ	0xFE9
  4995                           wreg	equ	0xFE8
  4996                           indf1	equ	0xFE7
  4997                           fsr1h	equ	0xFE2
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _put_num *****************
  5005 ;; Defined at:
  5006 ;;		line 80 in file "user.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  num             1    wreg     unsigned char 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  num             1    2[COMRAM] unsigned char 
  5011 ;;  i               2    5[COMRAM] int 
  5012 ;;  mask            1    3[COMRAM] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5022 ;;      Params:         0       0       0       0       0       0       0       0       0
  5023 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5024 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5025 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5026 ;;Total ram usage:        7 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_put_nums
  5032 ;;		_put_nums_individual
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text30
  5037  001420                     __ptext30:
  5038                           	opt stack 0
  5039  001420                     _put_num:
  5040                           	opt stack 24
  5041                           
  5042                           ;incstack = 0
  5043                           ;put_num@num stored from wreg
  5044  001420  6E03               	movwf	put_num@num,c
  5045                           
  5046                           ;user.c: 82: char mask = 0x01;
  5047  001422  0E01               	movlw	1
  5048  001424  6E04               	movwf	put_num@mask,c
  5049                           
  5050                           ;user.c: 83: int i;
  5051                           ;user.c: 84: for(i= 0; i<8; i++)
  5052  001426  0E00               	movlw	0
  5053  001428  6E07               	movwf	put_num@i+1,c
  5054  00142A  0E00               	movlw	0
  5055  00142C  6E06               	movwf	put_num@i,c
  5056  00142E                     i2l2865:
  5057  00142E  BE07               	btfsc	put_num@i+1,7,c
  5058  001430  D006               	goto	i2l2869
  5059  001432  5007               	movf	put_num@i+1,w,c
  5060  001434  E120               	bnz	i2l289
  5061  001436  0E08               	movlw	8
  5062  001438  5C06               	subwf	put_num@i,w,c
  5063  00143A  B0D8               	btfsc	status,0,c
  5064  00143C  0012               	return	
  5065  00143E                     i2l2869:
  5066                           
  5067                           ;user.c: 85: {
  5068                           ;user.c: 86: RB3 = num>>i & mask;
  5069  00143E  0E00               	movlw	0
  5070  001440  6E05               	movwf	_put_num$939,c
  5071  001442  C006  F001         	movff	put_num@i,??_put_num
  5072  001446  C003  F002         	movff	put_num@num,??_put_num+1
  5073  00144A  2A01               	incf	??_put_num,f,c
  5074  00144C  D002               	goto	i2u248_44
  5075  00144E                     i2u248_45:
  5076  00144E  90D8               	bcf	status,0,c
  5077  001450  3202               	rrcf	??_put_num+1,f,c
  5078  001452                     i2u248_44:
  5079  001452  2E01               	decfsz	??_put_num,f,c
  5080  001454  D7FC               	goto	i2u248_45
  5081  001456  3002               	rrcf	??_put_num+1,w,c
  5082  001458  B0D8               	btfsc	status,0,c
  5083  00145A  A004               	btfss	put_num@mask,0,c
  5084  00145C  D002               	goto	i2l2877
  5085  00145E  0E01               	movlw	1
  5086  001460  6E05               	movwf	_put_num$939,c
  5087  001462                     i2l2877:
  5088  001462  B005               	btfsc	_put_num$939,0,c
  5089  001464  D002               	bra	i2u251_45
  5090  001466  9681               	bcf	3969,3,c	;volatile
  5091  001468  D001               	bra	i2u251_46
  5092  00146A                     i2u251_45:
  5093  00146A  8681               	bsf	3969,3,c	;volatile
  5094  00146C                     i2u251_46:
  5095                           
  5096                           ;user.c: 87: RB4 = 0;
  5097  00146C  9881               	bcf	3969,4,c	;volatile
  5098                           
  5099                           ;user.c: 88: RB4 = 1;
  5100  00146E  8881               	bsf	3969,4,c	;volatile
  5101  001470  4A06               	infsnz	put_num@i,f,c
  5102  001472  2A07               	incf	put_num@i+1,f,c
  5103  001474  D7DC               	goto	i2l2865
  5104  001476                     i2l289:
  5105  001476  0012               	return		;funcret
  5106  001478                     __end_of_put_num:
  5107                           	opt stack 0
  5108                           pclatu	equ	0xFFB
  5109                           pclath	equ	0xFFA
  5110                           tblptru	equ	0xFF8
  5111                           tblptrh	equ	0xFF7
  5112                           tblptrl	equ	0xFF6
  5113                           tablat	equ	0xFF5
  5114                           prodh	equ	0xFF4
  5115                           prodl	equ	0xFF3
  5116                           intcon	equ	0xFF2
  5117                           intcon2	equ	0xFF1
  5118                           postinc0	equ	0xFEE
  5119                           fsr0h	equ	0xFEA
  5120                           fsr0l	equ	0xFE9
  5121                           wreg	equ	0xFE8
  5122                           indf1	equ	0xFE7
  5123                           fsr1h	equ	0xFE2
  5124                           fsr1l	equ	0xFE1
  5125                           indf2	equ	0xFDF
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function _get_num *****************
  5131 ;; Defined at:
  5132 ;;		line 113 in file "user.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;  num             1    wreg     unsigned char 
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;  num             1    0[COMRAM] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      unsigned char 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0
  5147 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5149 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5150 ;;Total ram usage:        1 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_put_nums
  5156 ;;		_put_nums_individual
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text31
  5161  000EEE                     __ptext31:
  5162                           	opt stack 0
  5163  000EEE                     _get_num:
  5164                           	opt stack 24
  5165                           
  5166                           ;incstack = 0
  5167                           ;get_num@num stored from wreg
  5168  000EEE  6E01               	movwf	get_num@num,c
  5169                           
  5170                           ;user.c: 115: switch(num)
  5171  000EF0  D022               	goto	i2l2959
  5172  000EF2                     i2l2889:
  5173  000EF2  0E30               	movlw	48
  5174  000EF4  0012               	return	
  5175  000EF6                     i2l2893:
  5176  000EF6  0E6D               	movlw	109
  5177  000EF8  0012               	return	
  5178  000EFA                     i2l2897:
  5179  000EFA  0E79               	movlw	121
  5180  000EFC  0012               	return	
  5181  000EFE                     i2l2901:
  5182  000EFE  0E33               	movlw	51
  5183  000F00  0012               	return	
  5184  000F02                     i2l2905:
  5185  000F02  0E5B               	movlw	91
  5186  000F04  0012               	return	
  5187  000F06                     i2l2909:
  5188  000F06  0E5F               	movlw	95
  5189  000F08  0012               	return	
  5190  000F0A                     i2l2913:
  5191  000F0A  0E70               	movlw	112
  5192  000F0C  0012               	return	
  5193  000F0E                     i2l2917:
  5194  000F0E  0E7F               	movlw	127
  5195  000F10  0012               	return	
  5196  000F12                     i2l2921:
  5197  000F12  0E73               	movlw	115
  5198  000F14  0012               	return	
  5199  000F16                     i2l2925:
  5200  000F16  0E7E               	movlw	126
  5201  000F18  0012               	return	
  5202  000F1A                     i2l2929:
  5203  000F1A  0E3E               	movlw	62
  5204  000F1C  0012               	return	
  5205  000F1E                     i2l2933:
  5206  000F1E  0E67               	movlw	103
  5207  000F20  0012               	return	
  5208  000F22                     i2l2937:
  5209  000F22  0E37               	movlw	55
  5210  000F24  0012               	return	
  5211  000F26                     i2l2941:
  5212  000F26  0E3D               	movlw	61
  5213  000F28  0012               	return	
  5214  000F2A                     i2l2945:
  5215  000F2A  0E15               	movlw	21
  5216  000F2C  0012               	return	
  5217  000F2E                     i2l2949:
  5218  000F2E  0E00               	movlw	0
  5219  000F30  0012               	return	
  5220  000F32                     i2l2953:
  5221  000F32  0E7F               	movlw	127
  5222                           
  5223                           ;user.c: 134: }
  5224  000F34  0012               	return	
  5225  000F36                     i2l2959:
  5226  000F36  5001               	movf	get_num@num,w,c
  5227                           
  5228                           ; Switch size 1, requested type "space"
  5229                           ; Number of cases is 16, Range of values is 0 to 86
  5230                           ; switch strategies available:
  5231                           ; Name         Instructions Cycles
  5232                           ; simple_byte           49    25 (average)
  5233                           ;	Chosen strategy is simple_byte
  5234  000F38  0A00               	xorlw	0	; case 0
  5235  000F3A  B4D8               	btfsc	status,2,c
  5236  000F3C  D7EC               	goto	i2l2925
  5237  000F3E  0A01               	xorlw	1	; case 1
  5238  000F40  B4D8               	btfsc	status,2,c
  5239  000F42  D7D7               	goto	i2l2889
  5240  000F44  0A03               	xorlw	3	; case 2
  5241  000F46  B4D8               	btfsc	status,2,c
  5242  000F48  D7D6               	goto	i2l2893
  5243  000F4A  0A01               	xorlw	1	; case 3
  5244  000F4C  B4D8               	btfsc	status,2,c
  5245  000F4E  D7D5               	goto	i2l2897
  5246  000F50  0A07               	xorlw	7	; case 4
  5247  000F52  B4D8               	btfsc	status,2,c
  5248  000F54  D7D4               	goto	i2l2901
  5249  000F56  0A01               	xorlw	1	; case 5
  5250  000F58  B4D8               	btfsc	status,2,c
  5251  000F5A  D7D3               	goto	i2l2905
  5252  000F5C  0A03               	xorlw	3	; case 6
  5253  000F5E  B4D8               	btfsc	status,2,c
  5254  000F60  D7D2               	goto	i2l2909
  5255  000F62  0A01               	xorlw	1	; case 7
  5256  000F64  B4D8               	btfsc	status,2,c
  5257  000F66  D7D1               	goto	i2l2913
  5258  000F68  0A0F               	xorlw	15	; case 8
  5259  000F6A  B4D8               	btfsc	status,2,c
  5260  000F6C  D7D0               	goto	i2l2917
  5261  000F6E  0A01               	xorlw	1	; case 9
  5262  000F70  B4D8               	btfsc	status,2,c
  5263  000F72  D7CF               	goto	i2l2921
  5264  000F74  0A4D               	xorlw	77	; case 68
  5265  000F76  B4D8               	btfsc	status,2,c
  5266  000F78  D7D6               	goto	i2l2941
  5267  000F7A  0A0C               	xorlw	12	; case 72
  5268  000F7C  B4D8               	btfsc	status,2,c
  5269  000F7E  D7D1               	goto	i2l2937
  5270  000F80  0A06               	xorlw	6	; case 78
  5271  000F82  B4D8               	btfsc	status,2,c
  5272  000F84  D7D2               	goto	i2l2945
  5273  000F86  0A1E               	xorlw	30	; case 80
  5274  000F88  B4D8               	btfsc	status,2,c
  5275  000F8A  D7C9               	goto	i2l2933
  5276  000F8C  0A05               	xorlw	5	; case 85
  5277  000F8E  B4D8               	btfsc	status,2,c
  5278  000F90  D7C4               	goto	i2l2929
  5279  000F92  0A03               	xorlw	3	; case 86
  5280  000F94  B4D8               	btfsc	status,2,c
  5281  000F96  D7CB               	goto	i2l2949
  5282  000F98  D7CC               	goto	i2l2953
  5283  000F9A                     __end_of_get_num:
  5284                           	opt stack 0
  5285                           pclatu	equ	0xFFB
  5286                           pclath	equ	0xFFA
  5287                           tblptru	equ	0xFF8
  5288                           tblptrh	equ	0xFF7
  5289                           tblptrl	equ	0xFF6
  5290                           tablat	equ	0xFF5
  5291                           prodh	equ	0xFF4
  5292                           prodl	equ	0xFF3
  5293                           intcon	equ	0xFF2
  5294                           intcon2	equ	0xFF1
  5295                           postinc0	equ	0xFEE
  5296                           fsr0h	equ	0xFEA
  5297                           fsr0l	equ	0xFE9
  5298                           wreg	equ	0xFE8
  5299                           indf1	equ	0xFE7
  5300                           fsr1h	equ	0xFE2
  5301                           fsr1l	equ	0xFE1
  5302                           indf2	equ	0xFDF
  5303                           fsr2h	equ	0xFDA
  5304                           fsr2l	equ	0xFD9
  5305                           status	equ	0xFD8
  5306                           
  5307 ;; *************** function _ir_get_human_code *****************
  5308 ;; Defined at:
  5309 ;;		line 507 in file "user.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;  code            2    0[COMRAM] int 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  human_read_c    1    4[COMRAM] unsigned char 
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      unsigned char 
  5316 ;; Registers used:
  5317 ;;		wreg, status,2, status,0
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5323 ;;      Params:         2       0       0       0       0       0       0       0       0
  5324 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5325 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5326 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5327 ;;Total ram usage:        5 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		_high_isr
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           	psect	text32
  5337  000DC0                     __ptext32:
  5338                           	opt stack 0
  5339  000DC0                     _ir_get_human_code:
  5340                           	opt stack 25
  5341                           
  5342                           ;user.c: 509: char human_read_code;
  5343                           ;user.c: 510: switch(code)
  5344                           
  5345                           ;incstack = 0
  5346  000DC0  D035               	goto	i2l3079
  5347  000DC2                     i2l3039:
  5348                           
  5349                           ;user.c: 513: human_read_code = 10;
  5350  000DC2  0E0A               	movlw	10
  5351  000DC4  6E05               	movwf	ir_get_human_code@human_read_code,c
  5352                           
  5353                           ;user.c: 514: break;
  5354  000DC6  0012               	return	
  5355  000DC8                     i2l3041:
  5356                           
  5357                           ;user.c: 516: human_read_code = 11;
  5358  000DC8  0E0B               	movlw	11
  5359  000DCA  6E05               	movwf	ir_get_human_code@human_read_code,c
  5360                           
  5361                           ;user.c: 517: break;
  5362  000DCC  0012               	return	
  5363  000DCE                     i2l3043:
  5364                           
  5365                           ;user.c: 519: human_read_code = 12;
  5366  000DCE  0E0C               	movlw	12
  5367  000DD0  6E05               	movwf	ir_get_human_code@human_read_code,c
  5368                           
  5369                           ;user.c: 520: break;
  5370  000DD2  0012               	return	
  5371  000DD4                     i2l3045:
  5372                           
  5373                           ;user.c: 522: human_read_code = 13;
  5374  000DD4  0E0D               	movlw	13
  5375  000DD6  6E05               	movwf	ir_get_human_code@human_read_code,c
  5376                           
  5377                           ;user.c: 523: break;
  5378  000DD8  0012               	return	
  5379  000DDA                     i2l3047:
  5380                           
  5381                           ;user.c: 525: human_read_code = 14;
  5382  000DDA  0E0E               	movlw	14
  5383  000DDC  6E05               	movwf	ir_get_human_code@human_read_code,c
  5384                           
  5385                           ;user.c: 526: break;
  5386  000DDE  0012               	return	
  5387  000DE0                     i2l3049:
  5388                           
  5389                           ;user.c: 528: human_read_code = 1;
  5390  000DE0  0E01               	movlw	1
  5391  000DE2  6E05               	movwf	ir_get_human_code@human_read_code,c
  5392                           
  5393                           ;user.c: 529: break;
  5394  000DE4  0012               	return	
  5395  000DE6                     i2l3051:
  5396                           
  5397                           ;user.c: 531: human_read_code = 2;
  5398  000DE6  0E02               	movlw	2
  5399  000DE8  6E05               	movwf	ir_get_human_code@human_read_code,c
  5400                           
  5401                           ;user.c: 532: break;
  5402  000DEA  0012               	return	
  5403  000DEC                     i2l3053:
  5404                           
  5405                           ;user.c: 534: human_read_code = 3;
  5406  000DEC  0E03               	movlw	3
  5407  000DEE  6E05               	movwf	ir_get_human_code@human_read_code,c
  5408                           
  5409                           ;user.c: 535: break;
  5410  000DF0  0012               	return	
  5411  000DF2                     i2l3055:
  5412                           
  5413                           ;user.c: 537: human_read_code = 4;
  5414  000DF2  0E04               	movlw	4
  5415  000DF4  6E05               	movwf	ir_get_human_code@human_read_code,c
  5416                           
  5417                           ;user.c: 538: break;
  5418  000DF6  0012               	return	
  5419  000DF8                     i2l3057:
  5420                           
  5421                           ;user.c: 540: human_read_code = 5;
  5422  000DF8  0E05               	movlw	5
  5423  000DFA  6E05               	movwf	ir_get_human_code@human_read_code,c
  5424                           
  5425                           ;user.c: 541: break;
  5426  000DFC  0012               	return	
  5427  000DFE                     i2l3059:
  5428                           
  5429                           ;user.c: 543: human_read_code = 6;
  5430  000DFE  0E06               	movlw	6
  5431  000E00  6E05               	movwf	ir_get_human_code@human_read_code,c
  5432                           
  5433                           ;user.c: 544: break;
  5434  000E02  0012               	return	
  5435  000E04                     i2l3061:
  5436                           
  5437                           ;user.c: 546: human_read_code = 7;
  5438  000E04  0E07               	movlw	7
  5439  000E06  6E05               	movwf	ir_get_human_code@human_read_code,c
  5440                           
  5441                           ;user.c: 547: break;
  5442  000E08  0012               	return	
  5443  000E0A                     i2l3063:
  5444                           
  5445                           ;user.c: 549: human_read_code = 8;
  5446  000E0A  0E08               	movlw	8
  5447  000E0C  6E05               	movwf	ir_get_human_code@human_read_code,c
  5448                           
  5449                           ;user.c: 550: break;
  5450  000E0E  0012               	return	
  5451  000E10                     i2l3065:
  5452                           
  5453                           ;user.c: 552: human_read_code = 9;
  5454  000E10  0E09               	movlw	9
  5455  000E12  6E05               	movwf	ir_get_human_code@human_read_code,c
  5456                           
  5457                           ;user.c: 553: break;
  5458  000E14  0012               	return	
  5459  000E16                     i2l3067:
  5460                           
  5461                           ;user.c: 555: human_read_code = 0;
  5462  000E16  0E00               	movlw	0
  5463  000E18  6E05               	movwf	ir_get_human_code@human_read_code,c
  5464                           
  5465                           ;user.c: 556: break;
  5466  000E1A  0012               	return	
  5467  000E1C                     i2l3069:
  5468                           
  5469                           ;user.c: 558: human_read_code = 15;
  5470  000E1C  0E0F               	movlw	15
  5471  000E1E  6E05               	movwf	ir_get_human_code@human_read_code,c
  5472                           
  5473                           ;user.c: 559: break;
  5474  000E20  0012               	return	
  5475  000E22                     i2l3071:
  5476                           
  5477                           ;user.c: 561: human_read_code = 16;
  5478  000E22  0E10               	movlw	16
  5479  000E24  6E05               	movwf	ir_get_human_code@human_read_code,c
  5480                           
  5481                           ;user.c: 562: break;
  5482  000E26  0012               	return	
  5483  000E28                     i2l3073:
  5484                           
  5485                           ;user.c: 564: return -1;
  5486  000E28  0EFF               	movlw	255
  5487                           
  5488                           ;user.c: 565: }
  5489  000E2A  0012               	return	
  5490  000E2C                     i2l3079:
  5491  000E2C  C001  F003         	movff	ir_get_human_code@code,??_ir_get_human_code
  5492  000E30  C002  F004         	movff	ir_get_human_code@code+1,??_ir_get_human_code+1
  5493                           
  5494                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 8 sub-sw
      +                          itches
  5495                           ; Switch size 1, requested type "space"
  5496                           ; Number of cases is 8, Range of values is 170 to 238
  5497                           ; switch strategies available:
  5498                           ; Name         Instructions Cycles
  5499                           ; simple_byte           25    13 (average)
  5500                           ;	Chosen strategy is simple_byte
  5501  000E34  5004               	movf	??_ir_get_human_code+1,w,c
  5502  000E36  0AAA               	xorlw	170	; case 170
  5503  000E38  B4D8               	btfsc	status,2,c
  5504  000E3A  D016               	goto	i2l4863
  5505  000E3C  0A01               	xorlw	1	; case 171
  5506  000E3E  B4D8               	btfsc	status,2,c
  5507  000E40  D01E               	goto	i2l4865
  5508  000E42  0A05               	xorlw	5	; case 174
  5509  000E44  B4D8               	btfsc	status,2,c
  5510  000E46  D023               	goto	i2l4867
  5511  000E48  0A14               	xorlw	20	; case 186
  5512  000E4A  B4D8               	btfsc	status,2,c
  5513  000E4C  D028               	goto	i2l4869
  5514  000E4E  0A01               	xorlw	1	; case 187
  5515  000E50  B4D8               	btfsc	status,2,c
  5516  000E52  D02A               	goto	i2l4871
  5517  000E54  0A51               	xorlw	81	; case 234
  5518  000E56  B4D8               	btfsc	status,2,c
  5519  000E58  D032               	goto	i2l4873
  5520  000E5A  0A01               	xorlw	1	; case 235
  5521  000E5C  B4D8               	btfsc	status,2,c
  5522  000E5E  D034               	goto	i2l4875
  5523  000E60  0A05               	xorlw	5	; case 238
  5524  000E62  B4D8               	btfsc	status,2,c
  5525  000E64  D039               	goto	i2l4877
  5526  000E66  D7E0               	goto	i2l3073
  5527  000E68                     i2l4863:
  5528                           
  5529                           ; Switch size 1, requested type "space"
  5530                           ; Number of cases is 3, Range of values is 186 to 238
  5531                           ; switch strategies available:
  5532                           ; Name         Instructions Cycles
  5533                           ; simple_byte           10     6 (average)
  5534                           ;	Chosen strategy is simple_byte
  5535  000E68  5003               	movf	??_ir_get_human_code,w,c
  5536  000E6A  0ABA               	xorlw	186	; case 186
  5537  000E6C  B4D8               	btfsc	status,2,c
  5538  000E6E  D7D6               	goto	i2l3069
  5539  000E70  0A50               	xorlw	80	; case 234
  5540  000E72  B4D8               	btfsc	status,2,c
  5541  000E74  D7AF               	goto	i2l3045
  5542  000E76  0A04               	xorlw	4	; case 238
  5543  000E78  B4D8               	btfsc	status,2,c
  5544  000E7A  D7AF               	goto	i2l3047
  5545  000E7C  D7D5               	goto	i2l3073
  5546  000E7E                     i2l4865:
  5547                           
  5548                           ; Switch size 1, requested type "space"
  5549                           ; Number of cases is 2, Range of values is 170 to 186
  5550                           ; switch strategies available:
  5551                           ; Name         Instructions Cycles
  5552                           ; simple_byte            7     4 (average)
  5553                           ;	Chosen strategy is simple_byte
  5554  000E7E  5003               	movf	??_ir_get_human_code,w,c
  5555  000E80  0AAA               	xorlw	170	; case 170
  5556  000E82  B4D8               	btfsc	status,2,c
  5557  000E84  D7BF               	goto	i2l3061
  5558  000E86  0A10               	xorlw	16	; case 186
  5559  000E88  B4D8               	btfsc	status,2,c
  5560  000E8A  D79B               	goto	i2l3039
  5561  000E8C  D7CD               	goto	i2l3073
  5562  000E8E                     i2l4867:
  5563                           
  5564                           ; Switch size 1, requested type "space"
  5565                           ; Number of cases is 2, Range of values is 186 to 234
  5566                           ; switch strategies available:
  5567                           ; Name         Instructions Cycles
  5568                           ; simple_byte            7     4 (average)
  5569                           ;	Chosen strategy is simple_byte
  5570  000E8E  5003               	movf	??_ir_get_human_code,w,c
  5571  000E90  0ABA               	xorlw	186	; case 186
  5572  000E92  B4D8               	btfsc	status,2,c
  5573  000E94  D7C6               	goto	i2l3071
  5574  000E96  0A50               	xorlw	80	; case 234
  5575  000E98  B4D8               	btfsc	status,2,c
  5576  000E9A  D7AB               	goto	i2l3055
  5577  000E9C  D7C5               	goto	i2l3073
  5578  000E9E                     i2l4869:
  5579                           
  5580                           ; Switch size 1, requested type "space"
  5581                           ; Number of cases is 1, Range of values is 186 to 186
  5582                           ; switch strategies available:
  5583                           ; Name         Instructions Cycles
  5584                           ; simple_byte            4     3 (average)
  5585                           ;	Chosen strategy is simple_byte
  5586  000E9E  5003               	movf	??_ir_get_human_code,w,c
  5587  000EA0  0ABA               	xorlw	186	; case 186
  5588  000EA2  B4D8               	btfsc	status,2,c
  5589  000EA4  D7B8               	goto	i2l3067
  5590  000EA6  D7C0               	goto	i2l3073
  5591  000EA8                     i2l4871:
  5592                           
  5593                           ; Switch size 1, requested type "space"
  5594                           ; Number of cases is 3, Range of values is 170 to 186
  5595                           ; switch strategies available:
  5596                           ; Name         Instructions Cycles
  5597                           ; simple_byte           10     6 (average)
  5598                           ;	Chosen strategy is simple_byte
  5599  000EA8  5003               	movf	??_ir_get_human_code,w,c
  5600  000EAA  0AAA               	xorlw	170	; case 170
  5601  000EAC  B4D8               	btfsc	status,2,c
  5602  000EAE  D7A4               	goto	i2l3057
  5603  000EB0  0A04               	xorlw	4	; case 174
  5604  000EB2  B4D8               	btfsc	status,2,c
  5605  000EB4  D79B               	goto	i2l3053
  5606  000EB6  0A14               	xorlw	20	; case 186
  5607  000EB8  B4D8               	btfsc	status,2,c
  5608  000EBA  D7A1               	goto	i2l3059
  5609  000EBC  D7B5               	goto	i2l3073
  5610  000EBE                     i2l4873:
  5611                           
  5612                           ; Switch size 1, requested type "space"
  5613                           ; Number of cases is 1, Range of values is 170 to 170
  5614                           ; switch strategies available:
  5615                           ; Name         Instructions Cycles
  5616                           ; simple_byte            4     3 (average)
  5617                           ;	Chosen strategy is simple_byte
  5618  000EBE  5003               	movf	??_ir_get_human_code,w,c
  5619  000EC0  0AAA               	xorlw	170	; case 170
  5620  000EC2  B4D8               	btfsc	status,2,c
  5621  000EC4  D781               	goto	i2l3041
  5622  000EC6  D7B0               	goto	i2l3073
  5623  000EC8                     i2l4875:
  5624                           
  5625                           ; Switch size 1, requested type "space"
  5626                           ; Number of cases is 2, Range of values is 174 to 186
  5627                           ; switch strategies available:
  5628                           ; Name         Instructions Cycles
  5629                           ; simple_byte            7     4 (average)
  5630                           ;	Chosen strategy is simple_byte
  5631  000EC8  5003               	movf	??_ir_get_human_code,w,c
  5632  000ECA  0AAE               	xorlw	174	; case 174
  5633  000ECC  B4D8               	btfsc	status,2,c
  5634  000ECE  D77F               	goto	i2l3043
  5635  000ED0  0A14               	xorlw	20	; case 186
  5636  000ED2  B4D8               	btfsc	status,2,c
  5637  000ED4  D785               	goto	i2l3049
  5638  000ED6  D7A8               	goto	i2l3073
  5639  000ED8                     i2l4877:
  5640                           
  5641                           ; Switch size 1, requested type "space"
  5642                           ; Number of cases is 3, Range of values is 174 to 234
  5643                           ; switch strategies available:
  5644                           ; Name         Instructions Cycles
  5645                           ; simple_byte           10     6 (average)
  5646                           ;	Chosen strategy is simple_byte
  5647  000ED8  5003               	movf	??_ir_get_human_code,w,c
  5648  000EDA  0AAE               	xorlw	174	; case 174
  5649  000EDC  B4D8               	btfsc	status,2,c
  5650  000EDE  D783               	goto	i2l3051
  5651  000EE0  0A14               	xorlw	20	; case 186
  5652  000EE2  B4D8               	btfsc	status,2,c
  5653  000EE4  D795               	goto	i2l3065
  5654  000EE6  0A50               	xorlw	80	; case 234
  5655  000EE8  B4D8               	btfsc	status,2,c
  5656  000EEA  D78F               	goto	i2l3063
  5657  000EEC  D79D               	goto	i2l3073
  5658  000EEE                     __end_of_ir_get_human_code:
  5659                           	opt stack 0
  5660                           pclatu	equ	0xFFB
  5661                           pclath	equ	0xFFA
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           intcon	equ	0xFF2
  5669                           intcon2	equ	0xFF1
  5670                           postinc0	equ	0xFEE
  5671                           fsr0h	equ	0xFEA
  5672                           fsr0l	equ	0xFE9
  5673                           wreg	equ	0xFE8
  5674                           indf1	equ	0xFE7
  5675                           fsr1h	equ	0xFE2
  5676                           fsr1l	equ	0xFE1
  5677                           indf2	equ	0xFDF
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _get_next_state *****************
  5683 ;; Defined at:
  5684 ;;		line 381 in file "user.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  state           2   13[COMRAM] int 
  5687 ;;  code            2   15[COMRAM] int 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  hour            1   19[COMRAM] unsigned char 
  5690 ;;  minutes         1   18[COMRAM] unsigned char 
  5691 ;;  seconds         1   17[COMRAM] unsigned char 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  2   13[COMRAM] int 
  5694 ;; Registers used:
  5695 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5701 ;;      Params:         4       0       0       0       0       0       0       0       0
  5702 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5704 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5705 ;;Total ram usage:        7 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    4
  5708 ;; This function calls:
  5709 ;;		_set_time
  5710 ;;		i2_timer1_enable
  5711 ;; This function is called by:
  5712 ;;		_high_isr
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text33
  5717  000012                     __ptext33:
  5718                           	opt stack 0
  5719  000012                     _get_next_state:
  5720                           	opt stack 21
  5721                           
  5722                           ;user.c: 383: if(state == 0 && code == 0xAABA)
  5723                           
  5724                           ;incstack = 0
  5725  000012  500E               	movf	get_next_state@state,w,c
  5726  000014  100F               	iorwf	get_next_state@state+1,w,c
  5727  000016  A4D8               	btfss	status,2,c
  5728  000018  D00B               	goto	i2l3119
  5729  00001A  0EBA               	movlw	186
  5730  00001C  1810               	xorwf	get_next_state@code,w,c
  5731  00001E  E108               	bnz	i2l3119
  5732  000020  0EAA               	movlw	170
  5733  000022  1811               	xorwf	get_next_state@code+1,w,c
  5734  000024  A4D8               	btfss	status,2,c
  5735  000026  D004               	goto	i2l3119
  5736  000028                     i2l3117:
  5737                           
  5738                           ;user.c: 384: next = 1;
  5739  000028  0E00               	movlw	0
  5740  00002A  6E32               	movwf	_next+1,c
  5741  00002C  0E01               	movlw	1
  5742  00002E  D220               	goto	L39
  5743  000030                     i2l3119:
  5744                           
  5745                           ;user.c: 385: else if((state == 0 || state == 21) && code == 0xABBa)
  5746  000030  500E               	movf	get_next_state@state,w,c
  5747  000032  100F               	iorwf	get_next_state@state+1,w,c
  5748  000034  B4D8               	btfsc	status,2,c
  5749  000036  D005               	goto	i2l3123
  5750  000038  0E15               	movlw	21
  5751  00003A  180E               	xorwf	get_next_state@state,w,c
  5752  00003C  100F               	iorwf	get_next_state@state+1,w,c
  5753  00003E  A4D8               	btfss	status,2,c
  5754  000040  D00B               	goto	i2l3127
  5755  000042                     i2l3123:
  5756  000042  0EBA               	movlw	186
  5757  000044  1810               	xorwf	get_next_state@code,w,c
  5758  000046  E108               	bnz	i2l3127
  5759  000048  0EAB               	movlw	171
  5760  00004A  1811               	xorwf	get_next_state@code+1,w,c
  5761  00004C  A4D8               	btfss	status,2,c
  5762  00004E  D004               	goto	i2l3127
  5763  000050                     i2l3125:
  5764                           
  5765                           ;user.c: 386: next = 5;
  5766  000050  0E00               	movlw	0
  5767  000052  6E32               	movwf	_next+1,c
  5768  000054  0E05               	movlw	5
  5769  000056  D20C               	goto	L39
  5770  000058                     i2l3127:
  5771                           
  5772                           ;user.c: 387: else if((state == 0 || state == 21) && code == 0xEBAE)
  5773  000058  500E               	movf	get_next_state@state,w,c
  5774  00005A  100F               	iorwf	get_next_state@state+1,w,c
  5775  00005C  B4D8               	btfsc	status,2,c
  5776  00005E  D005               	goto	i2l3131
  5777  000060  0E15               	movlw	21
  5778  000062  180E               	xorwf	get_next_state@state,w,c
  5779  000064  100F               	iorwf	get_next_state@state+1,w,c
  5780  000066  A4D8               	btfss	status,2,c
  5781  000068  D00B               	goto	i2l3135
  5782  00006A                     i2l3131:
  5783  00006A  0EAE               	movlw	174
  5784  00006C  1810               	xorwf	get_next_state@code,w,c
  5785  00006E  E108               	bnz	i2l3135
  5786  000070  0EEB               	movlw	235
  5787  000072  1811               	xorwf	get_next_state@code+1,w,c
  5788  000074  A4D8               	btfss	status,2,c
  5789  000076  D004               	goto	i2l3135
  5790  000078                     i2l3133:
  5791                           
  5792                           ;user.c: 388: next = 6;
  5793  000078  0E00               	movlw	0
  5794  00007A  6E32               	movwf	_next+1,c
  5795  00007C  0E06               	movlw	6
  5796  00007E  D1F8               	goto	L39
  5797  000080                     i2l3135:
  5798                           
  5799                           ;user.c: 389: else if(state == 1 && code == 0xAAEE)
  5800  000080  040E               	decf	get_next_state@state,w,c
  5801  000082  100F               	iorwf	get_next_state@state+1,w,c
  5802  000084  A4D8               	btfss	status,2,c
  5803  000086  D00B               	goto	i2l3141
  5804  000088  0EEE               	movlw	238
  5805  00008A  1810               	xorwf	get_next_state@code,w,c
  5806  00008C  E108               	bnz	i2l3141
  5807  00008E  0EAA               	movlw	170
  5808  000090  1811               	xorwf	get_next_state@code+1,w,c
  5809  000092  A4D8               	btfss	status,2,c
  5810  000094  D004               	goto	i2l3141
  5811                           
  5812                           ;user.c: 390: next = 2;
  5813  000096  0E00               	movlw	0
  5814  000098  6E32               	movwf	_next+1,c
  5815  00009A  0E02               	movlw	2
  5816  00009C  D1E9               	goto	L39
  5817  00009E                     i2l3141:
  5818                           
  5819                           ;user.c: 391: else if(state == 2 && code == 0xAAEE)
  5820  00009E  0E02               	movlw	2
  5821  0000A0  180E               	xorwf	get_next_state@state,w,c
  5822  0000A2  100F               	iorwf	get_next_state@state+1,w,c
  5823  0000A4  A4D8               	btfss	status,2,c
  5824  0000A6  D00B               	goto	i2l3147
  5825  0000A8  0EEE               	movlw	238
  5826  0000AA  1810               	xorwf	get_next_state@code,w,c
  5827  0000AC  E108               	bnz	i2l3147
  5828  0000AE  0EAA               	movlw	170
  5829  0000B0  1811               	xorwf	get_next_state@code+1,w,c
  5830  0000B2  A4D8               	btfss	status,2,c
  5831  0000B4  D004               	goto	i2l3147
  5832                           
  5833                           ;user.c: 392: next = 3;
  5834  0000B6  0E00               	movlw	0
  5835  0000B8  6E32               	movwf	_next+1,c
  5836  0000BA  0E03               	movlw	3
  5837  0000BC  D1D9               	goto	L39
  5838  0000BE                     i2l3147:
  5839                           
  5840                           ;user.c: 393: else if(state == 3 && code == 0xAAEE)
  5841  0000BE  0E03               	movlw	3
  5842  0000C0  180E               	xorwf	get_next_state@state,w,c
  5843  0000C2  100F               	iorwf	get_next_state@state+1,w,c
  5844  0000C4  A4D8               	btfss	status,2,c
  5845  0000C6  D00B               	goto	i2l3153
  5846  0000C8  0EEE               	movlw	238
  5847  0000CA  1810               	xorwf	get_next_state@code,w,c
  5848  0000CC  E108               	bnz	i2l3153
  5849  0000CE  0EAA               	movlw	170
  5850  0000D0  1811               	xorwf	get_next_state@code+1,w,c
  5851  0000D2  A4D8               	btfss	status,2,c
  5852  0000D4  D004               	goto	i2l3153
  5853                           
  5854                           ;user.c: 394: next = 4;
  5855  0000D6  0E00               	movlw	0
  5856  0000D8  6E32               	movwf	_next+1,c
  5857  0000DA  0E04               	movlw	4
  5858  0000DC  D1C9               	goto	L39
  5859  0000DE                     i2l3153:
  5860                           
  5861                           ;user.c: 395: else if(state == 4 && code == 0xAAEE)
  5862  0000DE  0E04               	movlw	4
  5863  0000E0  180E               	xorwf	get_next_state@state,w,c
  5864  0000E2  100F               	iorwf	get_next_state@state+1,w,c
  5865  0000E4  A4D8               	btfss	status,2,c
  5866  0000E6  D007               	goto	i2l3159
  5867  0000E8  0EEE               	movlw	238
  5868  0000EA  1810               	xorwf	get_next_state@code,w,c
  5869  0000EC  E104               	bnz	i2l3159
  5870  0000EE  0EAA               	movlw	170
  5871  0000F0  1811               	xorwf	get_next_state@code+1,w,c
  5872  0000F2  B4D8               	btfsc	status,2,c
  5873  0000F4  D799               	goto	i2l3117
  5874  0000F6                     i2l3159:
  5875                           
  5876                           ;user.c: 397: else if((state == 5 || state == 6 || state == 21) && code == 0xBABA)
  5877  0000F6  0E05               	movlw	5
  5878  0000F8  180E               	xorwf	get_next_state@state,w,c
  5879  0000FA  100F               	iorwf	get_next_state@state+1,w,c
  5880  0000FC  B4D8               	btfsc	status,2,c
  5881  0000FE  D00A               	goto	i2l3165
  5882  000100  0E06               	movlw	6
  5883  000102  180E               	xorwf	get_next_state@state,w,c
  5884  000104  100F               	iorwf	get_next_state@state+1,w,c
  5885  000106  B4D8               	btfsc	status,2,c
  5886  000108  D005               	goto	i2l3165
  5887  00010A  0E15               	movlw	21
  5888  00010C  180E               	xorwf	get_next_state@state,w,c
  5889  00010E  100F               	iorwf	get_next_state@state+1,w,c
  5890  000110  A4D8               	btfss	status,2,c
  5891  000112  D00B               	goto	i2l3169
  5892  000114                     i2l3165:
  5893  000114  0EBA               	movlw	186
  5894  000116  1810               	xorwf	get_next_state@code,w,c
  5895  000118  E108               	bnz	i2l3169
  5896  00011A  0EBA               	movlw	186
  5897  00011C  1811               	xorwf	get_next_state@code+1,w,c
  5898  00011E  A4D8               	btfss	status,2,c
  5899  000120  D004               	goto	i2l3169
  5900                           
  5901                           ;user.c: 398: next = 0;
  5902  000122  0E00               	movlw	0
  5903  000124  6E32               	movwf	_next+1,c
  5904  000126  0E00               	movlw	0
  5905  000128  D1A3               	goto	L39
  5906  00012A                     i2l3169:
  5907                           
  5908                           ;user.c: 399: else if((state == 1 || state == 2 || state == 3 || state == 4) && code == 
      +                          0xAEBA)
  5909  00012A  040E               	decf	get_next_state@state,w,c
  5910  00012C  100F               	iorwf	get_next_state@state+1,w,c
  5911  00012E  B4D8               	btfsc	status,2,c
  5912  000130  D00F               	goto	i2l3177
  5913  000132  0E02               	movlw	2
  5914  000134  180E               	xorwf	get_next_state@state,w,c
  5915  000136  100F               	iorwf	get_next_state@state+1,w,c
  5916  000138  B4D8               	btfsc	status,2,c
  5917  00013A  D00A               	goto	i2l3177
  5918  00013C  0E03               	movlw	3
  5919  00013E  180E               	xorwf	get_next_state@state,w,c
  5920  000140  100F               	iorwf	get_next_state@state+1,w,c
  5921  000142  B4D8               	btfsc	status,2,c
  5922  000144  D005               	goto	i2l3177
  5923  000146  0E04               	movlw	4
  5924  000148  180E               	xorwf	get_next_state@state,w,c
  5925  00014A  100F               	iorwf	get_next_state@state+1,w,c
  5926  00014C  A4D8               	btfss	status,2,c
  5927  00014E  D023               	goto	i2l3187
  5928  000150                     i2l3177:
  5929  000150  0EBA               	movlw	186
  5930  000152  1810               	xorwf	get_next_state@code,w,c
  5931  000154  E120               	bnz	i2l3187
  5932  000156  0EAE               	movlw	174
  5933  000158  1811               	xorwf	get_next_state@code+1,w,c
  5934  00015A  A4D8               	btfss	status,2,c
  5935  00015C  D01C               	goto	i2l3187
  5936                           
  5937                           ;user.c: 400: {
  5938                           ;user.c: 401: next = 0;
  5939  00015E  0E00               	movlw	0
  5940  000160  6E32               	movwf	_next+1,c
  5941  000162  0E00               	movlw	0
  5942  000164  6E31               	movwf	_next,c
  5943                           
  5944                           ;user.c: 402: char seconds = 0;
  5945  000166  0E00               	movlw	0
  5946  000168  6E12               	movwf	get_next_state@seconds,c
  5947                           
  5948                           ;user.c: 403: char minutes = aux1[0] + aux1[1]*10;
  5949  00016A  0100               	movlb	0	; () banked
  5950  00016C  51B2               	movf	(_aux1+1)& (0+255),w,b
  5951  00016E  0D0A               	mullw	10
  5952  000170  50F3               	movf	prodl,w,c
  5953  000172  0100               	movlb	0	; () banked
  5954  000174  25B1               	addwf	_aux1& (0+255),w,b
  5955  000176  6E13               	movwf	get_next_state@minutes,c
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;user.c: 404: char hour = aux1[2] + aux1[3]*10;
  5959  000178  0100               	movlb	0	; () banked
  5960  00017A  51B4               	movf	(_aux1+3)& (0+255),w,b
  5961  00017C  0D0A               	mullw	10
  5962  00017E  50F3               	movf	prodl,w,c
  5963  000180  0100               	movlb	0	; () banked
  5964  000182  25B3               	addwf	(_aux1+2)& (0+255),w,b
  5965  000184  6E14               	movwf	get_next_state@hour,c
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;user.c: 405: set_time(seconds,minutes,hour);
  5969  000186  C013  F008         	movff	get_next_state@minutes,set_time@minutes
  5970  00018A  C014  F009         	movff	get_next_state@hour,set_time@hour
  5971  00018E  5012               	movf	get_next_state@seconds,w,c
  5972  000190  EC29  F00B         	call	_set_time
  5973                           
  5974                           ;user.c: 406: }
  5975  000194  D16E               	goto	i2l403
  5976  000196                     i2l3187:
  5977                           
  5978                           ;user.c: 407: else if(state == 5 && code == 0xEAAA)
  5979  000196  0E05               	movlw	5
  5980  000198  180E               	xorwf	get_next_state@state,w,c
  5981  00019A  100F               	iorwf	get_next_state@state+1,w,c
  5982  00019C  A4D8               	btfss	status,2,c
  5983  00019E  D00E               	goto	i2l3195
  5984  0001A0  0EAA               	movlw	170
  5985  0001A2  1810               	xorwf	get_next_state@code,w,c
  5986  0001A4  E10B               	bnz	i2l3195
  5987  0001A6  0EEA               	movlw	234
  5988  0001A8  1811               	xorwf	get_next_state@code+1,w,c
  5989  0001AA  A4D8               	btfss	status,2,c
  5990  0001AC  D007               	goto	i2l3195
  5991                           
  5992                           ;user.c: 408: {
  5993                           ;user.c: 409: next = 11;
  5994  0001AE  0E00               	movlw	0
  5995  0001B0  6E32               	movwf	_next+1,c
  5996  0001B2  0E0B               	movlw	11
  5997  0001B4  6E31               	movwf	_next,c
  5998                           
  5999                           ;user.c: 411: timer1_enable();
  6000  0001B6  ECB6  F00B         	call	i2_timer1_enable	;wreg free
  6001                           
  6002                           ;user.c: 412: }
  6003  0001BA  D15B               	goto	i2l403
  6004  0001BC                     i2l3195:
  6005                           
  6006                           ;user.c: 413: else if(state == 11 && timer1_counter_10 == 0)
  6007  0001BC  0E0B               	movlw	11
  6008  0001BE  180E               	xorwf	get_next_state@state,w,c
  6009  0001C0  100F               	iorwf	get_next_state@state+1,w,c
  6010  0001C2  A4D8               	btfss	status,2,c
  6011  0001C4  D008               	goto	i2l3201
  6012  0001C6  0100               	movlb	0	; () banked
  6013  0001C8  51B7               	movf	_timer1_counter_10& (0+255),w,b
  6014  0001CA  A4D8               	btfss	status,2,c
  6015  0001CC  D004               	goto	i2l3201
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;user.c: 414: next = 12;
  6019  0001CE  0E00               	movlw	0
  6020  0001D0  6E32               	movwf	_next+1,c
  6021  0001D2  0E0C               	movlw	12
  6022  0001D4  D14D               	goto	L39
  6023  0001D6                     i2l3201:
  6024                           
  6025                           ;user.c: 415: else if(state == 12 && timer1_counter_min == timer1_up_limit_min && timer1
      +                          _counter_10 == timer1_up_limit_sec)
  6026  0001D6  0E0C               	movlw	12
  6027  0001D8  180E               	xorwf	get_next_state@state,w,c
  6028  0001DA  100F               	iorwf	get_next_state@state+1,w,c
  6029  0001DC  A4D8               	btfss	status,2,c
  6030  0001DE  D00D               	goto	i2l3209
  6031  0001E0  5038               	movf	_timer1_up_limit_min,w,c
  6032  0001E2  1836               	xorwf	_timer1_counter_min,w,c
  6033  0001E4  A4D8               	btfss	status,2,c
  6034  0001E6  D009               	goto	i2l3209
  6035  0001E8  5039               	movf	_timer1_up_limit_sec,w,c
  6036  0001EA  0100               	movlb	0	; () banked
  6037  0001EC  19B7               	xorwf	_timer1_counter_10& (0+255),w,b
  6038  0001EE  A4D8               	btfss	status,2,c
  6039  0001F0  D004               	goto	i2l3209
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;user.c: 416: {
  6043                           ;user.c: 417: next = 13;
  6044  0001F2  0E00               	movlw	0
  6045  0001F4  6E32               	movwf	_next+1,c
  6046  0001F6  0E0D               	movlw	13
  6047  0001F8  D13B               	goto	L39
  6048  0001FA                     i2l3209:
  6049                           
  6050                           ;user.c: 419: else if((state == 13 || state == 12) && code == 0xAEBA)
  6051  0001FA  0E0D               	movlw	13
  6052  0001FC  180E               	xorwf	get_next_state@state,w,c
  6053  0001FE  100F               	iorwf	get_next_state@state+1,w,c
  6054  000200  B4D8               	btfsc	status,2,c
  6055  000202  D005               	goto	i2l3213
  6056  000204  0E0C               	movlw	12
  6057  000206  180E               	xorwf	get_next_state@state,w,c
  6058  000208  100F               	iorwf	get_next_state@state+1,w,c
  6059  00020A  A4D8               	btfss	status,2,c
  6060  00020C  D007               	goto	i2l3217
  6061  00020E                     i2l3213:
  6062  00020E  0EBA               	movlw	186
  6063  000210  1810               	xorwf	get_next_state@code,w,c
  6064  000212  E104               	bnz	i2l3217
  6065  000214  0EAE               	movlw	174
  6066  000216  1811               	xorwf	get_next_state@code+1,w,c
  6067  000218  B4D8               	btfsc	status,2,c
  6068  00021A  D71A               	goto	i2l3125
  6069  00021C                     i2l3217:
  6070                           
  6071                           ;user.c: 421: else if(state == 5 && code == 0xAABA)
  6072  00021C  0E05               	movlw	5
  6073  00021E  180E               	xorwf	get_next_state@state,w,c
  6074  000220  100F               	iorwf	get_next_state@state+1,w,c
  6075  000222  A4D8               	btfss	status,2,c
  6076  000224  D00B               	goto	i2l3223
  6077  000226  0EBA               	movlw	186
  6078  000228  1810               	xorwf	get_next_state@code,w,c
  6079  00022A  E108               	bnz	i2l3223
  6080  00022C  0EAA               	movlw	170
  6081  00022E  1811               	xorwf	get_next_state@code+1,w,c
  6082  000230  A4D8               	btfss	status,2,c
  6083  000232  D004               	goto	i2l3223
  6084                           
  6085                           ;user.c: 422: {
  6086                           ;user.c: 423: next = 7;
  6087  000234  0E00               	movlw	0
  6088  000236  6E32               	movwf	_next+1,c
  6089  000238  0E07               	movlw	7
  6090  00023A  D11A               	goto	L39
  6091  00023C                     i2l3223:
  6092                           
  6093                           ;user.c: 425: else if((state == 7 || state == 8 || state == 9 || state == 10) && code ==
      +                           0xAEBA)
  6094  00023C  0E07               	movlw	7
  6095  00023E  180E               	xorwf	get_next_state@state,w,c
  6096  000240  100F               	iorwf	get_next_state@state+1,w,c
  6097  000242  B4D8               	btfsc	status,2,c
  6098  000244  D00F               	goto	i2l3231
  6099  000246  0E08               	movlw	8
  6100  000248  180E               	xorwf	get_next_state@state,w,c
  6101  00024A  100F               	iorwf	get_next_state@state+1,w,c
  6102  00024C  B4D8               	btfsc	status,2,c
  6103  00024E  D00A               	goto	i2l3231
  6104  000250  0E09               	movlw	9
  6105  000252  180E               	xorwf	get_next_state@state,w,c
  6106  000254  100F               	iorwf	get_next_state@state+1,w,c
  6107  000256  B4D8               	btfsc	status,2,c
  6108  000258  D005               	goto	i2l3231
  6109  00025A  0E0A               	movlw	10
  6110  00025C  180E               	xorwf	get_next_state@state,w,c
  6111  00025E  100F               	iorwf	get_next_state@state+1,w,c
  6112  000260  A4D8               	btfss	status,2,c
  6113  000262  D01A               	goto	i2l3239
  6114  000264                     i2l3231:
  6115  000264  0EBA               	movlw	186
  6116  000266  1810               	xorwf	get_next_state@code,w,c
  6117  000268  E117               	bnz	i2l3239
  6118  00026A  0EAE               	movlw	174
  6119  00026C  1811               	xorwf	get_next_state@code+1,w,c
  6120  00026E  A4D8               	btfss	status,2,c
  6121  000270  D013               	goto	i2l3239
  6122                           
  6123                           ;user.c: 426: {
  6124                           ;user.c: 427: next = 5;
  6125  000272  0E00               	movlw	0
  6126  000274  6E32               	movwf	_next+1,c
  6127  000276  0E05               	movlw	5
  6128  000278  6E31               	movwf	_next,c
  6129                           
  6130                           ;user.c: 429: timer1_up_limit_sec = aux1[1]*10+aux1[0];
  6131  00027A  0100               	movlb	0	; () banked
  6132  00027C  51B2               	movf	(_aux1+1)& (0+255),w,b
  6133  00027E  0D0A               	mullw	10
  6134  000280  50F3               	movf	prodl,w,c
  6135  000282  0100               	movlb	0	; () banked
  6136  000284  25B1               	addwf	_aux1& (0+255),w,b
  6137  000286  6E39               	movwf	_timer1_up_limit_sec,c
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;user.c: 430: timer1_up_limit_min = aux1[3]*10 + aux1[2];
  6141  000288  0100               	movlb	0	; () banked
  6142  00028A  51B4               	movf	(_aux1+3)& (0+255),w,b
  6143  00028C  0D0A               	mullw	10
  6144  00028E  50F3               	movf	prodl,w,c
  6145  000290  0100               	movlb	0	; () banked
  6146  000292  25B3               	addwf	(_aux1+2)& (0+255),w,b
  6147  000294  6E38               	movwf	_timer1_up_limit_min,c
  6148                           
  6149                           ;user.c: 431: }
  6150  000296  D0ED               	goto	i2l403
  6151  000298                     i2l3239:
  6152                           
  6153                           ;user.c: 432: else if(state == 5 && code ==0xEBAE)
  6154  000298  0E05               	movlw	5
  6155  00029A  180E               	xorwf	get_next_state@state,w,c
  6156  00029C  100F               	iorwf	get_next_state@state+1,w,c
  6157  00029E  A4D8               	btfss	status,2,c
  6158  0002A0  D007               	goto	i2l3245
  6159  0002A2  0EAE               	movlw	174
  6160  0002A4  1810               	xorwf	get_next_state@code,w,c
  6161  0002A6  E104               	bnz	i2l3245
  6162  0002A8  0EEB               	movlw	235
  6163  0002AA  1811               	xorwf	get_next_state@code+1,w,c
  6164  0002AC  B4D8               	btfsc	status,2,c
  6165  0002AE  D6E4               	goto	i2l3133
  6166  0002B0                     i2l3245:
  6167                           
  6168                           ;user.c: 436: else if(state == 6 && code == 0xABBa)
  6169  0002B0  0E06               	movlw	6
  6170  0002B2  180E               	xorwf	get_next_state@state,w,c
  6171  0002B4  100F               	iorwf	get_next_state@state+1,w,c
  6172  0002B6  A4D8               	btfss	status,2,c
  6173  0002B8  D007               	goto	i2l3251
  6174  0002BA  0EBA               	movlw	186
  6175  0002BC  1810               	xorwf	get_next_state@code,w,c
  6176  0002BE  E104               	bnz	i2l3251
  6177  0002C0  0EAB               	movlw	171
  6178  0002C2  1811               	xorwf	get_next_state@code+1,w,c
  6179  0002C4  B4D8               	btfsc	status,2,c
  6180  0002C6  D6C4               	goto	i2l3125
  6181  0002C8                     i2l3251:
  6182                           
  6183                           ;user.c: 440: else if(state == 6 && code == 0xEAAA)
  6184  0002C8  0E06               	movlw	6
  6185  0002CA  180E               	xorwf	get_next_state@state,w,c
  6186  0002CC  100F               	iorwf	get_next_state@state+1,w,c
  6187  0002CE  A4D8               	btfss	status,2,c
  6188  0002D0  D00E               	goto	i2l3259
  6189  0002D2  0EAA               	movlw	170
  6190  0002D4  1810               	xorwf	get_next_state@code,w,c
  6191  0002D6  E10B               	bnz	i2l3259
  6192  0002D8  0EEA               	movlw	234
  6193  0002DA  1811               	xorwf	get_next_state@code+1,w,c
  6194  0002DC  A4D8               	btfss	status,2,c
  6195  0002DE  D007               	goto	i2l3259
  6196                           
  6197                           ;user.c: 441: {
  6198                           ;user.c: 442: next = 18;
  6199  0002E0  0E00               	movlw	0
  6200  0002E2  6E32               	movwf	_next+1,c
  6201  0002E4  0E12               	movlw	18
  6202  0002E6  6E31               	movwf	_next,c
  6203                           
  6204                           ;user.c: 444: timer1_enable();
  6205  0002E8  ECB6  F00B         	call	i2_timer1_enable	;wreg free
  6206                           
  6207                           ;user.c: 445: }
  6208  0002EC  D0C2               	goto	i2l403
  6209  0002EE                     i2l3259:
  6210                           
  6211                           ;user.c: 446: else if(state == 18 && timer1_counter_10 == 0)
  6212  0002EE  0E12               	movlw	18
  6213  0002F0  180E               	xorwf	get_next_state@state,w,c
  6214  0002F2  100F               	iorwf	get_next_state@state+1,w,c
  6215  0002F4  A4D8               	btfss	status,2,c
  6216  0002F6  D00D               	goto	i2l3269
  6217  0002F8  0100               	movlb	0	; () banked
  6218  0002FA  51B7               	movf	_timer1_counter_10& (0+255),w,b
  6219  0002FC  A4D8               	btfss	status,2,c
  6220  0002FE  D009               	goto	i2l3269
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;user.c: 447: {
  6224                           ;user.c: 448: next = 19;
  6225  000300  0E00               	movlw	0
  6226  000302  6E32               	movwf	_next+1,c
  6227  000304  0E13               	movlw	19
  6228  000306  6E31               	movwf	_next,c
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;user.c: 450: timer1_counter_min = timer1_down_init_min;
  6232  000308  C035  F036         	movff	_timer1_down_init_min,_timer1_counter_min
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;user.c: 451: timer1_counter_10 = timer1_down_init_sec;
  6236  00030C  C034  F0B7         	movff	_timer1_down_init_sec,_timer1_counter_10
  6237                           
  6238                           ;user.c: 452: }
  6239  000310  D0B0               	goto	i2l403
  6240  000312                     i2l3269:
  6241                           
  6242                           ;user.c: 453: else if(state == 19 && timer1_counter_min == 0 && timer1_counter_10 == 0)
  6243  000312  0E13               	movlw	19
  6244  000314  180E               	xorwf	get_next_state@state,w,c
  6245  000316  100F               	iorwf	get_next_state@state+1,w,c
  6246  000318  A4D8               	btfss	status,2,c
  6247  00031A  D00B               	goto	i2l3277
  6248  00031C  5036               	movf	_timer1_counter_min,w,c
  6249  00031E  A4D8               	btfss	status,2,c
  6250  000320  D008               	goto	i2l3277
  6251  000322  0100               	movlb	0	; () banked
  6252  000324  51B7               	movf	_timer1_counter_10& (0+255),w,b
  6253  000326  A4D8               	btfss	status,2,c
  6254  000328  D004               	goto	i2l3277
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;user.c: 454: {
  6258                           ;user.c: 455: next = 20;
  6259  00032A  0E00               	movlw	0
  6260  00032C  6E32               	movwf	_next+1,c
  6261  00032E  0E14               	movlw	20
  6262  000330  D09F               	goto	L39
  6263  000332                     i2l3277:
  6264                           
  6265                           ;user.c: 457: else if(state == 20 && code == 0xAEBA)
  6266  000332  0E14               	movlw	20
  6267  000334  180E               	xorwf	get_next_state@state,w,c
  6268  000336  100F               	iorwf	get_next_state@state+1,w,c
  6269  000338  A4D8               	btfss	status,2,c
  6270  00033A  D007               	goto	i2l3283
  6271  00033C  0EBA               	movlw	186
  6272  00033E  1810               	xorwf	get_next_state@code,w,c
  6273  000340  E104               	bnz	i2l3283
  6274  000342  0EAE               	movlw	174
  6275  000344  1811               	xorwf	get_next_state@code+1,w,c
  6276  000346  B4D8               	btfsc	status,2,c
  6277  000348  D697               	goto	i2l3133
  6278  00034A                     i2l3283:
  6279                           
  6280                           ;user.c: 461: else if(state == 6 && code == 0xAABA)
  6281  00034A  0E06               	movlw	6
  6282  00034C  180E               	xorwf	get_next_state@state,w,c
  6283  00034E  100F               	iorwf	get_next_state@state+1,w,c
  6284  000350  A4D8               	btfss	status,2,c
  6285  000352  D00B               	goto	i2l3289
  6286  000354  0EBA               	movlw	186
  6287  000356  1810               	xorwf	get_next_state@code,w,c
  6288  000358  E108               	bnz	i2l3289
  6289  00035A  0EAA               	movlw	170
  6290  00035C  1811               	xorwf	get_next_state@code+1,w,c
  6291  00035E  A4D8               	btfss	status,2,c
  6292  000360  D004               	goto	i2l3289
  6293                           
  6294                           ;user.c: 462: {
  6295                           ;user.c: 463: next = 14;
  6296  000362  0E00               	movlw	0
  6297  000364  6E32               	movwf	_next+1,c
  6298  000366  0E0E               	movlw	14
  6299  000368  D083               	goto	L39
  6300  00036A                     i2l3289:
  6301                           
  6302                           ;user.c: 465: else if((state == 14 || state == 15 || state == 16 || state == 17) && code
      +                           == 0xAEBA)
  6303  00036A  0E0E               	movlw	14
  6304  00036C  180E               	xorwf	get_next_state@state,w,c
  6305  00036E  100F               	iorwf	get_next_state@state+1,w,c
  6306  000370  B4D8               	btfsc	status,2,c
  6307  000372  D00F               	goto	i2l3297
  6308  000374  0E0F               	movlw	15
  6309  000376  180E               	xorwf	get_next_state@state,w,c
  6310  000378  100F               	iorwf	get_next_state@state+1,w,c
  6311  00037A  B4D8               	btfsc	status,2,c
  6312  00037C  D00A               	goto	i2l3297
  6313  00037E  0E10               	movlw	16
  6314  000380  180E               	xorwf	get_next_state@state,w,c
  6315  000382  100F               	iorwf	get_next_state@state+1,w,c
  6316  000384  B4D8               	btfsc	status,2,c
  6317  000386  D005               	goto	i2l3297
  6318  000388  0E11               	movlw	17
  6319  00038A  180E               	xorwf	get_next_state@state,w,c
  6320  00038C  100F               	iorwf	get_next_state@state+1,w,c
  6321  00038E  A4D8               	btfss	status,2,c
  6322  000390  D01A               	goto	i2l3305
  6323  000392                     i2l3297:
  6324  000392  0EBA               	movlw	186
  6325  000394  1810               	xorwf	get_next_state@code,w,c
  6326  000396  E117               	bnz	i2l3305
  6327  000398  0EAE               	movlw	174
  6328  00039A  1811               	xorwf	get_next_state@code+1,w,c
  6329  00039C  A4D8               	btfss	status,2,c
  6330  00039E  D013               	goto	i2l3305
  6331                           
  6332                           ;user.c: 466: {
  6333                           ;user.c: 467: next = 6;
  6334  0003A0  0E00               	movlw	0
  6335  0003A2  6E32               	movwf	_next+1,c
  6336  0003A4  0E06               	movlw	6
  6337  0003A6  6E31               	movwf	_next,c
  6338                           
  6339                           ;user.c: 468: timer1_down_init_min = aux1[3]*10 + aux1[2];
  6340  0003A8  0100               	movlb	0	; () banked
  6341  0003AA  51B4               	movf	(_aux1+3)& (0+255),w,b
  6342  0003AC  0D0A               	mullw	10
  6343  0003AE  50F3               	movf	prodl,w,c
  6344  0003B0  0100               	movlb	0	; () banked
  6345  0003B2  25B3               	addwf	(_aux1+2)& (0+255),w,b
  6346  0003B4  6E35               	movwf	_timer1_down_init_min,c
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;user.c: 469: timer1_down_init_sec = aux1[1]*10 + aux1[0];
  6350  0003B6  0100               	movlb	0	; () banked
  6351  0003B8  51B2               	movf	(_aux1+1)& (0+255),w,b
  6352  0003BA  0D0A               	mullw	10
  6353  0003BC  50F3               	movf	prodl,w,c
  6354  0003BE  0100               	movlb	0	; () banked
  6355  0003C0  25B1               	addwf	_aux1& (0+255),w,b
  6356  0003C2  6E34               	movwf	_timer1_down_init_sec,c
  6357                           
  6358                           ;user.c: 470: }
  6359  0003C4  D056               	goto	i2l403
  6360  0003C6                     i2l3305:
  6361                           
  6362                           ;user.c: 471: else if((state == 6 || state == 5 || state == 0) && code == 0xAAEA)
  6363  0003C6  0E06               	movlw	6
  6364  0003C8  180E               	xorwf	get_next_state@state,w,c
  6365  0003CA  100F               	iorwf	get_next_state@state+1,w,c
  6366  0003CC  B4D8               	btfsc	status,2,c
  6367  0003CE  D009               	goto	i2l3311
  6368  0003D0  0E05               	movlw	5
  6369  0003D2  180E               	xorwf	get_next_state@state,w,c
  6370  0003D4  100F               	iorwf	get_next_state@state+1,w,c
  6371  0003D6  B4D8               	btfsc	status,2,c
  6372  0003D8  D004               	goto	i2l3311
  6373  0003DA  500E               	movf	get_next_state@state,w,c
  6374  0003DC  100F               	iorwf	get_next_state@state+1,w,c
  6375  0003DE  A4D8               	btfss	status,2,c
  6376  0003E0  D007               	goto	i2l3315
  6377  0003E2                     i2l3311:
  6378  0003E2  0EEA               	movlw	234
  6379  0003E4  1810               	xorwf	get_next_state@code,w,c
  6380  0003E6  E104               	bnz	i2l3315
  6381  0003E8  0EAA               	movlw	170
  6382  0003EA  1811               	xorwf	get_next_state@code+1,w,c
  6383  0003EC  B4D8               	btfsc	status,2,c
  6384  0003EE  D03D               	goto	L45
  6385  0003F0                     i2l3315:
  6386                           
  6387                           ;user.c: 475: else if(state == 21 && code == 0xEAAA)
  6388  0003F0  0E15               	movlw	21
  6389  0003F2  180E               	xorwf	get_next_state@state,w,c
  6390  0003F4  100F               	iorwf	get_next_state@state+1,w,c
  6391  0003F6  A4D8               	btfss	status,2,c
  6392  0003F8  D00B               	goto	i2l3321
  6393  0003FA  0EAA               	movlw	170
  6394  0003FC  1810               	xorwf	get_next_state@code,w,c
  6395  0003FE  E108               	bnz	i2l3321
  6396  000400  0EEA               	movlw	234
  6397  000402  1811               	xorwf	get_next_state@code+1,w,c
  6398  000404  A4D8               	btfss	status,2,c
  6399  000406  D004               	goto	i2l3321
  6400  000408                     i2l3319:
  6401                           
  6402                           ;user.c: 476: {
  6403                           ;user.c: 477: next = 22;
  6404  000408  0E00               	movlw	0
  6405  00040A  6E32               	movwf	_next+1,c
  6406  00040C  0E16               	movlw	22
  6407  00040E  D030               	goto	L39
  6408  000410                     i2l3321:
  6409                           
  6410                           ;user.c: 479: else if(state == 22 && code == 0xAABA)
  6411  000410  0E16               	movlw	22
  6412  000412  180E               	xorwf	get_next_state@state,w,c
  6413  000414  100F               	iorwf	get_next_state@state+1,w,c
  6414  000416  A4D8               	btfss	status,2,c
  6415  000418  D00B               	goto	i2l3327
  6416  00041A  0EBA               	movlw	186
  6417  00041C  1810               	xorwf	get_next_state@code,w,c
  6418  00041E  E108               	bnz	i2l3327
  6419  000420  0EAA               	movlw	170
  6420  000422  1811               	xorwf	get_next_state@code+1,w,c
  6421  000424  A4D8               	btfss	status,2,c
  6422  000426  D004               	goto	i2l3327
  6423                           
  6424                           ;user.c: 480: {
  6425                           ;user.c: 481: next = 23;
  6426  000428  0E00               	movlw	0
  6427  00042A  6E32               	movwf	_next+1,c
  6428  00042C  0E17               	movlw	23
  6429  00042E  D020               	goto	L39
  6430  000430                     i2l3327:
  6431                           
  6432                           ;user.c: 483: else if(state == 23 && code == 0xEAAA)
  6433  000430  0E17               	movlw	23
  6434  000432  180E               	xorwf	get_next_state@state,w,c
  6435  000434  100F               	iorwf	get_next_state@state+1,w,c
  6436  000436  A4D8               	btfss	status,2,c
  6437  000438  D007               	goto	i2l3333
  6438  00043A  0EAA               	movlw	170
  6439  00043C  1810               	xorwf	get_next_state@code,w,c
  6440  00043E  E104               	bnz	i2l3333
  6441  000440  0EEA               	movlw	234
  6442  000442  1811               	xorwf	get_next_state@code+1,w,c
  6443  000444  B4D8               	btfsc	status,2,c
  6444  000446  D7E0               	goto	i2l3319
  6445  000448                     i2l3333:
  6446                           
  6447                           ;user.c: 487: else if((state == 22 || state == 23) && code == 0xAEBA)
  6448  000448  0E16               	movlw	22
  6449  00044A  180E               	xorwf	get_next_state@state,w,c
  6450  00044C  100F               	iorwf	get_next_state@state+1,w,c
  6451  00044E  B4D8               	btfsc	status,2,c
  6452  000450  D005               	goto	i2l3337
  6453  000452  0E17               	movlw	23
  6454  000454  180E               	xorwf	get_next_state@state,w,c
  6455  000456  100F               	iorwf	get_next_state@state+1,w,c
  6456  000458  A4D8               	btfss	status,2,c
  6457  00045A  D00B               	goto	i2l403
  6458  00045C                     i2l3337:
  6459  00045C  0EBA               	movlw	186
  6460  00045E  1810               	xorwf	get_next_state@code,w,c
  6461  000460  E108               	bnz	i2l403
  6462  000462  0EAE               	movlw	174
  6463  000464  1811               	xorwf	get_next_state@code+1,w,c
  6464  000466  A4D8               	btfss	status,2,c
  6465  000468  D004               	goto	i2l403
  6466  00046A                     L45:
  6467                           
  6468                           ;user.c: 488: {
  6469                           ;user.c: 489: next = 21;
  6470  00046A  0E00               	movlw	0
  6471  00046C  6E32               	movwf	_next+1,c
  6472  00046E  0E15               	movlw	21
  6473  000470                     L39:
  6474  000470  6E31               	movwf	_next,c
  6475  000472                     i2l403:
  6476                           
  6477                           ;user.c: 493: return next;
  6478  000472  C031  F00E         	movff	_next,?_get_next_state
  6479  000476  C032  F00F         	movff	_next+1,?_get_next_state+1
  6480  00047A  0012               	return		;funcret
  6481  00047C                     __end_of_get_next_state:
  6482                           	opt stack 0
  6483                           pclatu	equ	0xFFB
  6484                           pclath	equ	0xFFA
  6485                           tblptru	equ	0xFF8
  6486                           tblptrh	equ	0xFF7
  6487                           tblptrl	equ	0xFF6
  6488                           tablat	equ	0xFF5
  6489                           prodh	equ	0xFF4
  6490                           prodl	equ	0xFF3
  6491                           intcon	equ	0xFF2
  6492                           intcon2	equ	0xFF1
  6493                           postinc0	equ	0xFEE
  6494                           fsr0h	equ	0xFEA
  6495                           fsr0l	equ	0xFE9
  6496                           wreg	equ	0xFE8
  6497                           indf1	equ	0xFE7
  6498                           fsr1h	equ	0xFE2
  6499                           fsr1l	equ	0xFE1
  6500                           indf2	equ	0xFDF
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function i2_timer1_enable *****************
  6506 ;; Defined at:
  6507 ;;		line 628 in file "user.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;		None
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		status,2, status,0
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0
  6522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6524 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6525 ;;Total ram usage:        0 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_get_next_state
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text34
  6535  00176C                     __ptext34:
  6536                           	opt stack 0
  6537  00176C                     i2_timer1_enable:
  6538                           	opt stack 24
  6539                           
  6540                           ;user.c: 630: T1CON |= 1 << 0;
  6541                           
  6542                           ;incstack = 0
  6543  00176C  80CD               	bsf	4045,0,c	;volatile
  6544  00176E  0012               	return		;funcret
  6545  001770                     __end_ofi2_timer1_enable:
  6546                           	opt stack 0
  6547                           pclatu	equ	0xFFB
  6548                           pclath	equ	0xFFA
  6549                           tblptru	equ	0xFF8
  6550                           tblptrh	equ	0xFF7
  6551                           tblptrl	equ	0xFF6
  6552                           tablat	equ	0xFF5
  6553                           prodh	equ	0xFF4
  6554                           prodl	equ	0xFF3
  6555                           intcon	equ	0xFF2
  6556                           intcon2	equ	0xFF1
  6557                           postinc0	equ	0xFEE
  6558                           fsr0h	equ	0xFEA
  6559                           fsr0l	equ	0xFE9
  6560                           wreg	equ	0xFE8
  6561                           indf1	equ	0xFE7
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           fsr2h	equ	0xFDA
  6566                           fsr2l	equ	0xFD9
  6567                           status	equ	0xFD8
  6568                           
  6569 ;; *************** function _set_time *****************
  6570 ;; Defined at:
  6571 ;;		line 231 in file "user.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  seconds         1    wreg     unsigned char 
  6574 ;;  minutes         1    7[COMRAM] unsigned char 
  6575 ;;  hour            1    8[COMRAM] unsigned char 
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;  seconds         1    9[COMRAM] unsigned char 
  6578 ;;  hour_reg        1   12[COMRAM] unsigned char 
  6579 ;;  min_reg         1   11[COMRAM] unsigned char 
  6580 ;;  sec_reg         1   10[COMRAM] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      void 
  6583 ;; Registers used:
  6584 ;;		wreg, status,2, status,0, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6590 ;;      Params:         2       0       0       0       0       0       0       0       0
  6591 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6592 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6593 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6594 ;;Total ram usage:        6 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    3
  6597 ;; This function calls:
  6598 ;;		_byte_write
  6599 ;;		_get_hour_reg
  6600 ;;		i2_get_seconds_reg
  6601 ;; This function is called by:
  6602 ;;		_get_next_state
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text35
  6607  001652                     __ptext35:
  6608                           	opt stack 0
  6609  001652                     _set_time:
  6610                           	opt stack 21
  6611                           
  6612                           ;incstack = 0
  6613                           ;set_time@seconds stored from wreg
  6614  001652  6E0A               	movwf	set_time@seconds,c
  6615                           
  6616                           ;user.c: 234: char sec_reg = get_seconds_reg(seconds);
  6617  001654  500A               	movf	set_time@seconds,w,c
  6618  001656  EC92  F00A         	call	i2_get_seconds_reg
  6619  00165A  6E0B               	movwf	set_time@sec_reg,c
  6620                           
  6621                           ;user.c: 235: char min_reg = get_seconds_reg(minutes);
  6622  00165C  5008               	movf	set_time@minutes,w,c
  6623  00165E  EC92  F00A         	call	i2_get_seconds_reg
  6624  001662  6E0C               	movwf	set_time@min_reg,c
  6625                           
  6626                           ;user.c: 236: char hour_reg = get_hour_reg(hour);
  6627  001664  5009               	movf	set_time@hour,w,c
  6628  001666  EC61  F00B         	call	_get_hour_reg
  6629  00166A  6E0D               	movwf	set_time@hour_reg,c
  6630                           
  6631                           ;user.c: 238: byte_write(0x80,sec_reg);
  6632  00166C  C00B  F006         	movff	set_time@sec_reg,byte_write@value
  6633  001670  0E80               	movlw	128
  6634  001672  EC8A  F00B         	call	_byte_write
  6635                           
  6636                           ;user.c: 239: byte_write(0x82,min_reg);
  6637  001676  C00C  F006         	movff	set_time@min_reg,byte_write@value
  6638  00167A  0E82               	movlw	130
  6639  00167C  EC8A  F00B         	call	_byte_write
  6640                           
  6641                           ;user.c: 240: byte_write(0x84,hour_reg);
  6642  001680  C00D  F006         	movff	set_time@hour_reg,byte_write@value
  6643  001684  0E84               	movlw	132
  6644  001686  EC8A  F00B         	call	_byte_write
  6645  00168A  0012               	return		;funcret
  6646  00168C                     __end_of_set_time:
  6647                           	opt stack 0
  6648                           pclatu	equ	0xFFB
  6649                           pclath	equ	0xFFA
  6650                           tblptru	equ	0xFF8
  6651                           tblptrh	equ	0xFF7
  6652                           tblptrl	equ	0xFF6
  6653                           tablat	equ	0xFF5
  6654                           prodh	equ	0xFF4
  6655                           prodl	equ	0xFF3
  6656                           intcon	equ	0xFF2
  6657                           intcon2	equ	0xFF1
  6658                           postinc0	equ	0xFEE
  6659                           fsr0h	equ	0xFEA
  6660                           fsr0l	equ	0xFE9
  6661                           wreg	equ	0xFE8
  6662                           indf1	equ	0xFE7
  6663                           fsr1h	equ	0xFE2
  6664                           fsr1l	equ	0xFE1
  6665                           indf2	equ	0xFDF
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function i2_get_seconds_reg *****************
  6671 ;; Defined at:
  6672 ;;		line 292 in file "user.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  seconds         1    wreg     unsigned char 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  seconds         1    1[COMRAM] unsigned char 
  6677 ;;  get_seconds_    1    0[COMRAM] unsigned char 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  1    wreg      unsigned char 
  6680 ;; Registers used:
  6681 ;;		wreg, status,2, status,0
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0
  6688 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6689 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6690 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6691 ;;Total ram usage:        2 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; This function calls:
  6694 ;;		Nothing
  6695 ;; This function is called by:
  6696 ;;		_set_time
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text36
  6701  001524                     __ptext36:
  6702                           	opt stack 0
  6703  001524                     i2_get_seconds_reg:
  6704                           	opt stack 23
  6705                           
  6706                           ;incstack = 0
  6707                           ;i2get_seconds_reg@seconds stored from wreg
  6708  001524  6E02               	movwf	i2get_seconds_reg@seconds,c
  6709                           
  6710                           ;user.c: 294: char res = 0;
  6711  001526  0E00               	movlw	0
  6712  001528  6E01               	movwf	i2get_seconds_reg@res,c
  6713                           
  6714                           ;user.c: 295: if(seconds<10)
  6715  00152A  0E0A               	movlw	10
  6716  00152C  6002               	cpfslt	i2get_seconds_reg@seconds,c
  6717  00152E  D003               	goto	i2l2837
  6718                           
  6719                           ;user.c: 296: {
  6720                           ;user.c: 297: res = seconds;
  6721  001530  C002  F001         	movff	i2get_seconds_reg@seconds,i2get_seconds_reg@res
  6722                           
  6723                           ;user.c: 298: }
  6724  001534  D020               	goto	i2l2855
  6725  001536                     i2l2837:
  6726                           
  6727                           ;user.c: 299: else if(seconds <20)
  6728  001536  0E14               	movlw	20
  6729  001538  6002               	cpfslt	i2get_seconds_reg@seconds,c
  6730  00153A  D004               	goto	i2l2841
  6731                           
  6732                           ;user.c: 300: {
  6733                           ;user.c: 301: res = 1<<4 | (seconds - 10);
  6734  00153C  5002               	movf	i2get_seconds_reg@seconds,w,c
  6735  00153E  0FF6               	addlw	246
  6736  001540  0910               	iorlw	16
  6737  001542  D018               	goto	L43
  6738  001544                     i2l2841:
  6739                           
  6740                           ;user.c: 303: else if(seconds <30)
  6741  001544  0E1E               	movlw	30
  6742  001546  6002               	cpfslt	i2get_seconds_reg@seconds,c
  6743  001548  D004               	goto	i2l2845
  6744                           
  6745                           ;user.c: 304: {
  6746                           ;user.c: 305: res = 2<<4 | (seconds -20);
  6747  00154A  5002               	movf	i2get_seconds_reg@seconds,w,c
  6748  00154C  0FEC               	addlw	236
  6749  00154E  0920               	iorlw	32
  6750  001550  D011               	goto	L43
  6751  001552                     i2l2845:
  6752                           
  6753                           ;user.c: 307: else if(seconds <40)
  6754  001552  0E28               	movlw	40
  6755  001554  6002               	cpfslt	i2get_seconds_reg@seconds,c
  6756  001556  D004               	goto	i2l2849
  6757                           
  6758                           ;user.c: 308: {
  6759                           ;user.c: 309: res = 3<<4 | (seconds - 30);
  6760  001558  5002               	movf	i2get_seconds_reg@seconds,w,c
  6761  00155A  0FE2               	addlw	226
  6762  00155C  0930               	iorlw	48
  6763  00155E  D00A               	goto	L43
  6764  001560                     i2l2849:
  6765                           
  6766                           ;user.c: 311: else if(seconds <50)
  6767  001560  0E32               	movlw	50
  6768  001562  6002               	cpfslt	i2get_seconds_reg@seconds,c
  6769  001564  D004               	goto	i2l2853
  6770                           
  6771                           ;user.c: 312: {
  6772                           ;user.c: 313: res = 4<<4 | (seconds - 40);
  6773  001566  5002               	movf	i2get_seconds_reg@seconds,w,c
  6774  001568  0FD8               	addlw	216
  6775  00156A  0940               	iorlw	64
  6776  00156C  D003               	goto	L43
  6777  00156E                     i2l2853:
  6778                           
  6779                           ;user.c: 315: else
  6780                           ;user.c: 316: {
  6781                           ;user.c: 317: res = 5<<4 | (seconds -50);
  6782  00156E  5002               	movf	i2get_seconds_reg@seconds,w,c
  6783  001570  0FCE               	addlw	206
  6784  001572  0950               	iorlw	80
  6785  001574                     L43:
  6786  001574  6E01               	movwf	i2get_seconds_reg@res,c
  6787  001576                     i2l2855:
  6788                           
  6789                           ;user.c: 318: }
  6790                           ;user.c: 320: return res;
  6791  001576  5001               	movf	i2get_seconds_reg@res,w,c
  6792  001578  0012               	return	
  6793  00157A                     __end_ofi2_get_seconds_reg:
  6794                           	opt stack 0
  6795                           pclatu	equ	0xFFB
  6796                           pclath	equ	0xFFA
  6797                           tblptru	equ	0xFF8
  6798                           tblptrh	equ	0xFF7
  6799                           tblptrl	equ	0xFF6
  6800                           tablat	equ	0xFF5
  6801                           prodh	equ	0xFF4
  6802                           prodl	equ	0xFF3
  6803                           intcon	equ	0xFF2
  6804                           intcon2	equ	0xFF1
  6805                           postinc0	equ	0xFEE
  6806                           fsr0h	equ	0xFEA
  6807                           fsr0l	equ	0xFE9
  6808                           wreg	equ	0xFE8
  6809                           indf1	equ	0xFE7
  6810                           fsr1h	equ	0xFE2
  6811                           fsr1l	equ	0xFE1
  6812                           indf2	equ	0xFDF
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _get_hour_reg *****************
  6818 ;; Defined at:
  6819 ;;		line 331 in file "user.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  hour            1    wreg     unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  hour            1    1[COMRAM] unsigned char 
  6824 ;;  res             1    0[COMRAM] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      unsigned char 
  6827 ;; Registers used:
  6828 ;;		wreg, status,2, status,0
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6834 ;;      Params:         0       0       0       0       0       0       0       0       0
  6835 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6836 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6837 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6838 ;;Total ram usage:        2 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_set_time
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text37
  6848  0016C2                     __ptext37:
  6849                           	opt stack 0
  6850  0016C2                     _get_hour_reg:
  6851                           	opt stack 23
  6852                           
  6853                           ;incstack = 0
  6854                           ;get_hour_reg@hour stored from wreg
  6855  0016C2  6E02               	movwf	get_hour_reg@hour,c
  6856                           
  6857                           ;user.c: 333: char res = 0;
  6858  0016C4  0E00               	movlw	0
  6859  0016C6  6E01               	movwf	get_hour_reg@res,c
  6860                           
  6861                           ;user.c: 334: if(hour < 10)
  6862  0016C8  0E0A               	movlw	10
  6863  0016CA  6002               	cpfslt	get_hour_reg@hour,c
  6864  0016CC  D003               	goto	i2l2741
  6865                           
  6866                           ;user.c: 335: {
  6867                           ;user.c: 336: res = hour;
  6868  0016CE  C002  F001         	movff	get_hour_reg@hour,get_hour_reg@res
  6869                           
  6870                           ;user.c: 337: }
  6871  0016D2  D00B               	goto	i2l2747
  6872  0016D4                     i2l2741:
  6873                           
  6874                           ;user.c: 338: else if(hour < 20)
  6875  0016D4  0E14               	movlw	20
  6876  0016D6  6002               	cpfslt	get_hour_reg@hour,c
  6877  0016D8  D004               	goto	i2l2745
  6878                           
  6879                           ;user.c: 339: {
  6880                           ;user.c: 340: res = 1<<4 | (hour -10);
  6881  0016DA  5002               	movf	get_hour_reg@hour,w,c
  6882  0016DC  0FF6               	addlw	246
  6883  0016DE  0910               	iorlw	16
  6884  0016E0  D003               	goto	L44
  6885  0016E2                     i2l2745:
  6886                           
  6887                           ;user.c: 342: else
  6888                           ;user.c: 343: {
  6889                           ;user.c: 344: res = 2<<4 | (hour-20);
  6890  0016E2  5002               	movf	get_hour_reg@hour,w,c
  6891  0016E4  0FEC               	addlw	236
  6892  0016E6  0920               	iorlw	32
  6893  0016E8                     L44:
  6894  0016E8  6E01               	movwf	get_hour_reg@res,c
  6895  0016EA                     i2l2747:
  6896                           
  6897                           ;user.c: 345: }
  6898                           ;user.c: 347: return res;
  6899  0016EA  5001               	movf	get_hour_reg@res,w,c
  6900  0016EC  0012               	return	
  6901  0016EE                     __end_of_get_hour_reg:
  6902                           	opt stack 0
  6903                           pclatu	equ	0xFFB
  6904                           pclath	equ	0xFFA
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           intcon2	equ	0xFF1
  6913                           postinc0	equ	0xFEE
  6914                           fsr0h	equ	0xFEA
  6915                           fsr0l	equ	0xFE9
  6916                           wreg	equ	0xFE8
  6917                           indf1	equ	0xFE7
  6918                           fsr1h	equ	0xFE2
  6919                           fsr1l	equ	0xFE1
  6920                           indf2	equ	0xFDF
  6921                           fsr2h	equ	0xFDA
  6922                           fsr2l	equ	0xFD9
  6923                           status	equ	0xFD8
  6924                           
  6925 ;; *************** function _byte_write *****************
  6926 ;; Defined at:
  6927 ;;		line 219 in file "user.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;  address         1    wreg     unsigned char 
  6930 ;;  value           1    5[COMRAM] unsigned char 
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  address         1    6[COMRAM] unsigned char 
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      void 
  6935 ;; Registers used:
  6936 ;;		wreg, status,2, status,0, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6942 ;;      Params:         1       0       0       0       0       0       0       0       0
  6943 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6944 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6945 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6946 ;;Total ram usage:        2 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    2
  6949 ;; This function calls:
  6950 ;;		i2_ce_disable
  6951 ;;		i2_ce_enable
  6952 ;;		i2_send_command
  6953 ;; This function is called by:
  6954 ;;		_set_time
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text38
  6959  001714                     __ptext38:
  6960                           	opt stack 0
  6961  001714                     _byte_write:
  6962                           	opt stack 21
  6963                           
  6964                           ;incstack = 0
  6965                           ;byte_write@address stored from wreg
  6966  001714  6E07               	movwf	byte_write@address,c
  6967                           
  6968                           ;user.c: 221: ce_enable();
  6969  001716  ECBA  F00B         	call	i2_ce_enable	;wreg free
  6970                           
  6971                           ;user.c: 224: send_command(address);
  6972  00171A  5007               	movf	byte_write@address,w,c
  6973  00171C  ECE3  F009         	call	i2_send_command
  6974                           
  6975                           ;user.c: 225: send_command(value);
  6976  001720  5006               	movf	byte_write@value,w,c
  6977  001722  ECE3  F009         	call	i2_send_command
  6978                           
  6979                           ;user.c: 227: ce_disable();
  6980  001726  ECA5  F00B         	call	i2_ce_disable	;wreg free
  6981  00172A  0012               	return		;funcret
  6982  00172C                     __end_of_byte_write:
  6983                           	opt stack 0
  6984                           pclatu	equ	0xFFB
  6985                           pclath	equ	0xFFA
  6986                           tblptru	equ	0xFF8
  6987                           tblptrh	equ	0xFF7
  6988                           tblptrl	equ	0xFF6
  6989                           tablat	equ	0xFF5
  6990                           prodh	equ	0xFF4
  6991                           prodl	equ	0xFF3
  6992                           intcon	equ	0xFF2
  6993                           intcon2	equ	0xFF1
  6994                           postinc0	equ	0xFEE
  6995                           fsr0h	equ	0xFEA
  6996                           fsr0l	equ	0xFE9
  6997                           wreg	equ	0xFE8
  6998                           indf1	equ	0xFE7
  6999                           fsr1h	equ	0xFE2
  7000                           fsr1l	equ	0xFE1
  7001                           indf2	equ	0xFDF
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function i2_send_command *****************
  7007 ;; Defined at:
  7008 ;;		line 352 in file "user.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  command         1    wreg     unsigned char 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  command         1    2[COMRAM] unsigned char 
  7013 ;;  send_command    2    3[COMRAM] int 
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  1    wreg      void 
  7016 ;; Registers used:
  7017 ;;		wreg, status,2, status,0, cstack
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7023 ;;      Params:         0       0       0       0       0       0       0       0       0
  7024 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7025 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7026 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7027 ;;Total ram usage:        5 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; Hardware stack levels required when called:    1
  7030 ;; This function calls:
  7031 ;;		i2_io_as_output
  7032 ;; This function is called by:
  7033 ;;		_byte_write
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           	psect	text39
  7038  0013C6                     __ptext39:
  7039                           	opt stack 0
  7040  0013C6                     i2_send_command:
  7041                           	opt stack 21
  7042                           
  7043                           ;incstack = 0
  7044                           ;i2send_command@command stored from wreg
  7045  0013C6  6E03               	movwf	i2send_command@command,c
  7046                           
  7047                           ;user.c: 354: int i;
  7048                           ;user.c: 355: io_as_output();
  7049  0013C8  ECB8  F00B         	call	i2_io_as_output	;wreg free
  7050                           
  7051                           ;user.c: 356: for(i=0; i<8; i++)
  7052  0013CC  0E00               	movlw	0
  7053  0013CE  6E05               	movwf	i2send_command@i+1,c
  7054  0013D0  0E00               	movlw	0
  7055  0013D2  6E04               	movwf	i2send_command@i,c
  7056  0013D4                     i2l2683:
  7057  0013D4  BE05               	btfsc	i2send_command@i+1,7,c
  7058  0013D6  D006               	goto	i2l2687
  7059  0013D8  5005               	movf	i2send_command@i+1,w,c
  7060  0013DA  E121               	bnz	i2l393
  7061  0013DC  0E08               	movlw	8
  7062  0013DE  5C04               	subwf	i2send_command@i,w,c
  7063  0013E0  B0D8               	btfsc	status,0,c
  7064  0013E2  0012               	return	
  7065  0013E4                     i2l2687:
  7066                           
  7067                           ;user.c: 357: {
  7068                           ;user.c: 358: RA3 = command>>i & 0x01;
  7069  0013E4  C004  F001         	movff	i2send_command@i,??i2_send_command
  7070  0013E8  C003  F002         	movff	i2send_command@command,??i2_send_command+1
  7071  0013EC  2A01               	incf	??i2_send_command,f,c
  7072  0013EE  D002               	goto	i2u219_44
  7073  0013F0                     i2u219_45:
  7074  0013F0  90D8               	bcf	status,0,c
  7075  0013F2  3202               	rrcf	??i2_send_command+1,f,c
  7076  0013F4                     i2u219_44:
  7077  0013F4  2E01               	decfsz	??i2_send_command,f,c
  7078  0013F6  D7FC               	goto	i2u219_45
  7079  0013F8  3002               	rrcf	??i2_send_command+1,w,c
  7080  0013FA  A0D8               	btfss	status,0,c
  7081  0013FC  D002               	goto	i2u220_40
  7082  0013FE  8680               	bsf	3968,3,c	;volatile
  7083  001400  D001               	goto	i2l2689
  7084  001402                     i2u220_40:
  7085  001402  9680               	bcf	3968,3,c	;volatile
  7086  001404                     i2l2689:
  7087                           
  7088                           ;user.c: 359: RA2 = 1;
  7089  001404  8480               	bsf	3968,2,c	;volatile
  7090                           
  7091                           ;user.c: 360: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  7092  001406  0E10               	movlw	16
  7093  001408                     i2u509_47:
  7094  001408  2EE8               	decfsz	wreg,f,c
  7095  00140A  D7FE               	bra	i2u509_47
  7096  00140C  D000               	nop2	
  7097                           
  7098                           ;user.c: 361: RA2 = 0;
  7099  00140E  9480               	bcf	3968,2,c	;volatile
  7100                           
  7101                           ;user.c: 362: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  7102  001410  0E06               	movlw	6
  7103  001412                     i2u510_47:
  7104  001412  2EE8               	decfsz	wreg,f,c
  7105  001414  D7FE               	bra	i2u510_47
  7106  001416  D000               	nop2	
  7107  001418  4A04               	infsnz	i2send_command@i,f,c
  7108  00141A  2A05               	incf	i2send_command@i+1,f,c
  7109  00141C  D7DB               	goto	i2l2683
  7110  00141E                     i2l393:
  7111  00141E  0012               	return		;funcret
  7112  001420                     __end_ofi2_send_command:
  7113                           	opt stack 0
  7114                           pclatu	equ	0xFFB
  7115                           pclath	equ	0xFFA
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           intcon	equ	0xFF2
  7123                           intcon2	equ	0xFF1
  7124                           postinc0	equ	0xFEE
  7125                           fsr0h	equ	0xFEA
  7126                           fsr0l	equ	0xFE9
  7127                           wreg	equ	0xFE8
  7128                           indf1	equ	0xFE7
  7129                           fsr1h	equ	0xFE2
  7130                           fsr1l	equ	0xFE1
  7131                           indf2	equ	0xFDF
  7132                           fsr2h	equ	0xFDA
  7133                           fsr2l	equ	0xFD9
  7134                           status	equ	0xFD8
  7135                           
  7136 ;; *************** function i2_io_as_output *****************
  7137 ;; Defined at:
  7138 ;;		line 374 in file "user.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;		None
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      void 
  7145 ;; Registers used:
  7146 ;;		None
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0
  7153 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7154 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7155 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7156 ;;Total ram usage:        0 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; This function calls:
  7159 ;;		Nothing
  7160 ;; This function is called by:
  7161 ;;		i2_send_command
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           	psect	text40
  7166  001770                     __ptext40:
  7167                           	opt stack 0
  7168  001770                     i2_io_as_output:
  7169                           	opt stack 21
  7170                           
  7171                           ;user.c: 376: TRISA3 = 0;
  7172                           
  7173                           ;incstack = 0
  7174  001770  9692               	bcf	3986,3,c	;volatile
  7175  001772  0012               	return		;funcret
  7176  001774                     __end_ofi2_io_as_output:
  7177                           	opt stack 0
  7178                           pclatu	equ	0xFFB
  7179                           pclath	equ	0xFFA
  7180                           tblptru	equ	0xFF8
  7181                           tblptrh	equ	0xFF7
  7182                           tblptrl	equ	0xFF6
  7183                           tablat	equ	0xFF5
  7184                           prodh	equ	0xFF4
  7185                           prodl	equ	0xFF3
  7186                           intcon	equ	0xFF2
  7187                           intcon2	equ	0xFF1
  7188                           postinc0	equ	0xFEE
  7189                           fsr0h	equ	0xFEA
  7190                           fsr0l	equ	0xFE9
  7191                           wreg	equ	0xFE8
  7192                           indf1	equ	0xFE7
  7193                           fsr1h	equ	0xFE2
  7194                           fsr1l	equ	0xFE1
  7195                           indf2	equ	0xFDF
  7196                           fsr2h	equ	0xFDA
  7197                           fsr2l	equ	0xFD9
  7198                           status	equ	0xFD8
  7199                           
  7200 ;; *************** function i2_ce_enable *****************
  7201 ;; Defined at:
  7202 ;;		line 178 in file "user.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;		None
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;		None
  7207 ;; Return value:  Size  Location     Type
  7208 ;;                  1    wreg      void 
  7209 ;; Registers used:
  7210 ;;		None
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7216 ;;      Params:         0       0       0       0       0       0       0       0       0
  7217 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7218 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7219 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7220 ;;Total ram usage:        0 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_byte_write
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text41
  7230  001774                     __ptext41:
  7231                           	opt stack 0
  7232  001774                     i2_ce_enable:
  7233                           	opt stack 22
  7234                           
  7235                           ;user.c: 181: RA5 = 1;
  7236                           
  7237                           ;incstack = 0
  7238  001774  8A80               	bsf	3968,5,c	;volatile
  7239  001776  0012               	return		;funcret
  7240  001778                     __end_ofi2_ce_enable:
  7241                           	opt stack 0
  7242                           pclatu	equ	0xFFB
  7243                           pclath	equ	0xFFA
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           intcon2	equ	0xFF1
  7252                           postinc0	equ	0xFEE
  7253                           fsr0h	equ	0xFEA
  7254                           fsr0l	equ	0xFE9
  7255                           wreg	equ	0xFE8
  7256                           indf1	equ	0xFE7
  7257                           fsr1h	equ	0xFE2
  7258                           fsr1l	equ	0xFE1
  7259                           indf2	equ	0xFDF
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function i2_ce_disable *****************
  7265 ;; Defined at:
  7266 ;;		line 185 in file "user.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;		None
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;		None
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      void 
  7273 ;; Registers used:
  7274 ;;		None
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7280 ;;      Params:         0       0       0       0       0       0       0       0       0
  7281 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7283 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7284 ;;Total ram usage:        0 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; This function calls:
  7287 ;;		Nothing
  7288 ;; This function is called by:
  7289 ;;		_byte_write
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           	psect	text42
  7294  00174A                     __ptext42:
  7295                           	opt stack 0
  7296  00174A                     i2_ce_disable:
  7297                           	opt stack 22
  7298                           
  7299                           ;user.c: 187: RA5 = 0;
  7300                           
  7301                           ;incstack = 0
  7302  00174A  9A80               	bcf	3968,5,c	;volatile
  7303                           
  7304                           ;user.c: 188: RA2 = 0;
  7305  00174C  9480               	bcf	3968,2,c	;volatile
  7306  00174E  0012               	return		;funcret
  7307  001750                     __end_ofi2_ce_disable:
  7308                           	opt stack 0
  7309  0000                     pclatu	equ	0xFFB
  7310                           pclath	equ	0xFFA
  7311                           tblptru	equ	0xFF8
  7312                           tblptrh	equ	0xFF7
  7313                           tblptrl	equ	0xFF6
  7314                           tablat	equ	0xFF5
  7315                           prodh	equ	0xFF4
  7316                           prodl	equ	0xFF3
  7317                           intcon	equ	0xFF2
  7318                           intcon2	equ	0xFF1
  7319                           postinc0	equ	0xFEE
  7320                           fsr0h	equ	0xFEA
  7321                           fsr0l	equ	0xFE9
  7322                           wreg	equ	0xFE8
  7323                           indf1	equ	0xFE7
  7324                           fsr1h	equ	0xFE2
  7325                           fsr1l	equ	0xFE1
  7326                           indf2	equ	0xFDF
  7327                           fsr2h	equ	0xFDA
  7328                           fsr2l	equ	0xFD9
  7329                           status	equ	0xFD8
  7330                           pclatu	equ	0xFFB
  7331                           pclath	equ	0xFFA
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           intcon	equ	0xFF2
  7339                           intcon2	equ	0xFF1
  7340                           postinc0	equ	0xFEE
  7341                           fsr0h	equ	0xFEA
  7342                           fsr0l	equ	0xFE9
  7343                           wreg	equ	0xFE8
  7344                           indf1	equ	0xFE7
  7345                           fsr1h	equ	0xFE2
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352                           	psect	rparam
  7353  0000                     pclatu	equ	0xFFB
  7354                           pclath	equ	0xFFA
  7355                           tblptru	equ	0xFF8
  7356                           tblptrh	equ	0xFF7
  7357                           tblptrl	equ	0xFF6
  7358                           tablat	equ	0xFF5
  7359                           prodh	equ	0xFF4
  7360                           prodl	equ	0xFF3
  7361                           intcon	equ	0xFF2
  7362                           intcon2	equ	0xFF1
  7363                           postinc0	equ	0xFEE
  7364                           fsr0h	equ	0xFEA
  7365                           fsr0l	equ	0xFE9
  7366                           wreg	equ	0xFE8
  7367                           indf1	equ	0xFE7
  7368                           fsr1h	equ	0xFE2
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           fsr2h	equ	0xFDA
  7372                           fsr2l	equ	0xFD9
  7373                           status	equ	0xFD8
  7374                           
  7375                           	psect	temp
  7376  00003A                     btemp:
  7377                           	opt stack 0
  7378  00003A                     	ds	1
  7379  0000                     int$flags	set	btemp
  7380                           pclatu	equ	0xFFB
  7381                           pclath	equ	0xFFA
  7382                           tblptru	equ	0xFF8
  7383                           tblptrh	equ	0xFF7
  7384                           tblptrl	equ	0xFF6
  7385                           tablat	equ	0xFF5
  7386                           prodh	equ	0xFF4
  7387                           prodl	equ	0xFF3
  7388                           intcon	equ	0xFF2
  7389                           intcon2	equ	0xFF1
  7390                           postinc0	equ	0xFEE
  7391                           fsr0h	equ	0xFEA
  7392                           fsr0l	equ	0xFE9
  7393                           wreg	equ	0xFE8
  7394                           indf1	equ	0xFE7
  7395                           fsr1h	equ	0xFE2
  7396                           fsr1l	equ	0xFE1
  7397                           indf2	equ	0xFDF
  7398                           fsr2h	equ	0xFDA
  7399                           fsr2l	equ	0xFD9
  7400                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         23
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      57
    BANK0           160     72      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    update_timer1_counter_10@counter	PTR unsigned char  size(2) Largest target is 1
		 -> timer1_counter_10(BANK0[1]), 

    get_timer1_counter_speed@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_timer1_counter_down@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_timer1_counter@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_time@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    put_nums@nums	PTR unsigned char  size(2) Largest target is 6
		 -> masked_digits(BANK0[6]), 


Critical Paths under _main in COMRAM

    _get_timer1_counter_speed->_get_cents_reg
    _get_cents_reg->___awdiv
    _get_timer1_counter_down->_get_seconds_reg
    _get_timer1_counter->_get_seconds_reg
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _high_isr in COMRAM

    _high_isr->_get_next_state
    _put_nums->_put_num
    _get_next_state->_set_time
    _set_time->_byte_write
    _byte_write->i2_send_command

Critical Paths under _main in BANK0

    _main->_get_time
    _get_cents_reg->___awdiv
    _get_cents_reg->___awmod

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    5718
                                             69 BANK0      3     3      0
                _ConfigureOscillator
                            _InitApp
                     _buzzer_disable
                           _get_time
                 _get_timer1_counter
            _get_timer1_counter_down
           _get_timer1_counter_speed
                  _ir_is_code_number
                     _timer1_disable
                      _timer1_enable
 ---------------------------------------------------------------------------------
 (1) _timer1_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ir_is_code_number                                    1     1      0     310
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter_speed                             3     1      2    2186
                                             45 COMRAM     1     1      0
                                             64 BANK0      2     0      2
                      _get_cents_reg
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (2) _get_cents_reg                                        4     4      0    1337
                                             41 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     613
                                             37 COMRAM     2     2      0
                                             60 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     625
                                             37 COMRAM     4     4      0
                                             60 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter_down                              3     1      2     939
                                             39 COMRAM     1     1      0
                                             60 BANK0      2     0      2
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter                                   3     1      2     939
                                             39 COMRAM     1     1      0
                                             60 BANK0      2     0      2
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (2) _get_seconds_reg                                      2     2      0     393
                                             37 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             9     6      3    1304
                                             60 BANK0      9     6      3
                          _byte_read
 ---------------------------------------------------------------------------------
 (2) _byte_read                                            6     6      0     297
                                             42 COMRAM     6     6      0
                         _ce_disable
                          _ce_enable
                        _io_as_input
                       _send_command
 ---------------------------------------------------------------------------------
 (3) _send_command                                         5     5      0     130
                                             37 COMRAM     5     5      0
                       _io_as_output
 ---------------------------------------------------------------------------------
 (4) _io_as_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _io_as_input                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_enable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_disable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buzzer_disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            77    77      0    5358
                                             20 COMRAM    17    17      0
                                              0 BANK0     60    60      0
                     _get_next_state
                  _ir_get_human_code
                      _point_disable
                       _point_enable
                           _put_nums
                      _update_buzzer
                       _update_point
           _update_timer1_counter_10
 ---------------------------------------------------------------------------------
 (6) _update_timer1_counter_10                             4     2      2     692
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _update_point                                         3     0      3     306
                                              0 COMRAM     3     0      3
                      _point_disable
                       _point_enable
 ---------------------------------------------------------------------------------
 (7) _point_enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _point_disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _update_buzzer                                        3     0      3     306
                                              0 COMRAM     3     0      3
                      _buzzer_enable
                   i2_buzzer_disable
 ---------------------------------------------------------------------------------
 (7) i2_buzzer_disable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _buzzer_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _put_nums                                             4     2      2     536
                                              7 COMRAM     4     2      2
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (7) _put_num                                             17    17      0     348
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (7) _get_num                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ir_get_human_code                                    5     3      2     115
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _get_next_state                                       7     3      4    2947
                                             13 COMRAM     7     3      4
                           _set_time
                    i2_timer1_enable
 ---------------------------------------------------------------------------------
 (7) i2_timer1_enable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _set_time                                             6     4      2    1056
                                              7 COMRAM     6     4      2
                         _byte_write
                       _get_hour_reg
                  i2_get_seconds_reg
 ---------------------------------------------------------------------------------
 (8) i2_get_seconds_reg                                    2     2      0     271
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _get_hour_reg                                         2     2      0     136
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _byte_write                                           2     1      1     362
                                              5 COMRAM     2     1      1
                       i2_ce_disable
                        i2_ce_enable
                     i2_send_command
 ---------------------------------------------------------------------------------
 (9) i2_send_command                                       5     5      0      90
                                              0 COMRAM     5     5      0
                     i2_io_as_output
 ---------------------------------------------------------------------------------
 (10) i2_io_as_output                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _buzzer_disable
   _get_time
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
   _get_timer1_counter
     _get_seconds_reg
   _get_timer1_counter_down
     _get_seconds_reg
   _get_timer1_counter_speed
     _get_cents_reg
       ___awdiv
       ___awmod
     _get_seconds_reg
   _ir_is_code_number
   _timer1_disable
   _timer1_enable

 _high_isr (ROOT)
   _get_next_state
     _set_time
       _byte_write
         i2_ce_disable
         i2_ce_enable
         i2_send_command
           i2_io_as_output
       _get_hour_reg
       i2_get_seconds_reg
     i2_timer1_enable
   _ir_get_human_code
   _point_disable
   _point_enable
   _put_nums
     _get_num
     _put_num
   _update_buzzer
     _buzzer_enable
     i2_buzzer_disable
   _update_point
     _point_disable
     _point_enable
   _update_timer1_counter_10

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      5A       5       56.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      39       1       60.6%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      93      11        0.0%
DATA                 0      0      93       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun May 28 19:27:42 2017

                     _update_point 15C2                      _update_buzzer 160A  
                     ___awdiv@sign 0027                        __CFG_BOR$ON 000000  
                  ??_point_disable 0001                        _put_num$939 0005  
                      __CFG_BORV$3 000000                       __CFG_CP0$OFF 000000  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                        __CFG_LVP$ON 000000  
                   i2_send_command 13C6                        __CFG_WDT$ON 000000  
         _update_timer1_counter_10 0B1C                                l350 12C6  
                              l159 052E                                l393 13C4  
                     __CFG_CPB$OFF 000000                                _RB0 007C08  
                              _RA2 007C02                                _RB1 007C09  
                              _RA3 007C03                                _RB3 007C0B  
                              _RA5 007C05                                _RB4 007C0C  
                              _RB5 007C0D                    ?_get_next_state 000E  
                     __CFG_CPD$OFF 000000                       ___awmod@sign 0027  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
      __size_of_get_timer1_counter 0090                       ?_io_as_input 0001  
                      high_isr@aux 0095              ir_get_human_code@code 0001  
                 ?_get_seconds_reg 0001                               l4201 10C2  
                             l4205 10CE                               l4221 10FE  
                             l4303 1518                               l4231 112A  
                             l4153 138A                               l4305 1520  
                             l4209 10DC                               l4233 1130  
                             l4241 1160                               l4225 110E  
                             l4155 13AA                               l4149 137A  
                             l4245 1170                               l4237 1154  
                             l4229 1120                               l4191 1090  
                             l4183 106C                               l4423 14CA  
                             l4193 1096                               l4177 1058  
                             l4417 14C6    update_timer1_counter_10@counter 0001  
                             l4275 1300                               l4259 12B6  
                             l4291 14EE                               l4523 058E  
                             l4189 1086                               l4525 05A0  
                             l4509 0558                               l4295 14FC  
                             l4287 14E0                               l4527 05B2  
                             l4519 0576                               l4471 04C8  
                             l4393 0D40                               l4633 0740  
                             l4609 06E4                               l4529 05C4  
                             l4465 04B2                               l4395 0D6E  
                             l4387 0D08                               l4299 150A  
                             l4619 0704                               l4539 05E2  
                             l4475 04D6                               l4467 04BC  
                             l4629 072A                               l4573 0654  
                             l4549 0600                               l4493 0528  
                             l4485 050A                               l4477 04EC  
                             l4637 0756                               l4575 0666  
                             l4559 061E                               l4487 050E  
                             l4577 0678                               l4569 063C  
                             l4579 068A                               l4499 053A  
                             l4589 06A8                               l4599 06C6  
                      get_time@aux 00A3                               _PIE1 000F9D  
                             u5037 12CA                               u5047 12F4  
            __size_ofi2_ce_disable 0006                               u5057 13AE  
                             u4370 13A8                               u4530 12DE  
                             u5067 13B8                               u4364 139A  
                             u4365 1396                               _RBIF 007F90  
                             u4554 12E8                               u4555 12E4  
                             u4548 12E0                               i2l72 0A9A  
                             i2l65 094E                               i2l83 0A34  
                             i2l77 09D2                               i2l96 0AE0  
                      i2_ce_enable 1774                               _aux1 00B1  
                             _main 047C                               _next 0031  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr2h 000FDA                               fsr0l 000FE9  
                             indf1 000FE7                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 003A                               prodh 000FF4  
                             prodl 000FF3                               start 000E  
                    __CFG_IESO$OFF 000000                     ??_get_hour_reg 0001  
      get_timer1_counter_down@data 009C                      __CFG_MCLRE$ON 000000  
                     ___param_bank 000000                       high_isr@code 0060  
                  __end_of_InitApp 136C                     ?_update_buzzer 0001  
                    ?_io_as_output 0001             __end_ofi2_send_command 1420  
      ir_is_code_number@human_code 0026                      __CFG_PLLDIV$1 000000  
  __end_of_get_timer1_counter_down 120A                    ??_get_cents_reg 002A  
                   __CFG_CCP2MX$ON 000000                              ?_main 0001  
                     get_time@data 009C                    __end_of___awdiv 10E6  
                  __end_of___awmod 117A                              _T0CON 000FD5  
                  ___awdiv@divisor 009E                              _T1CON 000FCD  
                            i2l403 0472                              i2l294 16C0  
                            i2l393 141E                              i2l289 1476  
                  ___awdiv@counter 0026                update_point@counter 0003  
                    __CFG_USBDIV$1 000000                       i2_ce_disable 174A  
              _ConfigureOscillator 1778                      __CFG_PWRT$OFF 000000  
                    __CFG_WRT0$OFF 000000                      __CFG_WRT1$OFF 000000  
                    __CFG_WRT2$OFF 000000                      __CFG_WRT3$OFF 000000  
                   __CFG_EBTR0$OFF 000000                     __CFG_FCMEN$OFF 000000  
                   __CFG_EBTR1$OFF 000000                     __CFG_EBTR2$OFF 000000  
                   __CFG_EBTR3$OFF 000000                    __end_of_get_num 0F9A  
                    __CFG_WRTB$OFF 000000                      __CFG_WRTC$OFF 000000  
                    __CFG_WRTD$OFF 000000                     __CFG_EBTRB$OFF 000000  
                            _state 00B8                              pclath 000FFA  
                            tablat 000FF5                    __end_of_put_num 1478  
                            status 000FD8               ?_ConfigureOscillator 0001  
                 ??i2_io_as_output 0001             get_timer1_counter@data 009C  
                  __initialization 16EE                      high_isr@i_156 009A  
                     __end_of_main 07FE                     ??_io_as_output 0026  
                  ?i2_send_command 0001                             ??_main 00A5  
                    __activetblptr 000002   __end_of_get_timer1_counter_speed 1040  
                           _ADCON1 000FC1                   get_hour_reg@hour 0002  
                 ___awdiv@dividend 009C                      get_time@hours 00A4  
                           i2l3201 01D6                             i2l3041 0DC8  
                           i2l3131 006A                             i2l3123 0042  
                           i2l3051 0DE6                             i2l3043 0DCE  
                           i2l3213 020E                             i2l3141 009E  
                           i2l3133 0078                             i2l3125 0050  
                           i2l3117 0028                             i2l3061 0E04  
                           i2l3053 0DEC                             i2l3045 0DD4  
                           i2l3311 03E2                             i2l3231 0264  
                           i2l3223 023C                             i2l3135 0080  
                           i2l3127 0058                             i2l3119 0030  
                           i2l3071 0E22                             i2l3063 0E0A  
                           i2l3055 0DF2                             i2l3047 0DDA  
                           i2l3039 0DC2                             i2l3321 0410  
                           i2l3305 03C6                             i2l3217 021C  
                           i2l3209 01FA                             i2l3153 00DE  
                           i2l3073 0E28                             i2l3065 0E10  
                           i2l3057 0DF8                             i2l3049 0DE0  
                           i2l3401 0B64                             i2l3315 03F0  
                           i2l3251 02C8                             i2l3147 00BE  
                           i2l3067 0E16                             i2l3059 0DFE  
                           i2l3403 0B70                             i2l3333 0448  
                           i2l3245 02B0                             i2l3165 0114  
                           i2l3069 0E1C                             i2l3421 0BC4  
                           i2l3327 0430                             i2l3319 0408  
                           i2l3239 0298                             i2l3159 00F6  
                           i2l3079 0E2C                             i2l3351 15EA  
                           i2l3431 0C00                             i2l3415 0BA8  
                           i2l3337 045C                             i2l3177 0150  
                           i2l3169 012A                             i2l3409 0B92  
                           i2l3417 0BAE                             i2l3601 0864  
                           i2l3283 034A                             i2l3259 02EE  
                           i2l3195 01BC                             i2l3187 0196  
                           i2l3451 0C56                             i2l3443 0C38  
                           i2l2741 16D4                             i2l3277 0332  
                           i2l3269 0312                             i2l2901 0EFE  
                           i2l3349 15E4                             i2l3437 0C22  
                           i2l3429 0BF4                             i2l3613 08AA  
                           i2l3605 087A                             i2l3383 16A4  
                           i2l3367 162C                             i2l3703 0AAC  
                           i2l3631 0948                             i2l3615 08BE  
                           i2l2745 16E2                             i2l2841 1544  
                           i2l3297 0392                             i2l3289 036A  
                           i2l2921 0F12                             i2l2913 0F0A  
                           i2l2905 0F02                             i2l3369 1632  
                           i2l3457 0C78                             i2l3393 0B34  
                           i2l3641 0972                             i2l3625 0910  
                           i2l2683 13D4                             i2l2747 16EA  
                           i2l3379 1694                             i2l3651 09AC  
                           i2l3619 08D4                             i2l2853 156E  
                           i2l2845 1552                             i2l2837 1536  
                           i2l2941 0F26                             i2l2933 0F1E  
                           i2l2925 0F16                             i2l2917 0F0E  
                           i2l2909 0F06                             i2l3709 0ADE  
                           i2l3661 09DE                             i2l3653 09BC  
                           i2l3637 095C                             i2l2687 13E4  
                           i2l2855 1576                             i2l3647 099E  
                           i2l2689 1404                             i2l2849 1560  
                           i2l2953 0F32                             i2l2945 0F2A  
                           i2l2937 0F22                             i2l2929 0F1A  
                           i2l2865 142E                             i2l3673 0A24  
                           i2l3683 0A40                             i2l3667 0A0C  
                           i2l2949 0F2E                             i2l2893 0EF6  
                           i2l2877 1462                             i2l2869 143E  
                           i2l3685 0A48                             i2l3693 0A60  
                           i2l2959 0F36                             i2l3687 0A50  
                           i2l3695 0A8A                             i2l3679 0A36  
                           _INTCON 000FF2                             i2l2897 0EFA  
                           i2l2889 0EF2                             i2l3689 0A58  
                           i2l4871 0EA8                             i2l4863 0E68  
                           i2l4873 0EBE                             i2l4865 0E7E  
                           i2l4875 0EC8                             i2l4867 0E8E  
                           i2l4877 0ED8                             i2l4869 0E9E  
                           _TMR0IF 007F92                             _TMR1IF 007CF0  
                           _TRISA2 007C92                             _TRISB1 007C99  
                           _TRISA3 007C93                             _TRISB3 007C9B  
                           _TRISA5 007C95                             _TRISB4 007C9C  
                  i2_timer1_enable 176C                          ??_InitApp 0026  
            ??_ConfigureOscillator 0026                     __CFG_XINST$OFF 000000  
                  ??_update_buzzer 0004                   __end_of_high_isr 0B1C  
                 __end_of_get_time 0DC0                    set_time@min_reg 000C  
                        ??___awdiv 0026                     __CFG_STVREN$ON 000000  
                        ??___awmod 0026                    set_time@sec_reg 000B  
                  set_time@minutes 0008                    set_time@seconds 000A  
                           clear_0 16F4                             clear_1 1700  
                 ___awdiv@quotient 0028                  _ir_get_human_code 0DC0  
                  ___awmod@divisor 009E                  ?i2_buzzer_disable 0001  
                  ___awmod@counter 0026                          ??_get_num 0001  
               get_seconds_reg@res 0026                 ?_ir_get_human_code 0001  
               ??i2_buzzer_disable 0001                   __end_of_set_time 168C  
                    _masked_digits 00AB                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
             __end_of_get_hour_reg 16EE                   __end_of_put_nums 16C2  
                        ??_put_num 0001                ??_ir_get_human_code 0003  
             __size_of_io_as_input 0004                       put_nums@nums 0008  
                       __accesstop 0060            __end_of__initialization 1706  
                  __CFG_PBADEN$OFF 000000                   ??_buzzer_disable 0026  
                    ___rparam_used 000001                 __size_of_ce_enable 0004  
       ??_update_timer1_counter_10 0003                     __pcstackCOMRAM 0001  
        __end_of_ir_get_human_code 0EEE                   ??_get_next_state 0012  
                   high_isr@digits 008F                         _ce_disable 1744  
            __end_of_timer1_enable 1754            __end_ofi2_timer1_enable 1770  
             __end_of_io_as_output 175C                         __pbssBANK0 00A8  
                     ?i2_ce_enable 0001                         __pnvCOMRAM 0038  
    update_timer1_counter_10@state 0004                 __size_of_byte_read 006E  
__size_of_get_timer1_counter_speed 00A6          ?_get_timer1_counter_speed 00A0  
               get_next_state@code 0010                 get_next_state@hour 0014  
           __size_of_buzzer_enable 0008            __size_of_timer1_disable 0004  
                    ?_send_command 0001                            _CCP2CON 000FBA  
                   get_time@format 009E              __end_of_point_disable 176C  
                _timer1_counter_10 00B7         __end_of_get_timer1_counter 129A  
                          _INTCON2 000FF1                  __end_of_ce_enable 1764  
               update_buzzer@state 0001           ?_get_timer1_counter_down 009C  
                          _SSPCON1 000FC6                          ?_high_isr 0001  
                        ?_get_time 009C                    __CFG_VREGEN$OFF 000000  
                          _InitApp 1308           __size_of_get_seconds_reg 0056  
                          __Hparam 0000                   ??i2_send_command 0001  
                          __Lparam 0000                   byte_read@address 002D  
                        ?_set_time 0008                       byte_read@res 002E  
                 get_time@aux_hour 00A1                     ??_send_command 0026  
                          ___awdiv 1040                            ___awmod 10E6  
       __size_of_ir_get_human_code 012E                          ?_put_nums 0008  
                       _byte_write 1714                            __pcinit 16EE  
                 set_time@hour_reg 000D                            __ramtop 0800  
                          __ptext0 047C                            __ptext1 1750  
                          __ptext2 1754                            __ptext3 1478  
                          __ptext4 0F9A                            __ptext5 157A  
                          __ptext6 10E6                            __ptext7 1040  
                          __ptext8 117A                            __ptext9 120A  
            __size_of_get_hour_reg 002C                            _get_num 0EEE  
            __end_of_get_cents_reg 15C2                            _counter 00A8  
                __end_of_byte_read 1308                        ?_ce_disable 0001  
                       _human_code 0037                   ___awmod@dividend 009C  
                    _buzzer_enable 173C                            _put_num 1420  
                 ?i2_timer1_enable 0001                         ??_high_isr 0015  
                       ??_get_time 009F                     __pintcode_body 07FE  
                    ?_point_enable 0001               end_of_initialization 1706  
                    _buzzer_status 00AA                      __Lmediumconst 0000  
                          int_func 07FE                   get_cents_reg@res 002C  
                i2_get_seconds_reg 1524   __end_of_update_timer1_counter_10 0C8E  
                       ??_set_time 000A               update_buzzer@counter 0003  
               ?i2_get_seconds_reg 0001                       _get_hour_reg 16C2  
                          postinc0 000FEE                         ??_put_nums 000A  
              ??i2_get_seconds_reg 0001                    byte_write@value 0006  
            __size_of_io_as_output 0004                     ?_buzzer_enable 0001  
 ir_get_human_code@human_read_code 0005                     ??_point_enable 0001  
      __end_of_ConfigureOscillator 177A                      send_command@i 0029  
        __size_ofi2_buzzer_disable 0008          __end_ofi2_get_seconds_reg 157A  
                       get_num@num 0001               __size_ofi2_ce_enable 0004  
                       main@format 00A7                __size_of_ce_disable 0006  
                    ?_update_point 0001                 high_isr@final_code 0096  
                   _timer1_disable 1754              __end_of_update_buzzer 1652  
                ??_get_seconds_reg 0026                       _io_as_output 1758  
                   _timer1_counter 00A9                        ?_byte_write 0006  
           get_seconds_reg@seconds 0027            __size_ofi2_io_as_output 0004  
              start_initialization 16EE                      ??_io_as_input 0026  
             __end_of_send_command 13C6              i2send_command@command 0003  
                  get_hour_reg@res 0001             __end_of_timer1_disable 1758  
                       byte_read@i 002F                     ??_update_point 0004  
                 __CFG_LPT1OSC$OFF 000000                        put_num@mask 0004  
             i2get_seconds_reg@res 0001                    ??_buzzer_enable 0001  
                    ?i2_ce_disable 0001                        __pbssCOMRAM 0031  
                    __pcstackBANK0 0060  __size_of_update_timer1_counter_10 0172  
        ?_update_timer1_counter_10 0001                          _ce_enable 1760  
              __size_of_byte_write 0018                  __size_of_high_isr 0B14  
              __end_of_io_as_input 1760                 _get_timer1_counter 120A  
                __size_of_get_time 0132         __size_ofi2_get_seconds_reg 0056  
                         ?_InitApp 0001                          __pnvBANK0 00B8  
                  ?_timer1_disable 0001   __size_of_get_timer1_counter_down 0090  
              ?_get_timer1_counter 009C                          __pintcode 0008  
           __size_of_timer1_enable 0004                           ?___awdiv 009C  
                         ?___awmod 009C               __end_of_point_enable 1768  
                __size_of_set_time 003A            __size_of_buzzer_disable 0008  
              get_next_state@state 000E                           ?_get_num 0001  
                __size_of_put_nums 0036                     ??i2_ce_disable 0001  
                     ??_ce_disable 0026            __size_of_get_next_state 046A  
             ??_get_timer1_counter 0028                          _byte_read 129A  
            get_next_state@minutes 0013              get_next_state@seconds 0012  
                         ?_put_num 0001                    get_time@minutes 00A2  
                  get_time@seconds 00A0                         ?_ce_enable 0001  
                 i2_buzzer_disable 1734                 _timer1_counter_min 0036  
         _get_timer1_counter_speed 0F9A             __size_of_point_disable 0004  
                         i2u220_40 1402                           i2u219_44 13F4  
                         i2u219_45 13F0                           i2u251_45 146A  
                         i2u251_46 146C                           i2u510_47 1412  
                         i2u248_44 1452                           i2u248_45 144E  
                         i2u507_47 084E                           i2u508_47 0898  
                         i2u509_47 1408                           i2u390_40 091E  
               __end_of_ce_disable 174A                           i2u388_44 08F8  
                         i2u388_45 08F2                   __CFG_WDTPS$32768 000000  
                   i2_io_as_output 1770                          high_isr@i 0098  
            __size_of_send_command 005A                  _ir_is_code_number 1478  
                    _timer1_enable 1750                        _io_as_input 175C  
                       ?_byte_read 0001               __end_of_update_point 160A  
               ?_ir_is_code_number 0001                  update_point@state 0001  
              send_command@command 0028                    _get_seconds_reg 14CE  
              ??_ir_is_code_number 0026           __size_ofi2_timer1_enable 0004  
           __size_of_get_cents_reg 0048                   __size_of_InitApp 0064  
                         __Hrparam 0000                           __Lrparam 0000  
                       put_num@num 0003                       _send_command 136C  
                     ??_byte_write 0007                   __size_of___awdiv 00A6  
                 __size_of___awmod 0094             __end_ofi2_io_as_output 1774  
     get_timer1_counter_speed@data 00A0            __size_ofi2_send_command 005A  
        __end_of_ir_is_code_number 14CE                      _point_disable 1768  
                 __size_of_get_num 00AC                 get_cents_reg@cents 002D  
                   ?_timer1_enable 0001                           __ptext10 14CE  
                         __ptext11 0C8E                           __ptext20 1778  
                         __ptext12 129A                           __ptext13 136C  
                         __ptext30 1420                           __ptext22 0B1C  
                         __ptext14 1758                           __ptext31 0EEE  
                         __ptext23 15C2                           __ptext15 175C  
                         __ptext40 1770                           __ptext32 0DC0  
                         __ptext24 1764                           __ptext16 1760  
                         __ptext41 1774                           __ptext33 0012  
                         __ptext25 1768                           __ptext17 1744  
                         __ptext42 174A                           __ptext34 176C  
                         __ptext26 160A                           __ptext18 172C  
                         __ptext35 1652                           __ptext27 1734  
                         __ptext19 1308                           __ptext36 1524  
                         __ptext28 173C                           __ptext37 16C2  
                         __ptext29 168C                           __ptext38 1714  
                         __ptext39 13C6                           _high_isr 0008  
                         _get_time 0C8E                   __size_of_put_num 0058  
                    ??i2_ce_enable 0001                        ??_ce_enable 0026  
                    __size_of_main 0382                 __end_of_byte_write 172C  
              _timer1_up_limit_min 0038                _timer1_up_limit_sec 0039  
             __end_ofi2_ce_disable 1750            _get_timer1_counter_down 117A  
     __size_of_ConfigureOscillator 0002              __size_of_point_enable 0004  
                         _set_time 1652                           int$flags 003A  
                   _buzzer_disable 172C                           _put_nums 168C  
                  ?i2_io_as_output 0001              __CFG_CPUDIV$OSC1_PLL2 000000  
                   ?_point_disable 0001                 _timer1_speed_cents 0033  
                    _get_cents_reg 157A                         _INTCONbits 000FF2  
                   _get_next_state 0012               _timer1_down_init_min 0035  
             _timer1_down_init_sec 0034                       set_time@hour 0009  
          __end_of_get_seconds_reg 1524                        ??_byte_read 002B  
                        put_nums@i 000A                           intlevel2 0000  
                     _point_enable 1764             __size_of_update_buzzer 0048  
                 ??_timer1_disable 0026                __end_ofi2_ce_enable 1778  
                  i2send_command@i 0004                  byte_write@address 0007  
           __end_of_buzzer_disable 1734           i2get_seconds_reg@seconds 0002  
                ??i2_timer1_enable 0001           __end_ofi2_buzzer_disable 173C  
                         put_num@i 0006             __end_of_get_next_state 047C  
                   ?_get_cents_reg 0001         __size_of_ir_is_code_number 0056  
            __size_of_update_point 0048                    ??_timer1_enable 0026  
            __end_of_buzzer_enable 1744         ??_get_timer1_counter_speed 002E  
        ??_get_timer1_counter_down 0028                      ?_get_hour_reg 0001  
                  ?_buzzer_disable 0001  
