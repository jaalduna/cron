

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun May 28 03:51:46 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.42
    53                           ; Generated 13/04/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F2550 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	nvBANK0
    88  0000B2                     __pnvBANK0:
    89                           	opt stack 0
    90  0000B2                     _state:
    91                           	opt stack 0
    92  0000B2                     	ds	2
    93  0000                     _RA3	set	31747
    94  0000                     _RA2	set	31746
    95  0000                     _RA5	set	31749
    96  0000                     _RB1	set	31753
    97  0000                     _RB4	set	31756
    98  0000                     _RB3	set	31755
    99  0000                     _TRISA3	set	31891
   100  0000                     _TRISA5	set	31893
   101  0000                     _TRISA2	set	31890
   102  0000                     _TRISB1	set	31897
   103  0000                     _TRISB4	set	31900
   104  0000                     _TRISB3	set	31899
   105  0000                     _RB0	set	31752
   106  0000                     _RB5	set	31757
   107  0000                     _PIE1	set	3997
   108  0000                     _T1CON	set	4045
   109  0000                     _ADCON1	set	4033
   110  0000                     _SSPCON1	set	4038
   111  0000                     _CCP2CON	set	4026
   112  0000                     _TMR1IF	set	31984
   113  0000                     _T0CON	set	4053
   114  0000                     _INTCON2	set	4081
   115  0000                     _INTCON	set	4082
   116  0000                     _INTCONbits	set	4082
   117  0000                     _TMR0IF	set	32658
   118  0000                     _RBIF	set	32656
   119                           
   120                           ; #config settings
   121  0000                     
   122                           	psect	cinit
   123  000E06                     __pcinit:
   124                           	opt stack 0
   125  000E06                     start_initialization:
   126                           	opt stack 0
   127  000E06                     __initialization:
   128                           	opt stack 0
   129                           
   130                           ; Clear objects allocated to BANK0 (16 bytes)
   131  000E06  EE00  F0A2         	lfsr	0,__pbssBANK0
   132  000E0A  0E10               	movlw	16
   133  000E0C                     clear_0:
   134  000E0C  6AEE               	clrf	postinc0,c
   135  000E0E  06E8               	decf	wreg,f,c
   136  000E10  E1FD               	bnz	clear_0
   137                           
   138                           ; Clear objects allocated to COMRAM (3 bytes)
   139  000E12  6A39               	clrf	(__pbssCOMRAM+2)& (0+255),c
   140  000E14  6A38               	clrf	(__pbssCOMRAM+1)& (0+255),c
   141  000E16  6A37               	clrf	__pbssCOMRAM& (0+255),c
   142  000E18                     end_of_initialization:
   143                           	opt stack 0
   144  000E18                     __end_of__initialization:
   145                           	opt stack 0
   146  000E18  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   147  000E1A  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   148  000E1C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   149  000E1E  6EF8               	movwf	tblptru,c
   150  000E20  0100               	movlb	0
   151  000E22  EF8A  F001         	goto	_main	;jump to C main() function
   152                           tblptru	equ	0xFF8
   153                           postinc0	equ	0xFEE
   154                           wreg	equ	0xFE8
   155                           
   156                           	psect	bssCOMRAM
   157  000037                     __pbssCOMRAM:
   158                           	opt stack 0
   159  000037                     _next:
   160                           	opt stack 0
   161  000037                     	ds	2
   162  000039                     _human_code:
   163                           	opt stack 0
   164  000039                     	ds	1
   165                           tblptru	equ	0xFF8
   166                           postinc0	equ	0xFEE
   167                           wreg	equ	0xFE8
   168                           
   169                           	psect	bssBANK0
   170  0000A2                     __pbssBANK0:
   171                           	opt stack 0
   172  0000A2                     _counter:
   173                           	opt stack 0
   174  0000A2                     	ds	1
   175  0000A3                     _timer1_counter:
   176                           	opt stack 0
   177  0000A3                     	ds	1
   178  0000A4                     _buzzer_status:
   179                           	opt stack 0
   180  0000A4                     	ds	1
   181  0000A5                     _masked_digits:
   182                           	opt stack 0
   183  0000A5                     	ds	6
   184  0000AB                     _aux1:
   185                           	opt stack 0
   186  0000AB                     	ds	6
   187  0000B1                     _timer1_counter_10:
   188                           	opt stack 0
   189  0000B1                     	ds	1
   190                           tblptru	equ	0xFF8
   191                           postinc0	equ	0xFEE
   192                           wreg	equ	0xFE8
   193                           
   194                           	psect	cstackBANK0
   195  000060                     __pcstackBANK0:
   196                           	opt stack 0
   197  000060                     high_isr@code:
   198                           	opt stack 0
   199                           
   200                           ; 47 bytes @ 0x0
   201  000060                     	ds	47
   202  00008F                     high_isr@digits:
   203                           	opt stack 0
   204                           
   205                           ; 6 bytes @ 0x2F
   206  00008F                     	ds	6
   207  000095                     high_isr@aux:
   208                           	opt stack 0
   209                           
   210                           ; 1 bytes @ 0x35
   211  000095                     	ds	1
   212  000096                     high_isr@final_code:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0x36
   216  000096                     	ds	2
   217  000098                     high_isr@i:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x38
   221  000098                     	ds	2
   222  00009A                     high_isr@i_150:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x3A
   226  00009A                     	ds	2
   227  00009C                     get_time@data:
   228                           	opt stack 0
   229  00009C                     get_timer1_counter@data:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x3C
   233  00009C                     	ds	2
   234  00009E                     get_time@format:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x3E
   238  00009E                     	ds	1
   239  00009F                     ??_main:
   240                           
   241                           ; 1 bytes @ 0x3F
   242  00009F                     	ds	2
   243  0000A1                     main@format:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x41
   247  0000A1                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           
   252                           	psect	cstackCOMRAM
   253  000001                     __pcstackCOMRAM:
   254                           	opt stack 0
   255  000001                     ??_put_num:
   256  000001                     ??i2_send_command:
   257  000001                     get_num@num:
   258                           	opt stack 0
   259  000001                     get_hour_reg@res:
   260                           	opt stack 0
   261  000001                     i2get_seconds_reg@res:
   262                           	opt stack 0
   263  000001                     ir_get_human_code@code:
   264                           	opt stack 0
   265  000001                     update_point@state:
   266                           	opt stack 0
   267  000001                     update_buzzer@state:
   268                           	opt stack 0
   269  000001                     update_timer1_counter_10@counter:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x0
   273  000001                     	ds	1
   274  000002                     get_hour_reg@hour:
   275                           	opt stack 0
   276  000002                     i2get_seconds_reg@seconds:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x1
   280  000002                     	ds	1
   281  000003                     ??_ir_get_human_code:
   282  000003                     put_num@num:
   283                           	opt stack 0
   284  000003                     update_point@counter:
   285                           	opt stack 0
   286  000003                     update_buzzer@counter:
   287                           	opt stack 0
   288  000003                     i2send_command@command:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0x2
   292  000003                     	ds	1
   293  000004                     put_num@mask:
   294                           	opt stack 0
   295  000004                     update_timer1_counter_10@state:
   296                           	opt stack 0
   297  000004                     i2send_command@i:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x3
   301  000004                     	ds	1
   302  000005                     ir_get_human_code@human_read_code:
   303                           	opt stack 0
   304  000005                     _put_num$899:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x4
   308  000005                     	ds	1
   309  000006                     byte_write@value:
   310                           	opt stack 0
   311  000006                     put_num@i:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x5
   315  000006                     	ds	1
   316  000007                     byte_write@address:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x6
   320  000007                     	ds	1
   321  000008                     set_time@minutes:
   322                           	opt stack 0
   323  000008                     put_nums@nums:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x7
   327  000008                     	ds	1
   328  000009                     set_time@hour:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x8
   332  000009                     	ds	1
   333  00000A                     set_time@seconds:
   334                           	opt stack 0
   335  00000A                     put_nums@i:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x9
   339  00000A                     	ds	1
   340  00000B                     set_time@sec_reg:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0xA
   344  00000B                     	ds	1
   345  00000C                     set_time@min_reg:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0xB
   349  00000C                     	ds	1
   350  00000D                     set_time@hour_reg:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0xC
   354  00000D                     	ds	1
   355  00000E                     ?_get_next_state:
   356                           	opt stack 0
   357  00000E                     get_next_state@state:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0xD
   361  00000E                     	ds	2
   362  000010                     get_next_state@code:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0xF
   366  000010                     	ds	2
   367  000012                     get_next_state@seconds:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x11
   371  000012                     	ds	1
   372  000013                     get_next_state@minutes:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x12
   376  000013                     	ds	1
   377  000014                     get_next_state@hour:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x13
   381  000014                     	ds	1
   382  000015                     ??_high_isr:
   383                           
   384                           ; 1 bytes @ 0x14
   385  000015                     	ds	17
   386  000026                     ??_send_command:
   387  000026                     get_seconds_reg@res:
   388                           	opt stack 0
   389  000026                     ir_is_code_number@human_code:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x25
   393  000026                     	ds	1
   394  000027                     get_seconds_reg@seconds:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x26
   398  000027                     	ds	1
   399  000028                     ??_get_timer1_counter:
   400  000028                     send_command@command:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x27
   404  000028                     	ds	1
   405  000029                     send_command@i:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x28
   409  000029                     	ds	2
   410  00002B                     ??_byte_read:
   411                           
   412                           ; 1 bytes @ 0x2A
   413  00002B                     	ds	2
   414  00002D                     byte_read@address:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x2C
   418  00002D                     	ds	1
   419  00002E                     byte_read@res:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x2D
   423  00002E                     	ds	1
   424  00002F                     byte_read@i:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x2E
   428  00002F                     	ds	2
   429  000031                     ??_get_time:
   430                           
   431                           ; 1 bytes @ 0x30
   432  000031                     	ds	1
   433  000032                     get_time@seconds:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x31
   437  000032                     	ds	1
   438  000033                     get_time@aux_hour:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x32
   442  000033                     	ds	1
   443  000034                     get_time@minutes:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x33
   447  000034                     	ds	1
   448  000035                     get_time@aux:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x34
   452  000035                     	ds	1
   453  000036                     get_time@hours:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x35
   457  000036                     	ds	1
   458                           tblptru	equ	0xFF8
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           
   462 ;;
   463 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   464 ;;
   465 ;; *************** function _main *****************
   466 ;; Defined at:
   467 ;;		line 37 in file "main.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;		None
   470 ;; Auto vars:     Size  Location     Type
   471 ;;  format          1   65[BANK0 ] unsigned char 
   472 ;;  temp            1    0        unsigned char 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   482 ;;      Params:         0       0       0       0       0       0       0       0       0
   483 ;;      Locals:         0       1       0       0       0       0       0       0       0
   484 ;;      Temps:          0       2       0       0       0       0       0       0       0
   485 ;;      Totals:         0       3       0       0       0       0       0       0       0
   486 ;;Total ram usage:        3 bytes
   487 ;; Hardware stack levels required when called:   10
   488 ;; This function calls:
   489 ;;		_ConfigureOscillator
   490 ;;		_InitApp
   491 ;;		_buzzer_disable
   492 ;;		_get_time
   493 ;;		_get_timer1_counter
   494 ;;		_ir_is_code_number
   495 ;; This function is called by:
   496 ;;		Startup code after reset
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text0
   501  000314                     __ptext0:
   502                           	opt stack 0
   503  000314                     _main:
   504                           	opt stack 21
   505                           
   506                           ;main.c: 40: ConfigureOscillator();
   507                           
   508                           ;incstack = 0
   509  000314  EC41  F007         	call	_ConfigureOscillator	;wreg free
   510                           
   511                           ;main.c: 43: InitApp();
   512  000318  EC38  F005         	call	_InitApp	;wreg free
   513                           
   514                           ;main.c: 48: aux1[0] = 1;
   515  00031C  0E01               	movlw	1
   516  00031E  0100               	movlb	0	; () banked
   517  000320  6FAB               	movwf	_aux1& (0+255),b
   518                           
   519                           ; BSR set to: 0
   520                           ;main.c: 49: aux1[1] = 2;
   521  000322  0E02               	movlw	2
   522  000324  0100               	movlb	0	; () banked
   523  000326  6FAC               	movwf	(_aux1+1)& (0+255),b
   524                           
   525                           ; BSR set to: 0
   526                           ;main.c: 50: aux1[2] = 3;
   527  000328  0E03               	movlw	3
   528  00032A  0100               	movlb	0	; () banked
   529  00032C  6FAD               	movwf	(_aux1+2)& (0+255),b
   530                           
   531                           ; BSR set to: 0
   532                           ;main.c: 51: aux1[3] = 4;
   533  00032E  0E04               	movlw	4
   534  000330  0100               	movlb	0	; () banked
   535  000332  6FAE               	movwf	(_aux1+3)& (0+255),b
   536                           
   537                           ; BSR set to: 0
   538                           ;main.c: 52: aux1[4] = 5;
   539  000334  0E05               	movlw	5
   540  000336  0100               	movlb	0	; () banked
   541  000338  6FAF               	movwf	(_aux1+4)& (0+255),b
   542                           
   543                           ; BSR set to: 0
   544                           ;main.c: 53: aux1[5] = 6;
   545  00033A  0E06               	movlw	6
   546  00033C  0100               	movlb	0	; () banked
   547  00033E  6FB0               	movwf	(_aux1+5)& (0+255),b
   548                           
   549                           ; BSR set to: 0
   550                           ;main.c: 55: char temp;
   551                           ;main.c: 56: char format = 1;
   552  000340  0E01               	movlw	1
   553  000342  0100               	movlb	0	; () banked
   554  000344  6FA1               	movwf	main@format& (0+255),b
   555                           
   556                           ; BSR set to: 0
   557                           ;main.c: 57: buzzer_disable();
   558  000346  EC1F  F007         	call	_buzzer_disable	;wreg free
   559  00034A                     l3382:
   560                           
   561                           ;main.c: 59: {
   562                           ;main.c: 60: state = next;
   563  00034A  C037  F0B2         	movff	_next,_state
   564  00034E  C038  F0B3         	movff	_next+1,_state+1
   565                           
   566                           ;main.c: 62: switch(state){
   567  000352  D07C               	goto	l3444
   568  000354                     l3384:
   569                           
   570                           ;main.c: 65: if(human_code == 13)
   571  000354  0E0D               	movlw	13
   572  000356  1839               	xorwf	_human_code,w,c
   573  000358  A4D8               	btfss	status,2,c
   574  00035A  D002               	goto	l3388
   575                           
   576                           ;main.c: 66: format = 1;
   577  00035C  0E01               	movlw	1
   578  00035E  D005               	goto	L1
   579  000360                     l3388:
   580                           
   581                           ;main.c: 67: else if (human_code == 14)
   582  000360  0E0E               	movlw	14
   583  000362  1839               	xorwf	_human_code,w,c
   584  000364  A4D8               	btfss	status,2,c
   585  000366  D003               	goto	l3392
   586                           
   587                           ;main.c: 68: format = 0;
   588  000368  0E00               	movlw	0
   589  00036A                     L1:
   590  00036A  0100               	movlb	0	; () banked
   591  00036C  6FA1               	movwf	main@format& (0+255),b
   592  00036E                     l3392:
   593                           
   594                           ;main.c: 69: get_time(aux1,format);
   595  00036E  0EAB               	movlw	low _aux1
   596  000370  0100               	movlb	0	; () banked
   597  000372  6F9C               	movwf	get_time@data& (0+255),b
   598  000374  0E00               	movlw	high _aux1
   599  000376  0100               	movlb	0	; () banked
   600  000378  6F9D               	movwf	(get_time@data+1)& (0+255),b
   601  00037A  C0A1  F09E         	movff	main@format,get_time@format
   602  00037E  ECA7  F003         	call	_get_time	;wreg free
   603                           
   604                           ;main.c: 76: break;
   605  000382  D7E3               	goto	l3382
   606  000384                     l3394:
   607                           
   608                           ;main.c: 80: if(ir_is_code_number(human_code) && human_code <=2)
   609  000384  5039               	movf	_human_code,w,c
   610  000386  ECEC  F005         	call	_ir_is_code_number
   611  00038A  0900               	iorlw	0
   612  00038C  B4D8               	btfsc	status,2,c
   613  00038E  D7DD               	goto	l3382
   614  000390  0E03               	movlw	3
   615  000392  6039               	cpfslt	_human_code,c
   616  000394  D7DA               	goto	l3382
   617                           
   618                           ;main.c: 81: {
   619                           ;main.c: 82: aux1[3] = human_code;
   620  000396  C039  F0AE         	movff	_human_code,_aux1+3
   621                           
   622                           ;main.c: 83: next = 2;
   623  00039A  0E00               	movlw	0
   624  00039C  6E38               	movwf	_next+1,c
   625  00039E  0E02               	movlw	2
   626  0003A0  D035               	goto	L4
   627  0003A2                     l3402:
   628                           
   629                           ;main.c: 84: human_code = -1;
   630  0003A2  6839               	setf	_human_code,c
   631                           
   632                           ;main.c: 85: }
   633                           ;main.c: 86: break;
   634  0003A4  D7D2               	goto	l3382
   635  0003A6                     l3404:
   636                           
   637                           ;main.c: 89: if(ir_is_code_number(human_code) && ((aux1[2]<2 && human_code <=9) || human
      +                          _code <=3))
   638  0003A6  5039               	movf	_human_code,w,c
   639  0003A8  ECEC  F005         	call	_ir_is_code_number
   640  0003AC  0900               	iorlw	0
   641  0003AE  B4D8               	btfsc	status,2,c
   642  0003B0  D7CC               	goto	l3382
   643  0003B2  0E02               	movlw	2
   644  0003B4  0100               	movlb	0	; () banked
   645  0003B6  61AD               	cpfslt	(_aux1+2)& (0+255),b
   646  0003B8  D003               	goto	l3410
   647                           
   648                           ; BSR set to: 0
   649  0003BA  0E09               	movlw	9
   650  0003BC  6439               	cpfsgt	_human_code,c
   651  0003BE  D003               	goto	l127
   652  0003C0                     l3410:
   653                           
   654                           ; BSR set to: 0
   655  0003C0  0E04               	movlw	4
   656  0003C2  6039               	cpfslt	_human_code,c
   657  0003C4  D7C2               	goto	l3382
   658  0003C6                     l127:
   659                           
   660                           ; BSR set to: 0
   661                           ;main.c: 90: {
   662                           ;main.c: 91: aux1[2] = human_code;
   663  0003C6  C039  F0AD         	movff	_human_code,_aux1+2
   664                           
   665                           ; BSR set to: 0
   666                           ;main.c: 92: next = 3;
   667  0003CA  0E00               	movlw	0
   668  0003CC  6E38               	movwf	_next+1,c
   669  0003CE  0E03               	movlw	3
   670  0003D0  D01D               	goto	L4
   671  0003D2                     l3416:
   672                           
   673                           ; BSR set to: 0
   674                           ;main.c: 98: if(ir_is_code_number(human_code) && human_code <=5)
   675  0003D2  5039               	movf	_human_code,w,c
   676  0003D4  ECEC  F005         	call	_ir_is_code_number
   677  0003D8  0900               	iorlw	0
   678  0003DA  B4D8               	btfsc	status,2,c
   679  0003DC  D7B6               	goto	l3382
   680  0003DE  0E06               	movlw	6
   681  0003E0  6039               	cpfslt	_human_code,c
   682  0003E2  D7B3               	goto	l3382
   683                           
   684                           ;main.c: 99: {
   685                           ;main.c: 100: aux1[1] = human_code;
   686  0003E4  C039  F0AC         	movff	_human_code,_aux1+1
   687                           
   688                           ;main.c: 101: next = 4;
   689  0003E8  0E00               	movlw	0
   690  0003EA  6E38               	movwf	_next+1,c
   691  0003EC  0E04               	movlw	4
   692  0003EE  D00E               	goto	L4
   693  0003F0                     l3426:
   694                           
   695                           ;main.c: 106: if(ir_is_code_number(human_code) && human_code <=9)
   696  0003F0  5039               	movf	_human_code,w,c
   697  0003F2  ECEC  F005         	call	_ir_is_code_number
   698  0003F6  0900               	iorlw	0
   699  0003F8  B4D8               	btfsc	status,2,c
   700  0003FA  D7A7               	goto	l3382
   701  0003FC  0E0A               	movlw	10
   702  0003FE  6039               	cpfslt	_human_code,c
   703  000400  D7A4               	goto	l3382
   704                           
   705                           ;main.c: 107: {
   706                           ;main.c: 108: aux1[0] = human_code;
   707  000402  C039  F0AB         	movff	_human_code,_aux1
   708                           
   709                           ;main.c: 109: next = 1;
   710  000406  0E00               	movlw	0
   711  000408  6E38               	movwf	_next+1,c
   712  00040A  0E01               	movlw	1
   713  00040C                     L4:
   714  00040C  6E37               	movwf	_next,c
   715  00040E  D7C9               	goto	l3402
   716  000410                     l3436:
   717                           
   718                           ;main.c: 115: timer1_counter_10 = 10;
   719  000410  0E0A               	movlw	10
   720  000412  0100               	movlb	0	; () banked
   721  000414  6FB1               	movwf	_timer1_counter_10& (0+255),b
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 116: get_timer1_counter(aux1);
   725  000416  0EAB               	movlw	low _aux1
   726  000418  0100               	movlb	0	; () banked
   727  00041A  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   728  00041C  0E00               	movlw	high _aux1
   729  00041E  0100               	movlb	0	; () banked
   730  000420  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   731  000422  ECC2  F004         	call	_get_timer1_counter	;wreg free
   732                           
   733                           ;main.c: 118: break;
   734  000426  D791               	goto	l3382
   735  000428                     l3440:
   736                           
   737                           ;main.c: 120: get_timer1_counter(aux1);
   738  000428  0EAB               	movlw	low _aux1
   739  00042A  0100               	movlb	0	; () banked
   740  00042C  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   741  00042E  0E00               	movlw	high _aux1
   742  000430  0100               	movlb	0	; () banked
   743  000432  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   744  000434  ECC2  F004         	call	_get_timer1_counter	;wreg free
   745                           
   746                           ;main.c: 121: break;
   747  000438  D788               	goto	l3382
   748  00043A                     l3442:
   749                           
   750                           ;main.c: 123: get_timer1_counter(aux1);
   751  00043A  0EAB               	movlw	low _aux1
   752  00043C  0100               	movlb	0	; () banked
   753  00043E  6F9C               	movwf	get_timer1_counter@data& (0+255),b
   754  000440  0E00               	movlw	high _aux1
   755  000442  0100               	movlb	0	; () banked
   756  000444  6F9D               	movwf	(get_timer1_counter@data+1)& (0+255),b
   757  000446  ECC2  F004         	call	_get_timer1_counter	;wreg free
   758                           
   759                           ;main.c: 129: }
   760                           
   761                           ;main.c: 127: default: ;
   762                           
   763                           ;main.c: 126: break;
   764                           
   765                           ;main.c: 125: case 6:
   766                           
   767                           ;main.c: 124: break;
   768  00044A  D77F               	goto	l3382
   769  00044C                     l3444:
   770  00044C  C0B2  F09F         	movff	_state,??_main
   771  000450  C0B3  F0A0         	movff	_state+1,??_main+1
   772                           
   773                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   774                           ; Switch size 1, requested type "space"
   775                           ; Number of cases is 1, Range of values is 0 to 0
   776                           ; switch strategies available:
   777                           ; Name         Instructions Cycles
   778                           ; simple_byte            4     3 (average)
   779                           ;	Chosen strategy is simple_byte
   780  000454  0100               	movlb	0	; () banked
   781  000456  51A0               	movf	(??_main+1)& (0+255),w,b
   782  000458  0A00               	xorlw	0	; case 0
   783  00045A  A4D8               	btfss	status,2,c
   784  00045C  D776               	goto	l3382
   785                           
   786                           ; BSR set to: 0
   787                           ; Switch size 1, requested type "space"
   788                           ; Number of cases is 9, Range of values is 0 to 12
   789                           ; switch strategies available:
   790                           ; Name         Instructions Cycles
   791                           ; simple_byte           28    15 (average)
   792                           ;	Chosen strategy is simple_byte
   793  00045E  0100               	movlb	0	; () banked
   794  000460  519F               	movf	??_main& (0+255),w,b
   795  000462  0A00               	xorlw	0	; case 0
   796  000464  B4D8               	btfsc	status,2,c
   797  000466  D776               	goto	l3384
   798  000468  0A01               	xorlw	1	; case 1
   799  00046A  B4D8               	btfsc	status,2,c
   800  00046C  D78B               	goto	l3394
   801  00046E  0A03               	xorlw	3	; case 2
   802  000470  B4D8               	btfsc	status,2,c
   803  000472  D799               	goto	l3404
   804  000474  0A01               	xorlw	1	; case 3
   805  000476  B4D8               	btfsc	status,2,c
   806  000478  D7AC               	goto	l3416
   807  00047A  0A07               	xorlw	7	; case 4
   808  00047C  B4D8               	btfsc	status,2,c
   809  00047E  D7B8               	goto	l3426
   810  000480  0A01               	xorlw	1	; case 5
   811  000482  B4D8               	btfsc	status,2,c
   812  000484  D7C5               	goto	l3436
   813  000486  0A03               	xorlw	3	; case 6
   814  000488  B4D8               	btfsc	status,2,c
   815  00048A  D75F               	goto	l3382
   816  00048C  0A0D               	xorlw	13	; case 11
   817  00048E  B4D8               	btfsc	status,2,c
   818  000490  D7CB               	goto	l3440
   819  000492  0A07               	xorlw	7	; case 12
   820  000494  B4D8               	btfsc	status,2,c
   821  000496  D7D1               	goto	l3442
   822                           
   823                           ; BSR set to: 0
   824                           
   825                           ; BSR set to: 0
   826  000498  D758               	goto	l3382
   827  00049A                     __end_of_main:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           status	equ	0xFD8
   833                           
   834 ;; *************** function _ir_is_code_number *****************
   835 ;; Defined at:
   836 ;;		line 407 in file "user.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;  human_code      1    wreg     unsigned char 
   839 ;; Auto vars:     Size  Location     Type
   840 ;;  human_code      1   37[COMRAM] unsigned char 
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      unsigned char 
   843 ;; Registers used:
   844 ;;		wreg, status,2, status,0
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   850 ;;      Params:         0       0       0       0       0       0       0       0       0
   851 ;;      Locals:         1       0       0       0       0       0       0       0       0
   852 ;;      Temps:          0       0       0       0       0       0       0       0       0
   853 ;;      Totals:         1       0       0       0       0       0       0       0       0
   854 ;;Total ram usage:        1 bytes
   855 ;; Hardware stack levels used:    1
   856 ;; Hardware stack levels required when called:    6
   857 ;; This function calls:
   858 ;;		Nothing
   859 ;; This function is called by:
   860 ;;		_main
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text1
   865  000BD8                     __ptext1:
   866                           	opt stack 0
   867  000BD8                     _ir_is_code_number:
   868                           	opt stack 24
   869                           
   870                           ; BSR set to: 0
   871                           ;incstack = 0
   872                           ;ir_is_code_number@human_code stored from wreg
   873  000BD8  6E26               	movwf	ir_is_code_number@human_code,c
   874                           
   875                           ;user.c: 409: if(human_code == 0 || human_code == 1 || human_code == 2 || human_code == 
      +                          3 || human_code == 4
   876                           ;user.c: 410: || human_code == 5 || human_code == 6 || human_code == 7 || human_code == 
      +                          8 || human_code == 9)
   877  000BDA  5026               	movf	ir_is_code_number@human_code,w,c
   878  000BDC  B4D8               	btfsc	status,2,c
   879  000BDE  D023               	goto	l3342
   880  000BE0  0426               	decf	ir_is_code_number@human_code,w,c
   881  000BE2  B4D8               	btfsc	status,2,c
   882  000BE4  D020               	goto	l3342
   883  000BE6  0E02               	movlw	2
   884  000BE8  1826               	xorwf	ir_is_code_number@human_code,w,c
   885  000BEA  B4D8               	btfsc	status,2,c
   886  000BEC  D01C               	goto	l3342
   887  000BEE  0E03               	movlw	3
   888  000BF0  1826               	xorwf	ir_is_code_number@human_code,w,c
   889  000BF2  B4D8               	btfsc	status,2,c
   890  000BF4  D018               	goto	l3342
   891  000BF6  0E04               	movlw	4
   892  000BF8  1826               	xorwf	ir_is_code_number@human_code,w,c
   893  000BFA  B4D8               	btfsc	status,2,c
   894  000BFC  D014               	goto	l3342
   895  000BFE  0E05               	movlw	5
   896  000C00  1826               	xorwf	ir_is_code_number@human_code,w,c
   897  000C02  B4D8               	btfsc	status,2,c
   898  000C04  D010               	goto	l3342
   899  000C06  0E06               	movlw	6
   900  000C08  1826               	xorwf	ir_is_code_number@human_code,w,c
   901  000C0A  B4D8               	btfsc	status,2,c
   902  000C0C  D00C               	goto	l3342
   903  000C0E  0E07               	movlw	7
   904  000C10  1826               	xorwf	ir_is_code_number@human_code,w,c
   905  000C12  B4D8               	btfsc	status,2,c
   906  000C14  D008               	goto	l3342
   907  000C16  0E08               	movlw	8
   908  000C18  1826               	xorwf	ir_is_code_number@human_code,w,c
   909  000C1A  B4D8               	btfsc	status,2,c
   910  000C1C  D004               	goto	l3342
   911  000C1E  0E09               	movlw	9
   912  000C20  1826               	xorwf	ir_is_code_number@human_code,w,c
   913  000C22  A4D8               	btfss	status,2,c
   914  000C24  D002               	goto	l3348
   915  000C26                     l3342:
   916                           
   917                           ;user.c: 411: return 1;
   918  000C26  0E01               	movlw	1
   919  000C28  0012               	return	
   920  000C2A                     l3348:
   921                           
   922                           ;user.c: 412: else
   923                           ;user.c: 413: return 0;
   924  000C2A  0E00               	movlw	0
   925  000C2C  0012               	return	
   926  000C2E                     __end_of_ir_is_code_number:
   927                           	opt stack 0
   928                           tblptru	equ	0xFF8
   929                           postinc0	equ	0xFEE
   930                           wreg	equ	0xFE8
   931                           status	equ	0xFD8
   932                           
   933 ;; *************** function _get_timer1_counter *****************
   934 ;; Defined at:
   935 ;;		line 506 in file "user.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;  data            2   60[BANK0 ] PTR unsigned char 
   938 ;;		 -> aux1(6), 
   939 ;; Auto vars:     Size  Location     Type
   940 ;;		None
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   950 ;;      Params:         0       2       0       0       0       0       0       0       0
   951 ;;      Locals:         0       0       0       0       0       0       0       0       0
   952 ;;      Temps:          1       0       0       0       0       0       0       0       0
   953 ;;      Totals:         1       2       0       0       0       0       0       0       0
   954 ;;Total ram usage:        3 bytes
   955 ;; Hardware stack levels used:    1
   956 ;; Hardware stack levels required when called:    7
   957 ;; This function calls:
   958 ;;		_get_seconds_reg
   959 ;; This function is called by:
   960 ;;		_main
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           	psect	text2
   965  000984                     __ptext2:
   966                           	opt stack 0
   967  000984                     _get_timer1_counter:
   968                           	opt stack 23
   969                           
   970                           ;user.c: 508: data[0] = get_seconds_reg(timer1_counter_10) & 0x0f;
   971                           
   972                           ;incstack = 0
   973  000984  0100               	movlb	0	; () banked
   974  000986  51B1               	movf	_timer1_counter_10& (0+255),w,b
   975  000988  EC17  F006         	call	_get_seconds_reg
   976  00098C  0B0F               	andlw	15
   977  00098E  C09C  FFD9         	movff	get_timer1_counter@data,fsr2l
   978  000992  C09D  FFDA         	movff	get_timer1_counter@data+1,fsr2h
   979  000996  6EDF               	movwf	indf2,c
   980                           
   981                           ;user.c: 509: data[1] = (get_seconds_reg(timer1_counter_10) & 0xf0)>>4;
   982  000998  0100               	movlb	0	; () banked
   983  00099A  EE20 F001          	lfsr	2,1
   984  00099E  519C               	movf	get_timer1_counter@data& (0+255),w,b
   985  0009A0  26D9               	addwf	fsr2l,f,c
   986  0009A2  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
   987  0009A4  22DA               	addwfc	fsr2h,f,c
   988  0009A6  0100               	movlb	0	; () banked
   989  0009A8  51B1               	movf	_timer1_counter_10& (0+255),w,b
   990  0009AA  EC17  F006         	call	_get_seconds_reg
   991  0009AE  6E28               	movwf	??_get_timer1_counter& (0+255),c
   992  0009B0  3828               	swapf	??_get_timer1_counter,w,c
   993  0009B2  0B0F               	andlw	15
   994  0009B4  0B0F               	andlw	15
   995  0009B6  6EDF               	movwf	indf2,c
   996                           
   997                           ;user.c: 510: data[2] = 0;
   998  0009B8  0100               	movlb	0	; () banked
   999  0009BA  EE20 F002          	lfsr	2,2
  1000  0009BE  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1001  0009C0  26D9               	addwf	fsr2l,f,c
  1002  0009C2  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1003  0009C4  22DA               	addwfc	fsr2h,f,c
  1004  0009C6  0E00               	movlw	0
  1005  0009C8  6EDF               	movwf	indf2,c
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;user.c: 511: data[3] = 0;
  1009  0009CA  0100               	movlb	0	; () banked
  1010  0009CC  EE20 F003          	lfsr	2,3
  1011  0009D0  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1012  0009D2  26D9               	addwf	fsr2l,f,c
  1013  0009D4  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1014  0009D6  22DA               	addwfc	fsr2h,f,c
  1015  0009D8  0E00               	movlw	0
  1016  0009DA  6EDF               	movwf	indf2,c
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;user.c: 512: data[4] = 'P';
  1020  0009DC  0100               	movlb	0	; () banked
  1021  0009DE  EE20 F004          	lfsr	2,4
  1022  0009E2  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1023  0009E4  26D9               	addwf	fsr2l,f,c
  1024  0009E6  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1025  0009E8  22DA               	addwfc	fsr2h,f,c
  1026  0009EA  0E50               	movlw	80
  1027  0009EC  6EDF               	movwf	indf2,c
  1028                           
  1029                           ; BSR set to: 0
  1030                           ;user.c: 513: data[5] = 'U';
  1031  0009EE  0100               	movlb	0	; () banked
  1032  0009F0  EE20 F005          	lfsr	2,5
  1033  0009F4  519C               	movf	get_timer1_counter@data& (0+255),w,b
  1034  0009F6  26D9               	addwf	fsr2l,f,c
  1035  0009F8  519D               	movf	(get_timer1_counter@data+1)& (0+255),w,b
  1036  0009FA  22DA               	addwfc	fsr2h,f,c
  1037  0009FC  0E55               	movlw	85
  1038  0009FE  6EDF               	movwf	indf2,c
  1039                           
  1040                           ; BSR set to: 0
  1041  000A00  0012               	return		;funcret
  1042  000A02                     __end_of_get_timer1_counter:
  1043                           	opt stack 0
  1044                           tblptru	equ	0xFF8
  1045                           postinc0	equ	0xFEE
  1046                           wreg	equ	0xFE8
  1047                           indf2	equ	0xFDF
  1048                           fsr2h	equ	0xFDA
  1049                           fsr2l	equ	0xFD9
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _get_seconds_reg *****************
  1053 ;; Defined at:
  1054 ;;		line 286 in file "user.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  seconds         1    wreg     unsigned char 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  seconds         1   38[COMRAM] unsigned char 
  1059 ;;  res             1   37[COMRAM] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      unsigned char 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1069 ;;      Params:         0       0       0       0       0       0       0       0       0
  1070 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1072 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1073 ;;Total ram usage:        2 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    6
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_get_timer1_counter
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text3
  1084  000C2E                     __ptext3:
  1085                           	opt stack 0
  1086  000C2E                     _get_seconds_reg:
  1087                           	opt stack 23
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;incstack = 0
  1091                           ;get_seconds_reg@seconds stored from wreg
  1092  000C2E  6E27               	movwf	get_seconds_reg@seconds,c
  1093                           
  1094                           ;user.c: 288: char res = 0;
  1095  000C30  0E00               	movlw	0
  1096  000C32  6E26               	movwf	get_seconds_reg@res,c
  1097                           
  1098                           ;user.c: 289: if(seconds<10)
  1099  000C34  0E0A               	movlw	10
  1100  000C36  6027               	cpfslt	get_seconds_reg@seconds,c
  1101  000C38  D003               	goto	l3224
  1102                           
  1103                           ;user.c: 290: {
  1104                           ;user.c: 291: res = seconds;
  1105  000C3A  C027  F026         	movff	get_seconds_reg@seconds,get_seconds_reg@res
  1106                           
  1107                           ;user.c: 292: }
  1108  000C3E  D020               	goto	l3242
  1109  000C40                     l3224:
  1110                           
  1111                           ;user.c: 293: else if(seconds <20)
  1112  000C40  0E14               	movlw	20
  1113  000C42  6027               	cpfslt	get_seconds_reg@seconds,c
  1114  000C44  D004               	goto	l3228
  1115                           
  1116                           ;user.c: 294: {
  1117                           ;user.c: 295: res = 1<<4 | (seconds - 10);
  1118  000C46  5027               	movf	get_seconds_reg@seconds,w,c
  1119  000C48  0FF6               	addlw	246
  1120  000C4A  0910               	iorlw	16
  1121  000C4C  D018               	goto	L8
  1122  000C4E                     l3228:
  1123                           
  1124                           ;user.c: 297: else if(seconds <30)
  1125  000C4E  0E1E               	movlw	30
  1126  000C50  6027               	cpfslt	get_seconds_reg@seconds,c
  1127  000C52  D004               	goto	l3232
  1128                           
  1129                           ;user.c: 298: {
  1130                           ;user.c: 299: res = 2<<4 | (seconds -20);
  1131  000C54  5027               	movf	get_seconds_reg@seconds,w,c
  1132  000C56  0FEC               	addlw	236
  1133  000C58  0920               	iorlw	32
  1134  000C5A  D011               	goto	L8
  1135  000C5C                     l3232:
  1136                           
  1137                           ;user.c: 301: else if(seconds <40)
  1138  000C5C  0E28               	movlw	40
  1139  000C5E  6027               	cpfslt	get_seconds_reg@seconds,c
  1140  000C60  D004               	goto	l3236
  1141                           
  1142                           ;user.c: 302: {
  1143                           ;user.c: 303: res = 3<<4 | (seconds - 30);
  1144  000C62  5027               	movf	get_seconds_reg@seconds,w,c
  1145  000C64  0FE2               	addlw	226
  1146  000C66  0930               	iorlw	48
  1147  000C68  D00A               	goto	L8
  1148  000C6A                     l3236:
  1149                           
  1150                           ;user.c: 305: else if(seconds <50)
  1151  000C6A  0E32               	movlw	50
  1152  000C6C  6027               	cpfslt	get_seconds_reg@seconds,c
  1153  000C6E  D004               	goto	l3240
  1154                           
  1155                           ;user.c: 306: {
  1156                           ;user.c: 307: res = 4<<4 | (seconds - 40);
  1157  000C70  5027               	movf	get_seconds_reg@seconds,w,c
  1158  000C72  0FD8               	addlw	216
  1159  000C74  0940               	iorlw	64
  1160  000C76  D003               	goto	L8
  1161  000C78                     l3240:
  1162                           
  1163                           ;user.c: 309: else
  1164                           ;user.c: 310: {
  1165                           ;user.c: 311: res = 5<<4 | (seconds -50);
  1166  000C78  5027               	movf	get_seconds_reg@seconds,w,c
  1167  000C7A  0FCE               	addlw	206
  1168  000C7C  0950               	iorlw	80
  1169  000C7E                     L8:
  1170  000C7E  6E26               	movwf	get_seconds_reg@res,c
  1171  000C80                     l3242:
  1172                           
  1173                           ;user.c: 312: }
  1174                           ;user.c: 314: return res;
  1175  000C80  5026               	movf	get_seconds_reg@res,w,c
  1176  000C82  0012               	return	
  1177  000C84                     __end_of_get_seconds_reg:
  1178                           	opt stack 0
  1179                           tblptru	equ	0xFF8
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           indf2	equ	0xFDF
  1183                           fsr2h	equ	0xFDA
  1184                           fsr2l	equ	0xFD9
  1185                           status	equ	0xFD8
  1186                           
  1187 ;; *************** function _get_time *****************
  1188 ;; Defined at:
  1189 ;;		line 242 in file "user.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  data            2   60[BANK0 ] PTR unsigned char 
  1192 ;;		 -> aux1(6), 
  1193 ;;  format          1   62[BANK0 ] unsigned char 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  aux_hour        1   50[COMRAM] unsigned char 
  1196 ;;  hours           1   53[COMRAM] unsigned char 
  1197 ;;  aux             1   52[COMRAM] unsigned char 
  1198 ;;  minutes         1   51[COMRAM] unsigned char 
  1199 ;;  seconds         1   49[COMRAM] unsigned char 
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1209 ;;      Params:         0       3       0       0       0       0       0       0       0
  1210 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1211 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1212 ;;      Totals:         6       3       0       0       0       0       0       0       0
  1213 ;;Total ram usage:        9 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    9
  1216 ;; This function calls:
  1217 ;;		_byte_read
  1218 ;; This function is called by:
  1219 ;;		_main
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text4
  1224  00074E                     __ptext4:
  1225                           	opt stack 0
  1226  00074E                     _get_time:
  1227                           	opt stack 21
  1228                           
  1229                           ;user.c: 244: char aux = 0x81;
  1230                           
  1231                           ;incstack = 0
  1232  00074E  0E81               	movlw	129
  1233  000750  6E35               	movwf	get_time@aux,c
  1234                           
  1235                           ;user.c: 245: char seconds = byte_read(aux);
  1236  000752  5035               	movf	get_time@aux,w,c
  1237  000754  EC01  F005         	call	_byte_read
  1238  000758  6E32               	movwf	get_time@seconds,c
  1239                           
  1240                           ;user.c: 246: aux = 0x83;
  1241  00075A  0E83               	movlw	131
  1242  00075C  6E35               	movwf	get_time@aux,c
  1243                           
  1244                           ;user.c: 247: char minutes = byte_read(aux);
  1245  00075E  5035               	movf	get_time@aux,w,c
  1246  000760  EC01  F005         	call	_byte_read
  1247  000764  6E34               	movwf	get_time@minutes,c
  1248                           
  1249                           ;user.c: 248: aux = 0x85;
  1250  000766  0E85               	movlw	133
  1251  000768  6E35               	movwf	get_time@aux,c
  1252                           
  1253                           ;user.c: 249: char hours = byte_read(aux);
  1254  00076A  5035               	movf	get_time@aux,w,c
  1255  00076C  EC01  F005         	call	_byte_read
  1256  000770  6E36               	movwf	get_time@hours,c
  1257                           
  1258                           ;user.c: 252: data[0] = minutes & 0x0f;
  1259  000772  5034               	movf	get_time@minutes,w,c
  1260  000774  0B0F               	andlw	15
  1261  000776  C09C  FFD9         	movff	get_time@data,fsr2l
  1262  00077A  C09D  FFDA         	movff	get_time@data+1,fsr2h
  1263  00077E  6EDF               	movwf	indf2,c
  1264                           
  1265                           ;user.c: 253: data[1] = (minutes & 0xf0)>>4;
  1266  000780  0100               	movlb	0	; () banked
  1267  000782  EE20 F001          	lfsr	2,1
  1268  000786  519C               	movf	get_time@data& (0+255),w,b
  1269  000788  26D9               	addwf	fsr2l,f,c
  1270  00078A  519D               	movf	(get_time@data+1)& (0+255),w,b
  1271  00078C  22DA               	addwfc	fsr2h,f,c
  1272  00078E  3834               	swapf	get_time@minutes,w,c
  1273  000790  0B0F               	andlw	15
  1274  000792  0B0F               	andlw	15
  1275  000794  6EDF               	movwf	indf2,c
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;user.c: 255: if(format == 1)
  1279  000796  0100               	movlb	0	; () banked
  1280  000798  059E               	decf	get_time@format& (0+255),w,b
  1281  00079A  A4D8               	btfss	status,2,c
  1282  00079C  D00A               	goto	l3312
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;user.c: 256: {
  1286                           ;user.c: 258: data[4] = 1;
  1287  00079E  0100               	movlb	0	; () banked
  1288  0007A0  EE20 F004          	lfsr	2,4
  1289  0007A4  519C               	movf	get_time@data& (0+255),w,b
  1290  0007A6  26D9               	addwf	fsr2l,f,c
  1291  0007A8  519D               	movf	(get_time@data+1)& (0+255),w,b
  1292  0007AA  22DA               	addwfc	fsr2h,f,c
  1293  0007AC  0E01               	movlw	1
  1294  0007AE  6EDF               	movwf	indf2,c
  1295  0007B0  D017               	goto	l3318
  1296  0007B2                     l3312:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;user.c: 263: else
  1300                           ;user.c: 264: {
  1301                           ;user.c: 265: data[4] = 2;
  1302  0007B2  0100               	movlb	0	; () banked
  1303  0007B4  EE20 F004          	lfsr	2,4
  1304  0007B8  519C               	movf	get_time@data& (0+255),w,b
  1305  0007BA  26D9               	addwf	fsr2l,f,c
  1306  0007BC  519D               	movf	(get_time@data+1)& (0+255),w,b
  1307  0007BE  22DA               	addwfc	fsr2h,f,c
  1308  0007C0  0E02               	movlw	2
  1309  0007C2  6EDF               	movwf	indf2,c
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;user.c: 266: char aux_hour = (hours>>4 & 0x0f)*10 + (hours & 0x0f);
  1313  0007C4  C036  F031         	movff	get_time@hours,??_get_time
  1314  0007C8  0E0F               	movlw	15
  1315  0007CA  1631               	andwf	??_get_time,f,c
  1316  0007CC  3836               	swapf	get_time@hours,w,c
  1317  0007CE  0B0F               	andlw	15
  1318  0007D0  0B0F               	andlw	15
  1319  0007D2  0D0A               	mullw	10
  1320  0007D4  50F3               	movf	prodl,w,c
  1321  0007D6  2431               	addwf	??_get_time,w,c
  1322  0007D8  6E33               	movwf	get_time@aux_hour,c
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;user.c: 267: if(aux_hour<=12)
  1326  0007DA  0E0D               	movlw	13
  1327  0007DC  6033               	cpfslt	get_time@aux_hour,c
  1328  0007DE  D015               	goto	l3320
  1329  0007E0                     l3318:
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;user.c: 268: {
  1333                           ;user.c: 269: data[2] = hours & 0x0f;
  1334  0007E0  0100               	movlb	0	; () banked
  1335  0007E2  EE20 F002          	lfsr	2,2
  1336  0007E6  519C               	movf	get_time@data& (0+255),w,b
  1337  0007E8  26D9               	addwf	fsr2l,f,c
  1338  0007EA  519D               	movf	(get_time@data+1)& (0+255),w,b
  1339  0007EC  22DA               	addwfc	fsr2h,f,c
  1340  0007EE  5036               	movf	get_time@hours,w,c
  1341  0007F0  0B0F               	andlw	15
  1342  0007F2  6EDF               	movwf	indf2,c
  1343                           
  1344                           ;user.c: 270: data[3] = (hours & 0xf0)>>4;
  1345  0007F4  0100               	movlb	0	; () banked
  1346  0007F6  EE20 F003          	lfsr	2,3
  1347  0007FA  519C               	movf	get_time@data& (0+255),w,b
  1348  0007FC  26D9               	addwf	fsr2l,f,c
  1349  0007FE  519D               	movf	(get_time@data+1)& (0+255),w,b
  1350  000800  22DA               	addwfc	fsr2h,f,c
  1351  000802  3836               	swapf	get_time@hours,w,c
  1352  000804  0B0F               	andlw	15
  1353  000806  0B0F               	andlw	15
  1354  000808  D01A               	goto	L9
  1355  00080A                     l3320:
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;user.c: 272: else
  1359                           ;user.c: 273: {
  1360                           ;user.c: 274: data[2] = (hours & 0x0f) - 2;
  1361  00080A  0100               	movlb	0	; () banked
  1362  00080C  EE20 F002          	lfsr	2,2
  1363  000810  519C               	movf	get_time@data& (0+255),w,b
  1364  000812  26D9               	addwf	fsr2l,f,c
  1365  000814  519D               	movf	(get_time@data+1)& (0+255),w,b
  1366  000816  22DA               	addwfc	fsr2h,f,c
  1367  000818  5036               	movf	get_time@hours,w,c
  1368  00081A  0B0F               	andlw	15
  1369  00081C  0FFE               	addlw	254
  1370  00081E  6EDF               	movwf	indf2,c
  1371                           
  1372                           ;user.c: 275: data[3] = (hours>>4 & 0x0f)-1;
  1373  000820  0100               	movlb	0	; () banked
  1374  000822  EE20 F003          	lfsr	2,3
  1375  000826  519C               	movf	get_time@data& (0+255),w,b
  1376  000828  26D9               	addwf	fsr2l,f,c
  1377  00082A  519D               	movf	(get_time@data+1)& (0+255),w,b
  1378  00082C  22DA               	addwfc	fsr2h,f,c
  1379  00082E  C036  F031         	movff	get_time@hours,??_get_time
  1380  000832  3A31               	swapf	??_get_time,f,c
  1381  000834  0E0F               	movlw	15
  1382  000836  1631               	andwf	??_get_time,f,c
  1383  000838  0E0F               	movlw	15
  1384  00083A  1631               	andwf	??_get_time,f,c
  1385  00083C  0431               	decf	??_get_time,w,c
  1386  00083E                     L9:
  1387  00083E  6EDF               	movwf	indf2,c
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;user.c: 276: }
  1391                           ;user.c: 278: }
  1392                           ;user.c: 281: data[5] = 'H';
  1393                           
  1394                           ; BSR set to: 0
  1395  000840  0100               	movlb	0	; () banked
  1396  000842  EE20 F005          	lfsr	2,5
  1397  000846  519C               	movf	get_time@data& (0+255),w,b
  1398  000848  26D9               	addwf	fsr2l,f,c
  1399  00084A  519D               	movf	(get_time@data+1)& (0+255),w,b
  1400  00084C  22DA               	addwfc	fsr2h,f,c
  1401  00084E  0E48               	movlw	72
  1402  000850  6EDF               	movwf	indf2,c
  1403                           
  1404                           ; BSR set to: 0
  1405  000852  0012               	return		;funcret
  1406  000854                     __end_of_get_time:
  1407                           	opt stack 0
  1408                           tblptru	equ	0xFF8
  1409                           prodl	equ	0xFF3
  1410                           postinc0	equ	0xFEE
  1411                           wreg	equ	0xFE8
  1412                           indf2	equ	0xFDF
  1413                           fsr2h	equ	0xFDA
  1414                           fsr2l	equ	0xFD9
  1415                           status	equ	0xFD8
  1416                           
  1417 ;; *************** function _byte_read *****************
  1418 ;; Defined at:
  1419 ;;		line 186 in file "user.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  address         1    wreg     unsigned char 
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;  address         1   44[COMRAM] unsigned char 
  1424 ;;  i               2   46[COMRAM] int 
  1425 ;;  res             1   45[COMRAM] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      unsigned char 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1435 ;;      Params:         0       0       0       0       0       0       0       0       0
  1436 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1437 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1438 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1439 ;;Total ram usage:        6 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    8
  1442 ;; This function calls:
  1443 ;;		_ce_disable
  1444 ;;		_ce_enable
  1445 ;;		_io_as_input
  1446 ;;		_send_command
  1447 ;; This function is called by:
  1448 ;;		_get_time
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text5
  1453  000A02                     __ptext5:
  1454                           	opt stack 0
  1455  000A02                     _byte_read:
  1456                           	opt stack 21
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;incstack = 0
  1460                           ;byte_read@address stored from wreg
  1461  000A02  6E2D               	movwf	byte_read@address,c
  1462                           
  1463                           ;user.c: 188: char res = 0;
  1464  000A04  0E00               	movlw	0
  1465  000A06  6E2E               	movwf	byte_read@res,c
  1466                           
  1467                           ;user.c: 191: ce_enable();
  1468  000A08  EC35  F007         	call	_ce_enable	;wreg free
  1469                           
  1470                           ;user.c: 193: send_command(address);
  1471  000A0C  502D               	movf	byte_read@address,w,c
  1472  000A0E  EC66  F005         	call	_send_command
  1473                           
  1474                           ;user.c: 194: io_as_input();
  1475  000A12  EC33  F007         	call	_io_as_input	;wreg free
  1476                           
  1477                           ;user.c: 195: int i;
  1478                           ;user.c: 196: for(i=0;i<8;i++)
  1479  000A16  0E00               	movlw	0
  1480  000A18  6E30               	movwf	byte_read@i+1,c
  1481  000A1A  0E00               	movlw	0
  1482  000A1C  6E2F               	movwf	byte_read@i,c
  1483  000A1E                     l3196:
  1484  000A1E  BE30               	btfsc	byte_read@i+1,7,c
  1485  000A20  D006               	goto	l283
  1486  000A22  5030               	movf	byte_read@i+1,w,c
  1487  000A24  E121               	bnz	l3212
  1488  000A26  0E08               	movlw	8
  1489  000A28  5C2F               	subwf	byte_read@i,w,c
  1490  000A2A  B0D8               	btfsc	status,0,c
  1491  000A2C  D01D               	goto	l3212
  1492  000A2E                     l283:
  1493                           
  1494                           ;user.c: 197: {
  1495                           ;user.c: 198: RA2 = 0;
  1496  000A2E  9480               	bcf	3968,2,c	;volatile
  1497                           
  1498                           ;user.c: 199: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  1499  000A30  0E06               	movlw	6
  1500  000A32                     u2917:
  1501  000A32  2EE8               	decfsz	wreg,f,c
  1502  000A34  D7FE               	bra	u2917
  1503  000A36  D000               	nop2	
  1504                           
  1505                           ;user.c: 200: res |= RA3<<i;
  1506  000A38  C02F  F02B         	movff	byte_read@i,??_byte_read
  1507  000A3C  A680               	btfss	3968,3,c	;volatile
  1508  000A3E  D003               	goto	u2570
  1509  000A40  6A2C               	clrf	(??_byte_read+1)& (0+255),c
  1510  000A42  2A2C               	incf	(??_byte_read+1)& (0+255),f,c
  1511  000A44  D001               	goto	u2588
  1512  000A46                     u2570:
  1513  000A46  6A2C               	clrf	(??_byte_read+1)& (0+255),c
  1514  000A48                     u2588:
  1515  000A48  2A2B               	incf	??_byte_read,f,c
  1516  000A4A  D002               	goto	u2594
  1517  000A4C                     u2595:
  1518  000A4C  90D8               	bcf	status,0,c
  1519  000A4E  362C               	rlcf	??_byte_read+1,f,c
  1520  000A50                     u2594:
  1521  000A50  2E2B               	decfsz	??_byte_read,f,c
  1522  000A52  D7FC               	goto	u2595
  1523  000A54  502C               	movf	??_byte_read+1,w,c
  1524  000A56  122E               	iorwf	byte_read@res,f,c
  1525                           
  1526                           ;user.c: 201: RA2 = 1;
  1527  000A58  8480               	bsf	3968,2,c	;volatile
  1528                           
  1529                           ;user.c: 202: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  1530  000A5A  0E10               	movlw	16
  1531  000A5C                     u2927:
  1532  000A5C  2EE8               	decfsz	wreg,f,c
  1533  000A5E  D7FE               	bra	u2927
  1534  000A60  D000               	nop2	
  1535  000A62  4A2F               	infsnz	byte_read@i,f,c
  1536  000A64  2A30               	incf	byte_read@i+1,f,c
  1537  000A66  D7DB               	goto	l3196
  1538  000A68                     l3212:
  1539                           
  1540                           ;user.c: 204: }
  1541                           ;user.c: 206: ce_disable();
  1542  000A68  EC2B  F007         	call	_ce_disable	;wreg free
  1543                           
  1544                           ;user.c: 209: return res;
  1545  000A6C  502E               	movf	byte_read@res,w,c
  1546  000A6E  0012               	return	
  1547  000A70                     __end_of_byte_read:
  1548                           	opt stack 0
  1549                           tblptru	equ	0xFF8
  1550                           prodl	equ	0xFF3
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           indf2	equ	0xFDF
  1554                           fsr2h	equ	0xFDA
  1555                           fsr2l	equ	0xFD9
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _send_command *****************
  1559 ;; Defined at:
  1560 ;;		line 339 in file "user.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  command         1    wreg     unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  command         1   39[COMRAM] unsigned char 
  1565 ;;  i               2   40[COMRAM] int 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		wreg, status,2, status,0, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1575 ;;      Params:         0       0       0       0       0       0       0       0       0
  1576 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1577 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1578 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1579 ;;Total ram usage:        5 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    7
  1582 ;; This function calls:
  1583 ;;		_io_as_output
  1584 ;; This function is called by:
  1585 ;;		_byte_read
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text6
  1590  000ACC                     __ptext6:
  1591                           	opt stack 0
  1592  000ACC                     _send_command:
  1593                           	opt stack 21
  1594                           
  1595                           ;incstack = 0
  1596                           ;send_command@command stored from wreg
  1597  000ACC  6E28               	movwf	send_command@command,c
  1598                           
  1599                           ;user.c: 341: int i;
  1600                           ;user.c: 342: io_as_output();
  1601  000ACE  EC31  F007         	call	_io_as_output	;wreg free
  1602                           
  1603                           ;user.c: 343: for(i=0; i<8; i++)
  1604  000AD2  0E00               	movlw	0
  1605  000AD4  6E2A               	movwf	send_command@i+1,c
  1606  000AD6  0E00               	movlw	0
  1607  000AD8  6E29               	movwf	send_command@i,c
  1608  000ADA                     l3166:
  1609  000ADA  BE2A               	btfsc	send_command@i+1,7,c
  1610  000ADC  D006               	goto	l3170
  1611  000ADE  502A               	movf	send_command@i+1,w,c
  1612  000AE0  E121               	bnz	l323
  1613  000AE2  0E08               	movlw	8
  1614  000AE4  5C29               	subwf	send_command@i,w,c
  1615  000AE6  B0D8               	btfsc	status,0,c
  1616  000AE8  0012               	return	
  1617  000AEA                     l3170:
  1618                           
  1619                           ;user.c: 344: {
  1620                           ;user.c: 345: RA3 = command>>i & 0x01;
  1621  000AEA  C029  F026         	movff	send_command@i,??_send_command
  1622  000AEE  C028  F027         	movff	send_command@command,??_send_command+1
  1623  000AF2  2A26               	incf	??_send_command,f,c
  1624  000AF4  D002               	goto	u2524
  1625  000AF6                     u2525:
  1626  000AF6  90D8               	bcf	status,0,c
  1627  000AF8  3227               	rrcf	??_send_command+1,f,c
  1628  000AFA                     u2524:
  1629  000AFA  2E26               	decfsz	??_send_command,f,c
  1630  000AFC  D7FC               	goto	u2525
  1631  000AFE  3027               	rrcf	??_send_command+1,w,c
  1632  000B00  A0D8               	btfss	status,0,c
  1633  000B02  D002               	goto	u2530
  1634  000B04  8680               	bsf	3968,3,c	;volatile
  1635  000B06  D001               	goto	l3172
  1636  000B08                     u2530:
  1637  000B08  9680               	bcf	3968,3,c	;volatile
  1638  000B0A                     l3172:
  1639                           
  1640                           ;user.c: 346: RA2 = 1;
  1641  000B0A  8480               	bsf	3968,2,c	;volatile
  1642                           
  1643                           ;user.c: 347: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  1644  000B0C  0E10               	movlw	16
  1645  000B0E                     u2937:
  1646  000B0E  2EE8               	decfsz	wreg,f,c
  1647  000B10  D7FE               	bra	u2937
  1648  000B12  D000               	nop2	
  1649                           
  1650                           ;user.c: 348: RA2 = 0;
  1651  000B14  9480               	bcf	3968,2,c	;volatile
  1652                           
  1653                           ;user.c: 349: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  1654  000B16  0E06               	movlw	6
  1655  000B18                     u2947:
  1656  000B18  2EE8               	decfsz	wreg,f,c
  1657  000B1A  D7FE               	bra	u2947
  1658  000B1C  D000               	nop2	
  1659  000B1E  4A29               	infsnz	send_command@i,f,c
  1660  000B20  2A2A               	incf	send_command@i+1,f,c
  1661  000B22  D7DB               	goto	l3166
  1662  000B24                     l323:
  1663  000B24  0012               	return		;funcret
  1664  000B26                     __end_of_send_command:
  1665                           	opt stack 0
  1666                           tblptru	equ	0xFF8
  1667                           prodl	equ	0xFF3
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           indf2	equ	0xFDF
  1671                           fsr2h	equ	0xFDA
  1672                           fsr2l	equ	0xFD9
  1673                           status	equ	0xFD8
  1674                           
  1675 ;; *************** function _io_as_output *****************
  1676 ;; Defined at:
  1677 ;;		line 361 in file "user.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;		None
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;		None
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      void 
  1684 ;; Registers used:
  1685 ;;		None
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1691 ;;      Params:         0       0       0       0       0       0       0       0       0
  1692 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1693 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1694 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1695 ;;Total ram usage:        0 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    6
  1698 ;; This function calls:
  1699 ;;		Nothing
  1700 ;; This function is called by:
  1701 ;;		_send_command
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text7
  1706  000E62                     __ptext7:
  1707                           	opt stack 0
  1708  000E62                     _io_as_output:
  1709                           	opt stack 21
  1710                           
  1711                           ;user.c: 363: TRISA3 = 0;
  1712                           
  1713                           ;incstack = 0
  1714  000E62  9692               	bcf	3986,3,c	;volatile
  1715  000E64  0012               	return		;funcret
  1716  000E66                     __end_of_io_as_output:
  1717                           	opt stack 0
  1718                           tblptru	equ	0xFF8
  1719                           prodl	equ	0xFF3
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           indf2	equ	0xFDF
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _io_as_input *****************
  1728 ;; Defined at:
  1729 ;;		line 355 in file "user.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		None
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1743 ;;      Params:         0       0       0       0       0       0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1746 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1747 ;;Total ram usage:        0 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    6
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_byte_read
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text8
  1758  000E66                     __ptext8:
  1759                           	opt stack 0
  1760  000E66                     _io_as_input:
  1761                           	opt stack 22
  1762                           
  1763                           ;user.c: 357: TRISA3 = 1;
  1764                           
  1765                           ;incstack = 0
  1766  000E66  8692               	bsf	3986,3,c	;volatile
  1767  000E68  0012               	return		;funcret
  1768  000E6A                     __end_of_io_as_input:
  1769                           	opt stack 0
  1770                           tblptru	equ	0xFF8
  1771                           prodl	equ	0xFF3
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           indf2	equ	0xFDF
  1775                           fsr2h	equ	0xFDA
  1776                           fsr2l	equ	0xFD9
  1777                           status	equ	0xFD8
  1778                           
  1779 ;; *************** function _ce_enable *****************
  1780 ;; Defined at:
  1781 ;;		line 172 in file "user.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;		None
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;		None
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		None
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1795 ;;      Params:         0       0       0       0       0       0       0       0       0
  1796 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1797 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1798 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1799 ;;Total ram usage:        0 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    6
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		_byte_read
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text9
  1810  000E6A                     __ptext9:
  1811                           	opt stack 0
  1812  000E6A                     _ce_enable:
  1813                           	opt stack 22
  1814                           
  1815                           ;user.c: 175: RA5 = 1;
  1816                           
  1817                           ;incstack = 0
  1818  000E6A  8A80               	bsf	3968,5,c	;volatile
  1819  000E6C  0012               	return		;funcret
  1820  000E6E                     __end_of_ce_enable:
  1821                           	opt stack 0
  1822                           tblptru	equ	0xFF8
  1823                           prodl	equ	0xFF3
  1824                           postinc0	equ	0xFEE
  1825                           wreg	equ	0xFE8
  1826                           indf2	equ	0xFDF
  1827                           fsr2h	equ	0xFDA
  1828                           fsr2l	equ	0xFD9
  1829                           status	equ	0xFD8
  1830                           
  1831 ;; *************** function _ce_disable *****************
  1832 ;; Defined at:
  1833 ;;		line 179 in file "user.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;		None
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;		None
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      void 
  1840 ;; Registers used:
  1841 ;;		None
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1847 ;;      Params:         0       0       0       0       0       0       0       0       0
  1848 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1850 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1851 ;;Total ram usage:        0 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    6
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_byte_read
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text10
  1862  000E56                     __ptext10:
  1863                           	opt stack 0
  1864  000E56                     _ce_disable:
  1865                           	opt stack 22
  1866                           
  1867                           ;user.c: 181: RA5 = 0;
  1868                           
  1869                           ;incstack = 0
  1870  000E56  9A80               	bcf	3968,5,c	;volatile
  1871                           
  1872                           ;user.c: 182: RA2 = 0;
  1873  000E58  9480               	bcf	3968,2,c	;volatile
  1874  000E5A  0012               	return		;funcret
  1875  000E5C                     __end_of_ce_disable:
  1876                           	opt stack 0
  1877                           tblptru	equ	0xFF8
  1878                           prodl	equ	0xFF3
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           indf2	equ	0xFDF
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _buzzer_disable *****************
  1887 ;; Defined at:
  1888 ;;		line 158 in file "user.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, status,2
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1902 ;;      Params:         0       0       0       0       0       0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1905 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1906 ;;Total ram usage:        0 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    6
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_main
  1913 ;;		_buzzer_toggle
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text11
  1918  000E3E                     __ptext11:
  1919                           	opt stack 0
  1920  000E3E                     _buzzer_disable:
  1921                           	opt stack 24
  1922                           
  1923                           ;user.c: 160: buzzer_status= 0;
  1924                           
  1925                           ;incstack = 0
  1926  000E3E  0E00               	movlw	0
  1927  000E40  0100               	movlb	0	; () banked
  1928  000E42  6FA4               	movwf	_buzzer_status& (0+255),b
  1929                           
  1930                           ; BSR set to: 0
  1931  000E44  0012               	return		;funcret
  1932  000E46                     __end_of_buzzer_disable:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           prodl	equ	0xFF3
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           indf2	equ	0xFDF
  1939                           fsr2h	equ	0xFDA
  1940                           fsr2l	equ	0xFD9
  1941                           status	equ	0xFD8
  1942                           
  1943 ;; *************** function _InitApp *****************
  1944 ;; Defined at:
  1945 ;;		line 28 in file "user.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;		None
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;		None
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2, status,0
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1959 ;;      Params:         0       0       0       0       0       0       0       0       0
  1960 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1961 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1962 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1963 ;;Total ram usage:        0 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    6
  1966 ;; This function calls:
  1967 ;;		Nothing
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text12
  1974  000A70                     __ptext12:
  1975                           	opt stack 0
  1976  000A70                     _InitApp:
  1977                           	opt stack 24
  1978                           
  1979                           ;user.c: 32: TRISB3 = 0;
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;incstack = 0
  1983  000A70  9693               	bcf	3987,3,c	;volatile
  1984                           
  1985                           ;user.c: 33: TRISB4 = 0;
  1986  000A72  9893               	bcf	3987,4,c	;volatile
  1987                           
  1988                           ;user.c: 35: CCP2CON = 0x00;
  1989  000A74  0E00               	movlw	0
  1990  000A76  6EBA               	movwf	4026,c	;volatile
  1991                           
  1992                           ;user.c: 36: SSPCON1 = 0X00;
  1993  000A78  0E00               	movlw	0
  1994  000A7A  6EC6               	movwf	4038,c	;volatile
  1995                           
  1996                           ;user.c: 37: ADCON1 = 0X0F;
  1997  000A7C  0E0F               	movlw	15
  1998  000A7E  6EC1               	movwf	4033,c	;volatile
  1999                           
  2000                           ;user.c: 38: INTCON = 0b10001000;
  2001  000A80  0E88               	movlw	136
  2002  000A82  6EF2               	movwf	intcon,c	;volatile
  2003                           
  2004                           ;user.c: 39: INTCON = 0b0;
  2005  000A84  0E00               	movlw	0
  2006  000A86  6EF2               	movwf	intcon,c	;volatile
  2007                           
  2008                           ;user.c: 40: INTCON |= 1<<7;
  2009  000A88  8EF2               	bsf	intcon,7,c	;volatile
  2010                           
  2011                           ;user.c: 41: INTCON |= 1<<6;
  2012  000A8A  8CF2               	bsf	intcon,6,c	;volatile
  2013                           
  2014                           ;user.c: 42: INTCON |= 1<<3;
  2015  000A8C  86F2               	bsf	intcon,3,c	;volatile
  2016                           
  2017                           ;user.c: 43: INTCON |= 1<<5;
  2018  000A8E  8AF2               	bsf	intcon,5,c	;volatile
  2019                           
  2020                           ;user.c: 44: INTCON2 = 0b10000101;
  2021  000A90  0E85               	movlw	133
  2022  000A92  6EF1               	movwf	intcon2,c	;volatile
  2023                           
  2024                           ;user.c: 45: INTCON2 |= 1<2;
  2025  000A94  80F1               	bsf	intcon2,0,c	;volatile
  2026                           
  2027                           ;user.c: 47: T0CON = 0b10000010;
  2028  000A96  0E82               	movlw	130
  2029  000A98  6ED5               	movwf	4053,c	;volatile
  2030                           
  2031                           ;user.c: 50: T1CON = 0x00;
  2032  000A9A  0E00               	movlw	0
  2033  000A9C  6ECD               	movwf	4045,c	;volatile
  2034                           
  2035                           ;user.c: 51: T1CON |= 1<<7;
  2036  000A9E  8ECD               	bsf	4045,7,c	;volatile
  2037                           
  2038                           ;user.c: 52: T1CON |= 1<<5;
  2039  000AA0  8ACD               	bsf	4045,5,c	;volatile
  2040                           
  2041                           ;user.c: 53: T1CON |= 1<<4;
  2042  000AA2  88CD               	bsf	4045,4,c	;volatile
  2043                           
  2044                           ;user.c: 54: T1CON |= 0<<3;
  2045  000AA4  50CD               	movf	4045,w,c	;volatile
  2046                           
  2047                           ;user.c: 55: T1CON |= 0 << 1;
  2048  000AA6  50CD               	movf	4045,w,c	;volatile
  2049                           
  2050                           ;user.c: 56: T1CON |= 0 << 0;
  2051  000AA8  50CD               	movf	4045,w,c	;volatile
  2052                           
  2053                           ;user.c: 58: PIE1 = 0x00;
  2054  000AAA  0E00               	movlw	0
  2055  000AAC  6E9D               	movwf	3997,c	;volatile
  2056                           
  2057                           ;user.c: 59: PIE1 |= 1 << 0;
  2058  000AAE  809D               	bsf	3997,0,c	;volatile
  2059                           
  2060                           ;user.c: 61: TRISB1 = 0;
  2061  000AB0  9293               	bcf	3987,1,c	;volatile
  2062                           
  2063                           ;user.c: 62: TRISA2 = 0;
  2064  000AB2  9492               	bcf	3986,2,c	;volatile
  2065                           
  2066                           ;user.c: 63: TRISA5 = 0;
  2067  000AB4  9A92               	bcf	3986,5,c	;volatile
  2068                           
  2069                           ;user.c: 64: TRISA3 = 0;
  2070  000AB6  9692               	bcf	3986,3,c	;volatile
  2071                           
  2072                           ;user.c: 68: state = 0;
  2073  000AB8  0E00               	movlw	0
  2074  000ABA  0100               	movlb	0	; () banked
  2075  000ABC  6FB3               	movwf	(_state+1)& (0+255),b
  2076  000ABE  0E00               	movlw	0
  2077  000AC0  6FB2               	movwf	_state& (0+255),b
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;user.c: 69: next = 0;
  2081  000AC2  0E00               	movlw	0
  2082  000AC4  6E38               	movwf	_next+1,c
  2083  000AC6  0E00               	movlw	0
  2084  000AC8  6E37               	movwf	_next,c
  2085                           
  2086                           ; BSR set to: 0
  2087  000ACA  0012               	return		;funcret
  2088  000ACC                     __end_of_InitApp:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           prodl	equ	0xFF3
  2092                           intcon	equ	0xFF2
  2093                           intcon2	equ	0xFF1
  2094                           postinc0	equ	0xFEE
  2095                           wreg	equ	0xFE8
  2096                           indf2	equ	0xFDF
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _ConfigureOscillator *****************
  2102 ;; Defined at:
  2103 ;;		line 24 in file "system.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;		None
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;		None
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		None
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0
  2118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2121 ;;Total ram usage:        0 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    6
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_main
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text13
  2132  000E82                     __ptext13:
  2133                           	opt stack 0
  2134  000E82                     _ConfigureOscillator:
  2135                           	opt stack 24
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;incstack = 0
  2139  000E82  0012               	return		;funcret
  2140  000E84                     __end_of_ConfigureOscillator:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           prodl	equ	0xFF3
  2144                           intcon	equ	0xFF2
  2145                           intcon2	equ	0xFF1
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           indf2	equ	0xFDF
  2149                           fsr2h	equ	0xFDA
  2150                           fsr2l	equ	0xFD9
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _high_isr *****************
  2154 ;; Defined at:
  2155 ;;		line 32 in file "interrupts.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;  digits          6   47[BANK0 ] unsigned char [6]
  2160 ;;  i               2   58[BANK0 ] int 
  2161 ;;  code           47    0[BANK0 ] unsigned char [47]
  2162 ;;  i               2   56[BANK0 ] int 
  2163 ;;  final_code      2   54[BANK0 ] int 
  2164 ;;  aux             1   53[BANK0 ] unsigned char 
  2165 ;; Return value:  Size  Location     Type
  2166 ;;                  1    wreg      void 
  2167 ;; Registers used:
  2168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2174 ;;      Params:         0       0       0       0       0       0       0       0       0
  2175 ;;      Locals:         0      60       0       0       0       0       0       0       0
  2176 ;;      Temps:         17       0       0       0       0       0       0       0       0
  2177 ;;      Totals:        17      60       0       0       0       0       0       0       0
  2178 ;;Total ram usage:       77 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    5
  2181 ;; This function calls:
  2182 ;;		_get_next_state
  2183 ;;		_ir_get_human_code
  2184 ;;		_point_disable
  2185 ;;		_point_enable
  2186 ;;		_put_nums
  2187 ;;		_update_buzzer
  2188 ;;		_update_point
  2189 ;;		_update_timer1_counter_10
  2190 ;; This function is called by:
  2191 ;;		Interrupt level 2
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	intcode
  2196  000008                     __pintcode:
  2197                           	opt stack 0
  2198  000008                     _high_isr:
  2199                           	opt stack 21
  2200                           
  2201                           ;incstack = 0
  2202  000008  823A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2203  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  2204                           tblptru	equ	0xFF8
  2205                           prodl	equ	0xFF3
  2206                           intcon	equ	0xFF2
  2207                           intcon2	equ	0xFF1
  2208                           postinc0	equ	0xFEE
  2209                           wreg	equ	0xFE8
  2210                           indf2	equ	0xFDF
  2211                           fsr2h	equ	0xFDA
  2212                           fsr2l	equ	0xFD9
  2213                           status	equ	0xFD8
  2214                           
  2215                           	psect	intcode_body
  2216  000012                     __pintcode_body:
  2217                           	opt stack 21
  2218  000012                     int_func:
  2219                           	opt stack 21
  2220  000012  0006               	pop		; remove dummy address from shadow register refresh
  2221  000014  CFFA F018          	movff	pclath,??_high_isr+3
  2222  000018  CFFB F019          	movff	pclatu,??_high_isr+4
  2223  00001C  CFE9 F01A          	movff	fsr0l,??_high_isr+5
  2224  000020  CFEA F01B          	movff	fsr0h,??_high_isr+6
  2225  000024  CFE1 F01C          	movff	fsr1l,??_high_isr+7
  2226  000028  CFE2 F01D          	movff	fsr1h,??_high_isr+8
  2227  00002C  CFD9 F01E          	movff	fsr2l,??_high_isr+9
  2228  000030  CFDA F01F          	movff	fsr2h,??_high_isr+10
  2229  000034  CFF3 F020          	movff	prodl,??_high_isr+11
  2230  000038  CFF4 F021          	movff	prodh,??_high_isr+12
  2231  00003C  CFF6 F022          	movff	tblptrl,??_high_isr+13
  2232  000040  CFF7 F023          	movff	tblptrh,??_high_isr+14
  2233  000044  CFF8 F024          	movff	tblptru,??_high_isr+15
  2234  000048  CFF5 F025          	movff	tablat,??_high_isr+16
  2235                           
  2236                           ;interrupts.c: 68: if (RBIF == 1)
  2237  00004C  A0F2               	btfss	intcon,0,c	;volatile
  2238  00004E  D089               	goto	i2l53
  2239                           
  2240                           ;interrupts.c: 69: {
  2241                           ;interrupts.c: 71: INTCONbits.GIE = 0;
  2242  000050  9EF2               	bcf	intcon,7,c	;volatile
  2243                           
  2244                           ;interrupts.c: 72: char aux = 0;
  2245  000052  0E00               	movlw	0
  2246  000054  0100               	movlb	0	; () banked
  2247  000056  6F95               	movwf	high_isr@aux& (0+255),b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;interrupts.c: 74: int i;
  2251                           ;interrupts.c: 75: char code[47];
  2252                           ;interrupts.c: 77: _delay((unsigned long)((40.7)*(20000000L/4000.0)));
  2253  000058  0E02               	movlw	2
  2254  00005A  6E16               	movwf	(??_high_isr+1)& (0+255),c
  2255  00005C  0E09               	movlw	9
  2256  00005E  6E15               	movwf	??_high_isr& (0+255),c
  2257  000060  0E46               	movlw	70
  2258  000062                     i2u295_47:
  2259  000062  2EE8               	decfsz	wreg,f,c
  2260  000064  D7FE               	bra	i2u295_47
  2261  000066  2E15               	decfsz	??_high_isr& (0+255),f,c
  2262  000068  D7FC               	bra	i2u295_47
  2263  00006A  2E16               	decfsz	(??_high_isr+1)& (0+255),f,c
  2264  00006C  D7FA               	bra	i2u295_47
  2265                           
  2266                           ;interrupts.c: 78: for(i = 0; i < 47 ; i ++)
  2267  00006E  0E00               	movlw	0
  2268  000070  0100               	movlb	0	; () banked
  2269  000072  6F99               	movwf	(high_isr@i+1)& (0+255),b
  2270  000074  0E00               	movlw	0
  2271  000076  6F98               	movwf	high_isr@i& (0+255),b
  2272  000078                     i2l2730:
  2273                           
  2274                           ; BSR set to: 0
  2275  000078  0100               	movlb	0	; () banked
  2276  00007A  BF99               	btfsc	(high_isr@i+1)& (0+255),7,b
  2277  00007C  D008               	goto	i2l2734
  2278  00007E  0100               	movlb	0	; () banked
  2279  000080  5199               	movf	(high_isr@i+1)& (0+255),w,b
  2280  000082  E11D               	bnz	i2l2742
  2281  000084  0E2F               	movlw	47
  2282  000086  0100               	movlb	0	; () banked
  2283  000088  5D98               	subwf	high_isr@i& (0+255),w,b
  2284  00008A  B0D8               	btfsc	status,0,c
  2285  00008C  D018               	goto	i2l2742
  2286  00008E                     i2l2734:
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;interrupts.c: 79: {
  2290                           ;interrupts.c: 80: code[i] = RB5;
  2291  00008E  0E60               	movlw	low high_isr@code
  2292  000090  0100               	movlb	0	; () banked
  2293  000092  2598               	addwf	high_isr@i& (0+255),w,b
  2294  000094  6ED9               	movwf	fsr2l,c
  2295  000096  0E00               	movlw	high high_isr@code
  2296  000098  0100               	movlb	0	; () banked
  2297  00009A  2199               	addwfc	(high_isr@i+1)& (0+255),w,b
  2298  00009C  6EDA               	movwf	fsr2h,c
  2299  00009E  0E00               	movlw	0
  2300  0000A0  BA81               	btfsc	3969,5,c	;volatile
  2301  0000A2  0E01               	movlw	1
  2302  0000A4  6EDF               	movwf	indf2,c
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;interrupts.c: 81: _delay((unsigned long)((565)*(20000000L/4000000.0)));
  2306  0000A6  0E04               	movlw	4
  2307  0000A8  6E15               	movwf	??_high_isr& (0+255),c
  2308  0000AA  0EAA               	movlw	170
  2309  0000AC                     i2u296_47:
  2310  0000AC  2EE8               	decfsz	wreg,f,c
  2311  0000AE  D7FE               	bra	i2u296_47
  2312  0000B0  2E15               	decfsz	??_high_isr& (0+255),f,c
  2313  0000B2  D7FC               	bra	i2u296_47
  2314  0000B4  F000               	nop	
  2315  0000B6  0100               	movlb	0	; () banked
  2316  0000B8  4B98               	infsnz	high_isr@i& (0+255),f,b
  2317  0000BA  2B99               	incf	(high_isr@i+1)& (0+255),f,b
  2318  0000BC  D7DD               	goto	i2l2730
  2319  0000BE                     i2l2742:
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;interrupts.c: 82: }
  2323                           ;interrupts.c: 83: int final_code = 0;
  2324  0000BE  0E00               	movlw	0
  2325  0000C0  0100               	movlb	0	; () banked
  2326  0000C2  6F97               	movwf	(high_isr@final_code+1)& (0+255),b
  2327  0000C4  0E00               	movlw	0
  2328  0000C6  6F96               	movwf	high_isr@final_code& (0+255),b
  2329                           
  2330                           ;interrupts.c: 84: for(i = 0; i<16;i++)
  2331  0000C8  0E00               	movlw	0
  2332  0000CA  0100               	movlb	0	; () banked
  2333  0000CC  6F99               	movwf	(high_isr@i+1)& (0+255),b
  2334  0000CE  0E00               	movlw	0
  2335  0000D0  6F98               	movwf	high_isr@i& (0+255),b
  2336  0000D2                     i2l2744:
  2337                           
  2338                           ; BSR set to: 0
  2339  0000D2  0100               	movlb	0	; () banked
  2340  0000D4  BF99               	btfsc	(high_isr@i+1)& (0+255),7,b
  2341  0000D6  D008               	goto	i2l2748
  2342  0000D8  0100               	movlb	0	; () banked
  2343  0000DA  5199               	movf	(high_isr@i+1)& (0+255),w,b
  2344  0000DC  E123               	bnz	i2l2754
  2345  0000DE  0E10               	movlw	16
  2346  0000E0  0100               	movlb	0	; () banked
  2347  0000E2  5D98               	subwf	high_isr@i& (0+255),w,b
  2348  0000E4  B0D8               	btfsc	status,0,c
  2349  0000E6  D01E               	goto	i2l2754
  2350  0000E8                     i2l2748:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;interrupts.c: 85: {
  2354                           ;interrupts.c: 86: final_code |= code[i]<<i;
  2355  0000E8  C098  F015         	movff	high_isr@i,??_high_isr
  2356  0000EC  0E60               	movlw	low high_isr@code
  2357  0000EE  0100               	movlb	0	; () banked
  2358  0000F0  2598               	addwf	high_isr@i& (0+255),w,b
  2359  0000F2  6ED9               	movwf	fsr2l,c
  2360  0000F4  0E00               	movlw	high high_isr@code
  2361  0000F6  0100               	movlb	0	; () banked
  2362  0000F8  2199               	addwfc	(high_isr@i+1)& (0+255),w,b
  2363  0000FA  6EDA               	movwf	fsr2h,c
  2364  0000FC  50DF               	movf	indf2,w,c
  2365  0000FE  6E16               	movwf	(??_high_isr+1)& (0+255),c
  2366  000100  6A17               	clrf	(??_high_isr+2)& (0+255),c
  2367  000102  2A15               	incf	??_high_isr,f,c
  2368  000104  D003               	goto	i2u220_44
  2369  000106                     i2u220_45:
  2370  000106  90D8               	bcf	status,0,c
  2371  000108  3616               	rlcf	??_high_isr+1,f,c
  2372  00010A  3617               	rlcf	??_high_isr+2,f,c
  2373  00010C                     i2u220_44:
  2374  00010C  2E15               	decfsz	??_high_isr,f,c
  2375  00010E  D7FB               	goto	i2u220_45
  2376  000110  5016               	movf	??_high_isr+1,w,c
  2377  000112  0100               	movlb	0	; () banked
  2378  000114  1396               	iorwf	high_isr@final_code& (0+255),f,b
  2379  000116  5017               	movf	??_high_isr+2,w,c
  2380  000118  0100               	movlb	0	; () banked
  2381  00011A  1397               	iorwf	(high_isr@final_code+1)& (0+255),f,b
  2382                           
  2383                           ; BSR set to: 0
  2384  00011C  0100               	movlb	0	; () banked
  2385  00011E  4B98               	infsnz	high_isr@i& (0+255),f,b
  2386  000120  2B99               	incf	(high_isr@i+1)& (0+255),f,b
  2387  000122  D7D7               	goto	i2l2744
  2388  000124                     i2l2754:
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;interrupts.c: 87: }
  2392                           ;interrupts.c: 92: if(final_code !=0xffff)
  2393  000124  0100               	movlb	0	; () banked
  2394  000126  2996               	incf	high_isr@final_code& (0+255),w,b
  2395  000128  E104               	bnz	i2u222_40
  2396  00012A  0100               	movlb	0	; () banked
  2397  00012C  2997               	incf	(high_isr@final_code+1)& (0+255),w,b
  2398  00012E  B4D8               	btfsc	status,2,c
  2399  000130  D015               	goto	i2l2760
  2400  000132                     i2u222_40:
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;interrupts.c: 93: {
  2404                           ;interrupts.c: 94: human_code = ir_get_human_code(final_code);
  2405  000132  C096  F001         	movff	high_isr@final_code,ir_get_human_code@code
  2406  000136  C097  F002         	movff	high_isr@final_code+1,ir_get_human_code@code+1
  2407  00013A  EC10  F003         	call	_ir_get_human_code	;wreg free
  2408  00013E  6E39               	movwf	_human_code,c
  2409                           
  2410                           ;interrupts.c: 95: next = get_next_state(state,final_code);
  2411  000140  C0B2  F00E         	movff	_state,get_next_state@state
  2412  000144  C0B3  F00F         	movff	_state+1,get_next_state@state+1
  2413  000148  C096  F010         	movff	high_isr@final_code,get_next_state@code
  2414  00014C  C097  F011         	movff	high_isr@final_code+1,get_next_state@code+1
  2415  000150  EC4D  F002         	call	_get_next_state	;wreg free
  2416  000154  C00E  F037         	movff	?_get_next_state,_next
  2417  000158  C00F  F038         	movff	?_get_next_state+1,_next+1
  2418  00015C                     i2l2760:
  2419                           
  2420                           ;interrupts.c: 96: }
  2421                           ;interrupts.c: 98: RBIF = 0;
  2422  00015C  90F2               	bcf	intcon,0,c	;volatile
  2423                           
  2424                           ;interrupts.c: 99: INTCONbits.GIE = 1;
  2425  00015E  8EF2               	bsf	intcon,7,c	;volatile
  2426                           
  2427                           ;interrupts.c: 100: }
  2428  000160  D0BB               	goto	i2l84
  2429  000162                     i2l53:
  2430                           
  2431                           ;interrupts.c: 101: else if (TMR0IF == 1)
  2432  000162  A4F2               	btfss	intcon,2,c	;volatile
  2433  000164  D0A4               	goto	i2l60
  2434                           
  2435                           ;interrupts.c: 102: {
  2436                           ;interrupts.c: 104: int i;
  2437                           ;interrupts.c: 105: for(i=0; i<6;i++)
  2438  000166  0E00               	movlw	0
  2439  000168  0100               	movlb	0	; () banked
  2440  00016A  6F9B               	movwf	(high_isr@i_150+1)& (0+255),b
  2441  00016C  0E00               	movlw	0
  2442  00016E  6F9A               	movwf	high_isr@i_150& (0+255),b
  2443  000170                     i2l2766:
  2444                           
  2445                           ; BSR set to: 0
  2446  000170  0100               	movlb	0	; () banked
  2447  000172  BF9B               	btfsc	(high_isr@i_150+1)& (0+255),7,b
  2448  000174  D008               	goto	i2l2770
  2449  000176  0100               	movlb	0	; () banked
  2450  000178  519B               	movf	(high_isr@i_150+1)& (0+255),w,b
  2451  00017A  E11B               	bnz	i2l2776
  2452  00017C  0E06               	movlw	6
  2453  00017E  0100               	movlb	0	; () banked
  2454  000180  5D9A               	subwf	high_isr@i_150& (0+255),w,b
  2455  000182  B0D8               	btfsc	status,0,c
  2456  000184  D016               	goto	i2l2776
  2457  000186                     i2l2770:
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;interrupts.c: 106: {
  2461                           ;interrupts.c: 107: masked_digits[i] = aux1[i];
  2462  000186  0EAB               	movlw	low _aux1
  2463  000188  0100               	movlb	0	; () banked
  2464  00018A  259A               	addwf	high_isr@i_150& (0+255),w,b
  2465  00018C  6ED9               	movwf	fsr2l,c
  2466  00018E  0E00               	movlw	high _aux1
  2467  000190  0100               	movlb	0	; () banked
  2468  000192  219B               	addwfc	(high_isr@i_150+1)& (0+255),w,b
  2469  000194  6EDA               	movwf	fsr2h,c
  2470  000196  0EA5               	movlw	low _masked_digits
  2471  000198  0100               	movlb	0	; () banked
  2472  00019A  259A               	addwf	high_isr@i_150& (0+255),w,b
  2473  00019C  6EE1               	movwf	fsr1l,c
  2474  00019E  0E00               	movlw	high _masked_digits
  2475  0001A0  0100               	movlb	0	; () banked
  2476  0001A2  219B               	addwfc	(high_isr@i_150+1)& (0+255),w,b
  2477  0001A4  6EE2               	movwf	fsr1h,c
  2478  0001A6  CFDF FFE7          	movff	indf2,indf1
  2479                           
  2480                           ; BSR set to: 0
  2481  0001AA  0100               	movlb	0	; () banked
  2482  0001AC  4B9A               	infsnz	high_isr@i_150& (0+255),f,b
  2483  0001AE  2B9B               	incf	(high_isr@i_150+1)& (0+255),f,b
  2484  0001B0  D7DF               	goto	i2l2766
  2485  0001B2                     i2l2776:
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;interrupts.c: 108: }
  2489                           ;interrupts.c: 111: if(counter < 10 - 1)
  2490  0001B2  0E09               	movlw	9
  2491  0001B4  0100               	movlb	0	; () banked
  2492  0001B6  61A2               	cpfslt	_counter& (0+255),b
  2493  0001B8  D003               	goto	i2l2780
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;interrupts.c: 112: {
  2497                           ;interrupts.c: 113: counter = counter + 1;
  2498  0001BA  0100               	movlb	0	; () banked
  2499  0001BC  29A2               	incf	_counter& (0+255),w,b
  2500  0001BE  D001               	goto	L10
  2501  0001C0                     i2l2780:
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;interrupts.c: 115: else
  2505                           ;interrupts.c: 116: {
  2506                           ;interrupts.c: 117: counter = 0;
  2507  0001C0  0E00               	movlw	0
  2508  0001C2                     L10:
  2509  0001C2  0100               	movlb	0	; () banked
  2510  0001C4  6FA2               	movwf	_counter& (0+255),b
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;interrupts.c: 118: }
  2514                           ;interrupts.c: 120: char digits[6];
  2515                           ;interrupts.c: 121: int i;
  2516                           ;interrupts.c: 123: for (i=0; i<6;i++)
  2517  0001C6  0E00               	movlw	0
  2518  0001C8  0100               	movlb	0	; () banked
  2519  0001CA  6F9B               	movwf	(high_isr@i_150+1)& (0+255),b
  2520  0001CC  0E00               	movlw	0
  2521  0001CE  6F9A               	movwf	high_isr@i_150& (0+255),b
  2522  0001D0                     i2l2782:
  2523                           
  2524                           ; BSR set to: 0
  2525  0001D0  0100               	movlb	0	; () banked
  2526  0001D2  BF9B               	btfsc	(high_isr@i_150+1)& (0+255),7,b
  2527  0001D4  D008               	goto	i2l65
  2528  0001D6  0100               	movlb	0	; () banked
  2529  0001D8  519B               	movf	(high_isr@i_150+1)& (0+255),w,b
  2530  0001DA  E10B               	bnz	i2l2790
  2531  0001DC  0E06               	movlw	6
  2532  0001DE  0100               	movlb	0	; () banked
  2533  0001E0  5D9A               	subwf	high_isr@i_150& (0+255),w,b
  2534  0001E2  B0D8               	btfsc	status,0,c
  2535  0001E4  D006               	goto	i2l2790
  2536  0001E6                     i2l65:
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;interrupts.c: 124: digits[6] = i;
  2540  0001E6  C09A  F095         	movff	high_isr@i_150,high_isr@digits+6
  2541                           
  2542                           ; BSR set to: 0
  2543  0001EA  0100               	movlb	0	; () banked
  2544  0001EC  4B9A               	infsnz	high_isr@i_150& (0+255),f,b
  2545  0001EE  2B9B               	incf	(high_isr@i_150+1)& (0+255),f,b
  2546  0001F0  D7EF               	goto	i2l2782
  2547  0001F2                     i2l2790:
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;interrupts.c: 127: update_point(state,counter);
  2551  0001F2  C0B2  F001         	movff	_state,update_point@state
  2552  0001F6  C0B3  F002         	movff	_state+1,update_point@state+1
  2553  0001FA  C0A2  F003         	movff	_counter,update_point@counter
  2554  0001FE  EC6D  F006         	call	_update_point	;wreg free
  2555                           
  2556                           ;interrupts.c: 128: update_buzzer(state,counter);
  2557  000202  C0B2  F001         	movff	_state,update_buzzer@state
  2558  000206  C0B3  F002         	movff	_state+1,update_buzzer@state+1
  2559  00020A  C0A2  F003         	movff	_counter,update_buzzer@counter
  2560  00020E  EC91  F006         	call	_update_buzzer	;wreg free
  2561                           
  2562                           ;interrupts.c: 130: if(counter == 0 )
  2563  000212  0100               	movlb	0	; () banked
  2564  000214  51A2               	movf	_counter& (0+255),w,b
  2565  000216  A4D8               	btfss	status,2,c
  2566  000218  D003               	goto	i2l2796
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;interrupts.c: 131: {
  2570                           ;interrupts.c: 132: point_enable();
  2571  00021A  EC37  F007         	call	_point_enable	;wreg free
  2572                           
  2573                           ;interrupts.c: 133: }
  2574  00021E  D00C               	goto	i2l2802
  2575  000220                     i2l2796:
  2576                           
  2577                           ;interrupts.c: 134: else if(counter == 5 && state == 0)
  2578  000220  0E05               	movlw	5
  2579  000222  0100               	movlb	0	; () banked
  2580  000224  19A2               	xorwf	_counter& (0+255),w,b
  2581  000226  A4D8               	btfss	status,2,c
  2582  000228  D007               	goto	i2l2802
  2583                           
  2584                           ; BSR set to: 0
  2585  00022A  0100               	movlb	0	; () banked
  2586  00022C  51B2               	movf	_state& (0+255),w,b
  2587  00022E  0100               	movlb	0	; () banked
  2588  000230  11B3               	iorwf	(_state+1)& (0+255),w,b
  2589  000232  B4D8               	btfsc	status,2,c
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;interrupts.c: 135: {
  2593                           ;interrupts.c: 136: point_disable();
  2594  000234  EC39  F007         	call	_point_disable	;wreg free
  2595  000238                     i2l2802:
  2596                           
  2597                           ;interrupts.c: 137: }
  2598                           ;interrupts.c: 140: if(buzzer_status)
  2599  000238  0100               	movlb	0	; () banked
  2600  00023A  51A4               	movf	_buzzer_status& (0+255),w,b
  2601  00023C  B4D8               	btfsc	status,2,c
  2602  00023E  D005               	goto	i2l2808
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;interrupts.c: 141: {
  2606                           ;interrupts.c: 142: if(RB0 == 1)
  2607  000240  A081               	btfss	3969,0,c	;volatile
  2608  000242  D002               	goto	i2l71
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;interrupts.c: 143: RB0 = 0;
  2612  000244  9081               	bcf	3969,0,c	;volatile
  2613  000246  D001               	goto	i2l2808
  2614  000248                     i2l71:
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;interrupts.c: 144: else
  2618                           ;interrupts.c: 145: RB0 = 1;
  2619  000248  8081               	bsf	3969,0,c	;volatile
  2620  00024A                     i2l2808:
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;interrupts.c: 146: }
  2624                           ;interrupts.c: 147: if(counter >= 5)
  2625  00024A  0E04               	movlw	4
  2626  00024C  0100               	movlb	0	; () banked
  2627  00024E  65A2               	cpfsgt	_counter& (0+255),b
  2628  000250  D026               	goto	i2l2824
  2629  000252  D010               	goto	i2l2822
  2630  000254                     i2l2812:
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;interrupts.c: 152: masked_digits[3] = 'V';
  2634  000254  0E56               	movlw	86
  2635  000256  0100               	movlb	0	; () banked
  2636  000258  6FA8               	movwf	(_masked_digits+3)& (0+255),b
  2637                           
  2638                           ;interrupts.c: 153: break;
  2639  00025A  D021               	goto	i2l2824
  2640  00025C                     i2l2814:
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;interrupts.c: 155: masked_digits[2] = 'V';
  2644  00025C  0E56               	movlw	86
  2645  00025E  0100               	movlb	0	; () banked
  2646  000260  6FA7               	movwf	(_masked_digits+2)& (0+255),b
  2647                           
  2648                           ;interrupts.c: 156: break;
  2649  000262  D01D               	goto	i2l2824
  2650  000264                     i2l2816:
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;interrupts.c: 158: masked_digits[1] = 'V';
  2654  000264  0E56               	movlw	86
  2655  000266  0100               	movlb	0	; () banked
  2656  000268  6FA6               	movwf	(_masked_digits+1)& (0+255),b
  2657                           
  2658                           ;interrupts.c: 159: break;
  2659  00026A  D019               	goto	i2l2824
  2660  00026C                     i2l2818:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;interrupts.c: 161: masked_digits[0] = 'V';
  2664  00026C  0E56               	movlw	86
  2665  00026E  0100               	movlb	0	; () banked
  2666  000270  6FA5               	movwf	_masked_digits& (0+255),b
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;interrupts.c: 163: }
  2670                           
  2671                           ;interrupts.c: 162: break;
  2672  000272  D015               	goto	i2l2824
  2673  000274                     i2l2822:
  2674                           
  2675                           ; BSR set to: 0
  2676  000274  C0B2  F015         	movff	_state,??_high_isr
  2677  000278  C0B3  F016         	movff	_state+1,??_high_isr+1
  2678                           
  2679                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2680                           ; Switch size 1, requested type "space"
  2681                           ; Number of cases is 1, Range of values is 0 to 0
  2682                           ; switch strategies available:
  2683                           ; Name         Instructions Cycles
  2684                           ; simple_byte            4     3 (average)
  2685                           ;	Chosen strategy is simple_byte
  2686  00027C  5016               	movf	??_high_isr+1,w,c
  2687  00027E  0A00               	xorlw	0	; case 0
  2688  000280  A4D8               	btfss	status,2,c
  2689  000282  D00D               	goto	i2l2824
  2690                           
  2691                           ; BSR set to: 0
  2692                           ; Switch size 1, requested type "space"
  2693                           ; Number of cases is 4, Range of values is 1 to 4
  2694                           ; switch strategies available:
  2695                           ; Name         Instructions Cycles
  2696                           ; simple_byte           13     7 (average)
  2697                           ;	Chosen strategy is simple_byte
  2698  000284  5015               	movf	??_high_isr,w,c
  2699  000286  0A01               	xorlw	1	; case 1
  2700  000288  B4D8               	btfsc	status,2,c
  2701  00028A  D7E4               	goto	i2l2812
  2702  00028C  0A03               	xorlw	3	; case 2
  2703  00028E  B4D8               	btfsc	status,2,c
  2704  000290  D7E5               	goto	i2l2814
  2705  000292  0A01               	xorlw	1	; case 3
  2706  000294  B4D8               	btfsc	status,2,c
  2707  000296  D7E6               	goto	i2l2816
  2708  000298  0A07               	xorlw	7	; case 4
  2709  00029A  B4D8               	btfsc	status,2,c
  2710  00029C  D7E7               	goto	i2l2818
  2711  00029E                     i2l2824:
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;interrupts.c: 164: }
  2715                           ;interrupts.c: 167: put_nums(masked_digits);
  2716  00029E  0EA5               	movlw	low _masked_digits
  2717  0002A0  6E08               	movwf	put_nums@nums,c
  2718  0002A2  0E00               	movlw	high _masked_digits
  2719  0002A4  6E09               	movwf	put_nums@nums+1,c
  2720  0002A6  ECD2  F006         	call	_put_nums	;wreg free
  2721                           
  2722                           ;interrupts.c: 168: TMR0IF = 0;
  2723  0002AA  94F2               	bcf	intcon,2,c	;volatile
  2724                           
  2725                           ;interrupts.c: 169: }
  2726  0002AC  D015               	goto	i2l84
  2727  0002AE                     i2l60:
  2728                           
  2729                           ;interrupts.c: 171: else if (TMR1IF == 1)
  2730  0002AE  A09E               	btfss	3998,0,c	;volatile
  2731  0002B0  D013               	goto	i2l84
  2732                           
  2733                           ;interrupts.c: 172: {
  2734                           ;interrupts.c: 174: if(timer1_counter <9)
  2735  0002B2  0E09               	movlw	9
  2736  0002B4  0100               	movlb	0	; () banked
  2737  0002B6  61A3               	cpfslt	_timer1_counter& (0+255),b
  2738  0002B8  D003               	goto	i2l2832
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;interrupts.c: 175: timer1_counter += 1;
  2742  0002BA  0100               	movlb	0	; () banked
  2743  0002BC  2BA3               	incf	_timer1_counter& (0+255),f,b
  2744  0002BE  D00B               	goto	i2l2836
  2745  0002C0                     i2l2832:
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;interrupts.c: 176: else
  2749                           ;interrupts.c: 177: {
  2750                           ;interrupts.c: 178: timer1_counter = 0;
  2751  0002C0  0E00               	movlw	0
  2752  0002C2  0100               	movlb	0	; () banked
  2753  0002C4  6FA3               	movwf	_timer1_counter& (0+255),b
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;interrupts.c: 179: update_timer1_counter_10(state,&timer1_counter_10);
  2757  0002C6  0EB1               	movlw	low _timer1_counter_10
  2758  0002C8  6E01               	movwf	update_timer1_counter_10@counter,c
  2759  0002CA  0E00               	movlw	high _timer1_counter_10
  2760  0002CC  6E02               	movwf	update_timer1_counter_10@counter+1,c
  2761  0002CE  0100               	movlb	0	; () banked
  2762  0002D0  51B2               	movf	_state& (0+255),w,b
  2763  0002D2  EC80  F004         	call	_update_timer1_counter_10
  2764  0002D6                     i2l2836:
  2765                           
  2766                           ;interrupts.c: 180: }
  2767                           ;interrupts.c: 182: TMR1IF = 0;
  2768  0002D6  909E               	bcf	3998,0,c	;volatile
  2769  0002D8                     i2l84:
  2770  0002D8  C025  FFF5         	movff	??_high_isr+16,tablat
  2771  0002DC  C024  FFF8         	movff	??_high_isr+15,tblptru
  2772  0002E0  C023  FFF7         	movff	??_high_isr+14,tblptrh
  2773  0002E4  C022  FFF6         	movff	??_high_isr+13,tblptrl
  2774  0002E8  C021  FFF4         	movff	??_high_isr+12,prodh
  2775  0002EC  C020  FFF3         	movff	??_high_isr+11,prodl
  2776  0002F0  C01F  FFDA         	movff	??_high_isr+10,fsr2h
  2777  0002F4  C01E  FFD9         	movff	??_high_isr+9,fsr2l
  2778  0002F8  C01D  FFE2         	movff	??_high_isr+8,fsr1h
  2779  0002FC  C01C  FFE1         	movff	??_high_isr+7,fsr1l
  2780  000300  C01B  FFEA         	movff	??_high_isr+6,fsr0h
  2781  000304  C01A  FFE9         	movff	??_high_isr+5,fsr0l
  2782  000308  C019  FFFB         	movff	??_high_isr+4,pclatu
  2783  00030C  C018  FFFA         	movff	??_high_isr+3,pclath
  2784  000310  923A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2785  000312  0011               	retfie		f
  2786  000314                     __end_of_high_isr:
  2787                           	opt stack 0
  2788                           pclatu	equ	0xFFB
  2789                           pclath	equ	0xFFA
  2790                           tblptru	equ	0xFF8
  2791                           tblptrh	equ	0xFF7
  2792                           tblptrl	equ	0xFF6
  2793                           tablat	equ	0xFF5
  2794                           prodh	equ	0xFF4
  2795                           prodl	equ	0xFF3
  2796                           intcon	equ	0xFF2
  2797                           intcon2	equ	0xFF1
  2798                           postinc0	equ	0xFEE
  2799                           fsr0h	equ	0xFEA
  2800                           fsr0l	equ	0xFE9
  2801                           wreg	equ	0xFE8
  2802                           indf1	equ	0xFE7
  2803                           fsr1h	equ	0xFE2
  2804                           fsr1l	equ	0xFE1
  2805                           indf2	equ	0xFDF
  2806                           fsr2h	equ	0xFDA
  2807                           fsr2l	equ	0xFD9
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _update_timer1_counter_10 *****************
  2811 ;; Defined at:
  2812 ;;		line 528 in file "user.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  state           1    wreg     unsigned char 
  2815 ;;  counter         2    0[COMRAM] PTR unsigned char 
  2816 ;;		 -> timer1_counter_10(1), 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  state           1    3[COMRAM] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      void 
  2821 ;; Registers used:
  2822 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2828 ;;      Params:         2       0       0       0       0       0       0       0       0
  2829 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2830 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2831 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2832 ;;Total ram usage:        4 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; This function calls:
  2835 ;;		Nothing
  2836 ;; This function is called by:
  2837 ;;		_high_isr
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text15
  2842  000900                     __ptext15:
  2843                           	opt stack 0
  2844  000900                     _update_timer1_counter_10:
  2845                           	opt stack 25
  2846                           
  2847                           ;incstack = 0
  2848                           ;update_timer1_counter_10@state stored from wreg
  2849  000900  6E04               	movwf	update_timer1_counter_10@state,c
  2850                           
  2851                           ;user.c: 530: if(state == 5)
  2852  000902  0E05               	movlw	5
  2853  000904  1804               	xorwf	update_timer1_counter_10@state,w,c
  2854  000906  A4D8               	btfss	status,2,c
  2855  000908  D007               	goto	i2l2586
  2856                           
  2857                           ;user.c: 531: *counter = 10;
  2858  00090A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2859  00090E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2860  000912  0E0A               	movlw	10
  2861  000914  6EDF               	movwf	indf2,c
  2862  000916  0012               	return	
  2863  000918                     i2l2586:
  2864                           
  2865                           ;user.c: 532: else if(state == 11)
  2866  000918  0E0B               	movlw	11
  2867  00091A  1804               	xorwf	update_timer1_counter_10@state,w,c
  2868  00091C  A4D8               	btfss	status,2,c
  2869  00091E  0012               	return	
  2870                           
  2871                           ;user.c: 533: if(*counter>0)
  2872  000920  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2873  000924  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2874  000928  50DF               	movf	indf2,w,c
  2875  00092A  B4D8               	btfsc	status,2,c
  2876  00092C  D013               	goto	i2l2596
  2877                           
  2878                           ;user.c: 534: if (*counter>3)
  2879  00092E  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2880  000932  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2881  000936  0E03               	movlw	3
  2882  000938  64DF               	cpfsgt	indf2,c
  2883  00093A  D006               	goto	i2l2594
  2884                           
  2885                           ;user.c: 535: *counter-=1;
  2886  00093C  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2887  000940  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2888  000944  06DF               	decf	indf2,f,c
  2889  000946  0012               	return	
  2890  000948                     i2l2594:
  2891                           
  2892                           ;user.c: 536: else
  2893                           ;user.c: 537: {
  2894                           ;user.c: 538: *counter-=1;
  2895  000948  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2896  00094C  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2897  000950  06DF               	decf	indf2,f,c
  2898                           
  2899                           ;user.c: 540: }
  2900  000952  0012               	return	
  2901  000954                     i2l2596:
  2902                           
  2903                           ;user.c: 542: else if(state == 12)
  2904  000954  0E0C               	movlw	12
  2905  000956  1804               	xorwf	update_timer1_counter_10@state,w,c
  2906  000958  A4D8               	btfss	status,2,c
  2907  00095A  0012               	return	
  2908                           
  2909                           ;user.c: 543: if(*counter<59)
  2910  00095C  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2911  000960  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2912  000964  0E3B               	movlw	59
  2913  000966  60DF               	cpfslt	indf2,c
  2914  000968  D006               	goto	i2l2602
  2915                           
  2916                           ;user.c: 544: *counter+=1;
  2917  00096A  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2918  00096E  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2919  000972  2ADF               	incf	indf2,f,c
  2920  000974  0012               	return	
  2921  000976                     i2l2602:
  2922                           
  2923                           ;user.c: 545: else
  2924                           ;user.c: 546: {
  2925                           ;user.c: 547: *counter= 0;
  2926  000976  C001  FFD9         	movff	update_timer1_counter_10@counter,fsr2l
  2927  00097A  C002  FFDA         	movff	update_timer1_counter_10@counter+1,fsr2h
  2928  00097E  0E00               	movlw	0
  2929  000980  6EDF               	movwf	indf2,c
  2930  000982  0012               	return	
  2931  000984                     __end_of_update_timer1_counter_10:
  2932                           	opt stack 0
  2933                           pclatu	equ	0xFFB
  2934                           pclath	equ	0xFFA
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           prodh	equ	0xFF4
  2940                           prodl	equ	0xFF3
  2941                           intcon	equ	0xFF2
  2942                           intcon2	equ	0xFF1
  2943                           postinc0	equ	0xFEE
  2944                           fsr0h	equ	0xFEA
  2945                           fsr0l	equ	0xFE9
  2946                           wreg	equ	0xFE8
  2947                           indf1	equ	0xFE7
  2948                           fsr1h	equ	0xFE2
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           fsr2h	equ	0xFDA
  2952                           fsr2l	equ	0xFD9
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _update_point *****************
  2956 ;; Defined at:
  2957 ;;		line 481 in file "user.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  state           2    0[COMRAM] int 
  2960 ;;  counter         1    2[COMRAM] unsigned char 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;		None
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  1    wreg      void 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2972 ;;      Params:         3       0       0       0       0       0       0       0       0
  2973 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2975 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2976 ;;Total ram usage:        3 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    1
  2979 ;; This function calls:
  2980 ;;		_point_disable
  2981 ;;		_point_enable
  2982 ;; This function is called by:
  2983 ;;		_high_isr
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text16
  2988  000CDA                     __ptext16:
  2989                           	opt stack 0
  2990  000CDA                     _update_point:
  2991                           	opt stack 24
  2992                           
  2993                           ;user.c: 483: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  2994                           
  2995                           ;incstack = 0
  2996  000CDA  5003               	movf	update_point@counter,w,c
  2997  000CDC  A4D8               	btfss	status,2,c
  2998  000CDE  D011               	goto	i2l2544
  2999  000CE0  5001               	movf	update_point@state,w,c
  3000  000CE2  1002               	iorwf	update_point@state+1,w,c
  3001  000CE4  B4D8               	btfsc	status,2,c
  3002  000CE6  D00A               	goto	i2l2542
  3003  000CE8  0E05               	movlw	5
  3004  000CEA  1801               	xorwf	update_point@state,w,c
  3005  000CEC  1002               	iorwf	update_point@state+1,w,c
  3006  000CEE  B4D8               	btfsc	status,2,c
  3007  000CF0  D005               	goto	i2l2542
  3008  000CF2  0E0C               	movlw	12
  3009  000CF4  1801               	xorwf	update_point@state,w,c
  3010  000CF6  1002               	iorwf	update_point@state+1,w,c
  3011  000CF8  A4D8               	btfss	status,2,c
  3012  000CFA  D003               	goto	i2l2544
  3013  000CFC                     i2l2542:
  3014                           
  3015                           ;user.c: 484: {
  3016                           ;user.c: 485: point_enable();
  3017  000CFC  EC37  F007         	call	_point_enable	;wreg free
  3018                           
  3019                           ;user.c: 486: }
  3020  000D00  0012               	return	
  3021  000D02                     i2l2544:
  3022                           
  3023                           ;user.c: 487: else if(counter == 5 && state == 0 && state != 5)
  3024  000D02  0E05               	movlw	5
  3025  000D04  1803               	xorwf	update_point@counter,w,c
  3026  000D06  A4D8               	btfss	status,2,c
  3027  000D08  0012               	return	
  3028  000D0A  5001               	movf	update_point@state,w,c
  3029  000D0C  1002               	iorwf	update_point@state+1,w,c
  3030  000D0E  A4D8               	btfss	status,2,c
  3031  000D10  0012               	return	
  3032  000D12  0E05               	movlw	5
  3033  000D14  1801               	xorwf	update_point@state,w,c
  3034  000D16  1002               	iorwf	update_point@state+1,w,c
  3035  000D18  B4D8               	btfsc	status,2,c
  3036  000D1A  0012               	return	
  3037                           
  3038                           ;user.c: 488: {
  3039                           ;user.c: 489: point_disable();
  3040  000D1C  EC39  F007         	call	_point_disable	;wreg free
  3041  000D20  0012               	return	
  3042  000D22                     __end_of_update_point:
  3043                           	opt stack 0
  3044                           pclatu	equ	0xFFB
  3045                           pclath	equ	0xFFA
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           intcon2	equ	0xFF1
  3054                           postinc0	equ	0xFEE
  3055                           fsr0h	equ	0xFEA
  3056                           fsr0l	equ	0xFE9
  3057                           wreg	equ	0xFE8
  3058                           indf1	equ	0xFE7
  3059                           fsr1h	equ	0xFE2
  3060                           fsr1l	equ	0xFE1
  3061                           indf2	equ	0xFDF
  3062                           fsr2h	equ	0xFDA
  3063                           fsr2l	equ	0xFD9
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function _point_enable *****************
  3067 ;; Defined at:
  3068 ;;		line 132 in file "user.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		None
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3082 ;;      Params:         0       0       0       0       0       0       0       0       0
  3083 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3084 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3085 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3086 ;;Total ram usage:        0 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_high_isr
  3092 ;;		_update_point
  3093 ;;		_point_toggle
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text17
  3098  000E6E                     __ptext17:
  3099                           	opt stack 0
  3100  000E6E                     _point_enable:
  3101                           	opt stack 24
  3102                           
  3103                           ;user.c: 134: RB1 = 1;
  3104                           
  3105                           ;incstack = 0
  3106  000E6E  8281               	bsf	3969,1,c	;volatile
  3107  000E70  0012               	return		;funcret
  3108  000E72                     __end_of_point_enable:
  3109                           	opt stack 0
  3110                           pclatu	equ	0xFFB
  3111                           pclath	equ	0xFFA
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           prodh	equ	0xFF4
  3117                           prodl	equ	0xFF3
  3118                           intcon	equ	0xFF2
  3119                           intcon2	equ	0xFF1
  3120                           postinc0	equ	0xFEE
  3121                           fsr0h	equ	0xFEA
  3122                           fsr0l	equ	0xFE9
  3123                           wreg	equ	0xFE8
  3124                           indf1	equ	0xFE7
  3125                           fsr1h	equ	0xFE2
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _point_disable *****************
  3133 ;; Defined at:
  3134 ;;		line 138 in file "user.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		None
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3148 ;;      Params:         0       0       0       0       0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_high_isr
  3158 ;;		_update_point
  3159 ;;		_point_toggle
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text18
  3164  000E72                     __ptext18:
  3165                           	opt stack 0
  3166  000E72                     _point_disable:
  3167                           	opt stack 24
  3168                           
  3169                           ;user.c: 140: RB1 = 0;
  3170                           
  3171                           ;incstack = 0
  3172  000E72  9281               	bcf	3969,1,c	;volatile
  3173  000E74  0012               	return		;funcret
  3174  000E76                     __end_of_point_disable:
  3175                           	opt stack 0
  3176                           pclatu	equ	0xFFB
  3177                           pclath	equ	0xFFA
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           prodh	equ	0xFF4
  3183                           prodl	equ	0xFF3
  3184                           intcon	equ	0xFF2
  3185                           intcon2	equ	0xFF1
  3186                           postinc0	equ	0xFEE
  3187                           fsr0h	equ	0xFEA
  3188                           fsr0l	equ	0xFE9
  3189                           wreg	equ	0xFE8
  3190                           indf1	equ	0xFE7
  3191                           fsr1h	equ	0xFE2
  3192                           fsr1l	equ	0xFE1
  3193                           indf2	equ	0xFDF
  3194                           fsr2h	equ	0xFDA
  3195                           fsr2l	equ	0xFD9
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _update_buzzer *****************
  3199 ;; Defined at:
  3200 ;;		line 494 in file "user.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  state           2    0[COMRAM] int 
  3203 ;;  counter         1    2[COMRAM] unsigned char 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;		None
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      void 
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0, cstack
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3215 ;;      Params:         3       0       0       0       0       0       0       0       0
  3216 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3218 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3219 ;;Total ram usage:        3 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    1
  3222 ;; This function calls:
  3223 ;;		_buzzer_enable
  3224 ;;		i2_buzzer_disable
  3225 ;; This function is called by:
  3226 ;;		_high_isr
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text19
  3231  000D22                     __ptext19:
  3232                           	opt stack 0
  3233  000D22                     _update_buzzer:
  3234                           	opt stack 24
  3235                           
  3236                           ;user.c: 496: if(counter == 0 && (state == 0 || state == 5 || state == 12))
  3237                           
  3238                           ;incstack = 0
  3239  000D22  5003               	movf	update_buzzer@counter,w,c
  3240  000D24  A4D8               	btfss	status,2,c
  3241  000D26  D011               	goto	i2l2562
  3242  000D28  5001               	movf	update_buzzer@state,w,c
  3243  000D2A  1002               	iorwf	update_buzzer@state+1,w,c
  3244  000D2C  B4D8               	btfsc	status,2,c
  3245  000D2E  D00A               	goto	i2l2560
  3246  000D30  0E05               	movlw	5
  3247  000D32  1801               	xorwf	update_buzzer@state,w,c
  3248  000D34  1002               	iorwf	update_buzzer@state+1,w,c
  3249  000D36  B4D8               	btfsc	status,2,c
  3250  000D38  D005               	goto	i2l2560
  3251  000D3A  0E0C               	movlw	12
  3252  000D3C  1801               	xorwf	update_buzzer@state,w,c
  3253  000D3E  1002               	iorwf	update_buzzer@state+1,w,c
  3254  000D40  A4D8               	btfss	status,2,c
  3255  000D42  D003               	goto	i2l2562
  3256  000D44                     i2l2560:
  3257                           
  3258                           ;user.c: 497: {
  3259                           ;user.c: 498: buzzer_enable();
  3260  000D44  EC27  F007         	call	_buzzer_enable	;wreg free
  3261                           
  3262                           ;user.c: 499: }
  3263  000D48  0012               	return	
  3264  000D4A                     i2l2562:
  3265                           
  3266                           ;user.c: 500: else if(counter == 5 && state == 0 && state != 5)
  3267  000D4A  0E05               	movlw	5
  3268  000D4C  1803               	xorwf	update_buzzer@counter,w,c
  3269  000D4E  A4D8               	btfss	status,2,c
  3270  000D50  0012               	return	
  3271  000D52  5001               	movf	update_buzzer@state,w,c
  3272  000D54  1002               	iorwf	update_buzzer@state+1,w,c
  3273  000D56  A4D8               	btfss	status,2,c
  3274  000D58  0012               	return	
  3275  000D5A  0E05               	movlw	5
  3276  000D5C  1801               	xorwf	update_buzzer@state,w,c
  3277  000D5E  1002               	iorwf	update_buzzer@state+1,w,c
  3278  000D60  B4D8               	btfsc	status,2,c
  3279  000D62  0012               	return	
  3280                           
  3281                           ;user.c: 501: {
  3282                           ;user.c: 502: buzzer_disable();
  3283  000D64  EC23  F007         	call	i2_buzzer_disable	;wreg free
  3284  000D68  0012               	return	
  3285  000D6A                     __end_of_update_buzzer:
  3286                           	opt stack 0
  3287                           pclatu	equ	0xFFB
  3288                           pclath	equ	0xFFA
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           intcon2	equ	0xFF1
  3297                           postinc0	equ	0xFEE
  3298                           fsr0h	equ	0xFEA
  3299                           fsr0l	equ	0xFE9
  3300                           wreg	equ	0xFE8
  3301                           indf1	equ	0xFE7
  3302                           fsr1h	equ	0xFE2
  3303                           fsr1l	equ	0xFE1
  3304                           indf2	equ	0xFDF
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function i2_buzzer_disable *****************
  3310 ;; Defined at:
  3311 ;;		line 158 in file "user.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3325 ;;      Params:         0       0       0       0       0       0       0       0       0
  3326 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3328 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3329 ;;Total ram usage:        0 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_update_buzzer
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text20
  3339  000E46                     __ptext20:
  3340                           	opt stack 0
  3341  000E46                     i2_buzzer_disable:
  3342                           	opt stack 24
  3343                           
  3344                           ;user.c: 160: buzzer_status= 0;
  3345                           
  3346                           ;incstack = 0
  3347  000E46  0E00               	movlw	0
  3348  000E48  0100               	movlb	0	; () banked
  3349  000E4A  6FA4               	movwf	_buzzer_status& (0+255),b
  3350                           
  3351                           ; BSR set to: 0
  3352  000E4C  0012               	return		;funcret
  3353  000E4E                     __end_ofi2_buzzer_disable:
  3354                           	opt stack 0
  3355                           pclatu	equ	0xFFB
  3356                           pclath	equ	0xFFA
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           intcon2	equ	0xFF1
  3365                           postinc0	equ	0xFEE
  3366                           fsr0h	equ	0xFEA
  3367                           fsr0l	equ	0xFE9
  3368                           wreg	equ	0xFE8
  3369                           indf1	equ	0xFE7
  3370                           fsr1h	equ	0xFE2
  3371                           fsr1l	equ	0xFE1
  3372                           indf2	equ	0xFDF
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function _buzzer_enable *****************
  3378 ;; Defined at:
  3379 ;;		line 153 in file "user.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3393 ;;      Params:         0       0       0       0       0       0       0       0       0
  3394 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3396 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3397 ;;Total ram usage:        0 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_update_buzzer
  3403 ;;		_buzzer_toggle
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text21
  3408  000E4E                     __ptext21:
  3409                           	opt stack 0
  3410  000E4E                     _buzzer_enable:
  3411                           	opt stack 24
  3412                           
  3413                           ;user.c: 155: buzzer_status= 1;
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;incstack = 0
  3417  000E4E  0E01               	movlw	1
  3418  000E50  0100               	movlb	0	; () banked
  3419  000E52  6FA4               	movwf	_buzzer_status& (0+255),b
  3420                           
  3421                           ; BSR set to: 0
  3422  000E54  0012               	return		;funcret
  3423  000E56                     __end_of_buzzer_enable:
  3424                           	opt stack 0
  3425                           pclatu	equ	0xFFB
  3426                           pclath	equ	0xFFA
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           intcon	equ	0xFF2
  3434                           intcon2	equ	0xFF1
  3435                           postinc0	equ	0xFEE
  3436                           fsr0h	equ	0xFEA
  3437                           fsr0l	equ	0xFE9
  3438                           wreg	equ	0xFE8
  3439                           indf1	equ	0xFE7
  3440                           fsr1h	equ	0xFE2
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _put_nums *****************
  3448 ;; Defined at:
  3449 ;;		line 87 in file "user.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  nums            2    7[COMRAM] PTR unsigned char 
  3452 ;;		 -> masked_digits(6), 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  i               2    9[COMRAM] int 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3464 ;;      Params:         2       0       0       0       0       0       0       0       0
  3465 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3467 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3468 ;;Total ram usage:        4 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    1
  3471 ;; This function calls:
  3472 ;;		_get_num
  3473 ;;		_put_num
  3474 ;; This function is called by:
  3475 ;;		_high_isr
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text22
  3480  000DA4                     __ptext22:
  3481                           	opt stack 0
  3482  000DA4                     _put_nums:
  3483                           	opt stack 24
  3484                           
  3485                           ;user.c: 89: int i;
  3486                           ;user.c: 90: for(i=0;i<6;i++)
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;incstack = 0
  3490  000DA4  0E00               	movlw	0
  3491  000DA6  6E0B               	movwf	put_nums@i+1,c
  3492  000DA8  0E00               	movlw	0
  3493  000DAA  6E0A               	movwf	put_nums@i,c
  3494  000DAC                     i2l2572:
  3495  000DAC  BE0B               	btfsc	put_nums@i+1,7,c
  3496  000DAE  D006               	goto	i2l2576
  3497  000DB0  500B               	movf	put_nums@i+1,w,c
  3498  000DB2  E112               	bnz	i2l227
  3499  000DB4  0E06               	movlw	6
  3500  000DB6  5C0A               	subwf	put_nums@i,w,c
  3501  000DB8  B0D8               	btfsc	status,0,c
  3502  000DBA  0012               	return	
  3503  000DBC                     i2l2576:
  3504                           
  3505                           ;user.c: 91: {
  3506                           ;user.c: 92: put_num(get_num(nums[i]));
  3507  000DBC  500A               	movf	put_nums@i,w,c
  3508  000DBE  2408               	addwf	put_nums@nums,w,c
  3509  000DC0  6ED9               	movwf	fsr2l,c
  3510  000DC2  500B               	movf	put_nums@i+1,w,c
  3511  000DC4  2009               	addwfc	put_nums@nums+1,w,c
  3512  000DC6  6EDA               	movwf	fsr2h,c
  3513  000DC8  50DF               	movf	indf2,w,c
  3514  000DCA  EC2A  F004         	call	_get_num
  3515  000DCE  ECC0  F005         	call	_put_num
  3516  000DD2  4A0A               	infsnz	put_nums@i,f,c
  3517  000DD4  2A0B               	incf	put_nums@i+1,f,c
  3518  000DD6  D7EA               	goto	i2l2572
  3519  000DD8                     i2l227:
  3520  000DD8  0012               	return		;funcret
  3521  000DDA                     __end_of_put_nums:
  3522                           	opt stack 0
  3523                           pclatu	equ	0xFFB
  3524                           pclath	equ	0xFFA
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           prodh	equ	0xFF4
  3530                           prodl	equ	0xFF3
  3531                           intcon	equ	0xFF2
  3532                           intcon2	equ	0xFF1
  3533                           postinc0	equ	0xFEE
  3534                           fsr0h	equ	0xFEA
  3535                           fsr0l	equ	0xFE9
  3536                           wreg	equ	0xFE8
  3537                           indf1	equ	0xFE7
  3538                           fsr1h	equ	0xFE2
  3539                           fsr1l	equ	0xFE1
  3540                           indf2	equ	0xFDF
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _put_num *****************
  3546 ;; Defined at:
  3547 ;;		line 74 in file "user.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  num             1    wreg     unsigned char 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  num             1    2[COMRAM] unsigned char 
  3552 ;;  i               2    5[COMRAM] int 
  3553 ;;  mask            1    3[COMRAM] unsigned char 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2, status,0
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3563 ;;      Params:         0       0       0       0       0       0       0       0       0
  3564 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3565 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3566 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3567 ;;Total ram usage:        7 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_put_nums
  3573 ;;		_put_nums_individual
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text23
  3578  000B80                     __ptext23:
  3579                           	opt stack 0
  3580  000B80                     _put_num:
  3581                           	opt stack 24
  3582                           
  3583                           ;incstack = 0
  3584                           ;put_num@num stored from wreg
  3585  000B80  6E03               	movwf	put_num@num,c
  3586                           
  3587                           ;user.c: 76: char mask = 0x01;
  3588  000B82  0E01               	movlw	1
  3589  000B84  6E04               	movwf	put_num@mask,c
  3590                           
  3591                           ;user.c: 77: int i;
  3592                           ;user.c: 78: for(i= 0; i<8; i++)
  3593  000B86  0E00               	movlw	0
  3594  000B88  6E07               	movwf	put_num@i+1,c
  3595  000B8A  0E00               	movlw	0
  3596  000B8C  6E06               	movwf	put_num@i,c
  3597  000B8E                     i2l2220:
  3598  000B8E  BE07               	btfsc	put_num@i+1,7,c
  3599  000B90  D006               	goto	i2l2224
  3600  000B92  5007               	movf	put_num@i+1,w,c
  3601  000B94  E120               	bnz	i2l222
  3602  000B96  0E08               	movlw	8
  3603  000B98  5C06               	subwf	put_num@i,w,c
  3604  000B9A  B0D8               	btfsc	status,0,c
  3605  000B9C  0012               	return	
  3606  000B9E                     i2l2224:
  3607                           
  3608                           ;user.c: 79: {
  3609                           ;user.c: 80: RB3 = num>>i & mask;
  3610  000B9E  0E00               	movlw	0
  3611  000BA0  6E05               	movwf	_put_num$899,c
  3612  000BA2  C006  F001         	movff	put_num@i,??_put_num
  3613  000BA6  C003  F002         	movff	put_num@num,??_put_num+1
  3614  000BAA  2A01               	incf	??_put_num,f,c
  3615  000BAC  D002               	goto	i2u144_44
  3616  000BAE                     i2u144_45:
  3617  000BAE  90D8               	bcf	status,0,c
  3618  000BB0  3202               	rrcf	??_put_num+1,f,c
  3619  000BB2                     i2u144_44:
  3620  000BB2  2E01               	decfsz	??_put_num,f,c
  3621  000BB4  D7FC               	goto	i2u144_45
  3622  000BB6  3002               	rrcf	??_put_num+1,w,c
  3623  000BB8  B0D8               	btfsc	status,0,c
  3624  000BBA  A004               	btfss	put_num@mask,0,c
  3625  000BBC  D002               	goto	i2l2232
  3626  000BBE  0E01               	movlw	1
  3627  000BC0  6E05               	movwf	_put_num$899,c
  3628  000BC2                     i2l2232:
  3629  000BC2  B005               	btfsc	_put_num$899,0,c
  3630  000BC4  D002               	bra	i2u147_45
  3631  000BC6  9681               	bcf	3969,3,c	;volatile
  3632  000BC8  D001               	bra	i2u147_46
  3633  000BCA                     i2u147_45:
  3634  000BCA  8681               	bsf	3969,3,c	;volatile
  3635  000BCC                     i2u147_46:
  3636                           
  3637                           ;user.c: 81: RB4 = 0;
  3638  000BCC  9881               	bcf	3969,4,c	;volatile
  3639                           
  3640                           ;user.c: 82: RB4 = 1;
  3641  000BCE  8881               	bsf	3969,4,c	;volatile
  3642  000BD0  4A06               	infsnz	put_num@i,f,c
  3643  000BD2  2A07               	incf	put_num@i+1,f,c
  3644  000BD4  D7DC               	goto	i2l2220
  3645  000BD6                     i2l222:
  3646  000BD6  0012               	return		;funcret
  3647  000BD8                     __end_of_put_num:
  3648                           	opt stack 0
  3649                           pclatu	equ	0xFFB
  3650                           pclath	equ	0xFFA
  3651                           tblptru	equ	0xFF8
  3652                           tblptrh	equ	0xFF7
  3653                           tblptrl	equ	0xFF6
  3654                           tablat	equ	0xFF5
  3655                           prodh	equ	0xFF4
  3656                           prodl	equ	0xFF3
  3657                           intcon	equ	0xFF2
  3658                           intcon2	equ	0xFF1
  3659                           postinc0	equ	0xFEE
  3660                           fsr0h	equ	0xFEA
  3661                           fsr0l	equ	0xFE9
  3662                           wreg	equ	0xFE8
  3663                           indf1	equ	0xFE7
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           indf2	equ	0xFDF
  3667                           fsr2h	equ	0xFDA
  3668                           fsr2l	equ	0xFD9
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function _get_num *****************
  3672 ;; Defined at:
  3673 ;;		line 107 in file "user.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;  num             1    wreg     unsigned char 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  num             1    0[COMRAM] unsigned char 
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      unsigned char 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0
  3688 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3689 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3690 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3691 ;;Total ram usage:        1 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; This function calls:
  3694 ;;		Nothing
  3695 ;; This function is called by:
  3696 ;;		_put_nums
  3697 ;;		_put_nums_individual
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text24
  3702  000854                     __ptext24:
  3703                           	opt stack 0
  3704  000854                     _get_num:
  3705                           	opt stack 24
  3706                           
  3707                           ;incstack = 0
  3708                           ;get_num@num stored from wreg
  3709  000854  6E01               	movwf	get_num@num,c
  3710                           
  3711                           ;user.c: 109: switch(num)
  3712  000856  D022               	goto	i2l2314
  3713  000858                     i2l2244:
  3714  000858  0E30               	movlw	48
  3715  00085A  0012               	return	
  3716  00085C                     i2l2248:
  3717  00085C  0E6D               	movlw	109
  3718  00085E  0012               	return	
  3719  000860                     i2l2252:
  3720  000860  0E79               	movlw	121
  3721  000862  0012               	return	
  3722  000864                     i2l2256:
  3723  000864  0E33               	movlw	51
  3724  000866  0012               	return	
  3725  000868                     i2l2260:
  3726  000868  0E5B               	movlw	91
  3727  00086A  0012               	return	
  3728  00086C                     i2l2264:
  3729  00086C  0E5F               	movlw	95
  3730  00086E  0012               	return	
  3731  000870                     i2l2268:
  3732  000870  0E70               	movlw	112
  3733  000872  0012               	return	
  3734  000874                     i2l2272:
  3735  000874  0E7F               	movlw	127
  3736  000876  0012               	return	
  3737  000878                     i2l2276:
  3738  000878  0E73               	movlw	115
  3739  00087A  0012               	return	
  3740  00087C                     i2l2280:
  3741  00087C  0E7E               	movlw	126
  3742  00087E  0012               	return	
  3743  000880                     i2l2284:
  3744  000880  0E3E               	movlw	62
  3745  000882  0012               	return	
  3746  000884                     i2l2288:
  3747  000884  0E67               	movlw	103
  3748  000886  0012               	return	
  3749  000888                     i2l2292:
  3750  000888  0E37               	movlw	55
  3751  00088A  0012               	return	
  3752  00088C                     i2l2296:
  3753  00088C  0E3D               	movlw	61
  3754  00088E  0012               	return	
  3755  000890                     i2l2300:
  3756  000890  0E15               	movlw	21
  3757  000892  0012               	return	
  3758  000894                     i2l2304:
  3759  000894  0E00               	movlw	0
  3760  000896  0012               	return	
  3761  000898                     i2l2308:
  3762  000898  0E7F               	movlw	127
  3763                           
  3764                           ;user.c: 128: }
  3765  00089A  0012               	return	
  3766  00089C                     i2l2314:
  3767  00089C  5001               	movf	get_num@num,w,c
  3768                           
  3769                           ; Switch size 1, requested type "space"
  3770                           ; Number of cases is 16, Range of values is 0 to 86
  3771                           ; switch strategies available:
  3772                           ; Name         Instructions Cycles
  3773                           ; simple_byte           49    25 (average)
  3774                           ;	Chosen strategy is simple_byte
  3775  00089E  0A00               	xorlw	0	; case 0
  3776  0008A0  B4D8               	btfsc	status,2,c
  3777  0008A2  D7EC               	goto	i2l2280
  3778  0008A4  0A01               	xorlw	1	; case 1
  3779  0008A6  B4D8               	btfsc	status,2,c
  3780  0008A8  D7D7               	goto	i2l2244
  3781  0008AA  0A03               	xorlw	3	; case 2
  3782  0008AC  B4D8               	btfsc	status,2,c
  3783  0008AE  D7D6               	goto	i2l2248
  3784  0008B0  0A01               	xorlw	1	; case 3
  3785  0008B2  B4D8               	btfsc	status,2,c
  3786  0008B4  D7D5               	goto	i2l2252
  3787  0008B6  0A07               	xorlw	7	; case 4
  3788  0008B8  B4D8               	btfsc	status,2,c
  3789  0008BA  D7D4               	goto	i2l2256
  3790  0008BC  0A01               	xorlw	1	; case 5
  3791  0008BE  B4D8               	btfsc	status,2,c
  3792  0008C0  D7D3               	goto	i2l2260
  3793  0008C2  0A03               	xorlw	3	; case 6
  3794  0008C4  B4D8               	btfsc	status,2,c
  3795  0008C6  D7D2               	goto	i2l2264
  3796  0008C8  0A01               	xorlw	1	; case 7
  3797  0008CA  B4D8               	btfsc	status,2,c
  3798  0008CC  D7D1               	goto	i2l2268
  3799  0008CE  0A0F               	xorlw	15	; case 8
  3800  0008D0  B4D8               	btfsc	status,2,c
  3801  0008D2  D7D0               	goto	i2l2272
  3802  0008D4  0A01               	xorlw	1	; case 9
  3803  0008D6  B4D8               	btfsc	status,2,c
  3804  0008D8  D7CF               	goto	i2l2276
  3805  0008DA  0A4D               	xorlw	77	; case 68
  3806  0008DC  B4D8               	btfsc	status,2,c
  3807  0008DE  D7D6               	goto	i2l2296
  3808  0008E0  0A0C               	xorlw	12	; case 72
  3809  0008E2  B4D8               	btfsc	status,2,c
  3810  0008E4  D7D1               	goto	i2l2292
  3811  0008E6  0A06               	xorlw	6	; case 78
  3812  0008E8  B4D8               	btfsc	status,2,c
  3813  0008EA  D7D2               	goto	i2l2300
  3814  0008EC  0A1E               	xorlw	30	; case 80
  3815  0008EE  B4D8               	btfsc	status,2,c
  3816  0008F0  D7C9               	goto	i2l2288
  3817  0008F2  0A05               	xorlw	5	; case 85
  3818  0008F4  B4D8               	btfsc	status,2,c
  3819  0008F6  D7C4               	goto	i2l2284
  3820  0008F8  0A03               	xorlw	3	; case 86
  3821  0008FA  B4D8               	btfsc	status,2,c
  3822  0008FC  D7CB               	goto	i2l2304
  3823  0008FE  D7CC               	goto	i2l2308
  3824  000900                     __end_of_get_num:
  3825                           	opt stack 0
  3826                           pclatu	equ	0xFFB
  3827                           pclath	equ	0xFFA
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           intcon2	equ	0xFF1
  3836                           postinc0	equ	0xFEE
  3837                           fsr0h	equ	0xFEA
  3838                           fsr0l	equ	0xFE9
  3839                           wreg	equ	0xFE8
  3840                           indf1	equ	0xFE7
  3841                           fsr1h	equ	0xFE2
  3842                           fsr1l	equ	0xFE1
  3843                           indf2	equ	0xFDF
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _ir_get_human_code *****************
  3849 ;; Defined at:
  3850 ;;		line 417 in file "user.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  code            2    0[COMRAM] int 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  human_read_c    1    4[COMRAM] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      unsigned char 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3864 ;;      Params:         2       0       0       0       0       0       0       0       0
  3865 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3866 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3867 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3868 ;;Total ram usage:        5 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_high_isr
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text25
  3878  000620                     __ptext25:
  3879                           	opt stack 0
  3880  000620                     _ir_get_human_code:
  3881                           	opt stack 25
  3882                           
  3883                           ;user.c: 419: char human_read_code;
  3884                           ;user.c: 420: switch(code)
  3885                           
  3886                           ;incstack = 0
  3887  000620  D035               	goto	i2l2426
  3888  000622                     i2l2386:
  3889                           
  3890                           ;user.c: 423: human_read_code = 10;
  3891  000622  0E0A               	movlw	10
  3892  000624  6E05               	movwf	ir_get_human_code@human_read_code,c
  3893                           
  3894                           ;user.c: 424: break;
  3895  000626  0012               	return	
  3896  000628                     i2l2388:
  3897                           
  3898                           ;user.c: 426: human_read_code = 11;
  3899  000628  0E0B               	movlw	11
  3900  00062A  6E05               	movwf	ir_get_human_code@human_read_code,c
  3901                           
  3902                           ;user.c: 427: break;
  3903  00062C  0012               	return	
  3904  00062E                     i2l2390:
  3905                           
  3906                           ;user.c: 429: human_read_code = 12;
  3907  00062E  0E0C               	movlw	12
  3908  000630  6E05               	movwf	ir_get_human_code@human_read_code,c
  3909                           
  3910                           ;user.c: 430: break;
  3911  000632  0012               	return	
  3912  000634                     i2l2392:
  3913                           
  3914                           ;user.c: 432: human_read_code = 13;
  3915  000634  0E0D               	movlw	13
  3916  000636  6E05               	movwf	ir_get_human_code@human_read_code,c
  3917                           
  3918                           ;user.c: 433: break;
  3919  000638  0012               	return	
  3920  00063A                     i2l2394:
  3921                           
  3922                           ;user.c: 435: human_read_code = 14;
  3923  00063A  0E0E               	movlw	14
  3924  00063C  6E05               	movwf	ir_get_human_code@human_read_code,c
  3925                           
  3926                           ;user.c: 436: break;
  3927  00063E  0012               	return	
  3928  000640                     i2l2396:
  3929                           
  3930                           ;user.c: 438: human_read_code = 1;
  3931  000640  0E01               	movlw	1
  3932  000642  6E05               	movwf	ir_get_human_code@human_read_code,c
  3933                           
  3934                           ;user.c: 439: break;
  3935  000644  0012               	return	
  3936  000646                     i2l2398:
  3937                           
  3938                           ;user.c: 441: human_read_code = 2;
  3939  000646  0E02               	movlw	2
  3940  000648  6E05               	movwf	ir_get_human_code@human_read_code,c
  3941                           
  3942                           ;user.c: 442: break;
  3943  00064A  0012               	return	
  3944  00064C                     i2l2400:
  3945                           
  3946                           ;user.c: 444: human_read_code = 3;
  3947  00064C  0E03               	movlw	3
  3948  00064E  6E05               	movwf	ir_get_human_code@human_read_code,c
  3949                           
  3950                           ;user.c: 445: break;
  3951  000650  0012               	return	
  3952  000652                     i2l2402:
  3953                           
  3954                           ;user.c: 447: human_read_code = 4;
  3955  000652  0E04               	movlw	4
  3956  000654  6E05               	movwf	ir_get_human_code@human_read_code,c
  3957                           
  3958                           ;user.c: 448: break;
  3959  000656  0012               	return	
  3960  000658                     i2l2404:
  3961                           
  3962                           ;user.c: 450: human_read_code = 5;
  3963  000658  0E05               	movlw	5
  3964  00065A  6E05               	movwf	ir_get_human_code@human_read_code,c
  3965                           
  3966                           ;user.c: 451: break;
  3967  00065C  0012               	return	
  3968  00065E                     i2l2406:
  3969                           
  3970                           ;user.c: 453: human_read_code = 6;
  3971  00065E  0E06               	movlw	6
  3972  000660  6E05               	movwf	ir_get_human_code@human_read_code,c
  3973                           
  3974                           ;user.c: 454: break;
  3975  000662  0012               	return	
  3976  000664                     i2l2408:
  3977                           
  3978                           ;user.c: 456: human_read_code = 7;
  3979  000664  0E07               	movlw	7
  3980  000666  6E05               	movwf	ir_get_human_code@human_read_code,c
  3981                           
  3982                           ;user.c: 457: break;
  3983  000668  0012               	return	
  3984  00066A                     i2l2410:
  3985                           
  3986                           ;user.c: 459: human_read_code = 8;
  3987  00066A  0E08               	movlw	8
  3988  00066C  6E05               	movwf	ir_get_human_code@human_read_code,c
  3989                           
  3990                           ;user.c: 460: break;
  3991  00066E  0012               	return	
  3992  000670                     i2l2412:
  3993                           
  3994                           ;user.c: 462: human_read_code = 9;
  3995  000670  0E09               	movlw	9
  3996  000672  6E05               	movwf	ir_get_human_code@human_read_code,c
  3997                           
  3998                           ;user.c: 463: break;
  3999  000674  0012               	return	
  4000  000676                     i2l2414:
  4001                           
  4002                           ;user.c: 465: human_read_code = 0;
  4003  000676  0E00               	movlw	0
  4004  000678  6E05               	movwf	ir_get_human_code@human_read_code,c
  4005                           
  4006                           ;user.c: 466: break;
  4007  00067A  0012               	return	
  4008  00067C                     i2l2416:
  4009                           
  4010                           ;user.c: 468: human_read_code = 15;
  4011  00067C  0E0F               	movlw	15
  4012  00067E  6E05               	movwf	ir_get_human_code@human_read_code,c
  4013                           
  4014                           ;user.c: 469: break;
  4015  000680  0012               	return	
  4016  000682                     i2l2418:
  4017                           
  4018                           ;user.c: 471: human_read_code = 16;
  4019  000682  0E10               	movlw	16
  4020  000684  6E05               	movwf	ir_get_human_code@human_read_code,c
  4021                           
  4022                           ;user.c: 472: break;
  4023  000686  0012               	return	
  4024  000688                     i2l2420:
  4025                           
  4026                           ;user.c: 474: return -1;
  4027  000688  0EFF               	movlw	255
  4028                           
  4029                           ;user.c: 475: }
  4030  00068A  0012               	return	
  4031  00068C                     i2l2426:
  4032  00068C  C001  F003         	movff	ir_get_human_code@code,??_ir_get_human_code
  4033  000690  C002  F004         	movff	ir_get_human_code@code+1,??_ir_get_human_code+1
  4034                           
  4035                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 8 sub-sw
      +                          itches
  4036                           ; Switch size 1, requested type "space"
  4037                           ; Number of cases is 8, Range of values is 170 to 238
  4038                           ; switch strategies available:
  4039                           ; Name         Instructions Cycles
  4040                           ; simple_byte           25    13 (average)
  4041                           ;	Chosen strategy is simple_byte
  4042  000694  5004               	movf	??_ir_get_human_code+1,w,c
  4043  000696  0AAA               	xorlw	170	; case 170
  4044  000698  B4D8               	btfsc	status,2,c
  4045  00069A  D016               	goto	i2l3670
  4046  00069C  0A01               	xorlw	1	; case 171
  4047  00069E  B4D8               	btfsc	status,2,c
  4048  0006A0  D01E               	goto	i2l3672
  4049  0006A2  0A05               	xorlw	5	; case 174
  4050  0006A4  B4D8               	btfsc	status,2,c
  4051  0006A6  D023               	goto	i2l3674
  4052  0006A8  0A14               	xorlw	20	; case 186
  4053  0006AA  B4D8               	btfsc	status,2,c
  4054  0006AC  D028               	goto	i2l3676
  4055  0006AE  0A01               	xorlw	1	; case 187
  4056  0006B0  B4D8               	btfsc	status,2,c
  4057  0006B2  D02A               	goto	i2l3678
  4058  0006B4  0A51               	xorlw	81	; case 234
  4059  0006B6  B4D8               	btfsc	status,2,c
  4060  0006B8  D032               	goto	i2l3680
  4061  0006BA  0A01               	xorlw	1	; case 235
  4062  0006BC  B4D8               	btfsc	status,2,c
  4063  0006BE  D034               	goto	i2l3682
  4064  0006C0  0A05               	xorlw	5	; case 238
  4065  0006C2  B4D8               	btfsc	status,2,c
  4066  0006C4  D039               	goto	i2l3684
  4067  0006C6  D7E0               	goto	i2l2420
  4068  0006C8                     i2l3670:
  4069                           
  4070                           ; Switch size 1, requested type "space"
  4071                           ; Number of cases is 3, Range of values is 186 to 238
  4072                           ; switch strategies available:
  4073                           ; Name         Instructions Cycles
  4074                           ; simple_byte           10     6 (average)
  4075                           ;	Chosen strategy is simple_byte
  4076  0006C8  5003               	movf	??_ir_get_human_code,w,c
  4077  0006CA  0ABA               	xorlw	186	; case 186
  4078  0006CC  B4D8               	btfsc	status,2,c
  4079  0006CE  D7D6               	goto	i2l2416
  4080  0006D0  0A50               	xorlw	80	; case 234
  4081  0006D2  B4D8               	btfsc	status,2,c
  4082  0006D4  D7AF               	goto	i2l2392
  4083  0006D6  0A04               	xorlw	4	; case 238
  4084  0006D8  B4D8               	btfsc	status,2,c
  4085  0006DA  D7AF               	goto	i2l2394
  4086  0006DC  D7D5               	goto	i2l2420
  4087  0006DE                     i2l3672:
  4088                           
  4089                           ; Switch size 1, requested type "space"
  4090                           ; Number of cases is 2, Range of values is 170 to 186
  4091                           ; switch strategies available:
  4092                           ; Name         Instructions Cycles
  4093                           ; simple_byte            7     4 (average)
  4094                           ;	Chosen strategy is simple_byte
  4095  0006DE  5003               	movf	??_ir_get_human_code,w,c
  4096  0006E0  0AAA               	xorlw	170	; case 170
  4097  0006E2  B4D8               	btfsc	status,2,c
  4098  0006E4  D7BF               	goto	i2l2408
  4099  0006E6  0A10               	xorlw	16	; case 186
  4100  0006E8  B4D8               	btfsc	status,2,c
  4101  0006EA  D79B               	goto	i2l2386
  4102  0006EC  D7CD               	goto	i2l2420
  4103  0006EE                     i2l3674:
  4104                           
  4105                           ; Switch size 1, requested type "space"
  4106                           ; Number of cases is 2, Range of values is 186 to 234
  4107                           ; switch strategies available:
  4108                           ; Name         Instructions Cycles
  4109                           ; simple_byte            7     4 (average)
  4110                           ;	Chosen strategy is simple_byte
  4111  0006EE  5003               	movf	??_ir_get_human_code,w,c
  4112  0006F0  0ABA               	xorlw	186	; case 186
  4113  0006F2  B4D8               	btfsc	status,2,c
  4114  0006F4  D7C6               	goto	i2l2418
  4115  0006F6  0A50               	xorlw	80	; case 234
  4116  0006F8  B4D8               	btfsc	status,2,c
  4117  0006FA  D7AB               	goto	i2l2402
  4118  0006FC  D7C5               	goto	i2l2420
  4119  0006FE                     i2l3676:
  4120                           
  4121                           ; Switch size 1, requested type "space"
  4122                           ; Number of cases is 1, Range of values is 186 to 186
  4123                           ; switch strategies available:
  4124                           ; Name         Instructions Cycles
  4125                           ; simple_byte            4     3 (average)
  4126                           ;	Chosen strategy is simple_byte
  4127  0006FE  5003               	movf	??_ir_get_human_code,w,c
  4128  000700  0ABA               	xorlw	186	; case 186
  4129  000702  B4D8               	btfsc	status,2,c
  4130  000704  D7B8               	goto	i2l2414
  4131  000706  D7C0               	goto	i2l2420
  4132  000708                     i2l3678:
  4133                           
  4134                           ; Switch size 1, requested type "space"
  4135                           ; Number of cases is 3, Range of values is 170 to 186
  4136                           ; switch strategies available:
  4137                           ; Name         Instructions Cycles
  4138                           ; simple_byte           10     6 (average)
  4139                           ;	Chosen strategy is simple_byte
  4140  000708  5003               	movf	??_ir_get_human_code,w,c
  4141  00070A  0AAA               	xorlw	170	; case 170
  4142  00070C  B4D8               	btfsc	status,2,c
  4143  00070E  D7A4               	goto	i2l2404
  4144  000710  0A04               	xorlw	4	; case 174
  4145  000712  B4D8               	btfsc	status,2,c
  4146  000714  D79B               	goto	i2l2400
  4147  000716  0A14               	xorlw	20	; case 186
  4148  000718  B4D8               	btfsc	status,2,c
  4149  00071A  D7A1               	goto	i2l2406
  4150  00071C  D7B5               	goto	i2l2420
  4151  00071E                     i2l3680:
  4152                           
  4153                           ; Switch size 1, requested type "space"
  4154                           ; Number of cases is 1, Range of values is 170 to 170
  4155                           ; switch strategies available:
  4156                           ; Name         Instructions Cycles
  4157                           ; simple_byte            4     3 (average)
  4158                           ;	Chosen strategy is simple_byte
  4159  00071E  5003               	movf	??_ir_get_human_code,w,c
  4160  000720  0AAA               	xorlw	170	; case 170
  4161  000722  B4D8               	btfsc	status,2,c
  4162  000724  D781               	goto	i2l2388
  4163  000726  D7B0               	goto	i2l2420
  4164  000728                     i2l3682:
  4165                           
  4166                           ; Switch size 1, requested type "space"
  4167                           ; Number of cases is 2, Range of values is 174 to 186
  4168                           ; switch strategies available:
  4169                           ; Name         Instructions Cycles
  4170                           ; simple_byte            7     4 (average)
  4171                           ;	Chosen strategy is simple_byte
  4172  000728  5003               	movf	??_ir_get_human_code,w,c
  4173  00072A  0AAE               	xorlw	174	; case 174
  4174  00072C  B4D8               	btfsc	status,2,c
  4175  00072E  D77F               	goto	i2l2390
  4176  000730  0A14               	xorlw	20	; case 186
  4177  000732  B4D8               	btfsc	status,2,c
  4178  000734  D785               	goto	i2l2396
  4179  000736  D7A8               	goto	i2l2420
  4180  000738                     i2l3684:
  4181                           
  4182                           ; Switch size 1, requested type "space"
  4183                           ; Number of cases is 3, Range of values is 174 to 234
  4184                           ; switch strategies available:
  4185                           ; Name         Instructions Cycles
  4186                           ; simple_byte           10     6 (average)
  4187                           ;	Chosen strategy is simple_byte
  4188  000738  5003               	movf	??_ir_get_human_code,w,c
  4189  00073A  0AAE               	xorlw	174	; case 174
  4190  00073C  B4D8               	btfsc	status,2,c
  4191  00073E  D783               	goto	i2l2398
  4192  000740  0A14               	xorlw	20	; case 186
  4193  000742  B4D8               	btfsc	status,2,c
  4194  000744  D795               	goto	i2l2412
  4195  000746  0A50               	xorlw	80	; case 234
  4196  000748  B4D8               	btfsc	status,2,c
  4197  00074A  D78F               	goto	i2l2410
  4198  00074C  D79D               	goto	i2l2420
  4199  00074E                     __end_of_ir_get_human_code:
  4200                           	opt stack 0
  4201                           pclatu	equ	0xFFB
  4202                           pclath	equ	0xFFA
  4203                           tblptru	equ	0xFF8
  4204                           tblptrh	equ	0xFF7
  4205                           tblptrl	equ	0xFF6
  4206                           tablat	equ	0xFF5
  4207                           prodh	equ	0xFF4
  4208                           prodl	equ	0xFF3
  4209                           intcon	equ	0xFF2
  4210                           intcon2	equ	0xFF1
  4211                           postinc0	equ	0xFEE
  4212                           fsr0h	equ	0xFEA
  4213                           fsr0l	equ	0xFE9
  4214                           wreg	equ	0xFE8
  4215                           indf1	equ	0xFE7
  4216                           fsr1h	equ	0xFE2
  4217                           fsr1l	equ	0xFE1
  4218                           indf2	equ	0xFDF
  4219                           fsr2h	equ	0xFDA
  4220                           fsr2l	equ	0xFD9
  4221                           status	equ	0xFD8
  4222                           
  4223 ;; *************** function _get_next_state *****************
  4224 ;; Defined at:
  4225 ;;		line 368 in file "user.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;  state           2   13[COMRAM] int 
  4228 ;;  code            2   15[COMRAM] int 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  hour            1   19[COMRAM] unsigned char 
  4231 ;;  minutes         1   18[COMRAM] unsigned char 
  4232 ;;  seconds         1   17[COMRAM] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  2   13[COMRAM] int 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4242 ;;      Params:         4       0       0       0       0       0       0       0       0
  4243 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4245 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4246 ;;Total ram usage:        7 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    4
  4249 ;; This function calls:
  4250 ;;		_set_time
  4251 ;;		_timer1_enable
  4252 ;; This function is called by:
  4253 ;;		_high_isr
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text26
  4258  00049A                     __ptext26:
  4259                           	opt stack 0
  4260  00049A                     _get_next_state:
  4261                           	opt stack 21
  4262                           
  4263                           ;user.c: 370: if(state == 0 && code == 0xAABA)
  4264                           
  4265                           ;incstack = 0
  4266  00049A  500E               	movf	get_next_state@state,w,c
  4267  00049C  100F               	iorwf	get_next_state@state+1,w,c
  4268  00049E  A4D8               	btfss	status,2,c
  4269  0004A0  D00B               	goto	i2l2466
  4270  0004A2  0EBA               	movlw	186
  4271  0004A4  1810               	xorwf	get_next_state@code,w,c
  4272  0004A6  E108               	bnz	i2l2466
  4273  0004A8  0EAA               	movlw	170
  4274  0004AA  1811               	xorwf	get_next_state@code+1,w,c
  4275  0004AC  A4D8               	btfss	status,2,c
  4276  0004AE  D004               	goto	i2l2466
  4277  0004B0                     i2l2464:
  4278                           
  4279                           ;user.c: 371: next = 1;
  4280  0004B0  0E00               	movlw	0
  4281  0004B2  6E38               	movwf	_next+1,c
  4282  0004B4  0E01               	movlw	1
  4283  0004B6  D0AE               	goto	L17
  4284  0004B8                     i2l2466:
  4285                           
  4286                           ;user.c: 372: else if(state == 0 && code == 0xABBa)
  4287  0004B8  500E               	movf	get_next_state@state,w,c
  4288  0004BA  100F               	iorwf	get_next_state@state+1,w,c
  4289  0004BC  A4D8               	btfss	status,2,c
  4290  0004BE  D00B               	goto	i2l2472
  4291  0004C0  0EBA               	movlw	186
  4292  0004C2  1810               	xorwf	get_next_state@code,w,c
  4293  0004C4  E108               	bnz	i2l2472
  4294  0004C6  0EAB               	movlw	171
  4295  0004C8  1811               	xorwf	get_next_state@code+1,w,c
  4296  0004CA  A4D8               	btfss	status,2,c
  4297  0004CC  D004               	goto	i2l2472
  4298                           
  4299                           ;user.c: 373: next = 5;
  4300  0004CE  0E00               	movlw	0
  4301  0004D0  6E38               	movwf	_next+1,c
  4302  0004D2  0E05               	movlw	5
  4303  0004D4  D09F               	goto	L17
  4304  0004D6                     i2l2472:
  4305                           
  4306                           ;user.c: 374: else if(state == 0 && code == 0xEBAE)
  4307  0004D6  500E               	movf	get_next_state@state,w,c
  4308  0004D8  100F               	iorwf	get_next_state@state+1,w,c
  4309  0004DA  A4D8               	btfss	status,2,c
  4310  0004DC  D00B               	goto	i2l2478
  4311  0004DE  0EAE               	movlw	174
  4312  0004E0  1810               	xorwf	get_next_state@code,w,c
  4313  0004E2  E108               	bnz	i2l2478
  4314  0004E4  0EEB               	movlw	235
  4315  0004E6  1811               	xorwf	get_next_state@code+1,w,c
  4316  0004E8  A4D8               	btfss	status,2,c
  4317  0004EA  D004               	goto	i2l2478
  4318                           
  4319                           ;user.c: 375: next = 6;
  4320  0004EC  0E00               	movlw	0
  4321  0004EE  6E38               	movwf	_next+1,c
  4322  0004F0  0E06               	movlw	6
  4323  0004F2  D090               	goto	L17
  4324  0004F4                     i2l2478:
  4325                           
  4326                           ;user.c: 376: else if(state == 1 && code == 0xAAEE)
  4327  0004F4  040E               	decf	get_next_state@state,w,c
  4328  0004F6  100F               	iorwf	get_next_state@state+1,w,c
  4329  0004F8  A4D8               	btfss	status,2,c
  4330  0004FA  D00B               	goto	i2l2484
  4331  0004FC  0EEE               	movlw	238
  4332  0004FE  1810               	xorwf	get_next_state@code,w,c
  4333  000500  E108               	bnz	i2l2484
  4334  000502  0EAA               	movlw	170
  4335  000504  1811               	xorwf	get_next_state@code+1,w,c
  4336  000506  A4D8               	btfss	status,2,c
  4337  000508  D004               	goto	i2l2484
  4338                           
  4339                           ;user.c: 377: next = 2;
  4340  00050A  0E00               	movlw	0
  4341  00050C  6E38               	movwf	_next+1,c
  4342  00050E  0E02               	movlw	2
  4343  000510  D081               	goto	L17
  4344  000512                     i2l2484:
  4345                           
  4346                           ;user.c: 378: else if(state == 2 && code == 0xAAEE)
  4347  000512  0E02               	movlw	2
  4348  000514  180E               	xorwf	get_next_state@state,w,c
  4349  000516  100F               	iorwf	get_next_state@state+1,w,c
  4350  000518  A4D8               	btfss	status,2,c
  4351  00051A  D00B               	goto	i2l2490
  4352  00051C  0EEE               	movlw	238
  4353  00051E  1810               	xorwf	get_next_state@code,w,c
  4354  000520  E108               	bnz	i2l2490
  4355  000522  0EAA               	movlw	170
  4356  000524  1811               	xorwf	get_next_state@code+1,w,c
  4357  000526  A4D8               	btfss	status,2,c
  4358  000528  D004               	goto	i2l2490
  4359                           
  4360                           ;user.c: 379: next = 3;
  4361  00052A  0E00               	movlw	0
  4362  00052C  6E38               	movwf	_next+1,c
  4363  00052E  0E03               	movlw	3
  4364  000530  D071               	goto	L17
  4365  000532                     i2l2490:
  4366                           
  4367                           ;user.c: 380: else if(state == 3 && code == 0xAAEE)
  4368  000532  0E03               	movlw	3
  4369  000534  180E               	xorwf	get_next_state@state,w,c
  4370  000536  100F               	iorwf	get_next_state@state+1,w,c
  4371  000538  A4D8               	btfss	status,2,c
  4372  00053A  D00B               	goto	i2l2496
  4373  00053C  0EEE               	movlw	238
  4374  00053E  1810               	xorwf	get_next_state@code,w,c
  4375  000540  E108               	bnz	i2l2496
  4376  000542  0EAA               	movlw	170
  4377  000544  1811               	xorwf	get_next_state@code+1,w,c
  4378  000546  A4D8               	btfss	status,2,c
  4379  000548  D004               	goto	i2l2496
  4380                           
  4381                           ;user.c: 381: next = 4;
  4382  00054A  0E00               	movlw	0
  4383  00054C  6E38               	movwf	_next+1,c
  4384  00054E  0E04               	movlw	4
  4385  000550  D061               	goto	L17
  4386  000552                     i2l2496:
  4387                           
  4388                           ;user.c: 382: else if(state == 4 && code == 0xAAEE)
  4389  000552  0E04               	movlw	4
  4390  000554  180E               	xorwf	get_next_state@state,w,c
  4391  000556  100F               	iorwf	get_next_state@state+1,w,c
  4392  000558  A4D8               	btfss	status,2,c
  4393  00055A  D007               	goto	i2l2502
  4394  00055C  0EEE               	movlw	238
  4395  00055E  1810               	xorwf	get_next_state@code,w,c
  4396  000560  E104               	bnz	i2l2502
  4397  000562  0EAA               	movlw	170
  4398  000564  1811               	xorwf	get_next_state@code+1,w,c
  4399  000566  B4D8               	btfsc	status,2,c
  4400  000568  D7A3               	goto	i2l2464
  4401  00056A                     i2l2502:
  4402                           
  4403                           ;user.c: 384: else if((state == 1 || state == 2 || state == 3 || state == 4) && code == 
      +                          0xAEBA)
  4404  00056A  040E               	decf	get_next_state@state,w,c
  4405  00056C  100F               	iorwf	get_next_state@state+1,w,c
  4406  00056E  B4D8               	btfsc	status,2,c
  4407  000570  D00F               	goto	i2l2510
  4408  000572  0E02               	movlw	2
  4409  000574  180E               	xorwf	get_next_state@state,w,c
  4410  000576  100F               	iorwf	get_next_state@state+1,w,c
  4411  000578  B4D8               	btfsc	status,2,c
  4412  00057A  D00A               	goto	i2l2510
  4413  00057C  0E03               	movlw	3
  4414  00057E  180E               	xorwf	get_next_state@state,w,c
  4415  000580  100F               	iorwf	get_next_state@state+1,w,c
  4416  000582  B4D8               	btfsc	status,2,c
  4417  000584  D005               	goto	i2l2510
  4418  000586  0E04               	movlw	4
  4419  000588  180E               	xorwf	get_next_state@state,w,c
  4420  00058A  100F               	iorwf	get_next_state@state+1,w,c
  4421  00058C  A4D8               	btfss	status,2,c
  4422  00058E  D023               	goto	i2l2520
  4423  000590                     i2l2510:
  4424  000590  0EBA               	movlw	186
  4425  000592  1810               	xorwf	get_next_state@code,w,c
  4426  000594  E120               	bnz	i2l2520
  4427  000596  0EAE               	movlw	174
  4428  000598  1811               	xorwf	get_next_state@code+1,w,c
  4429  00059A  A4D8               	btfss	status,2,c
  4430  00059C  D01C               	goto	i2l2520
  4431                           
  4432                           ;user.c: 385: {
  4433                           ;user.c: 386: next = 0;
  4434  00059E  0E00               	movlw	0
  4435  0005A0  6E38               	movwf	_next+1,c
  4436  0005A2  0E00               	movlw	0
  4437  0005A4  6E37               	movwf	_next,c
  4438                           
  4439                           ;user.c: 387: char seconds = 0;
  4440  0005A6  0E00               	movlw	0
  4441  0005A8  6E12               	movwf	get_next_state@seconds,c
  4442                           
  4443                           ;user.c: 388: char minutes = aux1[0] + aux1[1]*10;
  4444  0005AA  0100               	movlb	0	; () banked
  4445  0005AC  51AC               	movf	(_aux1+1)& (0+255),w,b
  4446  0005AE  0D0A               	mullw	10
  4447  0005B0  50F3               	movf	prodl,w,c
  4448  0005B2  0100               	movlb	0	; () banked
  4449  0005B4  25AB               	addwf	_aux1& (0+255),w,b
  4450  0005B6  6E13               	movwf	get_next_state@minutes,c
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;user.c: 389: char hour = aux1[2] + aux1[3]*10;
  4454  0005B8  0100               	movlb	0	; () banked
  4455  0005BA  51AE               	movf	(_aux1+3)& (0+255),w,b
  4456  0005BC  0D0A               	mullw	10
  4457  0005BE  50F3               	movf	prodl,w,c
  4458  0005C0  0100               	movlb	0	; () banked
  4459  0005C2  25AD               	addwf	(_aux1+2)& (0+255),w,b
  4460  0005C4  6E14               	movwf	get_next_state@hour,c
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;user.c: 390: set_time(seconds,minutes,hour);
  4464  0005C6  C013  F008         	movff	get_next_state@minutes,set_time@minutes
  4465  0005CA  C014  F009         	movff	get_next_state@hour,set_time@hour
  4466  0005CE  5012               	movf	get_next_state@seconds,w,c
  4467  0005D0  ECB5  F006         	call	_set_time
  4468                           
  4469                           ;user.c: 391: }
  4470  0005D4  D020               	goto	i2l333
  4471  0005D6                     i2l2520:
  4472                           
  4473                           ;user.c: 392: else if(state == 5 && code == 0xEAAA)
  4474  0005D6  0E05               	movlw	5
  4475  0005D8  180E               	xorwf	get_next_state@state,w,c
  4476  0005DA  100F               	iorwf	get_next_state@state+1,w,c
  4477  0005DC  A4D8               	btfss	status,2,c
  4478  0005DE  D00E               	goto	i2l2528
  4479  0005E0  0EAA               	movlw	170
  4480  0005E2  1810               	xorwf	get_next_state@code,w,c
  4481  0005E4  E10B               	bnz	i2l2528
  4482  0005E6  0EEA               	movlw	234
  4483  0005E8  1811               	xorwf	get_next_state@code+1,w,c
  4484  0005EA  A4D8               	btfss	status,2,c
  4485  0005EC  D007               	goto	i2l2528
  4486                           
  4487                           ;user.c: 393: {
  4488                           ;user.c: 394: next = 11;
  4489  0005EE  0E00               	movlw	0
  4490  0005F0  6E38               	movwf	_next+1,c
  4491  0005F2  0E0B               	movlw	11
  4492  0005F4  6E37               	movwf	_next,c
  4493                           
  4494                           ;user.c: 396: timer1_enable();
  4495  0005F6  EC3B  F007         	call	_timer1_enable	;wreg free
  4496                           
  4497                           ;user.c: 397: }
  4498  0005FA  D00D               	goto	i2l333
  4499  0005FC                     i2l2528:
  4500                           
  4501                           ;user.c: 398: else if(state == 11 && timer1_counter_10 == 0)
  4502  0005FC  0E0B               	movlw	11
  4503  0005FE  180E               	xorwf	get_next_state@state,w,c
  4504  000600  100F               	iorwf	get_next_state@state+1,w,c
  4505  000602  A4D8               	btfss	status,2,c
  4506  000604  D008               	goto	i2l333
  4507  000606  0100               	movlb	0	; () banked
  4508  000608  51B1               	movf	_timer1_counter_10& (0+255),w,b
  4509  00060A  A4D8               	btfss	status,2,c
  4510  00060C  D004               	goto	i2l333
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;user.c: 399: next = 12;
  4514  00060E  0E00               	movlw	0
  4515  000610  6E38               	movwf	_next+1,c
  4516  000612  0E0C               	movlw	12
  4517  000614                     L17:
  4518  000614  6E37               	movwf	_next,c
  4519  000616                     i2l333:
  4520                           
  4521                           ;user.c: 403: return next;
  4522  000616  C037  F00E         	movff	_next,?_get_next_state
  4523  00061A  C038  F00F         	movff	_next+1,?_get_next_state+1
  4524  00061E  0012               	return		;funcret
  4525  000620                     __end_of_get_next_state:
  4526                           	opt stack 0
  4527                           pclatu	equ	0xFFB
  4528                           pclath	equ	0xFFA
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           prodh	equ	0xFF4
  4534                           prodl	equ	0xFF3
  4535                           intcon	equ	0xFF2
  4536                           intcon2	equ	0xFF1
  4537                           postinc0	equ	0xFEE
  4538                           fsr0h	equ	0xFEA
  4539                           fsr0l	equ	0xFE9
  4540                           wreg	equ	0xFE8
  4541                           indf1	equ	0xFE7
  4542                           fsr1h	equ	0xFE2
  4543                           fsr1l	equ	0xFE1
  4544                           indf2	equ	0xFDF
  4545                           fsr2h	equ	0xFDA
  4546                           fsr2l	equ	0xFD9
  4547                           status	equ	0xFD8
  4548                           
  4549 ;; *************** function _timer1_enable *****************
  4550 ;; Defined at:
  4551 ;;		line 517 in file "user.c"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;		None
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;		None
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  1    wreg      void 
  4558 ;; Registers used:
  4559 ;;		status,2, status,0
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4565 ;;      Params:         0       0       0       0       0       0       0       0       0
  4566 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4568 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4569 ;;Total ram usage:        0 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; This function calls:
  4572 ;;		Nothing
  4573 ;; This function is called by:
  4574 ;;		_get_next_state
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           	psect	text27
  4579  000E76                     __ptext27:
  4580                           	opt stack 0
  4581  000E76                     _timer1_enable:
  4582                           	opt stack 24
  4583                           
  4584                           ;user.c: 519: T1CON |= 1 << 0;
  4585                           
  4586                           ;incstack = 0
  4587  000E76  80CD               	bsf	4045,0,c	;volatile
  4588  000E78  0012               	return		;funcret
  4589  000E7A                     __end_of_timer1_enable:
  4590                           	opt stack 0
  4591                           pclatu	equ	0xFFB
  4592                           pclath	equ	0xFFA
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           intcon	equ	0xFF2
  4600                           intcon2	equ	0xFF1
  4601                           postinc0	equ	0xFEE
  4602                           fsr0h	equ	0xFEA
  4603                           fsr0l	equ	0xFE9
  4604                           wreg	equ	0xFE8
  4605                           indf1	equ	0xFE7
  4606                           fsr1h	equ	0xFE2
  4607                           fsr1l	equ	0xFE1
  4608                           indf2	equ	0xFDF
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _set_time *****************
  4614 ;; Defined at:
  4615 ;;		line 225 in file "user.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  seconds         1    wreg     unsigned char 
  4618 ;;  minutes         1    7[COMRAM] unsigned char 
  4619 ;;  hour            1    8[COMRAM] unsigned char 
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  seconds         1    9[COMRAM] unsigned char 
  4622 ;;  hour_reg        1   12[COMRAM] unsigned char 
  4623 ;;  min_reg         1   11[COMRAM] unsigned char 
  4624 ;;  sec_reg         1   10[COMRAM] unsigned char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      void 
  4627 ;; Registers used:
  4628 ;;		wreg, status,2, status,0, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4634 ;;      Params:         2       0       0       0       0       0       0       0       0
  4635 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4637 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4638 ;;Total ram usage:        6 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    3
  4641 ;; This function calls:
  4642 ;;		_byte_write
  4643 ;;		_get_hour_reg
  4644 ;;		i2_get_seconds_reg
  4645 ;; This function is called by:
  4646 ;;		_get_next_state
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text28
  4651  000D6A                     __ptext28:
  4652                           	opt stack 0
  4653  000D6A                     _set_time:
  4654                           	opt stack 21
  4655                           
  4656                           ;incstack = 0
  4657                           ;set_time@seconds stored from wreg
  4658  000D6A  6E0A               	movwf	set_time@seconds,c
  4659                           
  4660                           ;user.c: 228: char sec_reg = get_seconds_reg(seconds);
  4661  000D6C  500A               	movf	set_time@seconds,w,c
  4662  000D6E  EC42  F006         	call	i2_get_seconds_reg
  4663  000D72  6E0B               	movwf	set_time@sec_reg,c
  4664                           
  4665                           ;user.c: 229: char min_reg = get_seconds_reg(minutes);
  4666  000D74  5008               	movf	set_time@minutes,w,c
  4667  000D76  EC42  F006         	call	i2_get_seconds_reg
  4668  000D7A  6E0C               	movwf	set_time@min_reg,c
  4669                           
  4670                           ;user.c: 230: char hour_reg = get_hour_reg(hour);
  4671  000D7C  5009               	movf	set_time@hour,w,c
  4672  000D7E  ECED  F006         	call	_get_hour_reg
  4673  000D82  6E0D               	movwf	set_time@hour_reg,c
  4674                           
  4675                           ;user.c: 232: byte_write(0x80,sec_reg);
  4676  000D84  C00B  F006         	movff	set_time@sec_reg,byte_write@value
  4677  000D88  0E80               	movlw	128
  4678  000D8A  EC13  F007         	call	_byte_write
  4679                           
  4680                           ;user.c: 233: byte_write(0x82,min_reg);
  4681  000D8E  C00C  F006         	movff	set_time@min_reg,byte_write@value
  4682  000D92  0E82               	movlw	130
  4683  000D94  EC13  F007         	call	_byte_write
  4684                           
  4685                           ;user.c: 234: byte_write(0x84,hour_reg);
  4686  000D98  C00D  F006         	movff	set_time@hour_reg,byte_write@value
  4687  000D9C  0E84               	movlw	132
  4688  000D9E  EC13  F007         	call	_byte_write
  4689  000DA2  0012               	return		;funcret
  4690  000DA4                     __end_of_set_time:
  4691                           	opt stack 0
  4692                           pclatu	equ	0xFFB
  4693                           pclath	equ	0xFFA
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           intcon2	equ	0xFF1
  4702                           postinc0	equ	0xFEE
  4703                           fsr0h	equ	0xFEA
  4704                           fsr0l	equ	0xFE9
  4705                           wreg	equ	0xFE8
  4706                           indf1	equ	0xFE7
  4707                           fsr1h	equ	0xFE2
  4708                           fsr1l	equ	0xFE1
  4709                           indf2	equ	0xFDF
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function i2_get_seconds_reg *****************
  4715 ;; Defined at:
  4716 ;;		line 286 in file "user.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  seconds         1    wreg     unsigned char 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  seconds         1    1[COMRAM] unsigned char 
  4721 ;;  get_seconds_    1    0[COMRAM] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  1    wreg      unsigned char 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4731 ;;      Params:         0       0       0       0       0       0       0       0       0
  4732 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4734 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4735 ;;Total ram usage:        2 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_set_time
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text29
  4745  000C84                     __ptext29:
  4746                           	opt stack 0
  4747  000C84                     i2_get_seconds_reg:
  4748                           	opt stack 23
  4749                           
  4750                           ;incstack = 0
  4751                           ;i2get_seconds_reg@seconds stored from wreg
  4752  000C84  6E02               	movwf	i2get_seconds_reg@seconds,c
  4753                           
  4754                           ;user.c: 288: char res = 0;
  4755  000C86  0E00               	movlw	0
  4756  000C88  6E01               	movwf	i2get_seconds_reg@res,c
  4757                           
  4758                           ;user.c: 289: if(seconds<10)
  4759  000C8A  0E0A               	movlw	10
  4760  000C8C  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4761  000C8E  D003               	goto	i2l2192
  4762                           
  4763                           ;user.c: 290: {
  4764                           ;user.c: 291: res = seconds;
  4765  000C90  C002  F001         	movff	i2get_seconds_reg@seconds,i2get_seconds_reg@res
  4766                           
  4767                           ;user.c: 292: }
  4768  000C94  D020               	goto	i2l2210
  4769  000C96                     i2l2192:
  4770                           
  4771                           ;user.c: 293: else if(seconds <20)
  4772  000C96  0E14               	movlw	20
  4773  000C98  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4774  000C9A  D004               	goto	i2l2196
  4775                           
  4776                           ;user.c: 294: {
  4777                           ;user.c: 295: res = 1<<4 | (seconds - 10);
  4778  000C9C  5002               	movf	i2get_seconds_reg@seconds,w,c
  4779  000C9E  0FF6               	addlw	246
  4780  000CA0  0910               	iorlw	16
  4781  000CA2  D018               	goto	L21
  4782  000CA4                     i2l2196:
  4783                           
  4784                           ;user.c: 297: else if(seconds <30)
  4785  000CA4  0E1E               	movlw	30
  4786  000CA6  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4787  000CA8  D004               	goto	i2l2200
  4788                           
  4789                           ;user.c: 298: {
  4790                           ;user.c: 299: res = 2<<4 | (seconds -20);
  4791  000CAA  5002               	movf	i2get_seconds_reg@seconds,w,c
  4792  000CAC  0FEC               	addlw	236
  4793  000CAE  0920               	iorlw	32
  4794  000CB0  D011               	goto	L21
  4795  000CB2                     i2l2200:
  4796                           
  4797                           ;user.c: 301: else if(seconds <40)
  4798  000CB2  0E28               	movlw	40
  4799  000CB4  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4800  000CB6  D004               	goto	i2l2204
  4801                           
  4802                           ;user.c: 302: {
  4803                           ;user.c: 303: res = 3<<4 | (seconds - 30);
  4804  000CB8  5002               	movf	i2get_seconds_reg@seconds,w,c
  4805  000CBA  0FE2               	addlw	226
  4806  000CBC  0930               	iorlw	48
  4807  000CBE  D00A               	goto	L21
  4808  000CC0                     i2l2204:
  4809                           
  4810                           ;user.c: 305: else if(seconds <50)
  4811  000CC0  0E32               	movlw	50
  4812  000CC2  6002               	cpfslt	i2get_seconds_reg@seconds,c
  4813  000CC4  D004               	goto	i2l2208
  4814                           
  4815                           ;user.c: 306: {
  4816                           ;user.c: 307: res = 4<<4 | (seconds - 40);
  4817  000CC6  5002               	movf	i2get_seconds_reg@seconds,w,c
  4818  000CC8  0FD8               	addlw	216
  4819  000CCA  0940               	iorlw	64
  4820  000CCC  D003               	goto	L21
  4821  000CCE                     i2l2208:
  4822                           
  4823                           ;user.c: 309: else
  4824                           ;user.c: 310: {
  4825                           ;user.c: 311: res = 5<<4 | (seconds -50);
  4826  000CCE  5002               	movf	i2get_seconds_reg@seconds,w,c
  4827  000CD0  0FCE               	addlw	206
  4828  000CD2  0950               	iorlw	80
  4829  000CD4                     L21:
  4830  000CD4  6E01               	movwf	i2get_seconds_reg@res,c
  4831  000CD6                     i2l2210:
  4832                           
  4833                           ;user.c: 312: }
  4834                           ;user.c: 314: return res;
  4835  000CD6  5001               	movf	i2get_seconds_reg@res,w,c
  4836  000CD8  0012               	return	
  4837  000CDA                     __end_ofi2_get_seconds_reg:
  4838                           	opt stack 0
  4839                           pclatu	equ	0xFFB
  4840                           pclath	equ	0xFFA
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           intcon	equ	0xFF2
  4848                           intcon2	equ	0xFF1
  4849                           postinc0	equ	0xFEE
  4850                           fsr0h	equ	0xFEA
  4851                           fsr0l	equ	0xFE9
  4852                           wreg	equ	0xFE8
  4853                           indf1	equ	0xFE7
  4854                           fsr1h	equ	0xFE2
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function _get_hour_reg *****************
  4862 ;; Defined at:
  4863 ;;		line 318 in file "user.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  hour            1    wreg     unsigned char 
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  hour            1    1[COMRAM] unsigned char 
  4868 ;;  res             1    0[COMRAM] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      unsigned char 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4878 ;;      Params:         0       0       0       0       0       0       0       0       0
  4879 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4881 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4882 ;;Total ram usage:        2 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; This function calls:
  4885 ;;		Nothing
  4886 ;; This function is called by:
  4887 ;;		_set_time
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text30
  4892  000DDA                     __ptext30:
  4893                           	opt stack 0
  4894  000DDA                     _get_hour_reg:
  4895                           	opt stack 23
  4896                           
  4897                           ;incstack = 0
  4898                           ;get_hour_reg@hour stored from wreg
  4899  000DDA  6E02               	movwf	get_hour_reg@hour,c
  4900                           
  4901                           ;user.c: 320: char res = 0;
  4902  000DDC  0E00               	movlw	0
  4903  000DDE  6E01               	movwf	get_hour_reg@res,c
  4904                           
  4905                           ;user.c: 321: if(hour < 10)
  4906  000DE0  0E0A               	movlw	10
  4907  000DE2  6002               	cpfslt	get_hour_reg@hour,c
  4908  000DE4  D003               	goto	i2l2176
  4909                           
  4910                           ;user.c: 322: {
  4911                           ;user.c: 323: res = hour;
  4912  000DE6  C002  F001         	movff	get_hour_reg@hour,get_hour_reg@res
  4913                           
  4914                           ;user.c: 324: }
  4915  000DEA  D00B               	goto	i2l2182
  4916  000DEC                     i2l2176:
  4917                           
  4918                           ;user.c: 325: else if(hour < 20)
  4919  000DEC  0E14               	movlw	20
  4920  000DEE  6002               	cpfslt	get_hour_reg@hour,c
  4921  000DF0  D004               	goto	i2l2180
  4922                           
  4923                           ;user.c: 326: {
  4924                           ;user.c: 327: res = 1<<4 | (hour -10);
  4925  000DF2  5002               	movf	get_hour_reg@hour,w,c
  4926  000DF4  0FF6               	addlw	246
  4927  000DF6  0910               	iorlw	16
  4928  000DF8  D003               	goto	L22
  4929  000DFA                     i2l2180:
  4930                           
  4931                           ;user.c: 329: else
  4932                           ;user.c: 330: {
  4933                           ;user.c: 331: res = 2<<4 | (hour-20);
  4934  000DFA  5002               	movf	get_hour_reg@hour,w,c
  4935  000DFC  0FEC               	addlw	236
  4936  000DFE  0920               	iorlw	32
  4937  000E00                     L22:
  4938  000E00  6E01               	movwf	get_hour_reg@res,c
  4939  000E02                     i2l2182:
  4940                           
  4941                           ;user.c: 332: }
  4942                           ;user.c: 334: return res;
  4943  000E02  5001               	movf	get_hour_reg@res,w,c
  4944  000E04  0012               	return	
  4945  000E06                     __end_of_get_hour_reg:
  4946                           	opt stack 0
  4947                           pclatu	equ	0xFFB
  4948                           pclath	equ	0xFFA
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           intcon2	equ	0xFF1
  4957                           postinc0	equ	0xFEE
  4958                           fsr0h	equ	0xFEA
  4959                           fsr0l	equ	0xFE9
  4960                           wreg	equ	0xFE8
  4961                           indf1	equ	0xFE7
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _byte_write *****************
  4970 ;; Defined at:
  4971 ;;		line 213 in file "user.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  address         1    wreg     unsigned char 
  4974 ;;  value           1    5[COMRAM] unsigned char 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  address         1    6[COMRAM] unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      void 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4986 ;;      Params:         1       0       0       0       0       0       0       0       0
  4987 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4989 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4990 ;;Total ram usage:        2 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    2
  4993 ;; This function calls:
  4994 ;;		i2_ce_disable
  4995 ;;		i2_ce_enable
  4996 ;;		i2_send_command
  4997 ;; This function is called by:
  4998 ;;		_set_time
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text31
  5003  000E26                     __ptext31:
  5004                           	opt stack 0
  5005  000E26                     _byte_write:
  5006                           	opt stack 21
  5007                           
  5008                           ;incstack = 0
  5009                           ;byte_write@address stored from wreg
  5010  000E26  6E07               	movwf	byte_write@address,c
  5011                           
  5012                           ;user.c: 215: ce_enable();
  5013  000E28  EC3F  F007         	call	i2_ce_enable	;wreg free
  5014                           
  5015                           ;user.c: 218: send_command(address);
  5016  000E2C  5007               	movf	byte_write@address,w,c
  5017  000E2E  EC93  F005         	call	i2_send_command
  5018                           
  5019                           ;user.c: 219: send_command(value);
  5020  000E32  5006               	movf	byte_write@value,w,c
  5021  000E34  EC93  F005         	call	i2_send_command
  5022                           
  5023                           ;user.c: 221: ce_disable();
  5024  000E38  EC2E  F007         	call	i2_ce_disable	;wreg free
  5025  000E3C  0012               	return		;funcret
  5026  000E3E                     __end_of_byte_write:
  5027                           	opt stack 0
  5028                           pclatu	equ	0xFFB
  5029                           pclath	equ	0xFFA
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           intcon	equ	0xFF2
  5037                           intcon2	equ	0xFF1
  5038                           postinc0	equ	0xFEE
  5039                           fsr0h	equ	0xFEA
  5040                           fsr0l	equ	0xFE9
  5041                           wreg	equ	0xFE8
  5042                           indf1	equ	0xFE7
  5043                           fsr1h	equ	0xFE2
  5044                           fsr1l	equ	0xFE1
  5045                           indf2	equ	0xFDF
  5046                           fsr2h	equ	0xFDA
  5047                           fsr2l	equ	0xFD9
  5048                           status	equ	0xFD8
  5049                           
  5050 ;; *************** function i2_send_command *****************
  5051 ;; Defined at:
  5052 ;;		line 339 in file "user.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;  command         1    wreg     unsigned char 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  command         1    2[COMRAM] unsigned char 
  5057 ;;  send_command    2    3[COMRAM] int 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  1    wreg      void 
  5060 ;; Registers used:
  5061 ;;		wreg, status,2, status,0, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5067 ;;      Params:         0       0       0       0       0       0       0       0       0
  5068 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5069 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5070 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5071 ;;Total ram usage:        5 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    1
  5074 ;; This function calls:
  5075 ;;		i2_io_as_output
  5076 ;; This function is called by:
  5077 ;;		_byte_write
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text32
  5082  000B26                     __ptext32:
  5083                           	opt stack 0
  5084  000B26                     i2_send_command:
  5085                           	opt stack 21
  5086                           
  5087                           ;incstack = 0
  5088                           ;i2send_command@command stored from wreg
  5089  000B26  6E03               	movwf	i2send_command@command,c
  5090                           
  5091                           ;user.c: 341: int i;
  5092                           ;user.c: 342: io_as_output();
  5093  000B28  EC3D  F007         	call	i2_io_as_output	;wreg free
  5094                           
  5095                           ;user.c: 343: for(i=0; i<8; i++)
  5096  000B2C  0E00               	movlw	0
  5097  000B2E  6E05               	movwf	i2send_command@i+1,c
  5098  000B30  0E00               	movlw	0
  5099  000B32  6E04               	movwf	i2send_command@i,c
  5100  000B34                     i2l2118:
  5101  000B34  BE05               	btfsc	i2send_command@i+1,7,c
  5102  000B36  D006               	goto	i2l2122
  5103  000B38  5005               	movf	i2send_command@i+1,w,c
  5104  000B3A  E121               	bnz	i2l323
  5105  000B3C  0E08               	movlw	8
  5106  000B3E  5C04               	subwf	i2send_command@i,w,c
  5107  000B40  B0D8               	btfsc	status,0,c
  5108  000B42  0012               	return	
  5109  000B44                     i2l2122:
  5110                           
  5111                           ;user.c: 344: {
  5112                           ;user.c: 345: RA3 = command>>i & 0x01;
  5113  000B44  C004  F001         	movff	i2send_command@i,??i2_send_command
  5114  000B48  C003  F002         	movff	i2send_command@command,??i2_send_command+1
  5115  000B4C  2A01               	incf	??i2_send_command,f,c
  5116  000B4E  D002               	goto	i2u127_44
  5117  000B50                     i2u127_45:
  5118  000B50  90D8               	bcf	status,0,c
  5119  000B52  3202               	rrcf	??i2_send_command+1,f,c
  5120  000B54                     i2u127_44:
  5121  000B54  2E01               	decfsz	??i2_send_command,f,c
  5122  000B56  D7FC               	goto	i2u127_45
  5123  000B58  3002               	rrcf	??i2_send_command+1,w,c
  5124  000B5A  A0D8               	btfss	status,0,c
  5125  000B5C  D002               	goto	i2u128_40
  5126  000B5E  8680               	bsf	3968,3,c	;volatile
  5127  000B60  D001               	goto	i2l2124
  5128  000B62                     i2u128_40:
  5129  000B62  9680               	bcf	3968,3,c	;volatile
  5130  000B64                     i2l2124:
  5131                           
  5132                           ;user.c: 346: RA2 = 1;
  5133  000B64  8480               	bsf	3968,2,c	;volatile
  5134                           
  5135                           ;user.c: 347: _delay((unsigned long)((10)*(20000000L/4000000.0)));
  5136  000B66  0E10               	movlw	16
  5137  000B68                     i2u297_47:
  5138  000B68  2EE8               	decfsz	wreg,f,c
  5139  000B6A  D7FE               	bra	i2u297_47
  5140  000B6C  D000               	nop2	
  5141                           
  5142                           ;user.c: 348: RA2 = 0;
  5143  000B6E  9480               	bcf	3968,2,c	;volatile
  5144                           
  5145                           ;user.c: 349: _delay((unsigned long)((4)*(20000000L/4000000.0)));
  5146  000B70  0E06               	movlw	6
  5147  000B72                     i2u298_47:
  5148  000B72  2EE8               	decfsz	wreg,f,c
  5149  000B74  D7FE               	bra	i2u298_47
  5150  000B76  D000               	nop2	
  5151  000B78  4A04               	infsnz	i2send_command@i,f,c
  5152  000B7A  2A05               	incf	i2send_command@i+1,f,c
  5153  000B7C  D7DB               	goto	i2l2118
  5154  000B7E                     i2l323:
  5155  000B7E  0012               	return		;funcret
  5156  000B80                     __end_ofi2_send_command:
  5157                           	opt stack 0
  5158                           pclatu	equ	0xFFB
  5159                           pclath	equ	0xFFA
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           intcon	equ	0xFF2
  5167                           intcon2	equ	0xFF1
  5168                           postinc0	equ	0xFEE
  5169                           fsr0h	equ	0xFEA
  5170                           fsr0l	equ	0xFE9
  5171                           wreg	equ	0xFE8
  5172                           indf1	equ	0xFE7
  5173                           fsr1h	equ	0xFE2
  5174                           fsr1l	equ	0xFE1
  5175                           indf2	equ	0xFDF
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180 ;; *************** function i2_io_as_output *****************
  5181 ;; Defined at:
  5182 ;;		line 361 in file "user.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;		None
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;		None
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  1    wreg      void 
  5189 ;; Registers used:
  5190 ;;		None
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5196 ;;      Params:         0       0       0       0       0       0       0       0       0
  5197 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5199 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5200 ;;Total ram usage:        0 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; This function calls:
  5203 ;;		Nothing
  5204 ;; This function is called by:
  5205 ;;		i2_send_command
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text33
  5210  000E7A                     __ptext33:
  5211                           	opt stack 0
  5212  000E7A                     i2_io_as_output:
  5213                           	opt stack 21
  5214                           
  5215                           ;user.c: 363: TRISA3 = 0;
  5216                           
  5217                           ;incstack = 0
  5218  000E7A  9692               	bcf	3986,3,c	;volatile
  5219  000E7C  0012               	return		;funcret
  5220  000E7E                     __end_ofi2_io_as_output:
  5221                           	opt stack 0
  5222                           pclatu	equ	0xFFB
  5223                           pclath	equ	0xFFA
  5224                           tblptru	equ	0xFF8
  5225                           tblptrh	equ	0xFF7
  5226                           tblptrl	equ	0xFF6
  5227                           tablat	equ	0xFF5
  5228                           prodh	equ	0xFF4
  5229                           prodl	equ	0xFF3
  5230                           intcon	equ	0xFF2
  5231                           intcon2	equ	0xFF1
  5232                           postinc0	equ	0xFEE
  5233                           fsr0h	equ	0xFEA
  5234                           fsr0l	equ	0xFE9
  5235                           wreg	equ	0xFE8
  5236                           indf1	equ	0xFE7
  5237                           fsr1h	equ	0xFE2
  5238                           fsr1l	equ	0xFE1
  5239                           indf2	equ	0xFDF
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function i2_ce_enable *****************
  5245 ;; Defined at:
  5246 ;;		line 172 in file "user.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  1    wreg      void 
  5253 ;; Registers used:
  5254 ;;		None
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5260 ;;      Params:         0       0       0       0       0       0       0       0       0
  5261 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5263 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5264 ;;Total ram usage:        0 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; This function calls:
  5267 ;;		Nothing
  5268 ;; This function is called by:
  5269 ;;		_byte_write
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text34
  5274  000E7E                     __ptext34:
  5275                           	opt stack 0
  5276  000E7E                     i2_ce_enable:
  5277                           	opt stack 22
  5278                           
  5279                           ;user.c: 175: RA5 = 1;
  5280                           
  5281                           ;incstack = 0
  5282  000E7E  8A80               	bsf	3968,5,c	;volatile
  5283  000E80  0012               	return		;funcret
  5284  000E82                     __end_ofi2_ce_enable:
  5285                           	opt stack 0
  5286                           pclatu	equ	0xFFB
  5287                           pclath	equ	0xFFA
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           intcon	equ	0xFF2
  5295                           intcon2	equ	0xFF1
  5296                           postinc0	equ	0xFEE
  5297                           fsr0h	equ	0xFEA
  5298                           fsr0l	equ	0xFE9
  5299                           wreg	equ	0xFE8
  5300                           indf1	equ	0xFE7
  5301                           fsr1h	equ	0xFE2
  5302                           fsr1l	equ	0xFE1
  5303                           indf2	equ	0xFDF
  5304                           fsr2h	equ	0xFDA
  5305                           fsr2l	equ	0xFD9
  5306                           status	equ	0xFD8
  5307                           
  5308 ;; *************** function i2_ce_disable *****************
  5309 ;; Defined at:
  5310 ;;		line 179 in file "user.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;		None
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;		None
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		None
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5324 ;;      Params:         0       0       0       0       0       0       0       0       0
  5325 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5326 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5327 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5328 ;;Total ram usage:        0 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; This function calls:
  5331 ;;		Nothing
  5332 ;; This function is called by:
  5333 ;;		_byte_write
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text35
  5338  000E5C                     __ptext35:
  5339                           	opt stack 0
  5340  000E5C                     i2_ce_disable:
  5341                           	opt stack 22
  5342                           
  5343                           ;user.c: 181: RA5 = 0;
  5344                           
  5345                           ;incstack = 0
  5346  000E5C  9A80               	bcf	3968,5,c	;volatile
  5347                           
  5348                           ;user.c: 182: RA2 = 0;
  5349  000E5E  9480               	bcf	3968,2,c	;volatile
  5350  000E60  0012               	return		;funcret
  5351  000E62                     __end_ofi2_ce_disable:
  5352                           	opt stack 0
  5353  0000                     pclatu	equ	0xFFB
  5354                           pclath	equ	0xFFA
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           intcon	equ	0xFF2
  5362                           intcon2	equ	0xFF1
  5363                           postinc0	equ	0xFEE
  5364                           fsr0h	equ	0xFEA
  5365                           fsr0l	equ	0xFE9
  5366                           wreg	equ	0xFE8
  5367                           indf1	equ	0xFE7
  5368                           fsr1h	equ	0xFE2
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           pclatu	equ	0xFFB
  5375                           pclath	equ	0xFFA
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           intcon	equ	0xFF2
  5383                           intcon2	equ	0xFF1
  5384                           postinc0	equ	0xFEE
  5385                           fsr0h	equ	0xFEA
  5386                           fsr0l	equ	0xFE9
  5387                           wreg	equ	0xFE8
  5388                           indf1	equ	0xFE7
  5389                           fsr1h	equ	0xFE2
  5390                           fsr1l	equ	0xFE1
  5391                           indf2	equ	0xFDF
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396                           	psect	rparam
  5397  0000                     pclatu	equ	0xFFB
  5398                           pclath	equ	0xFFA
  5399                           tblptru	equ	0xFF8
  5400                           tblptrh	equ	0xFF7
  5401                           tblptrl	equ	0xFF6
  5402                           tablat	equ	0xFF5
  5403                           prodh	equ	0xFF4
  5404                           prodl	equ	0xFF3
  5405                           intcon	equ	0xFF2
  5406                           intcon2	equ	0xFF1
  5407                           postinc0	equ	0xFEE
  5408                           fsr0h	equ	0xFEA
  5409                           fsr0l	equ	0xFE9
  5410                           wreg	equ	0xFE8
  5411                           indf1	equ	0xFE7
  5412                           fsr1h	equ	0xFE2
  5413                           fsr1l	equ	0xFE1
  5414                           indf2	equ	0xFDF
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419                           	psect	temp
  5420  00003A                     btemp:
  5421                           	opt stack 0
  5422  00003A                     	ds	1
  5423  0000                     int$flags	set	btemp
  5424                           pclatu	equ	0xFFB
  5425                           pclath	equ	0xFFA
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           intcon2	equ	0xFF1
  5434                           postinc0	equ	0xFEE
  5435                           fsr0h	equ	0xFEA
  5436                           fsr0l	equ	0xFE9
  5437                           wreg	equ	0xFE8
  5438                           indf1	equ	0xFE7
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           fsr2h	equ	0xFDA
  5443                           fsr2l	equ	0xFD9
  5444                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         19
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      57
    BANK0           160     66      84
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    update_timer1_counter_10@counter	PTR unsigned char  size(2) Largest target is 1
		 -> timer1_counter_10(BANK0[1]), 

    get_timer1_counter@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    get_time@data	PTR unsigned char  size(2) Largest target is 6
		 -> aux1(BANK0[6]), 

    put_nums@nums	PTR unsigned char  size(2) Largest target is 6
		 -> masked_digits(BANK0[6]), 


Critical Paths under _main in COMRAM

    _main->_get_time
    _get_timer1_counter->_get_seconds_reg
    _get_time->_byte_read
    _byte_read->_send_command

Critical Paths under _high_isr in COMRAM

    _high_isr->_get_next_state
    _put_nums->_put_num
    _get_next_state->_set_time
    _set_time->_byte_write
    _byte_write->i2_send_command

Critical Paths under _main in BANK0

    _main->_get_time

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2503
                                             63 BANK0      3     3      0
                _ConfigureOscillator
                            _InitApp
                     _buzzer_disable
                           _get_time
                 _get_timer1_counter
                  _ir_is_code_number
 ---------------------------------------------------------------------------------
 (1) _ir_is_code_number                                    1     1      0     310
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_timer1_counter                                   3     1      2     849
                                             39 COMRAM     1     1      0
                                             60 BANK0      2     0      2
                    _get_seconds_reg
 ---------------------------------------------------------------------------------
 (2) _get_seconds_reg                                      2     2      0     393
                                             37 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             9     6      3    1304
                                             48 COMRAM     6     6      0
                                             60 BANK0      3     0      3
                          _byte_read
 ---------------------------------------------------------------------------------
 (2) _byte_read                                            6     6      0     297
                                             42 COMRAM     6     6      0
                         _ce_disable
                          _ce_enable
                        _io_as_input
                       _send_command
 ---------------------------------------------------------------------------------
 (3) _send_command                                         5     5      0     130
                                             37 COMRAM     5     5      0
                       _io_as_output
 ---------------------------------------------------------------------------------
 (4) _io_as_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _io_as_input                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_enable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ce_disable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buzzer_disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            77    77      0    3798
                                             20 COMRAM    17    17      0
                                              0 BANK0     60    60      0
                     _get_next_state
                  _ir_get_human_code
                      _point_disable
                       _point_enable
                           _put_nums
                      _update_buzzer
                       _update_point
           _update_timer1_counter_10
 ---------------------------------------------------------------------------------
 (6) _update_timer1_counter_10                             4     2      2     318
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _update_point                                         3     0      3     306
                                              0 COMRAM     3     0      3
                      _point_disable
                       _point_enable
 ---------------------------------------------------------------------------------
 (7) _point_enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _point_disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _update_buzzer                                        3     0      3     306
                                              0 COMRAM     3     0      3
                      _buzzer_enable
                   i2_buzzer_disable
 ---------------------------------------------------------------------------------
 (7) i2_buzzer_disable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _buzzer_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _put_nums                                             4     2      2     536
                                              7 COMRAM     4     2      2
                            _get_num
                            _put_num
 ---------------------------------------------------------------------------------
 (7) _put_num                                             17    17      0     348
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (7) _get_num                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ir_get_human_code                                    5     3      2     115
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _get_next_state                                       7     3      4    1761
                                             13 COMRAM     7     3      4
                           _set_time
                      _timer1_enable
 ---------------------------------------------------------------------------------
 (7) _timer1_enable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _set_time                                             6     4      2    1056
                                              7 COMRAM     6     4      2
                         _byte_write
                       _get_hour_reg
                  i2_get_seconds_reg
 ---------------------------------------------------------------------------------
 (8) i2_get_seconds_reg                                    2     2      0     271
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _get_hour_reg                                         2     2      0     136
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _byte_write                                           2     1      1     362
                                              5 COMRAM     2     1      1
                       i2_ce_disable
                        i2_ce_enable
                     i2_send_command
 ---------------------------------------------------------------------------------
 (9) i2_send_command                                       5     5      0      90
                                              0 COMRAM     5     5      0
                     i2_io_as_output
 ---------------------------------------------------------------------------------
 (10) i2_io_as_output                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_ce_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _buzzer_disable
   _get_time
     _byte_read
       _ce_disable
       _ce_enable
       _io_as_input
       _send_command
         _io_as_output
   _get_timer1_counter
     _get_seconds_reg
   _ir_is_code_number

 _high_isr (ROOT)
   _get_next_state
     _set_time
       _byte_write
         i2_ce_disable
         i2_ce_enable
         i2_send_command
           i2_io_as_output
       _get_hour_reg
       i2_get_seconds_reg
     _timer1_enable
   _ir_get_human_code
   _point_disable
   _point_enable
   _put_nums
     _get_num
     _put_num
   _update_buzzer
     _buzzer_enable
     i2_buzzer_disable
   _update_point
     _point_disable
     _point_enable
   _update_timer1_counter_10

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     42      54       5       52.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      39       1       60.6%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8D      11        0.0%
DATA                 0      0      8D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun May 28 03:51:46 2017

                     _update_point 0CDA                      _update_buzzer 0D22  
                      __CFG_BOR$ON 000000                    ??_point_disable 0001  
                      _put_num$899 0005                        __CFG_BORV$3 000000  
                     __CFG_CP0$OFF 000000                       __CFG_CP1$OFF 000000  
                     __CFG_CP2$OFF 000000                       __CFG_CP3$OFF 000000  
                      __CFG_LVP$ON 000000                     i2_send_command 0B26  
                      __CFG_WDT$ON 000000           _update_timer1_counter_10 0900  
                              l127 03C6                                l323 0B24  
                              l283 0A2E                       __CFG_CPB$OFF 000000  
                              _RB0 007C08                                _RA2 007C02  
                              _RB1 007C09                                _RA3 007C03  
                              _RB3 007C0B                                _RA5 007C05  
                              _RB4 007C0C                                _RB5 007C0D  
                  ?_get_next_state 000E                       __CFG_CPD$OFF 000000  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
      __size_of_get_timer1_counter 007E                       ?_io_as_input 0001  
                      high_isr@aux 0095              ir_get_human_code@code 0001  
                 ?_get_seconds_reg 0001                               l3212 0A68  
                             l3320 080A                               l3312 07B2  
                             l3240 0C78                               l3232 0C5C  
                             l3224 0C40                               l3170 0AEA  
                             l3242 0C80                               l3410 03C0  
                             l3402 03A2                               l3172 0B0A  
                             l3236 0C6A                               l3228 0C4E  
                             l3404 03A6                               l3166 0ADA  
                             l3318 07E0                               l3342 0C26  
                             l3440 0428                               l3416 03D2  
                             l3442 043A                               l3426 03F0  
                             l3196 0A1E                               l3348 0C2A  
                             l3436 0410                               l3444 044C  
                             l3382 034A                               l3392 036E  
                             l3384 0354    update_timer1_counter_10@counter 0001  
                             l3394 0384                               l3388 0360  
                      get_time@aux 0035                               u2530 0B08  
                             u2524 0AFA                               u2525 0AF6  
                             _PIE1 000F9D                               u2570 0A46  
            __size_ofi2_ce_disable 0006                               u2594 0A50  
                             u2595 0A4C                               u2588 0A48  
                             u2917 0A32                               u2927 0A5C  
                             _RBIF 007F90                               u2937 0B0E  
                             u2947 0B18                               i2l60 02AE  
                             i2l53 0162                               i2l71 0248  
                             i2l65 01E6                               i2l84 02D8  
                      i2_ce_enable 0E7E                               _aux1 00AB  
                             _main 0314                               _next 0037  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr2h 000FDA                               fsr0l 000FE9  
                             indf1 000FE7                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 003A                               prodh 000FF4  
                             prodl 000FF3                               start 000E  
                    __CFG_IESO$OFF 000000                     ??_get_hour_reg 0001  
                    __CFG_MCLRE$ON 000000                       ___param_bank 000000  
                     high_isr@code 0060                    __end_of_InitApp 0ACC  
                   ?_update_buzzer 0001                      ?_io_as_output 0001  
           __end_ofi2_send_command 0B80        ir_is_code_number@human_code 0026  
                    __CFG_PLLDIV$1 000000                     __CFG_CCP2MX$ON 000000  
                            ?_main 0001                       get_time@data 009C  
                            _T0CON 000FD5                              _T1CON 000FCD  
                            i2l222 0BD6                              i2l323 0B7E  
                            i2l227 0DD8                              i2l333 0616  
              update_point@counter 0003                      __CFG_USBDIV$1 000000  
                     i2_ce_disable 0E5C                _ConfigureOscillator 0E82  
                    __CFG_PWRT$OFF 000000                      __CFG_WRT0$OFF 000000  
                    __CFG_WRT1$OFF 000000                      __CFG_WRT2$OFF 000000  
                    __CFG_WRT3$OFF 000000                     __CFG_EBTR0$OFF 000000  
                   __CFG_FCMEN$OFF 000000                     __CFG_EBTR1$OFF 000000  
                   __CFG_EBTR2$OFF 000000                     __CFG_EBTR3$OFF 000000  
                  __end_of_get_num 0900                      __CFG_WRTB$OFF 000000  
                    __CFG_WRTC$OFF 000000                      __CFG_WRTD$OFF 000000  
                   __CFG_EBTRB$OFF 000000                              _state 00B2  
                            pclath 000FFA                              tablat 000FF5  
                  __end_of_put_num 0BD8                              status 000FD8  
             ?_ConfigureOscillator 0001                   ??i2_io_as_output 0001  
           get_timer1_counter@data 009C                    __initialization 0E06  
                    high_isr@i_150 009A                       __end_of_main 049A  
                   ??_io_as_output 0026                    ?i2_send_command 0001  
                           ??_main 009F                      __activetblptr 000002  
                           _ADCON1 000FC1                   get_hour_reg@hour 0002  
                    get_time@hours 0036                             i2l2200 0CB2  
                           i2l2122 0B44                             i2l2210 0CD6  
                           i2l2124 0B64                             i2l2204 0CC0  
                           i2l2300 0890                             i2l2220 0B8E  
                           i2l2118 0B34                             i2l2208 0CCE  
                           i2l2400 064C                             i2l2304 0894  
                           i2l2232 0BC2                             i2l2224 0B9E  
                           i2l2410 066A                             i2l2402 0652  
                           i2l2314 089C                             i2l2180 0DFA  
                           i2l2420 0688                             i2l2412 0670  
                           i2l2404 0658                             i2l2308 0898  
                           i2l2260 0868                             i2l2252 0860  
                           i2l2244 0858                             i2l2182 0E02  
                           i2l2510 0590                             i2l2502 056A  
                           i2l2414 0676                             i2l2406 065E  
                           i2l2176 0DEC                             i2l2192 0C96  
                           i2l2520 05D6                             i2l2416 067C  
                           i2l2408 0664                             i2l2280 087C  
                           i2l2272 0874                             i2l2264 086C  
                           i2l2256 0864                             i2l2248 085C  
                           i2l2418 0682                             i2l2426 068C  
                           i2l2602 0976                             i2l2196 0CA4  
                           i2l2292 0888                             i2l2284 0880  
                           i2l2276 0878                             i2l2268 0870  
                           i2l2390 062E                             i2l2542 0CFC  
                           i2l2528 05FC                             i2l2472 04D6  
                           i2l2464 04B0                             i2l2392 0634  
                           i2l2296 088C                             i2l2288 0884  
                           i2l2560 0D44                             i2l2544 0D02  
                           i2l2490 0532                             i2l2466 04B8  
                           i2l2394 063A                             i2l2386 0622  
                           i2l2562 0D4A                             i2l2802 0238  
                           i2l2730 0078                             i2l2484 0512  
                           i2l2396 0640                             i2l2388 0628  
                           i2l2572 0DAC                             i2l2812 0254  
                           i2l2478 04F4                             i2l2398 0646  
                           i2l2814 025C                             i2l2822 0274  
                           i2l2742 00BE                             i2l2734 008E  
                           i2l2496 0552                             i2l2576 0DBC  
                           i2l2832 02C0                             i2l2816 0264  
                           i2l2824 029E                             i2l2808 024A  
                           i2l2760 015C                             i2l2744 00D2  
                           i2l2594 0948                             i2l2586 0918  
                           i2l2818 026C                             i2l2770 0186  
                           i2l2754 0124                             i2l2596 0954  
                           i2l2836 02D6                             i2l2780 01C0  
                           i2l2748 00E8                             i2l3670 06C8  
                           i2l2790 01F2                             i2l2782 01D0  
                           i2l2766 0170                             i2l3680 071E  
                           i2l3672 06DE                             i2l2776 01B2  
                           i2l3682 0728                             i2l3674 06EE  
                           i2l3684 0738                             i2l3676 06FE  
                           i2l2796 0220                             i2l3678 0708  
                           _INTCON 000FF2                             _TMR0IF 007F92  
                           _TMR1IF 007CF0                             _TRISA2 007C92  
                           _TRISB1 007C99                             _TRISA3 007C93  
                           _TRISB3 007C9B                             _TRISA5 007C95  
                           _TRISB4 007C9C                          ??_InitApp 0026  
            ??_ConfigureOscillator 0026                     __CFG_XINST$OFF 000000  
                  ??_update_buzzer 0004                   __end_of_high_isr 0314  
                 __end_of_get_time 0854                    set_time@min_reg 000C  
                   __CFG_STVREN$ON 000000                    set_time@sec_reg 000B  
                  set_time@minutes 0008                    set_time@seconds 000A  
                           clear_0 0E0C                  _ir_get_human_code 0620  
                ?i2_buzzer_disable 0001                          ??_get_num 0001  
               get_seconds_reg@res 0026                 ?_ir_get_human_code 0001  
               ??i2_buzzer_disable 0001                   __end_of_set_time 0DA4  
                    _masked_digits 00A5                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
             __end_of_get_hour_reg 0E06                   __end_of_put_nums 0DDA  
                        ??_put_num 0001                ??_ir_get_human_code 0003  
             __size_of_io_as_input 0004                       put_nums@nums 0008  
                       __accesstop 0060            __end_of__initialization 0E18  
                  __CFG_PBADEN$OFF 000000                   ??_buzzer_disable 0026  
                    ___rparam_used 000001                 __size_of_ce_enable 0004  
       ??_update_timer1_counter_10 0003                     __pcstackCOMRAM 0001  
        __end_of_ir_get_human_code 074E                   ??_get_next_state 0012  
                   high_isr@digits 008F                         _ce_disable 0E56  
            __end_of_timer1_enable 0E7A               __end_of_io_as_output 0E66  
                       __pbssBANK0 00A2                       ?i2_ce_enable 0001  
    update_timer1_counter_10@state 0004                 __size_of_byte_read 006E  
               get_next_state@code 0010                 get_next_state@hour 0014  
           __size_of_buzzer_enable 0008                      ?_send_command 0001  
                          _CCP2CON 000FBA                     get_time@format 009E  
            __end_of_point_disable 0E76                  _timer1_counter_10 00B1  
       __end_of_get_timer1_counter 0A02                            _INTCON2 000FF1  
                __end_of_ce_enable 0E6E                 update_buzzer@state 0001  
                          _SSPCON1 000FC6                          ?_high_isr 0001  
                        ?_get_time 009C                    __CFG_VREGEN$OFF 000000  
                          _InitApp 0A70           __size_of_get_seconds_reg 0056  
                          __Hparam 0000                   ??i2_send_command 0001  
                          __Lparam 0000                   byte_read@address 002D  
                        ?_set_time 0008                       byte_read@res 002E  
                 get_time@aux_hour 0033                     ??_send_command 0026  
       __size_of_ir_get_human_code 012E                          ?_put_nums 0008  
                       _byte_write 0E26                            __pcinit 0E06  
                 set_time@hour_reg 000D                            __ramtop 0800  
                          __ptext0 0314                            __ptext1 0BD8  
                          __ptext2 0984                            __ptext3 0C2E  
                          __ptext4 074E                            __ptext5 0A02  
                          __ptext6 0ACC                            __ptext7 0E62  
                          __ptext8 0E66                            __ptext9 0E6A  
            __size_of_get_hour_reg 002C                            _get_num 0854  
                          _counter 00A2                  __end_of_byte_read 0A70  
                      ?_ce_disable 0001                         _human_code 0039  
                    _buzzer_enable 0E4E                            _put_num 0B80  
                       ??_high_isr 0015                         ??_get_time 0031  
                   __pintcode_body 0012                      ?_point_enable 0001  
             end_of_initialization 0E18                      _buzzer_status 00A4  
                    __Lmediumconst 0000                            int_func 0012  
                i2_get_seconds_reg 0C84   __end_of_update_timer1_counter_10 0984  
                       ??_set_time 000A               update_buzzer@counter 0003  
               ?i2_get_seconds_reg 0001                       _get_hour_reg 0DDA  
                          postinc0 000FEE                         ??_put_nums 000A  
              ??i2_get_seconds_reg 0001                    byte_write@value 0006  
            __size_of_io_as_output 0004                     ?_buzzer_enable 0001  
 ir_get_human_code@human_read_code 0005                     ??_point_enable 0001  
      __end_of_ConfigureOscillator 0E84                      send_command@i 0029  
        __size_ofi2_buzzer_disable 0008          __end_ofi2_get_seconds_reg 0CDA  
                       get_num@num 0001               __size_ofi2_ce_enable 0004  
                       main@format 00A1                __size_of_ce_disable 0006  
                    ?_update_point 0001                 high_isr@final_code 0096  
            __end_of_update_buzzer 0D6A                  ??_get_seconds_reg 0026  
                     _io_as_output 0E62                     _timer1_counter 00A3  
                      ?_byte_write 0006             get_seconds_reg@seconds 0027  
          __size_ofi2_io_as_output 0004                start_initialization 0E06  
                    ??_io_as_input 0026               __end_of_send_command 0B26  
            i2send_command@command 0003                    get_hour_reg@res 0001  
                       byte_read@i 002F                     ??_update_point 0004  
                 __CFG_LPT1OSC$OFF 000000                        put_num@mask 0004  
             i2get_seconds_reg@res 0001                    ??_buzzer_enable 0001  
                    ?i2_ce_disable 0001                        __pbssCOMRAM 0037  
                    __pcstackBANK0 0060  __size_of_update_timer1_counter_10 0084  
        ?_update_timer1_counter_10 0001                          _ce_enable 0E6A  
              __size_of_byte_write 0018                  __size_of_high_isr 030C  
              __end_of_io_as_input 0E6A                 _get_timer1_counter 0984  
                __size_of_get_time 0106         __size_ofi2_get_seconds_reg 0056  
                         ?_InitApp 0001                          __pnvBANK0 00B2  
              ?_get_timer1_counter 009C                          __pintcode 0008  
           __size_of_timer1_enable 0004               __end_of_point_enable 0E72  
                __size_of_set_time 003A            __size_of_buzzer_disable 0008  
              get_next_state@state 000E                           ?_get_num 0001  
                __size_of_put_nums 0036                     ??i2_ce_disable 0001  
                     ??_ce_disable 0026            __size_of_get_next_state 0186  
             ??_get_timer1_counter 0028                          _byte_read 0A02  
            get_next_state@minutes 0013              get_next_state@seconds 0012  
                         ?_put_num 0001                    get_time@minutes 0034  
                  get_time@seconds 0032                         ?_ce_enable 0001  
                 i2_buzzer_disable 0E46             __size_of_point_disable 0004  
                         i2u220_44 010C                           i2u220_45 0106  
                         i2u222_40 0132                           i2u127_44 0B54  
                         i2u127_45 0B50                           i2u128_40 0B62  
                         i2u144_44 0BB2                           i2u144_45 0BAE  
                         i2u147_45 0BCA                           i2u147_46 0BCC  
                         i2u295_47 0062                           i2u296_47 00AC  
                         i2u297_47 0B68                           i2u298_47 0B72  
               __end_of_ce_disable 0E5C                   __CFG_WDTPS$32768 000000  
                   i2_io_as_output 0E7A                          high_isr@i 0098  
            __size_of_send_command 005A                  _ir_is_code_number 0BD8  
                    _timer1_enable 0E76                        _io_as_input 0E66  
                       ?_byte_read 0001               __end_of_update_point 0D22  
               ?_ir_is_code_number 0001                  update_point@state 0001  
              send_command@command 0028                    _get_seconds_reg 0C2E  
              ??_ir_is_code_number 0026                   __size_of_InitApp 005C  
                         __Hrparam 0000                           __Lrparam 0000  
                       put_num@num 0003                       _send_command 0ACC  
                     ??_byte_write 0007             __end_ofi2_io_as_output 0E7E  
          __size_ofi2_send_command 005A          __end_of_ir_is_code_number 0C2E  
                    _point_disable 0E72                   __size_of_get_num 00AC  
                   ?_timer1_enable 0001                           __ptext10 0E56  
                         __ptext11 0E3E                           __ptext20 0E46  
                         __ptext12 0A70                           __ptext21 0E4E  
                         __ptext13 0E82                           __ptext30 0DDA  
                         __ptext22 0DA4                           __ptext31 0E26  
                         __ptext23 0B80                           __ptext15 0900  
                         __ptext32 0B26                           __ptext24 0854  
                         __ptext16 0CDA                           __ptext33 0E7A  
                         __ptext25 0620                           __ptext17 0E6E  
                         __ptext34 0E7E                           __ptext26 049A  
                         __ptext18 0E72                           __ptext35 0E5C  
                         __ptext27 0E76                           __ptext19 0D22  
                         __ptext28 0D6A                           __ptext29 0C84  
                         _high_isr 0008                           _get_time 074E  
                 __size_of_put_num 0058                      ??i2_ce_enable 0001  
                      ??_ce_enable 0026                      __size_of_main 0186  
               __end_of_byte_write 0E3E               __end_ofi2_ce_disable 0E62  
     __size_of_ConfigureOscillator 0002              __size_of_point_enable 0004  
                         _set_time 0D6A                           int$flags 003A  
                   _buzzer_disable 0E3E                           _put_nums 0DA4  
                  ?i2_io_as_output 0001              __CFG_CPUDIV$OSC1_PLL2 000000  
                   ?_point_disable 0001                         _INTCONbits 000FF2  
                   _get_next_state 049A                       set_time@hour 0009  
          __end_of_get_seconds_reg 0C84                        ??_byte_read 002B  
                        put_nums@i 000A                           intlevel2 0000  
                     _point_enable 0E6E             __size_of_update_buzzer 0048  
              __end_ofi2_ce_enable 0E82                    i2send_command@i 0004  
                byte_write@address 0007             __end_of_buzzer_disable 0E46  
         i2get_seconds_reg@seconds 0002           __end_ofi2_buzzer_disable 0E4E  
                         put_num@i 0006             __end_of_get_next_state 0620  
       __size_of_ir_is_code_number 0056              __size_of_update_point 0048  
                  ??_timer1_enable 0001              __end_of_buzzer_enable 0E56  
                    ?_get_hour_reg 0001                    ?_buzzer_disable 0001  
